
MultiTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080035f4  080035f4  000045f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003674  08003674  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003674  08003674  00004674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003678  08003678  00004678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800367c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000068  080036e4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080036e4  000052fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c537  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c39  00000000  00000000  000115c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  00013208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000999  00000000  00000000  00013e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018429  00000000  00000000  000147e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1fa  00000000  00000000  0002cc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c88a  00000000  00000000  00039e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6696  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc0  00000000  00000000  000c66dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ca29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	080035dc 	.word	0x080035dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	080035dc 	.word	0x080035dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  if (ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
    HAL_UART_Transmit (&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f002 f841 	bl	80021fa <HAL_UART_Transmit>
  	HAL_UART_Transmit (&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f002 f83a 	bl	80021fa <HAL_UART_Transmit>

  return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	080035f4 	.word	0x080035f4
 8000194:	20000138 	.word	0x20000138

08000198 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80001a8:	d108      	bne.n	80001bc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		gTimerCnt++;
 80001aa:	4b06      	ldr	r3, [pc, #24]	@ (80001c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	3301      	adds	r3, #1
 80001b0:	4a04      	ldr	r2, [pc, #16]	@ (80001c4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80001b2:	6013      	str	r3, [r2, #0]

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80001b4:	2120      	movs	r1, #32
 80001b6:	4804      	ldr	r0, [pc, #16]	@ (80001c8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80001b8:	f000 fee3 	bl	8000f82 <HAL_GPIO_TogglePin>
	}
}
 80001bc:	bf00      	nop
 80001be:	3708      	adds	r7, #8
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bd80      	pop	{r7, pc}
 80001c4:	20000184 	.word	0x20000184
 80001c8:	40010800 	.word	0x40010800

080001cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 80001d6:	88fb      	ldrh	r3, [r7, #6]
 80001d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80001dc:	d13e      	bne.n	800025c <HAL_GPIO_EXTI_Callback+0x90>
	{
		// HAL_Delay(50);
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80001de:	2028      	movs	r0, #40	@ 0x28
 80001e0:	f000 fd01 	bl	8000be6 <HAL_NVIC_DisableIRQ>
		for(int i = 0; i < 8; i++)
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	e00d      	b.n	8000206 <HAL_GPIO_EXTI_Callback+0x3a>
		{
			state[i] = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80001ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001ee:	481d      	ldr	r0, [pc, #116]	@ (8000264 <HAL_GPIO_EXTI_Callback+0x98>)
 80001f0:	f000 fe98 	bl	8000f24 <HAL_GPIO_ReadPin>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4619      	mov	r1, r3
 80001f8:	4a1b      	ldr	r2, [pc, #108]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < 8; i++)
 8000200:	68fb      	ldr	r3, [r7, #12]
 8000202:	3301      	adds	r3, #1
 8000204:	60fb      	str	r3, [r7, #12]
 8000206:	68fb      	ldr	r3, [r7, #12]
 8000208:	2b07      	cmp	r3, #7
 800020a:	ddee      	ble.n	80001ea <HAL_GPIO_EXTI_Callback+0x1e>
		}
		if(state[0] == 1 && state[1] == 1 && state[2] == 1 && state[3] == 1 && state[4] == 1 && state[5] == 1 && state[6] == 1 && state[7] == 1)
 800020c:	4b16      	ldr	r3, [pc, #88]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b01      	cmp	r3, #1
 8000212:	d120      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 8000214:	4b14      	ldr	r3, [pc, #80]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d11c      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 800021c:	4b12      	ldr	r3, [pc, #72]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	2b01      	cmp	r3, #1
 8000222:	d118      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 8000224:	4b10      	ldr	r3, [pc, #64]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000226:	68db      	ldr	r3, [r3, #12]
 8000228:	2b01      	cmp	r3, #1
 800022a:	d114      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 800022c:	4b0e      	ldr	r3, [pc, #56]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 800022e:	691b      	ldr	r3, [r3, #16]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d110      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 8000234:	4b0c      	ldr	r3, [pc, #48]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	2b01      	cmp	r3, #1
 800023a:	d10c      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 800023c:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d108      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <HAL_GPIO_EXTI_Callback+0x9c>)
 8000246:	69db      	ldr	r3, [r3, #28]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d104      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8a>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800024c:	2101      	movs	r1, #1
 800024e:	4807      	ldr	r0, [pc, #28]	@ (800026c <HAL_GPIO_EXTI_Callback+0xa0>)
 8000250:	f000 fe97 	bl	8000f82 <HAL_GPIO_TogglePin>
		}


	}

}
 8000254:	e002      	b.n	800025c <HAL_GPIO_EXTI_Callback+0x90>
			HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000256:	2028      	movs	r0, #40	@ 0x28
 8000258:	f000 fcb7 	bl	8000bca <HAL_NVIC_EnableIRQ>
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40011000 	.word	0x40011000
 8000268:	20000188 	.word	0x20000188
 800026c:	40010800 	.word	0x40010800

08000270 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fb0c 	bl	8000890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000278:	f000 f81e 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800027c:	f000 f8d6 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000280:	f000 f8aa 	bl	80003d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000284:	f000 f85a 	bl	800033c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000288:	4808      	ldr	r0, [pc, #32]	@ (80002ac <main+0x3c>)
 800028a:	f001 fb17 	bl	80018bc <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(gTimerCnt >= 10)
 800028e:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <main+0x40>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	2b09      	cmp	r3, #9
 8000294:	dd05      	ble.n	80002a2 <main+0x32>
	  {
		  gTimerCnt = 0;
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <main+0x40>)
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
		  printf("hongmin\r\n");
 800029c:	4805      	ldr	r0, [pc, #20]	@ (80002b4 <main+0x44>)
 800029e:	f002 fa99 	bl	80027d4 <puts>
	  }

	  HAL_Delay(10); // CPU 부하 감소
 80002a2:	200a      	movs	r0, #10
 80002a4:	f000 fb56 	bl	8000954 <HAL_Delay>
	  if(gTimerCnt >= 10)
 80002a8:	e7f1      	b.n	800028e <main+0x1e>
 80002aa:	bf00      	nop
 80002ac:	20000084 	.word	0x20000084
 80002b0:	20000184 	.word	0x20000184
 80002b4:	080035f8 	.word	0x080035f8

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fb86 	bl	80029d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002da:	2302      	movs	r3, #2
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	2301      	movs	r3, #1
 80002e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e2:	2310      	movs	r3, #16
 80002e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e6:	2302      	movs	r3, #2
 80002e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002ea:	2300      	movs	r3, #0
 80002ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002ee:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80002f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fe73 	bl	8000fe4 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000304:	f000 f900 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f001 f8e0 	bl	80014e8 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800032e:	f000 f8eb 	bl	8000508 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	@ 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b086      	sub	sp, #24
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000342:	f107 0308 	add.w	r3, r7, #8
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	2200      	movs	r2, #0
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000358:	4b1e      	ldr	r3, [pc, #120]	@ (80003d4 <MX_TIM2_Init+0x98>)
 800035a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800035e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000360:	4b1c      	ldr	r3, [pc, #112]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000362:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000368:	4b1a      	ldr	r3, [pc, #104]	@ (80003d4 <MX_TIM2_Init+0x98>)
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800036e:	4b19      	ldr	r3, [pc, #100]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000370:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000374:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000376:	4b17      	ldr	r3, [pc, #92]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000378:	2200      	movs	r2, #0
 800037a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800037c:	4b15      	ldr	r3, [pc, #84]	@ (80003d4 <MX_TIM2_Init+0x98>)
 800037e:	2200      	movs	r2, #0
 8000380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000382:	4814      	ldr	r0, [pc, #80]	@ (80003d4 <MX_TIM2_Init+0x98>)
 8000384:	f001 fa3e 	bl	8001804 <HAL_TIM_Base_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800038e:	f000 f8bb 	bl	8000508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000392:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000396:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000398:	f107 0308 	add.w	r3, r7, #8
 800039c:	4619      	mov	r1, r3
 800039e:	480d      	ldr	r0, [pc, #52]	@ (80003d4 <MX_TIM2_Init+0x98>)
 80003a0:	f001 fbee 	bl	8001b80 <HAL_TIM_ConfigClockSource>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003aa:	f000 f8ad 	bl	8000508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ae:	2300      	movs	r3, #0
 80003b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b2:	2300      	movs	r3, #0
 80003b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003b6:	463b      	mov	r3, r7
 80003b8:	4619      	mov	r1, r3
 80003ba:	4806      	ldr	r0, [pc, #24]	@ (80003d4 <MX_TIM2_Init+0x98>)
 80003bc:	f001 fe54 	bl	8002068 <HAL_TIMEx_MasterConfigSynchronization>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003c6:	f000 f89f 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	3718      	adds	r7, #24
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	20000084 	.word	0x20000084

080003d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003dc:	4b11      	ldr	r3, [pc, #68]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 80003de:	4a12      	ldr	r2, [pc, #72]	@ (8000428 <MX_USART2_UART_Init+0x50>)
 80003e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003e2:	4b10      	ldr	r3, [pc, #64]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 80003e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003fc:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 80003fe:	220c      	movs	r2, #12
 8000400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000408:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <MX_USART2_UART_Init+0x4c>)
 8000410:	f001 fea3 	bl	800215a <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800041a:	f000 f875 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000138 	.word	0x20000138
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b088      	sub	sp, #32
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0310 	add.w	r3, r7, #16
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000440:	4b2d      	ldr	r3, [pc, #180]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a2c      	ldr	r2, [pc, #176]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000446:	f043 0310 	orr.w	r3, r3, #16
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b2a      	ldr	r3, [pc, #168]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0310 	and.w	r3, r3, #16
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000458:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a26      	ldr	r2, [pc, #152]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800045e:	f043 0320 	orr.w	r3, r3, #32
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b24      	ldr	r3, [pc, #144]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0320 	and.w	r3, r3, #32
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b21      	ldr	r3, [pc, #132]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a20      	ldr	r2, [pc, #128]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b1b      	ldr	r3, [pc, #108]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a1a      	ldr	r2, [pc, #104]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <MX_GPIO_Init+0xcc>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0308 	and.w	r3, r3, #8
 800049c:	603b      	str	r3, [r7, #0]
 800049e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LD2_Pin, GPIO_PIN_RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2121      	movs	r1, #33	@ 0x21
 80004a4:	4815      	ldr	r0, [pc, #84]	@ (80004fc <MX_GPIO_Init+0xd0>)
 80004a6:	f000 fd54 	bl	8000f52 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004b0:	4b13      	ldr	r3, [pc, #76]	@ (8000500 <MX_GPIO_Init+0xd4>)
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004b8:	f107 0310 	add.w	r3, r7, #16
 80004bc:	4619      	mov	r1, r3
 80004be:	4811      	ldr	r0, [pc, #68]	@ (8000504 <MX_GPIO_Init+0xd8>)
 80004c0:	f000 fbac 	bl	8000c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LD2_Pin;
 80004c4:	2321      	movs	r3, #33	@ 0x21
 80004c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c8:	2301      	movs	r3, #1
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d0:	2302      	movs	r3, #2
 80004d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4808      	ldr	r0, [pc, #32]	@ (80004fc <MX_GPIO_Init+0xd0>)
 80004dc:	f000 fb9e 	bl	8000c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	2028      	movs	r0, #40	@ 0x28
 80004e6:	f000 fb54 	bl	8000b92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004ea:	2028      	movs	r0, #40	@ 0x28
 80004ec:	f000 fb6d 	bl	8000bca <HAL_NVIC_EnableIRQ>


  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004f0:	bf00      	nop
 80004f2:	3720      	adds	r7, #32
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010800 	.word	0x40010800
 8000500:	10310000 	.word	0x10310000
 8000504:	40011000 	.word	0x40011000

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b598      	push	{r3, r4, r7, lr}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  sprintf((char *)transmit, "ERROR\r\n");
 8000510:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <Error_Handler+0x40>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	490d      	ldr	r1, [pc, #52]	@ (800054c <Error_Handler+0x44>)
 8000516:	4618      	mov	r0, r3
 8000518:	f002 f964 	bl	80027e4 <siprintf>
	  HAL_UART_Transmit(&huart2, transmit, strlen((char *) transmit), 100);
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <Error_Handler+0x40>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461c      	mov	r4, r3
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <Error_Handler+0x40>)
 8000524:	781b      	ldrb	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f7ff fe10 	bl	800014c <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	2364      	movs	r3, #100	@ 0x64
 8000532:	4621      	mov	r1, r4
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <Error_Handler+0x48>)
 8000536:	f001 fe60 	bl	80021fa <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800053a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800053e:	f000 fa09 	bl	8000954 <HAL_Delay>
  {
 8000542:	bf00      	nop
 8000544:	e7e4      	b.n	8000510 <Error_Handler+0x8>
 8000546:	bf00      	nop
 8000548:	20000180 	.word	0x20000180
 800054c:	08003604 	.word	0x08003604
 8000550:	20000138 	.word	0x20000138

08000554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <HAL_MspInit+0x5c>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057c:	61d3      	str	r3, [r2, #28]
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_MspInit+0x5c>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <HAL_MspInit+0x60>)
 800058c:	685b      	ldr	r3, [r3, #4]
 800058e:	60fb      	str	r3, [r7, #12]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	4a04      	ldr	r2, [pc, #16]	@ (80005b4 <HAL_MspInit+0x60>)
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a6:	bf00      	nop
 80005a8:	3714      	adds	r7, #20
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000
 80005b4:	40010000 	.word	0x40010000

080005b8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005c8:	d113      	bne.n	80005f2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005ca:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <HAL_TIM_Base_MspInit+0x44>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <HAL_TIM_Base_MspInit+0x44>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <HAL_TIM_Base_MspInit+0x44>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	201c      	movs	r0, #28
 80005e8:	f000 fad3 	bl	8000b92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005ec:	201c      	movs	r0, #28
 80005ee:	f000 faec 	bl	8000bca <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40021000 	.word	0x40021000

08000600 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b088      	sub	sp, #32
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <HAL_UART_MspInit+0x70>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d123      	bne.n	8000668 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <HAL_UART_MspInit+0x74>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	4a13      	ldr	r2, [pc, #76]	@ (8000674 <HAL_UART_MspInit+0x74>)
 8000626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800062a:	61d3      	str	r3, [r2, #28]
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <HAL_UART_MspInit+0x74>)
 800062e:	69db      	ldr	r3, [r3, #28]
 8000630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000634:	60fb      	str	r3, [r7, #12]
 8000636:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <HAL_UART_MspInit+0x74>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <HAL_UART_MspInit+0x74>)
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <HAL_UART_MspInit+0x74>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f003 0304 	and.w	r3, r3, #4
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000650:	230c      	movs	r3, #12
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000658:	2302      	movs	r3, #2
 800065a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <HAL_UART_MspInit+0x78>)
 8000664:	f000 fada 	bl	8000c1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000668:	bf00      	nop
 800066a:	3720      	adds	r7, #32
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40004400 	.word	0x40004400
 8000674:	40021000 	.word	0x40021000
 8000678:	40010800 	.word	0x40010800

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <MemManage_Handler+0x4>

08000694 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <BusFault_Handler+0x4>

0800069c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <UsageFault_Handler+0x4>

080006a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr

080006b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006cc:	f000 f926 	bl	800091c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006d8:	4802      	ldr	r0, [pc, #8]	@ (80006e4 <TIM2_IRQHandler+0x10>)
 80006da:	f001 f941 	bl	8001960 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000084 	.word	0x20000084

080006e8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80006ec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80006f0:	f000 fc60 	bl	8000fb4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	60b9      	str	r1, [r7, #8]
 8000702:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	e00a      	b.n	8000720 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070a:	f3af 8000 	nop.w
 800070e:	4601      	mov	r1, r0
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	60ba      	str	r2, [r7, #8]
 8000716:	b2ca      	uxtb	r2, r1
 8000718:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	3301      	adds	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	429a      	cmp	r2, r3
 8000726:	dbf0      	blt.n	800070a <_read+0x12>
  }

  return len;
 8000728:	687b      	ldr	r3, [r7, #4]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3718      	adds	r7, #24
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}

08000732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000732:	b580      	push	{r7, lr}
 8000734:	b086      	sub	sp, #24
 8000736:	af00      	add	r7, sp, #0
 8000738:	60f8      	str	r0, [r7, #12]
 800073a:	60b9      	str	r1, [r7, #8]
 800073c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	e009      	b.n	8000758 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	1c5a      	adds	r2, r3, #1
 8000748:	60ba      	str	r2, [r7, #8]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fd05 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf1      	blt.n	8000744 <_write+0x12>
  }
  return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_close>:

int _close(int file)
{
 800076a:	b480      	push	{r7}
 800076c:	b083      	sub	sp, #12
 800076e:	af00      	add	r7, sp, #0
 8000770:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr

08000780 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000790:	605a      	str	r2, [r3, #4]
  return 0;
 8000792:	2300      	movs	r3, #0
}
 8000794:	4618      	mov	r0, r3
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <_isatty>:

int _isatty(int file)
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007a6:	2301      	movs	r3, #1
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr

080007b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b085      	sub	sp, #20
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
	...

080007cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007d4:	4a14      	ldr	r2, [pc, #80]	@ (8000828 <_sbrk+0x5c>)
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <_sbrk+0x60>)
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007e0:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <_sbrk+0x64>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d102      	bne.n	80007ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <_sbrk+0x64>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	@ (8000834 <_sbrk+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007ee:	4b10      	ldr	r3, [pc, #64]	@ (8000830 <_sbrk+0x64>)
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4413      	add	r3, r2
 80007f6:	693a      	ldr	r2, [r7, #16]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d207      	bcs.n	800080c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007fc:	f002 f93a 	bl	8002a74 <__errno>
 8000800:	4603      	mov	r3, r0
 8000802:	220c      	movs	r2, #12
 8000804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	e009      	b.n	8000820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <_sbrk+0x64>)
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	4a05      	ldr	r2, [pc, #20]	@ (8000830 <_sbrk+0x64>)
 800081c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800081e:	68fb      	ldr	r3, [r7, #12]
}
 8000820:	4618      	mov	r0, r3
 8000822:	3718      	adds	r7, #24
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20005000 	.word	0x20005000
 800082c:	00000400 	.word	0x00000400
 8000830:	200001a8 	.word	0x200001a8
 8000834:	20000300 	.word	0x20000300

08000838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000844:	f7ff fff8 	bl	8000838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000848:	480b      	ldr	r0, [pc, #44]	@ (8000878 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800084a:	490c      	ldr	r1, [pc, #48]	@ (800087c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800084c:	4a0c      	ldr	r2, [pc, #48]	@ (8000880 <LoopFillZerobss+0x16>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000850:	e002      	b.n	8000858 <LoopCopyDataInit>

08000852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000856:	3304      	adds	r3, #4

08000858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800085a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800085c:	d3f9      	bcc.n	8000852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085e:	4a09      	ldr	r2, [pc, #36]	@ (8000884 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000860:	4c09      	ldr	r4, [pc, #36]	@ (8000888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000864:	e001      	b.n	800086a <LoopFillZerobss>

08000866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000868:	3204      	adds	r2, #4

0800086a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800086a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800086c:	d3fb      	bcc.n	8000866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 f907 	bl	8002a80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f7ff fcfd 	bl	8000270 <main>
  bx lr
 8000876:	4770      	bx	lr
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000880:	0800367c 	.word	0x0800367c
  ldr r2, =_sbss
 8000884:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000888:	200002fc 	.word	0x200002fc

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <HAL_Init+0x28>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a07      	ldr	r2, [pc, #28]	@ (80008b8 <HAL_Init+0x28>)
 800089a:	f043 0310 	orr.w	r3, r3, #16
 800089e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f96b 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f000 f808 	bl	80008bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008ac:	f7ff fe52 	bl	8000554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008b0:	2300      	movs	r3, #0
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40022000 	.word	0x40022000

080008bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c4:	4b12      	ldr	r3, [pc, #72]	@ (8000910 <HAL_InitTick+0x54>)
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x58>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008da:	4618      	mov	r0, r3
 80008dc:	f000 f991 	bl	8000c02 <HAL_SYSTICK_Config>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
 80008e8:	e00e      	b.n	8000908 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d80a      	bhi.n	8000906 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f0:	2200      	movs	r2, #0
 80008f2:	6879      	ldr	r1, [r7, #4]
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295
 80008f8:	f000 f94b 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008fc:	4a06      	ldr	r2, [pc, #24]	@ (8000918 <HAL_InitTick+0x5c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	e000      	b.n	8000908 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000000 	.word	0x20000000
 8000914:	20000008 	.word	0x20000008
 8000918:	20000004 	.word	0x20000004

0800091c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <HAL_IncTick+0x1c>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_IncTick+0x20>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a03      	ldr	r2, [pc, #12]	@ (800093c <HAL_IncTick+0x20>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000008 	.word	0x20000008
 800093c:	200001ac 	.word	0x200001ac

08000940 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  return uwTick;
 8000944:	4b02      	ldr	r3, [pc, #8]	@ (8000950 <HAL_GetTick+0x10>)
 8000946:	681b      	ldr	r3, [r3, #0]
}
 8000948:	4618      	mov	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	200001ac 	.word	0x200001ac

08000954 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800095c:	f7ff fff0 	bl	8000940 <HAL_GetTick>
 8000960:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800096c:	d005      	beq.n	800097a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <HAL_Delay+0x44>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4413      	add	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800097a:	bf00      	nop
 800097c:	f7ff ffe0 	bl	8000940 <HAL_GetTick>
 8000980:	4602      	mov	r2, r0
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	429a      	cmp	r2, r3
 800098a:	d8f7      	bhi.n	800097c <HAL_Delay+0x28>
  {
  }
}
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000008 	.word	0x20000008

0800099c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b2:	68ba      	ldr	r2, [r7, #8]
 80009b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b8:	4013      	ands	r3, r2
 80009ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ce:	4a04      	ldr	r2, [pc, #16]	@ (80009e0 <__NVIC_SetPriorityGrouping+0x44>)
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	60d3      	str	r3, [r2, #12]
}
 80009d4:	bf00      	nop
 80009d6:	3714      	adds	r7, #20
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e8:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <__NVIC_GetPriorityGrouping+0x18>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	0a1b      	lsrs	r3, r3, #8
 80009ee:	f003 0307 	and.w	r3, r3, #7
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db0b      	blt.n	8000a2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	f003 021f 	and.w	r2, r3, #31
 8000a18:	4906      	ldr	r1, [pc, #24]	@ (8000a34 <__NVIC_EnableIRQ+0x34>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	095b      	lsrs	r3, r3, #5
 8000a20:	2001      	movs	r0, #1
 8000a22:	fa00 f202 	lsl.w	r2, r0, r2
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100

08000a38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db12      	blt.n	8000a70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	490a      	ldr	r1, [pc, #40]	@ (8000a7c <__NVIC_DisableIRQ+0x44>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	3320      	adds	r3, #32
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a64:	f3bf 8f4f 	dsb	sy
}
 8000a68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a6a:	f3bf 8f6f 	isb	sy
}
 8000a6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	@ (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	@ (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	@ 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	@ 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff90 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff09 	bl	800099c <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff1e 	bl	80009e4 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff11 	bl	8000a00 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	4603      	mov	r3, r0
 8000bee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff1f 	bl	8000a38 <__NVIC_DisableIRQ>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c0a:	6878      	ldr	r0, [r7, #4]
 8000c0c:	f7ff ff94 	bl	8000b38 <SysTick_Config>
 8000c10:	4603      	mov	r3, r0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b08b      	sub	sp, #44	@ 0x2c
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	e169      	b.n	8000f04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c30:	2201      	movs	r2, #1
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 8158 	bne.w	8000efe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	4a9a      	ldr	r2, [pc, #616]	@ (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d05e      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c58:	4a98      	ldr	r2, [pc, #608]	@ (8000ebc <HAL_GPIO_Init+0x2a0>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d875      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c5e:	4a98      	ldr	r2, [pc, #608]	@ (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d058      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c64:	4a96      	ldr	r2, [pc, #600]	@ (8000ec0 <HAL_GPIO_Init+0x2a4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d86f      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c6a:	4a96      	ldr	r2, [pc, #600]	@ (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d052      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c70:	4a94      	ldr	r2, [pc, #592]	@ (8000ec4 <HAL_GPIO_Init+0x2a8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d869      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c76:	4a94      	ldr	r2, [pc, #592]	@ (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d04c      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c7c:	4a92      	ldr	r2, [pc, #584]	@ (8000ec8 <HAL_GPIO_Init+0x2ac>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d863      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c82:	4a92      	ldr	r2, [pc, #584]	@ (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d046      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
 8000c88:	4a90      	ldr	r2, [pc, #576]	@ (8000ecc <HAL_GPIO_Init+0x2b0>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d85d      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c8e:	2b12      	cmp	r3, #18
 8000c90:	d82a      	bhi.n	8000ce8 <HAL_GPIO_Init+0xcc>
 8000c92:	2b12      	cmp	r3, #18
 8000c94:	d859      	bhi.n	8000d4a <HAL_GPIO_Init+0x12e>
 8000c96:	a201      	add	r2, pc, #4	@ (adr r2, 8000c9c <HAL_GPIO_Init+0x80>)
 8000c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c9c:	08000d17 	.word	0x08000d17
 8000ca0:	08000cf1 	.word	0x08000cf1
 8000ca4:	08000d03 	.word	0x08000d03
 8000ca8:	08000d45 	.word	0x08000d45
 8000cac:	08000d4b 	.word	0x08000d4b
 8000cb0:	08000d4b 	.word	0x08000d4b
 8000cb4:	08000d4b 	.word	0x08000d4b
 8000cb8:	08000d4b 	.word	0x08000d4b
 8000cbc:	08000d4b 	.word	0x08000d4b
 8000cc0:	08000d4b 	.word	0x08000d4b
 8000cc4:	08000d4b 	.word	0x08000d4b
 8000cc8:	08000d4b 	.word	0x08000d4b
 8000ccc:	08000d4b 	.word	0x08000d4b
 8000cd0:	08000d4b 	.word	0x08000d4b
 8000cd4:	08000d4b 	.word	0x08000d4b
 8000cd8:	08000d4b 	.word	0x08000d4b
 8000cdc:	08000d4b 	.word	0x08000d4b
 8000ce0:	08000cf9 	.word	0x08000cf9
 8000ce4:	08000d0d 	.word	0x08000d0d
 8000ce8:	4a79      	ldr	r2, [pc, #484]	@ (8000ed0 <HAL_GPIO_Init+0x2b4>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d013      	beq.n	8000d16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000cee:	e02c      	b.n	8000d4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	623b      	str	r3, [r7, #32]
          break;
 8000cf6:	e029      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	623b      	str	r3, [r7, #32]
          break;
 8000d00:	e024      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	3308      	adds	r3, #8
 8000d08:	623b      	str	r3, [r7, #32]
          break;
 8000d0a:	e01f      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	330c      	adds	r3, #12
 8000d12:	623b      	str	r3, [r7, #32]
          break;
 8000d14:	e01a      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d102      	bne.n	8000d24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d1e:	2304      	movs	r3, #4
 8000d20:	623b      	str	r3, [r7, #32]
          break;
 8000d22:	e013      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	689b      	ldr	r3, [r3, #8]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d105      	bne.n	8000d38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	69fa      	ldr	r2, [r7, #28]
 8000d34:	611a      	str	r2, [r3, #16]
          break;
 8000d36:	e009      	b.n	8000d4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69fa      	ldr	r2, [r7, #28]
 8000d40:	615a      	str	r2, [r3, #20]
          break;
 8000d42:	e003      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
          break;
 8000d48:	e000      	b.n	8000d4c <HAL_GPIO_Init+0x130>
          break;
 8000d4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d4c:	69bb      	ldr	r3, [r7, #24]
 8000d4e:	2bff      	cmp	r3, #255	@ 0xff
 8000d50:	d801      	bhi.n	8000d56 <HAL_GPIO_Init+0x13a>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	e001      	b.n	8000d5a <HAL_GPIO_Init+0x13e>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2bff      	cmp	r3, #255	@ 0xff
 8000d60:	d802      	bhi.n	8000d68 <HAL_GPIO_Init+0x14c>
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	e002      	b.n	8000d6e <HAL_GPIO_Init+0x152>
 8000d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d6a:	3b08      	subs	r3, #8
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	210f      	movs	r1, #15
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	6a39      	ldr	r1, [r7, #32]
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 80b1 	beq.w	8000efe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a4c      	ldr	r2, [pc, #304]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed4 <HAL_GPIO_Init+0x2b8>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000db4:	4a48      	ldr	r2, [pc, #288]	@ (8000ed8 <HAL_GPIO_Init+0x2bc>)
 8000db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	f003 0303 	and.w	r3, r3, #3
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	68fa      	ldr	r2, [r7, #12]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a40      	ldr	r2, [pc, #256]	@ (8000edc <HAL_GPIO_Init+0x2c0>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d013      	beq.n	8000e08 <HAL_GPIO_Init+0x1ec>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a3f      	ldr	r2, [pc, #252]	@ (8000ee0 <HAL_GPIO_Init+0x2c4>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d00d      	beq.n	8000e04 <HAL_GPIO_Init+0x1e8>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a3e      	ldr	r2, [pc, #248]	@ (8000ee4 <HAL_GPIO_Init+0x2c8>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d007      	beq.n	8000e00 <HAL_GPIO_Init+0x1e4>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a3d      	ldr	r2, [pc, #244]	@ (8000ee8 <HAL_GPIO_Init+0x2cc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d101      	bne.n	8000dfc <HAL_GPIO_Init+0x1e0>
 8000df8:	2303      	movs	r3, #3
 8000dfa:	e006      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	e004      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000e00:	2302      	movs	r3, #2
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000e04:	2301      	movs	r3, #1
 8000e06:	e000      	b.n	8000e0a <HAL_GPIO_Init+0x1ee>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0c:	f002 0203 	and.w	r2, r2, #3
 8000e10:	0092      	lsls	r2, r2, #2
 8000e12:	4093      	lsls	r3, r2
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e1a:	492f      	ldr	r1, [pc, #188]	@ (8000ed8 <HAL_GPIO_Init+0x2bc>)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d006      	beq.n	8000e42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e34:	4b2d      	ldr	r3, [pc, #180]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	492c      	ldr	r1, [pc, #176]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	608b      	str	r3, [r1, #8]
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	4928      	ldr	r1, [pc, #160]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d006      	beq.n	8000e6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e5c:	4b23      	ldr	r3, [pc, #140]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	4922      	ldr	r1, [pc, #136]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e62:	69bb      	ldr	r3, [r7, #24]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	60cb      	str	r3, [r1, #12]
 8000e68:	e006      	b.n	8000e78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e6a:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	491e      	ldr	r1, [pc, #120]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d006      	beq.n	8000e92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e84:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4918      	ldr	r1, [pc, #96]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	604b      	str	r3, [r1, #4]
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	69bb      	ldr	r3, [r7, #24]
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	4914      	ldr	r1, [pc, #80]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d021      	beq.n	8000ef0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	490e      	ldr	r1, [pc, #56]	@ (8000eec <HAL_GPIO_Init+0x2d0>)
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
 8000eb8:	e021      	b.n	8000efe <HAL_GPIO_Init+0x2e2>
 8000eba:	bf00      	nop
 8000ebc:	10320000 	.word	0x10320000
 8000ec0:	10310000 	.word	0x10310000
 8000ec4:	10220000 	.word	0x10220000
 8000ec8:	10210000 	.word	0x10210000
 8000ecc:	10120000 	.word	0x10120000
 8000ed0:	10110000 	.word	0x10110000
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010c00 	.word	0x40010c00
 8000ee4:	40011000 	.word	0x40011000
 8000ee8:	40011400 	.word	0x40011400
 8000eec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_GPIO_Init+0x304>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	4909      	ldr	r1, [pc, #36]	@ (8000f20 <HAL_GPIO_Init+0x304>)
 8000efa:	4013      	ands	r3, r2
 8000efc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f00:	3301      	adds	r3, #1
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f47f ae8e 	bne.w	8000c30 <HAL_GPIO_Init+0x14>
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	372c      	adds	r7, #44	@ 0x2c
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e001      	b.n	8000f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	807b      	strh	r3, [r7, #2]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f62:	787b      	ldrb	r3, [r7, #1]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f68:	887a      	ldrh	r2, [r7, #2]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f6e:	e003      	b.n	8000f78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	041a      	lsls	r2, r3, #16
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	611a      	str	r2, [r3, #16]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f94:	887a      	ldrh	r2, [r7, #2]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	041a      	lsls	r2, r3, #16
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43d9      	mvns	r1, r3
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	431a      	orrs	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	611a      	str	r2, [r3, #16]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff f8fa 	bl	80001cc <HAL_GPIO_EXTI_Callback>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e272      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 8087 	beq.w	8001112 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001004:	4b92      	ldr	r3, [pc, #584]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b04      	cmp	r3, #4
 800100e:	d00c      	beq.n	800102a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001010:	4b8f      	ldr	r3, [pc, #572]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d112      	bne.n	8001042 <HAL_RCC_OscConfig+0x5e>
 800101c:	4b8c      	ldr	r3, [pc, #560]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001028:	d10b      	bne.n	8001042 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102a:	4b89      	ldr	r3, [pc, #548]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d06c      	beq.n	8001110 <HAL_RCC_OscConfig+0x12c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d168      	bne.n	8001110 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e24c      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800104a:	d106      	bne.n	800105a <HAL_RCC_OscConfig+0x76>
 800104c:	4b80      	ldr	r3, [pc, #512]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a7f      	ldr	r2, [pc, #508]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e02e      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x98>
 8001062:	4b7b      	ldr	r3, [pc, #492]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a7a      	ldr	r2, [pc, #488]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b78      	ldr	r3, [pc, #480]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a77      	ldr	r2, [pc, #476]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e01d      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001084:	d10c      	bne.n	80010a0 <HAL_RCC_OscConfig+0xbc>
 8001086:	4b72      	ldr	r3, [pc, #456]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a71      	ldr	r2, [pc, #452]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800108c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b6f      	ldr	r3, [pc, #444]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a6e      	ldr	r2, [pc, #440]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	e00b      	b.n	80010b8 <HAL_RCC_OscConfig+0xd4>
 80010a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b68      	ldr	r3, [pc, #416]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a67      	ldr	r2, [pc, #412]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d013      	beq.n	80010e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c0:	f7ff fc3e 	bl	8000940 <HAL_GetTick>
 80010c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c6:	e008      	b.n	80010da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010c8:	f7ff fc3a 	bl	8000940 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b64      	cmp	r3, #100	@ 0x64
 80010d4:	d901      	bls.n	80010da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010d6:	2303      	movs	r3, #3
 80010d8:	e200      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010da:	4b5d      	ldr	r3, [pc, #372]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0f0      	beq.n	80010c8 <HAL_RCC_OscConfig+0xe4>
 80010e6:	e014      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e8:	f7ff fc2a 	bl	8000940 <HAL_GetTick>
 80010ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fc26 	bl	8000940 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	@ 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e1ec      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b53      	ldr	r3, [pc, #332]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x10c>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d063      	beq.n	80011e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800111e:	4b4c      	ldr	r3, [pc, #304]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800112a:	4b49      	ldr	r3, [pc, #292]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b08      	cmp	r3, #8
 8001134:	d11c      	bne.n	8001170 <HAL_RCC_OscConfig+0x18c>
 8001136:	4b46      	ldr	r3, [pc, #280]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d116      	bne.n	8001170 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001142:	4b43      	ldr	r3, [pc, #268]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d001      	beq.n	800115a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e1c0      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115a:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	4939      	ldr	r1, [pc, #228]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800116e:	e03a      	b.n	80011e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 800117a:	2201      	movs	r2, #1
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fbdf 	bl	8000940 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001186:	f7ff fbdb 	bl	8000940 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1a1      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0302 	and.w	r3, r3, #2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a4:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4927      	ldr	r1, [pc, #156]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	600b      	str	r3, [r1, #0]
 80011b8:	e015      	b.n	80011e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <HAL_RCC_OscConfig+0x270>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fbbe 	bl	8000940 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff fbba 	bl	8000940 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e180      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	4b1d      	ldr	r3, [pc, #116]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d03a      	beq.n	8001268 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	699b      	ldr	r3, [r3, #24]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d019      	beq.n	800122e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_RCC_OscConfig+0x274>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001200:	f7ff fb9e 	bl	8000940 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001208:	f7ff fb9a 	bl	8000940 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e160      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121a:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <HAL_RCC_OscConfig+0x26c>)
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 face 	bl	80017c8 <RCC_Delay>
 800122c:	e01c      	b.n	8001268 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800122e:	4b0a      	ldr	r3, [pc, #40]	@ (8001258 <HAL_RCC_OscConfig+0x274>)
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001234:	f7ff fb84 	bl	8000940 <HAL_GetTick>
 8001238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800123a:	e00f      	b.n	800125c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff fb80 	bl	8000940 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b02      	cmp	r3, #2
 8001248:	d908      	bls.n	800125c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e146      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
 800124e:	bf00      	nop
 8001250:	40021000 	.word	0x40021000
 8001254:	42420000 	.word	0x42420000
 8001258:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800125c:	4b92      	ldr	r3, [pc, #584]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800125e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1e9      	bne.n	800123c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0304 	and.w	r3, r3, #4
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80a6 	beq.w	80013c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800127a:	4b8b      	ldr	r3, [pc, #556]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10d      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	4b88      	ldr	r3, [pc, #544]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	4a87      	ldr	r2, [pc, #540]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001290:	61d3      	str	r3, [r2, #28]
 8001292:	4b85      	ldr	r3, [pc, #532]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800129e:	2301      	movs	r3, #1
 80012a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a2:	4b82      	ldr	r3, [pc, #520]	@ (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d118      	bne.n	80012e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012ae:	4b7f      	ldr	r3, [pc, #508]	@ (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a7e      	ldr	r2, [pc, #504]	@ (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fb41 	bl	8000940 <HAL_GetTick>
 80012be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012c0:	e008      	b.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c2:	f7ff fb3d 	bl	8000940 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b64      	cmp	r3, #100	@ 0x64
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e103      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	4b75      	ldr	r3, [pc, #468]	@ (80014ac <HAL_RCC_OscConfig+0x4c8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d0f0      	beq.n	80012c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x312>
 80012e8:	4b6f      	ldr	r3, [pc, #444]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	4a6e      	ldr	r2, [pc, #440]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80012ee:	f043 0301 	orr.w	r3, r3, #1
 80012f2:	6213      	str	r3, [r2, #32]
 80012f4:	e02d      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x334>
 80012fe:	4b6a      	ldr	r3, [pc, #424]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4a69      	ldr	r2, [pc, #420]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	6213      	str	r3, [r2, #32]
 800130a:	4b67      	ldr	r3, [pc, #412]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	4a66      	ldr	r2, [pc, #408]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	f023 0304 	bic.w	r3, r3, #4
 8001314:	6213      	str	r3, [r2, #32]
 8001316:	e01c      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b05      	cmp	r3, #5
 800131e:	d10c      	bne.n	800133a <HAL_RCC_OscConfig+0x356>
 8001320:	4b61      	ldr	r3, [pc, #388]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4a60      	ldr	r2, [pc, #384]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6213      	str	r3, [r2, #32]
 800132c:	4b5e      	ldr	r3, [pc, #376]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	4a5d      	ldr	r2, [pc, #372]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6213      	str	r3, [r2, #32]
 8001338:	e00b      	b.n	8001352 <HAL_RCC_OscConfig+0x36e>
 800133a:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a5a      	ldr	r2, [pc, #360]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0301 	bic.w	r3, r3, #1
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	4a57      	ldr	r2, [pc, #348]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	f023 0304 	bic.w	r3, r3, #4
 8001350:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d015      	beq.n	8001386 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff faf1 	bl	8000940 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001362:	f7ff faed 	bl	8000940 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001370:	4293      	cmp	r3, r2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e0b1      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001378:	4b4b      	ldr	r3, [pc, #300]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	f003 0302 	and.w	r3, r3, #2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0ee      	beq.n	8001362 <HAL_RCC_OscConfig+0x37e>
 8001384:	e014      	b.n	80013b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001386:	f7ff fadb 	bl	8000940 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800138e:	f7ff fad7 	bl	8000940 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800139c:	4293      	cmp	r3, r2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e09b      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013a4:	4b40      	ldr	r3, [pc, #256]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ee      	bne.n	800138e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d105      	bne.n	80013c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b6:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	4a3b      	ldr	r2, [pc, #236]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013cc:	4b36      	ldr	r3, [pc, #216]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b08      	cmp	r3, #8
 80013d6:	d061      	beq.n	800149c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d146      	bne.n	800146e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e0:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff faab 	bl	8000940 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ee:	f7ff faa7 	bl	8000940 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e06d      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001400:	4b29      	ldr	r3, [pc, #164]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1f0      	bne.n	80013ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001414:	d108      	bne.n	8001428 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001416:	4b24      	ldr	r3, [pc, #144]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	4921      	ldr	r1, [pc, #132]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	4313      	orrs	r3, r2
 8001426:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a19      	ldr	r1, [r3, #32]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001438:	430b      	orrs	r3, r1
 800143a:	491b      	ldr	r1, [pc, #108]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 800143c:	4313      	orrs	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 8001442:	2201      	movs	r2, #1
 8001444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001446:	f7ff fa7b 	bl	8000940 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144e:	f7ff fa77 	bl	8000940 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e03d      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001460:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x46a>
 800146c:	e035      	b.n	80014da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_RCC_OscConfig+0x4cc>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fa64 	bl	8000940 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147c:	f7ff fa60 	bl	8000940 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e026      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_RCC_OscConfig+0x4c4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x498>
 800149a:	e01e      	b.n	80014da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	69db      	ldr	r3, [r3, #28]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e019      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40007000 	.word	0x40007000
 80014b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	@ (80014e4 <HAL_RCC_OscConfig+0x500>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e0d0      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014fc:	4b6a      	ldr	r3, [pc, #424]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d910      	bls.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800150a:	4b67      	ldr	r3, [pc, #412]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 0207 	bic.w	r2, r3, #7
 8001512:	4965      	ldr	r1, [pc, #404]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800151a:	4b63      	ldr	r3, [pc, #396]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	683a      	ldr	r2, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d001      	beq.n	800152c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0b8      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d020      	beq.n	800157a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001544:	4b59      	ldr	r3, [pc, #356]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a58      	ldr	r2, [pc, #352]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800154a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800154e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800155c:	4b53      	ldr	r3, [pc, #332]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001562:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001566:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001568:	4b50      	ldr	r3, [pc, #320]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	494d      	ldr	r1, [pc, #308]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	4313      	orrs	r3, r2
 8001578:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d040      	beq.n	8001608 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158e:	4b47      	ldr	r3, [pc, #284]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d115      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e07f      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d107      	bne.n	80015b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b41      	ldr	r3, [pc, #260]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d109      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e073      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e06b      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015c6:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 0203 	bic.w	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4936      	ldr	r1, [pc, #216]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d8:	f7ff f9b2 	bl	8000940 <HAL_GetTick>
 80015dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015e0:	f7ff f9ae 	bl	8000940 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e053      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015f6:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f003 020c 	and.w	r2, r3, #12
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	429a      	cmp	r2, r3
 8001606:	d1eb      	bne.n	80015e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001608:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d210      	bcs.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b24      	ldr	r3, [pc, #144]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f023 0207 	bic.w	r2, r3, #7
 800161e:	4922      	ldr	r1, [pc, #136]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	4313      	orrs	r3, r2
 8001624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001626:	4b20      	ldr	r3, [pc, #128]	@ (80016a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e032      	b.n	800169e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	4916      	ldr	r1, [pc, #88]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001652:	4313      	orrs	r3, r2
 8001654:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d009      	beq.n	8001676 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001662:	4b12      	ldr	r3, [pc, #72]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	691b      	ldr	r3, [r3, #16]
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	490e      	ldr	r1, [pc, #56]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001676:	f000 f821 	bl	80016bc <HAL_RCC_GetSysClockFreq>
 800167a:	4602      	mov	r2, r0
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	091b      	lsrs	r3, r3, #4
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	490a      	ldr	r1, [pc, #40]	@ (80016b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001688:	5ccb      	ldrb	r3, [r1, r3]
 800168a:	fa22 f303 	lsr.w	r3, r2, r3
 800168e:	4a09      	ldr	r2, [pc, #36]	@ (80016b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff f910 	bl	80008bc <HAL_InitTick>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40022000 	.word	0x40022000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	0800360c 	.word	0x0800360c
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000004 	.word	0x20000004

080016bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x94>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b04      	cmp	r3, #4
 80016e4:	d002      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x30>
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d003      	beq.n	80016f2 <HAL_RCC_GetSysClockFreq+0x36>
 80016ea:	e027      	b.n	800173c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016ec:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ee:	613b      	str	r3, [r7, #16]
      break;
 80016f0:	e027      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	0c9b      	lsrs	r3, r3, #18
 80016f6:	f003 030f 	and.w	r3, r3, #15
 80016fa:	4a17      	ldr	r2, [pc, #92]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x9c>)
 80016fc:	5cd3      	ldrb	r3, [r2, r3]
 80016fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d010      	beq.n	800172c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_RCC_GetSysClockFreq+0x94>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	0c5b      	lsrs	r3, r3, #17
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	4a11      	ldr	r2, [pc, #68]	@ (800175c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a0d      	ldr	r2, [pc, #52]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x98>)
 800171e:	fb03 f202 	mul.w	r2, r3, r2
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	fbb2 f3f3 	udiv	r3, r2, r3
 8001728:	617b      	str	r3, [r7, #20]
 800172a:	e004      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001730:	fb02 f303 	mul.w	r3, r2, r3
 8001734:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	613b      	str	r3, [r7, #16]
      break;
 800173a:	e002      	b.n	8001742 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <HAL_RCC_GetSysClockFreq+0x98>)
 800173e:	613b      	str	r3, [r7, #16]
      break;
 8001740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001742:	693b      	ldr	r3, [r7, #16]
}
 8001744:	4618      	mov	r0, r3
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	007a1200 	.word	0x007a1200
 8001758:	08003624 	.word	0x08003624
 800175c:	08003634 	.word	0x08003634
 8001760:	003d0900 	.word	0x003d0900

08001764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001768:	4b02      	ldr	r3, [pc, #8]	@ (8001774 <HAL_RCC_GetHCLKFreq+0x10>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	20000000 	.word	0x20000000

08001778 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800177c:	f7ff fff2 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 8001780:	4602      	mov	r2, r0
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	4903      	ldr	r1, [pc, #12]	@ (800179c <HAL_RCC_GetPCLK1Freq+0x24>)
 800178e:	5ccb      	ldrb	r3, [r1, r3]
 8001790:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40021000 	.word	0x40021000
 800179c:	0800361c 	.word	0x0800361c

080017a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017a4:	f7ff ffde 	bl	8001764 <HAL_RCC_GetHCLKFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	0adb      	lsrs	r3, r3, #11
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	4903      	ldr	r1, [pc, #12]	@ (80017c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40021000 	.word	0x40021000
 80017c4:	0800361c 	.word	0x0800361c

080017c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <RCC_Delay+0x34>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <RCC_Delay+0x38>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	0a5b      	lsrs	r3, r3, #9
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	fb02 f303 	mul.w	r3, r2, r3
 80017e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017e4:	bf00      	nop
  }
  while (Delay --);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1e5a      	subs	r2, r3, #1
 80017ea:	60fa      	str	r2, [r7, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f9      	bne.n	80017e4 <RCC_Delay+0x1c>
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000000 	.word	0x20000000
 8001800:	10624dd3 	.word	0x10624dd3

08001804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e04c      	b.n	80018b0 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d111      	bne.n	8001846 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fbc4 	bl	8001fb8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a1f      	ldr	r2, [pc, #124]	@ (80018b8 <HAL_TIM_Base_Init+0xb4>)
 800183c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2202      	movs	r2, #2
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3304      	adds	r3, #4
 8001856:	4619      	mov	r1, r3
 8001858:	4610      	mov	r0, r2
 800185a:	f000 faa9 	bl	8001db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2201      	movs	r2, #1
 800189a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	080005b9 	.word	0x080005b9

080018bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d001      	beq.n	80018d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e03a      	b.n	800194a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0201 	orr.w	r2, r2, #1
 80018ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a18      	ldr	r2, [pc, #96]	@ (8001954 <HAL_TIM_Base_Start_IT+0x98>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d00e      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x58>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018fe:	d009      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x58>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a14      	ldr	r2, [pc, #80]	@ (8001958 <HAL_TIM_Base_Start_IT+0x9c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d004      	beq.n	8001914 <HAL_TIM_Base_Start_IT+0x58>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <HAL_TIM_Base_Start_IT+0xa0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d111      	bne.n	8001938 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b06      	cmp	r3, #6
 8001924:	d010      	beq.n	8001948 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001936:	e007      	b.n	8001948 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr
 8001954:	40012c00 	.word	0x40012c00
 8001958:	40000400 	.word	0x40000400
 800195c:	40000800 	.word	0x40000800

08001960 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d026      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d021      	beq.n	80019d0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f06f 0202 	mvn.w	r2, #2
 8001994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0303 	and.w	r3, r3, #3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	4798      	blx	r3
 80019b4:	e009      	b.n	80019ca <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d026      	beq.n	8001a28 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d021      	beq.n	8001a28 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0204 	mvn.w	r2, #4
 80019ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
 8001a0c:	e009      	b.n	8001a22 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d026      	beq.n	8001a80 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d021      	beq.n	8001a80 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0208 	mvn.w	r2, #8
 8001a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
 8001a64:	e009      	b.n	8001a7a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f003 0310 	and.w	r3, r3, #16
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d026      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	f003 0310 	and.w	r3, r3, #16
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d021      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0210 	mvn.w	r2, #16
 8001a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e009      	b.n	8001ad2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00e      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d009      	beq.n	8001b00 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0201 	mvn.w	r2, #1
 8001af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00e      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x1c8>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d009      	beq.n	8001b28 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x1f0>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_TIM_IRQHandler+0x1f0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0320 	and.w	r3, r3, #32
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00e      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x218>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f06f 0220 	mvn.w	r2, #32
 8001b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_TIM_ConfigClockSource+0x1c>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e0b4      	b.n	8001d06 <HAL_TIM_ConfigClockSource+0x186>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001bc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bd4:	d03e      	beq.n	8001c54 <HAL_TIM_ConfigClockSource+0xd4>
 8001bd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bda:	f200 8087 	bhi.w	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be2:	f000 8086 	beq.w	8001cf2 <HAL_TIM_ConfigClockSource+0x172>
 8001be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bea:	d87f      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001bec:	2b70      	cmp	r3, #112	@ 0x70
 8001bee:	d01a      	beq.n	8001c26 <HAL_TIM_ConfigClockSource+0xa6>
 8001bf0:	2b70      	cmp	r3, #112	@ 0x70
 8001bf2:	d87b      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001bf4:	2b60      	cmp	r3, #96	@ 0x60
 8001bf6:	d050      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0x11a>
 8001bf8:	2b60      	cmp	r3, #96	@ 0x60
 8001bfa:	d877      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001bfc:	2b50      	cmp	r3, #80	@ 0x50
 8001bfe:	d03c      	beq.n	8001c7a <HAL_TIM_ConfigClockSource+0xfa>
 8001c00:	2b50      	cmp	r3, #80	@ 0x50
 8001c02:	d873      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001c04:	2b40      	cmp	r3, #64	@ 0x40
 8001c06:	d058      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0x13a>
 8001c08:	2b40      	cmp	r3, #64	@ 0x40
 8001c0a:	d86f      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001c0c:	2b30      	cmp	r3, #48	@ 0x30
 8001c0e:	d064      	beq.n	8001cda <HAL_TIM_ConfigClockSource+0x15a>
 8001c10:	2b30      	cmp	r3, #48	@ 0x30
 8001c12:	d86b      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d060      	beq.n	8001cda <HAL_TIM_ConfigClockSource+0x15a>
 8001c18:	2b20      	cmp	r3, #32
 8001c1a:	d867      	bhi.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d05c      	beq.n	8001cda <HAL_TIM_ConfigClockSource+0x15a>
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d05a      	beq.n	8001cda <HAL_TIM_ConfigClockSource+0x15a>
 8001c24:	e062      	b.n	8001cec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c36:	f000 f9a0 	bl	8001f7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001c48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68ba      	ldr	r2, [r7, #8]
 8001c50:	609a      	str	r2, [r3, #8]
      break;
 8001c52:	e04f      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c64:	f000 f989 	bl	8001f7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c76:	609a      	str	r2, [r3, #8]
      break;
 8001c78:	e03c      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c86:	461a      	mov	r2, r3
 8001c88:	f000 f900 	bl	8001e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2150      	movs	r1, #80	@ 0x50
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 f957 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001c98:	e02c      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	f000 f91e 	bl	8001ee8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2160      	movs	r1, #96	@ 0x60
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f947 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001cb8:	e01c      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f000 f8e0 	bl	8001e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2140      	movs	r1, #64	@ 0x40
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 f937 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001cd8:	e00c      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f000 f92e 	bl	8001f46 <TIM_ITRx_SetConfig>
      break;
 8001cea:	e003      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
      break;
 8001cf0:	e000      	b.n	8001cf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001cf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bc80      	pop	{r7}
 8001d30:	4770      	bx	lr

08001d32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr

08001d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a2f      	ldr	r2, [pc, #188]	@ (8001e80 <TIM_Base_SetConfig+0xd0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d00b      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dce:	d007      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a2c      	ldr	r2, [pc, #176]	@ (8001e84 <TIM_Base_SetConfig+0xd4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d003      	beq.n	8001de0 <TIM_Base_SetConfig+0x30>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a2b      	ldr	r2, [pc, #172]	@ (8001e88 <TIM_Base_SetConfig+0xd8>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d108      	bne.n	8001df2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001de6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	68fa      	ldr	r2, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a22      	ldr	r2, [pc, #136]	@ (8001e80 <TIM_Base_SetConfig+0xd0>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00b      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e00:	d007      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a1f      	ldr	r2, [pc, #124]	@ (8001e84 <TIM_Base_SetConfig+0xd4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d003      	beq.n	8001e12 <TIM_Base_SetConfig+0x62>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e88 <TIM_Base_SetConfig+0xd8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d108      	bne.n	8001e24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e80 <TIM_Base_SetConfig+0xd0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f023 0201 	bic.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	611a      	str	r2, [r3, #16]
  }
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40012c00 	.word	0x40012c00
 8001e84:	40000400 	.word	0x40000400
 8001e88:	40000800 	.word	0x40000800

08001e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b087      	sub	sp, #28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	f023 0201 	bic.w	r2, r3, #1
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f023 030a 	bic.w	r3, r3, #10
 8001ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	621a      	str	r2, [r3, #32]
}
 8001ede:	bf00      	nop
 8001ee0:	371c      	adds	r7, #28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f023 0210 	bic.w	r2, r3, #16
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	031b      	lsls	r3, r3, #12
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001f24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	621a      	str	r2, [r3, #32]
}
 8001f3c:	bf00      	nop
 8001f3e:	371c      	adds	r7, #28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b085      	sub	sp, #20
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f5e:	683a      	ldr	r2, [r7, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f043 0307 	orr.w	r3, r3, #7
 8001f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	609a      	str	r2, [r3, #8]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b087      	sub	sp, #28
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	60f8      	str	r0, [r7, #12]
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	697a      	ldr	r2, [r7, #20]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	609a      	str	r2, [r3, #8]
}
 8001fae:	bf00      	nop
 8001fb0:	371c      	adds	r7, #28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <TIM_ResetCallback+0x7c>)
 8001fc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a1b      	ldr	r2, [pc, #108]	@ (8002038 <TIM_ResetCallback+0x80>)
 8001fcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800203c <TIM_ResetCallback+0x84>)
 8001fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <TIM_ResetCallback+0x88>)
 8001fdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <TIM_ResetCallback+0x8c>)
 8001fe4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a17      	ldr	r2, [pc, #92]	@ (8002048 <TIM_ResetCallback+0x90>)
 8001fec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a16      	ldr	r2, [pc, #88]	@ (800204c <TIM_ResetCallback+0x94>)
 8001ff4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a15      	ldr	r2, [pc, #84]	@ (8002050 <TIM_ResetCallback+0x98>)
 8001ffc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a14      	ldr	r2, [pc, #80]	@ (8002054 <TIM_ResetCallback+0x9c>)
 8002004:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a13      	ldr	r2, [pc, #76]	@ (8002058 <TIM_ResetCallback+0xa0>)
 800200c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a12      	ldr	r2, [pc, #72]	@ (800205c <TIM_ResetCallback+0xa4>)
 8002014:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <TIM_ResetCallback+0xa8>)
 800201c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a10      	ldr	r2, [pc, #64]	@ (8002064 <TIM_ResetCallback+0xac>)
 8002024:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	08000199 	.word	0x08000199
 8002038:	08001d0f 	.word	0x08001d0f
 800203c:	08001d7b 	.word	0x08001d7b
 8002040:	08001d8d 	.word	0x08001d8d
 8002044:	08001d33 	.word	0x08001d33
 8002048:	08001d45 	.word	0x08001d45
 800204c:	08001d21 	.word	0x08001d21
 8002050:	08001d57 	.word	0x08001d57
 8002054:	08001d69 	.word	0x08001d69
 8002058:	08001d9f 	.word	0x08001d9f
 800205c:	08002125 	.word	0x08002125
 8002060:	08002137 	.word	0x08002137
 8002064:	08002149 	.word	0x08002149

08002068 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800207c:	2302      	movs	r3, #2
 800207e:	e046      	b.n	800210e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d00e      	beq.n	80020e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020cc:	d009      	beq.n	80020e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d004      	beq.n	80020e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a10      	ldr	r2, [pc, #64]	@ (8002120 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d10c      	bne.n	80020fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40000400 	.word	0x40000400
 8002120:	40000800 	.word	0x40000800

08002124 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e042      	b.n	80021f2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d106      	bne.n	8002186 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7fe fa3d 	bl	8000600 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2224      	movs	r2, #36	@ 0x24
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800219c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f972 	bl	8002488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	691a      	ldr	r2, [r3, #16]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021b2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021c2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80021d2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2220      	movs	r2, #32
 80021de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b08a      	sub	sp, #40	@ 0x28
 80021fe:	af02      	add	r7, sp, #8
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	4613      	mov	r3, r2
 8002208:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b20      	cmp	r3, #32
 8002218:	d175      	bne.n	8002306 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_UART_Transmit+0x2c>
 8002220:	88fb      	ldrh	r3, [r7, #6]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06e      	b.n	8002308 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2221      	movs	r2, #33	@ 0x21
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002238:	f7fe fb82 	bl	8000940 <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002252:	d108      	bne.n	8002266 <HAL_UART_Transmit+0x6c>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d104      	bne.n	8002266 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800225c:	2300      	movs	r3, #0
 800225e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	e003      	b.n	800226e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800226e:	e02e      	b.n	80022ce <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	2200      	movs	r2, #0
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 f848 	bl	8002310 <UART_WaitOnFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d005      	beq.n	8002292 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e03a      	b.n	8002308 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022a6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	3302      	adds	r3, #2
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	e007      	b.n	80022c0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	3301      	adds	r3, #1
 80022be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3b01      	subs	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1cb      	bne.n	8002270 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	2200      	movs	r2, #0
 80022e0:	2140      	movs	r1, #64	@ 0x40
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 f814 	bl	8002310 <UART_WaitOnFlagUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e006      	b.n	8002308 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	603b      	str	r3, [r7, #0]
 800231c:	4613      	mov	r3, r2
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002320:	e03b      	b.n	800239a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002328:	d037      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800232a:	f7fe fb09 	bl	8000940 <HAL_GetTick>
 800232e:	4602      	mov	r2, r0
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	6a3a      	ldr	r2, [r7, #32]
 8002336:	429a      	cmp	r2, r3
 8002338:	d302      	bcc.n	8002340 <UART_WaitOnFlagUntilTimeout+0x30>
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e03a      	b.n	80023ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0304 	and.w	r3, r3, #4
 800234e:	2b00      	cmp	r3, #0
 8002350:	d023      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b80      	cmp	r3, #128	@ 0x80
 8002356:	d020      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0x8a>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b40      	cmp	r3, #64	@ 0x40
 800235c:	d01d      	beq.n	800239a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b08      	cmp	r3, #8
 800236a:	d116      	bne.n	800239a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f81d 	bl	80023c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2208      	movs	r2, #8
 800238c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e00f      	b.n	80023ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	4013      	ands	r3, r2
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	bf0c      	ite	eq
 80023aa:	2301      	moveq	r3, #1
 80023ac:	2300      	movne	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d0b4      	beq.n	8002322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b095      	sub	sp, #84	@ 0x54
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d4:	e853 3f00 	ldrex	r3, [r3]
 80023d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80023da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80023ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80023f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80023f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e5      	bne.n	80023ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3314      	adds	r3, #20
 8002404:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	61fb      	str	r3, [r7, #28]
   return(result);
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3314      	adds	r3, #20
 800241c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800241e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002422:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002424:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002426:	e841 2300 	strex	r3, r2, [r1]
 800242a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1e5      	bne.n	80023fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	2b01      	cmp	r3, #1
 8002438:	d119      	bne.n	800246e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	e853 3f00 	ldrex	r3, [r3]
 8002448:	60bb      	str	r3, [r7, #8]
   return(result);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f023 0310 	bic.w	r3, r3, #16
 8002450:	647b      	str	r3, [r7, #68]	@ 0x44
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800245a:	61ba      	str	r2, [r7, #24]
 800245c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245e:	6979      	ldr	r1, [r7, #20]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	613b      	str	r3, [r7, #16]
   return(result);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e5      	bne.n	800243a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800247c:	bf00      	nop
 800247e:	3754      	adds	r7, #84	@ 0x54
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
	...

08002488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80024c2:	f023 030c 	bic.w	r3, r3, #12
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	68b9      	ldr	r1, [r7, #8]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a2c      	ldr	r2, [pc, #176]	@ (800259c <UART_SetConfig+0x114>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d103      	bne.n	80024f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024f0:	f7ff f956 	bl	80017a0 <HAL_RCC_GetPCLK2Freq>
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	e002      	b.n	80024fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024f8:	f7ff f93e 	bl	8001778 <HAL_RCC_GetPCLK1Freq>
 80024fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	009a      	lsls	r2, r3, #2
 8002508:	441a      	add	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	4a22      	ldr	r2, [pc, #136]	@ (80025a0 <UART_SetConfig+0x118>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	0119      	lsls	r1, r3, #4
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4613      	mov	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	4413      	add	r3, r2
 8002526:	009a      	lsls	r2, r3, #2
 8002528:	441a      	add	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	fbb2 f2f3 	udiv	r2, r2, r3
 8002534:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <UART_SetConfig+0x118>)
 8002536:	fba3 0302 	umull	r0, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	2064      	movs	r0, #100	@ 0x64
 800253e:	fb00 f303 	mul.w	r3, r0, r3
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	3332      	adds	r3, #50	@ 0x32
 8002548:	4a15      	ldr	r2, [pc, #84]	@ (80025a0 <UART_SetConfig+0x118>)
 800254a:	fba2 2303 	umull	r2, r3, r2, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002554:	4419      	add	r1, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4413      	add	r3, r2
 800255e:	009a      	lsls	r2, r3, #2
 8002560:	441a      	add	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	fbb2 f2f3 	udiv	r2, r2, r3
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <UART_SetConfig+0x118>)
 800256e:	fba3 0302 	umull	r0, r3, r3, r2
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2064      	movs	r0, #100	@ 0x64
 8002576:	fb00 f303 	mul.w	r3, r0, r3
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	3332      	adds	r3, #50	@ 0x32
 8002580:	4a07      	ldr	r2, [pc, #28]	@ (80025a0 <UART_SetConfig+0x118>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	f003 020f 	and.w	r2, r3, #15
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	440a      	add	r2, r1
 8002592:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002594:	bf00      	nop
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40013800 	.word	0x40013800
 80025a0:	51eb851f 	.word	0x51eb851f

080025a4 <std>:
 80025a4:	2300      	movs	r3, #0
 80025a6:	b510      	push	{r4, lr}
 80025a8:	4604      	mov	r4, r0
 80025aa:	e9c0 3300 	strd	r3, r3, [r0]
 80025ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80025b2:	6083      	str	r3, [r0, #8]
 80025b4:	8181      	strh	r1, [r0, #12]
 80025b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80025b8:	81c2      	strh	r2, [r0, #14]
 80025ba:	6183      	str	r3, [r0, #24]
 80025bc:	4619      	mov	r1, r3
 80025be:	2208      	movs	r2, #8
 80025c0:	305c      	adds	r0, #92	@ 0x5c
 80025c2:	f000 fa09 	bl	80029d8 <memset>
 80025c6:	4b0d      	ldr	r3, [pc, #52]	@ (80025fc <std+0x58>)
 80025c8:	6224      	str	r4, [r4, #32]
 80025ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <std+0x5c>)
 80025ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80025d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002604 <std+0x60>)
 80025d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <std+0x64>)
 80025d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <std+0x68>)
 80025da:	429c      	cmp	r4, r3
 80025dc:	d006      	beq.n	80025ec <std+0x48>
 80025de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80025e2:	4294      	cmp	r4, r2
 80025e4:	d002      	beq.n	80025ec <std+0x48>
 80025e6:	33d0      	adds	r3, #208	@ 0xd0
 80025e8:	429c      	cmp	r4, r3
 80025ea:	d105      	bne.n	80025f8 <std+0x54>
 80025ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80025f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025f4:	f000 ba68 	b.w	8002ac8 <__retarget_lock_init_recursive>
 80025f8:	bd10      	pop	{r4, pc}
 80025fa:	bf00      	nop
 80025fc:	08002829 	.word	0x08002829
 8002600:	0800284b 	.word	0x0800284b
 8002604:	08002883 	.word	0x08002883
 8002608:	080028a7 	.word	0x080028a7
 800260c:	200001b0 	.word	0x200001b0

08002610 <stdio_exit_handler>:
 8002610:	4a02      	ldr	r2, [pc, #8]	@ (800261c <stdio_exit_handler+0xc>)
 8002612:	4903      	ldr	r1, [pc, #12]	@ (8002620 <stdio_exit_handler+0x10>)
 8002614:	4803      	ldr	r0, [pc, #12]	@ (8002624 <stdio_exit_handler+0x14>)
 8002616:	f000 b869 	b.w	80026ec <_fwalk_sglue>
 800261a:	bf00      	nop
 800261c:	2000000c 	.word	0x2000000c
 8002620:	0800338d 	.word	0x0800338d
 8002624:	2000001c 	.word	0x2000001c

08002628 <cleanup_stdio>:
 8002628:	6841      	ldr	r1, [r0, #4]
 800262a:	4b0c      	ldr	r3, [pc, #48]	@ (800265c <cleanup_stdio+0x34>)
 800262c:	b510      	push	{r4, lr}
 800262e:	4299      	cmp	r1, r3
 8002630:	4604      	mov	r4, r0
 8002632:	d001      	beq.n	8002638 <cleanup_stdio+0x10>
 8002634:	f000 feaa 	bl	800338c <_fflush_r>
 8002638:	68a1      	ldr	r1, [r4, #8]
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <cleanup_stdio+0x38>)
 800263c:	4299      	cmp	r1, r3
 800263e:	d002      	beq.n	8002646 <cleanup_stdio+0x1e>
 8002640:	4620      	mov	r0, r4
 8002642:	f000 fea3 	bl	800338c <_fflush_r>
 8002646:	68e1      	ldr	r1, [r4, #12]
 8002648:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <cleanup_stdio+0x3c>)
 800264a:	4299      	cmp	r1, r3
 800264c:	d004      	beq.n	8002658 <cleanup_stdio+0x30>
 800264e:	4620      	mov	r0, r4
 8002650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002654:	f000 be9a 	b.w	800338c <_fflush_r>
 8002658:	bd10      	pop	{r4, pc}
 800265a:	bf00      	nop
 800265c:	200001b0 	.word	0x200001b0
 8002660:	20000218 	.word	0x20000218
 8002664:	20000280 	.word	0x20000280

08002668 <global_stdio_init.part.0>:
 8002668:	b510      	push	{r4, lr}
 800266a:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <global_stdio_init.part.0+0x30>)
 800266c:	4c0b      	ldr	r4, [pc, #44]	@ (800269c <global_stdio_init.part.0+0x34>)
 800266e:	4a0c      	ldr	r2, [pc, #48]	@ (80026a0 <global_stdio_init.part.0+0x38>)
 8002670:	4620      	mov	r0, r4
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	2104      	movs	r1, #4
 8002676:	2200      	movs	r2, #0
 8002678:	f7ff ff94 	bl	80025a4 <std>
 800267c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002680:	2201      	movs	r2, #1
 8002682:	2109      	movs	r1, #9
 8002684:	f7ff ff8e 	bl	80025a4 <std>
 8002688:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800268c:	2202      	movs	r2, #2
 800268e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002692:	2112      	movs	r1, #18
 8002694:	f7ff bf86 	b.w	80025a4 <std>
 8002698:	200002e8 	.word	0x200002e8
 800269c:	200001b0 	.word	0x200001b0
 80026a0:	08002611 	.word	0x08002611

080026a4 <__sfp_lock_acquire>:
 80026a4:	4801      	ldr	r0, [pc, #4]	@ (80026ac <__sfp_lock_acquire+0x8>)
 80026a6:	f000 ba10 	b.w	8002aca <__retarget_lock_acquire_recursive>
 80026aa:	bf00      	nop
 80026ac:	200002f1 	.word	0x200002f1

080026b0 <__sfp_lock_release>:
 80026b0:	4801      	ldr	r0, [pc, #4]	@ (80026b8 <__sfp_lock_release+0x8>)
 80026b2:	f000 ba0b 	b.w	8002acc <__retarget_lock_release_recursive>
 80026b6:	bf00      	nop
 80026b8:	200002f1 	.word	0x200002f1

080026bc <__sinit>:
 80026bc:	b510      	push	{r4, lr}
 80026be:	4604      	mov	r4, r0
 80026c0:	f7ff fff0 	bl	80026a4 <__sfp_lock_acquire>
 80026c4:	6a23      	ldr	r3, [r4, #32]
 80026c6:	b11b      	cbz	r3, 80026d0 <__sinit+0x14>
 80026c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026cc:	f7ff bff0 	b.w	80026b0 <__sfp_lock_release>
 80026d0:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <__sinit+0x28>)
 80026d2:	6223      	str	r3, [r4, #32]
 80026d4:	4b04      	ldr	r3, [pc, #16]	@ (80026e8 <__sinit+0x2c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f5      	bne.n	80026c8 <__sinit+0xc>
 80026dc:	f7ff ffc4 	bl	8002668 <global_stdio_init.part.0>
 80026e0:	e7f2      	b.n	80026c8 <__sinit+0xc>
 80026e2:	bf00      	nop
 80026e4:	08002629 	.word	0x08002629
 80026e8:	200002e8 	.word	0x200002e8

080026ec <_fwalk_sglue>:
 80026ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026f0:	4607      	mov	r7, r0
 80026f2:	4688      	mov	r8, r1
 80026f4:	4614      	mov	r4, r2
 80026f6:	2600      	movs	r6, #0
 80026f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002700:	d505      	bpl.n	800270e <_fwalk_sglue+0x22>
 8002702:	6824      	ldr	r4, [r4, #0]
 8002704:	2c00      	cmp	r4, #0
 8002706:	d1f7      	bne.n	80026f8 <_fwalk_sglue+0xc>
 8002708:	4630      	mov	r0, r6
 800270a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800270e:	89ab      	ldrh	r3, [r5, #12]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d907      	bls.n	8002724 <_fwalk_sglue+0x38>
 8002714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002718:	3301      	adds	r3, #1
 800271a:	d003      	beq.n	8002724 <_fwalk_sglue+0x38>
 800271c:	4629      	mov	r1, r5
 800271e:	4638      	mov	r0, r7
 8002720:	47c0      	blx	r8
 8002722:	4306      	orrs	r6, r0
 8002724:	3568      	adds	r5, #104	@ 0x68
 8002726:	e7e9      	b.n	80026fc <_fwalk_sglue+0x10>

08002728 <_puts_r>:
 8002728:	6a03      	ldr	r3, [r0, #32]
 800272a:	b570      	push	{r4, r5, r6, lr}
 800272c:	4605      	mov	r5, r0
 800272e:	460e      	mov	r6, r1
 8002730:	6884      	ldr	r4, [r0, #8]
 8002732:	b90b      	cbnz	r3, 8002738 <_puts_r+0x10>
 8002734:	f7ff ffc2 	bl	80026bc <__sinit>
 8002738:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800273a:	07db      	lsls	r3, r3, #31
 800273c:	d405      	bmi.n	800274a <_puts_r+0x22>
 800273e:	89a3      	ldrh	r3, [r4, #12]
 8002740:	0598      	lsls	r0, r3, #22
 8002742:	d402      	bmi.n	800274a <_puts_r+0x22>
 8002744:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002746:	f000 f9c0 	bl	8002aca <__retarget_lock_acquire_recursive>
 800274a:	89a3      	ldrh	r3, [r4, #12]
 800274c:	0719      	lsls	r1, r3, #28
 800274e:	d502      	bpl.n	8002756 <_puts_r+0x2e>
 8002750:	6923      	ldr	r3, [r4, #16]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d135      	bne.n	80027c2 <_puts_r+0x9a>
 8002756:	4621      	mov	r1, r4
 8002758:	4628      	mov	r0, r5
 800275a:	f000 f8e7 	bl	800292c <__swsetup_r>
 800275e:	b380      	cbz	r0, 80027c2 <_puts_r+0x9a>
 8002760:	f04f 35ff 	mov.w	r5, #4294967295
 8002764:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002766:	07da      	lsls	r2, r3, #31
 8002768:	d405      	bmi.n	8002776 <_puts_r+0x4e>
 800276a:	89a3      	ldrh	r3, [r4, #12]
 800276c:	059b      	lsls	r3, r3, #22
 800276e:	d402      	bmi.n	8002776 <_puts_r+0x4e>
 8002770:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002772:	f000 f9ab 	bl	8002acc <__retarget_lock_release_recursive>
 8002776:	4628      	mov	r0, r5
 8002778:	bd70      	pop	{r4, r5, r6, pc}
 800277a:	2b00      	cmp	r3, #0
 800277c:	da04      	bge.n	8002788 <_puts_r+0x60>
 800277e:	69a2      	ldr	r2, [r4, #24]
 8002780:	429a      	cmp	r2, r3
 8002782:	dc17      	bgt.n	80027b4 <_puts_r+0x8c>
 8002784:	290a      	cmp	r1, #10
 8002786:	d015      	beq.n	80027b4 <_puts_r+0x8c>
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	1c5a      	adds	r2, r3, #1
 800278c:	6022      	str	r2, [r4, #0]
 800278e:	7019      	strb	r1, [r3, #0]
 8002790:	68a3      	ldr	r3, [r4, #8]
 8002792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002796:	3b01      	subs	r3, #1
 8002798:	60a3      	str	r3, [r4, #8]
 800279a:	2900      	cmp	r1, #0
 800279c:	d1ed      	bne.n	800277a <_puts_r+0x52>
 800279e:	2b00      	cmp	r3, #0
 80027a0:	da11      	bge.n	80027c6 <_puts_r+0x9e>
 80027a2:	4622      	mov	r2, r4
 80027a4:	210a      	movs	r1, #10
 80027a6:	4628      	mov	r0, r5
 80027a8:	f000 f881 	bl	80028ae <__swbuf_r>
 80027ac:	3001      	adds	r0, #1
 80027ae:	d0d7      	beq.n	8002760 <_puts_r+0x38>
 80027b0:	250a      	movs	r5, #10
 80027b2:	e7d7      	b.n	8002764 <_puts_r+0x3c>
 80027b4:	4622      	mov	r2, r4
 80027b6:	4628      	mov	r0, r5
 80027b8:	f000 f879 	bl	80028ae <__swbuf_r>
 80027bc:	3001      	adds	r0, #1
 80027be:	d1e7      	bne.n	8002790 <_puts_r+0x68>
 80027c0:	e7ce      	b.n	8002760 <_puts_r+0x38>
 80027c2:	3e01      	subs	r6, #1
 80027c4:	e7e4      	b.n	8002790 <_puts_r+0x68>
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	6022      	str	r2, [r4, #0]
 80027cc:	220a      	movs	r2, #10
 80027ce:	701a      	strb	r2, [r3, #0]
 80027d0:	e7ee      	b.n	80027b0 <_puts_r+0x88>
	...

080027d4 <puts>:
 80027d4:	4b02      	ldr	r3, [pc, #8]	@ (80027e0 <puts+0xc>)
 80027d6:	4601      	mov	r1, r0
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	f7ff bfa5 	b.w	8002728 <_puts_r>
 80027de:	bf00      	nop
 80027e0:	20000018 	.word	0x20000018

080027e4 <siprintf>:
 80027e4:	b40e      	push	{r1, r2, r3}
 80027e6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80027ea:	b510      	push	{r4, lr}
 80027ec:	2400      	movs	r4, #0
 80027ee:	b09d      	sub	sp, #116	@ 0x74
 80027f0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80027f2:	9002      	str	r0, [sp, #8]
 80027f4:	9006      	str	r0, [sp, #24]
 80027f6:	9107      	str	r1, [sp, #28]
 80027f8:	9104      	str	r1, [sp, #16]
 80027fa:	4809      	ldr	r0, [pc, #36]	@ (8002820 <siprintf+0x3c>)
 80027fc:	4909      	ldr	r1, [pc, #36]	@ (8002824 <siprintf+0x40>)
 80027fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002802:	9105      	str	r1, [sp, #20]
 8002804:	6800      	ldr	r0, [r0, #0]
 8002806:	a902      	add	r1, sp, #8
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800280c:	f000 fab2 	bl	8002d74 <_svfiprintf_r>
 8002810:	9b02      	ldr	r3, [sp, #8]
 8002812:	701c      	strb	r4, [r3, #0]
 8002814:	b01d      	add	sp, #116	@ 0x74
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800281a:	b003      	add	sp, #12
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000018 	.word	0x20000018
 8002824:	ffff0208 	.word	0xffff0208

08002828 <__sread>:
 8002828:	b510      	push	{r4, lr}
 800282a:	460c      	mov	r4, r1
 800282c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002830:	f000 f8fc 	bl	8002a2c <_read_r>
 8002834:	2800      	cmp	r0, #0
 8002836:	bfab      	itete	ge
 8002838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800283a:	89a3      	ldrhlt	r3, [r4, #12]
 800283c:	181b      	addge	r3, r3, r0
 800283e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002842:	bfac      	ite	ge
 8002844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002846:	81a3      	strhlt	r3, [r4, #12]
 8002848:	bd10      	pop	{r4, pc}

0800284a <__swrite>:
 800284a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800284e:	461f      	mov	r7, r3
 8002850:	898b      	ldrh	r3, [r1, #12]
 8002852:	4605      	mov	r5, r0
 8002854:	05db      	lsls	r3, r3, #23
 8002856:	460c      	mov	r4, r1
 8002858:	4616      	mov	r6, r2
 800285a:	d505      	bpl.n	8002868 <__swrite+0x1e>
 800285c:	2302      	movs	r3, #2
 800285e:	2200      	movs	r2, #0
 8002860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002864:	f000 f8d0 	bl	8002a08 <_lseek_r>
 8002868:	89a3      	ldrh	r3, [r4, #12]
 800286a:	4632      	mov	r2, r6
 800286c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002870:	81a3      	strh	r3, [r4, #12]
 8002872:	4628      	mov	r0, r5
 8002874:	463b      	mov	r3, r7
 8002876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800287a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800287e:	f000 b8e7 	b.w	8002a50 <_write_r>

08002882 <__sseek>:
 8002882:	b510      	push	{r4, lr}
 8002884:	460c      	mov	r4, r1
 8002886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800288a:	f000 f8bd 	bl	8002a08 <_lseek_r>
 800288e:	1c43      	adds	r3, r0, #1
 8002890:	89a3      	ldrh	r3, [r4, #12]
 8002892:	bf15      	itete	ne
 8002894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800289a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800289e:	81a3      	strheq	r3, [r4, #12]
 80028a0:	bf18      	it	ne
 80028a2:	81a3      	strhne	r3, [r4, #12]
 80028a4:	bd10      	pop	{r4, pc}

080028a6 <__sclose>:
 80028a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028aa:	f000 b89d 	b.w	80029e8 <_close_r>

080028ae <__swbuf_r>:
 80028ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028b0:	460e      	mov	r6, r1
 80028b2:	4614      	mov	r4, r2
 80028b4:	4605      	mov	r5, r0
 80028b6:	b118      	cbz	r0, 80028c0 <__swbuf_r+0x12>
 80028b8:	6a03      	ldr	r3, [r0, #32]
 80028ba:	b90b      	cbnz	r3, 80028c0 <__swbuf_r+0x12>
 80028bc:	f7ff fefe 	bl	80026bc <__sinit>
 80028c0:	69a3      	ldr	r3, [r4, #24]
 80028c2:	60a3      	str	r3, [r4, #8]
 80028c4:	89a3      	ldrh	r3, [r4, #12]
 80028c6:	071a      	lsls	r2, r3, #28
 80028c8:	d501      	bpl.n	80028ce <__swbuf_r+0x20>
 80028ca:	6923      	ldr	r3, [r4, #16]
 80028cc:	b943      	cbnz	r3, 80028e0 <__swbuf_r+0x32>
 80028ce:	4621      	mov	r1, r4
 80028d0:	4628      	mov	r0, r5
 80028d2:	f000 f82b 	bl	800292c <__swsetup_r>
 80028d6:	b118      	cbz	r0, 80028e0 <__swbuf_r+0x32>
 80028d8:	f04f 37ff 	mov.w	r7, #4294967295
 80028dc:	4638      	mov	r0, r7
 80028de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	6922      	ldr	r2, [r4, #16]
 80028e4:	b2f6      	uxtb	r6, r6
 80028e6:	1a98      	subs	r0, r3, r2
 80028e8:	6963      	ldr	r3, [r4, #20]
 80028ea:	4637      	mov	r7, r6
 80028ec:	4283      	cmp	r3, r0
 80028ee:	dc05      	bgt.n	80028fc <__swbuf_r+0x4e>
 80028f0:	4621      	mov	r1, r4
 80028f2:	4628      	mov	r0, r5
 80028f4:	f000 fd4a 	bl	800338c <_fflush_r>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d1ed      	bne.n	80028d8 <__swbuf_r+0x2a>
 80028fc:	68a3      	ldr	r3, [r4, #8]
 80028fe:	3b01      	subs	r3, #1
 8002900:	60a3      	str	r3, [r4, #8]
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	1c5a      	adds	r2, r3, #1
 8002906:	6022      	str	r2, [r4, #0]
 8002908:	701e      	strb	r6, [r3, #0]
 800290a:	6962      	ldr	r2, [r4, #20]
 800290c:	1c43      	adds	r3, r0, #1
 800290e:	429a      	cmp	r2, r3
 8002910:	d004      	beq.n	800291c <__swbuf_r+0x6e>
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	07db      	lsls	r3, r3, #31
 8002916:	d5e1      	bpl.n	80028dc <__swbuf_r+0x2e>
 8002918:	2e0a      	cmp	r6, #10
 800291a:	d1df      	bne.n	80028dc <__swbuf_r+0x2e>
 800291c:	4621      	mov	r1, r4
 800291e:	4628      	mov	r0, r5
 8002920:	f000 fd34 	bl	800338c <_fflush_r>
 8002924:	2800      	cmp	r0, #0
 8002926:	d0d9      	beq.n	80028dc <__swbuf_r+0x2e>
 8002928:	e7d6      	b.n	80028d8 <__swbuf_r+0x2a>
	...

0800292c <__swsetup_r>:
 800292c:	b538      	push	{r3, r4, r5, lr}
 800292e:	4b29      	ldr	r3, [pc, #164]	@ (80029d4 <__swsetup_r+0xa8>)
 8002930:	4605      	mov	r5, r0
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	460c      	mov	r4, r1
 8002936:	b118      	cbz	r0, 8002940 <__swsetup_r+0x14>
 8002938:	6a03      	ldr	r3, [r0, #32]
 800293a:	b90b      	cbnz	r3, 8002940 <__swsetup_r+0x14>
 800293c:	f7ff febe 	bl	80026bc <__sinit>
 8002940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002944:	0719      	lsls	r1, r3, #28
 8002946:	d422      	bmi.n	800298e <__swsetup_r+0x62>
 8002948:	06da      	lsls	r2, r3, #27
 800294a:	d407      	bmi.n	800295c <__swsetup_r+0x30>
 800294c:	2209      	movs	r2, #9
 800294e:	602a      	str	r2, [r5, #0]
 8002950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	81a3      	strh	r3, [r4, #12]
 800295a:	e033      	b.n	80029c4 <__swsetup_r+0x98>
 800295c:	0758      	lsls	r0, r3, #29
 800295e:	d512      	bpl.n	8002986 <__swsetup_r+0x5a>
 8002960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002962:	b141      	cbz	r1, 8002976 <__swsetup_r+0x4a>
 8002964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002968:	4299      	cmp	r1, r3
 800296a:	d002      	beq.n	8002972 <__swsetup_r+0x46>
 800296c:	4628      	mov	r0, r5
 800296e:	f000 f8af 	bl	8002ad0 <_free_r>
 8002972:	2300      	movs	r3, #0
 8002974:	6363      	str	r3, [r4, #52]	@ 0x34
 8002976:	89a3      	ldrh	r3, [r4, #12]
 8002978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800297c:	81a3      	strh	r3, [r4, #12]
 800297e:	2300      	movs	r3, #0
 8002980:	6063      	str	r3, [r4, #4]
 8002982:	6923      	ldr	r3, [r4, #16]
 8002984:	6023      	str	r3, [r4, #0]
 8002986:	89a3      	ldrh	r3, [r4, #12]
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	81a3      	strh	r3, [r4, #12]
 800298e:	6923      	ldr	r3, [r4, #16]
 8002990:	b94b      	cbnz	r3, 80029a6 <__swsetup_r+0x7a>
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800299c:	d003      	beq.n	80029a6 <__swsetup_r+0x7a>
 800299e:	4621      	mov	r1, r4
 80029a0:	4628      	mov	r0, r5
 80029a2:	f000 fd40 	bl	8003426 <__smakebuf_r>
 80029a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029aa:	f013 0201 	ands.w	r2, r3, #1
 80029ae:	d00a      	beq.n	80029c6 <__swsetup_r+0x9a>
 80029b0:	2200      	movs	r2, #0
 80029b2:	60a2      	str	r2, [r4, #8]
 80029b4:	6962      	ldr	r2, [r4, #20]
 80029b6:	4252      	negs	r2, r2
 80029b8:	61a2      	str	r2, [r4, #24]
 80029ba:	6922      	ldr	r2, [r4, #16]
 80029bc:	b942      	cbnz	r2, 80029d0 <__swsetup_r+0xa4>
 80029be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80029c2:	d1c5      	bne.n	8002950 <__swsetup_r+0x24>
 80029c4:	bd38      	pop	{r3, r4, r5, pc}
 80029c6:	0799      	lsls	r1, r3, #30
 80029c8:	bf58      	it	pl
 80029ca:	6962      	ldrpl	r2, [r4, #20]
 80029cc:	60a2      	str	r2, [r4, #8]
 80029ce:	e7f4      	b.n	80029ba <__swsetup_r+0x8e>
 80029d0:	2000      	movs	r0, #0
 80029d2:	e7f7      	b.n	80029c4 <__swsetup_r+0x98>
 80029d4:	20000018 	.word	0x20000018

080029d8 <memset>:
 80029d8:	4603      	mov	r3, r0
 80029da:	4402      	add	r2, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <_close_r>:
 80029e8:	b538      	push	{r3, r4, r5, lr}
 80029ea:	2300      	movs	r3, #0
 80029ec:	4d05      	ldr	r5, [pc, #20]	@ (8002a04 <_close_r+0x1c>)
 80029ee:	4604      	mov	r4, r0
 80029f0:	4608      	mov	r0, r1
 80029f2:	602b      	str	r3, [r5, #0]
 80029f4:	f7fd feb9 	bl	800076a <_close>
 80029f8:	1c43      	adds	r3, r0, #1
 80029fa:	d102      	bne.n	8002a02 <_close_r+0x1a>
 80029fc:	682b      	ldr	r3, [r5, #0]
 80029fe:	b103      	cbz	r3, 8002a02 <_close_r+0x1a>
 8002a00:	6023      	str	r3, [r4, #0]
 8002a02:	bd38      	pop	{r3, r4, r5, pc}
 8002a04:	200002ec 	.word	0x200002ec

08002a08 <_lseek_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	2200      	movs	r2, #0
 8002a12:	4d05      	ldr	r5, [pc, #20]	@ (8002a28 <_lseek_r+0x20>)
 8002a14:	602a      	str	r2, [r5, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f7fd fecb 	bl	80007b2 <_lseek>
 8002a1c:	1c43      	adds	r3, r0, #1
 8002a1e:	d102      	bne.n	8002a26 <_lseek_r+0x1e>
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	b103      	cbz	r3, 8002a26 <_lseek_r+0x1e>
 8002a24:	6023      	str	r3, [r4, #0]
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
 8002a28:	200002ec 	.word	0x200002ec

08002a2c <_read_r>:
 8002a2c:	b538      	push	{r3, r4, r5, lr}
 8002a2e:	4604      	mov	r4, r0
 8002a30:	4608      	mov	r0, r1
 8002a32:	4611      	mov	r1, r2
 8002a34:	2200      	movs	r2, #0
 8002a36:	4d05      	ldr	r5, [pc, #20]	@ (8002a4c <_read_r+0x20>)
 8002a38:	602a      	str	r2, [r5, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f7fd fe5c 	bl	80006f8 <_read>
 8002a40:	1c43      	adds	r3, r0, #1
 8002a42:	d102      	bne.n	8002a4a <_read_r+0x1e>
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	b103      	cbz	r3, 8002a4a <_read_r+0x1e>
 8002a48:	6023      	str	r3, [r4, #0]
 8002a4a:	bd38      	pop	{r3, r4, r5, pc}
 8002a4c:	200002ec 	.word	0x200002ec

08002a50 <_write_r>:
 8002a50:	b538      	push	{r3, r4, r5, lr}
 8002a52:	4604      	mov	r4, r0
 8002a54:	4608      	mov	r0, r1
 8002a56:	4611      	mov	r1, r2
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4d05      	ldr	r5, [pc, #20]	@ (8002a70 <_write_r+0x20>)
 8002a5c:	602a      	str	r2, [r5, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f7fd fe67 	bl	8000732 <_write>
 8002a64:	1c43      	adds	r3, r0, #1
 8002a66:	d102      	bne.n	8002a6e <_write_r+0x1e>
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	b103      	cbz	r3, 8002a6e <_write_r+0x1e>
 8002a6c:	6023      	str	r3, [r4, #0]
 8002a6e:	bd38      	pop	{r3, r4, r5, pc}
 8002a70:	200002ec 	.word	0x200002ec

08002a74 <__errno>:
 8002a74:	4b01      	ldr	r3, [pc, #4]	@ (8002a7c <__errno+0x8>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000018 	.word	0x20000018

08002a80 <__libc_init_array>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	2600      	movs	r6, #0
 8002a84:	4d0c      	ldr	r5, [pc, #48]	@ (8002ab8 <__libc_init_array+0x38>)
 8002a86:	4c0d      	ldr	r4, [pc, #52]	@ (8002abc <__libc_init_array+0x3c>)
 8002a88:	1b64      	subs	r4, r4, r5
 8002a8a:	10a4      	asrs	r4, r4, #2
 8002a8c:	42a6      	cmp	r6, r4
 8002a8e:	d109      	bne.n	8002aa4 <__libc_init_array+0x24>
 8002a90:	f000 fda4 	bl	80035dc <_init>
 8002a94:	2600      	movs	r6, #0
 8002a96:	4d0a      	ldr	r5, [pc, #40]	@ (8002ac0 <__libc_init_array+0x40>)
 8002a98:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac4 <__libc_init_array+0x44>)
 8002a9a:	1b64      	subs	r4, r4, r5
 8002a9c:	10a4      	asrs	r4, r4, #2
 8002a9e:	42a6      	cmp	r6, r4
 8002aa0:	d105      	bne.n	8002aae <__libc_init_array+0x2e>
 8002aa2:	bd70      	pop	{r4, r5, r6, pc}
 8002aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aa8:	4798      	blx	r3
 8002aaa:	3601      	adds	r6, #1
 8002aac:	e7ee      	b.n	8002a8c <__libc_init_array+0xc>
 8002aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab2:	4798      	blx	r3
 8002ab4:	3601      	adds	r6, #1
 8002ab6:	e7f2      	b.n	8002a9e <__libc_init_array+0x1e>
 8002ab8:	08003674 	.word	0x08003674
 8002abc:	08003674 	.word	0x08003674
 8002ac0:	08003674 	.word	0x08003674
 8002ac4:	08003678 	.word	0x08003678

08002ac8 <__retarget_lock_init_recursive>:
 8002ac8:	4770      	bx	lr

08002aca <__retarget_lock_acquire_recursive>:
 8002aca:	4770      	bx	lr

08002acc <__retarget_lock_release_recursive>:
 8002acc:	4770      	bx	lr
	...

08002ad0 <_free_r>:
 8002ad0:	b538      	push	{r3, r4, r5, lr}
 8002ad2:	4605      	mov	r5, r0
 8002ad4:	2900      	cmp	r1, #0
 8002ad6:	d040      	beq.n	8002b5a <_free_r+0x8a>
 8002ad8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002adc:	1f0c      	subs	r4, r1, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bfb8      	it	lt
 8002ae2:	18e4      	addlt	r4, r4, r3
 8002ae4:	f000 f8de 	bl	8002ca4 <__malloc_lock>
 8002ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b5c <_free_r+0x8c>)
 8002aea:	6813      	ldr	r3, [r2, #0]
 8002aec:	b933      	cbnz	r3, 8002afc <_free_r+0x2c>
 8002aee:	6063      	str	r3, [r4, #4]
 8002af0:	6014      	str	r4, [r2, #0]
 8002af2:	4628      	mov	r0, r5
 8002af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002af8:	f000 b8da 	b.w	8002cb0 <__malloc_unlock>
 8002afc:	42a3      	cmp	r3, r4
 8002afe:	d908      	bls.n	8002b12 <_free_r+0x42>
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	1821      	adds	r1, r4, r0
 8002b04:	428b      	cmp	r3, r1
 8002b06:	bf01      	itttt	eq
 8002b08:	6819      	ldreq	r1, [r3, #0]
 8002b0a:	685b      	ldreq	r3, [r3, #4]
 8002b0c:	1809      	addeq	r1, r1, r0
 8002b0e:	6021      	streq	r1, [r4, #0]
 8002b10:	e7ed      	b.n	8002aee <_free_r+0x1e>
 8002b12:	461a      	mov	r2, r3
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	b10b      	cbz	r3, 8002b1c <_free_r+0x4c>
 8002b18:	42a3      	cmp	r3, r4
 8002b1a:	d9fa      	bls.n	8002b12 <_free_r+0x42>
 8002b1c:	6811      	ldr	r1, [r2, #0]
 8002b1e:	1850      	adds	r0, r2, r1
 8002b20:	42a0      	cmp	r0, r4
 8002b22:	d10b      	bne.n	8002b3c <_free_r+0x6c>
 8002b24:	6820      	ldr	r0, [r4, #0]
 8002b26:	4401      	add	r1, r0
 8002b28:	1850      	adds	r0, r2, r1
 8002b2a:	4283      	cmp	r3, r0
 8002b2c:	6011      	str	r1, [r2, #0]
 8002b2e:	d1e0      	bne.n	8002af2 <_free_r+0x22>
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	4408      	add	r0, r1
 8002b36:	6010      	str	r0, [r2, #0]
 8002b38:	6053      	str	r3, [r2, #4]
 8002b3a:	e7da      	b.n	8002af2 <_free_r+0x22>
 8002b3c:	d902      	bls.n	8002b44 <_free_r+0x74>
 8002b3e:	230c      	movs	r3, #12
 8002b40:	602b      	str	r3, [r5, #0]
 8002b42:	e7d6      	b.n	8002af2 <_free_r+0x22>
 8002b44:	6820      	ldr	r0, [r4, #0]
 8002b46:	1821      	adds	r1, r4, r0
 8002b48:	428b      	cmp	r3, r1
 8002b4a:	bf01      	itttt	eq
 8002b4c:	6819      	ldreq	r1, [r3, #0]
 8002b4e:	685b      	ldreq	r3, [r3, #4]
 8002b50:	1809      	addeq	r1, r1, r0
 8002b52:	6021      	streq	r1, [r4, #0]
 8002b54:	6063      	str	r3, [r4, #4]
 8002b56:	6054      	str	r4, [r2, #4]
 8002b58:	e7cb      	b.n	8002af2 <_free_r+0x22>
 8002b5a:	bd38      	pop	{r3, r4, r5, pc}
 8002b5c:	200002f8 	.word	0x200002f8

08002b60 <sbrk_aligned>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0f      	ldr	r6, [pc, #60]	@ (8002ba0 <sbrk_aligned+0x40>)
 8002b64:	460c      	mov	r4, r1
 8002b66:	6831      	ldr	r1, [r6, #0]
 8002b68:	4605      	mov	r5, r0
 8002b6a:	b911      	cbnz	r1, 8002b72 <sbrk_aligned+0x12>
 8002b6c:	f000 fcd4 	bl	8003518 <_sbrk_r>
 8002b70:	6030      	str	r0, [r6, #0]
 8002b72:	4621      	mov	r1, r4
 8002b74:	4628      	mov	r0, r5
 8002b76:	f000 fccf 	bl	8003518 <_sbrk_r>
 8002b7a:	1c43      	adds	r3, r0, #1
 8002b7c:	d103      	bne.n	8002b86 <sbrk_aligned+0x26>
 8002b7e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b82:	4620      	mov	r0, r4
 8002b84:	bd70      	pop	{r4, r5, r6, pc}
 8002b86:	1cc4      	adds	r4, r0, #3
 8002b88:	f024 0403 	bic.w	r4, r4, #3
 8002b8c:	42a0      	cmp	r0, r4
 8002b8e:	d0f8      	beq.n	8002b82 <sbrk_aligned+0x22>
 8002b90:	1a21      	subs	r1, r4, r0
 8002b92:	4628      	mov	r0, r5
 8002b94:	f000 fcc0 	bl	8003518 <_sbrk_r>
 8002b98:	3001      	adds	r0, #1
 8002b9a:	d1f2      	bne.n	8002b82 <sbrk_aligned+0x22>
 8002b9c:	e7ef      	b.n	8002b7e <sbrk_aligned+0x1e>
 8002b9e:	bf00      	nop
 8002ba0:	200002f4 	.word	0x200002f4

08002ba4 <_malloc_r>:
 8002ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ba8:	1ccd      	adds	r5, r1, #3
 8002baa:	f025 0503 	bic.w	r5, r5, #3
 8002bae:	3508      	adds	r5, #8
 8002bb0:	2d0c      	cmp	r5, #12
 8002bb2:	bf38      	it	cc
 8002bb4:	250c      	movcc	r5, #12
 8002bb6:	2d00      	cmp	r5, #0
 8002bb8:	4606      	mov	r6, r0
 8002bba:	db01      	blt.n	8002bc0 <_malloc_r+0x1c>
 8002bbc:	42a9      	cmp	r1, r5
 8002bbe:	d904      	bls.n	8002bca <_malloc_r+0x26>
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	6033      	str	r3, [r6, #0]
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002bca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ca0 <_malloc_r+0xfc>
 8002bce:	f000 f869 	bl	8002ca4 <__malloc_lock>
 8002bd2:	f8d8 3000 	ldr.w	r3, [r8]
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	bb44      	cbnz	r4, 8002c2c <_malloc_r+0x88>
 8002bda:	4629      	mov	r1, r5
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f7ff ffbf 	bl	8002b60 <sbrk_aligned>
 8002be2:	1c43      	adds	r3, r0, #1
 8002be4:	4604      	mov	r4, r0
 8002be6:	d158      	bne.n	8002c9a <_malloc_r+0xf6>
 8002be8:	f8d8 4000 	ldr.w	r4, [r8]
 8002bec:	4627      	mov	r7, r4
 8002bee:	2f00      	cmp	r7, #0
 8002bf0:	d143      	bne.n	8002c7a <_malloc_r+0xd6>
 8002bf2:	2c00      	cmp	r4, #0
 8002bf4:	d04b      	beq.n	8002c8e <_malloc_r+0xea>
 8002bf6:	6823      	ldr	r3, [r4, #0]
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	eb04 0903 	add.w	r9, r4, r3
 8002c00:	f000 fc8a 	bl	8003518 <_sbrk_r>
 8002c04:	4581      	cmp	r9, r0
 8002c06:	d142      	bne.n	8002c8e <_malloc_r+0xea>
 8002c08:	6821      	ldr	r1, [r4, #0]
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	1a6d      	subs	r5, r5, r1
 8002c0e:	4629      	mov	r1, r5
 8002c10:	f7ff ffa6 	bl	8002b60 <sbrk_aligned>
 8002c14:	3001      	adds	r0, #1
 8002c16:	d03a      	beq.n	8002c8e <_malloc_r+0xea>
 8002c18:	6823      	ldr	r3, [r4, #0]
 8002c1a:	442b      	add	r3, r5
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	bb62      	cbnz	r2, 8002c80 <_malloc_r+0xdc>
 8002c26:	f8c8 7000 	str.w	r7, [r8]
 8002c2a:	e00f      	b.n	8002c4c <_malloc_r+0xa8>
 8002c2c:	6822      	ldr	r2, [r4, #0]
 8002c2e:	1b52      	subs	r2, r2, r5
 8002c30:	d420      	bmi.n	8002c74 <_malloc_r+0xd0>
 8002c32:	2a0b      	cmp	r2, #11
 8002c34:	d917      	bls.n	8002c66 <_malloc_r+0xc2>
 8002c36:	1961      	adds	r1, r4, r5
 8002c38:	42a3      	cmp	r3, r4
 8002c3a:	6025      	str	r5, [r4, #0]
 8002c3c:	bf18      	it	ne
 8002c3e:	6059      	strne	r1, [r3, #4]
 8002c40:	6863      	ldr	r3, [r4, #4]
 8002c42:	bf08      	it	eq
 8002c44:	f8c8 1000 	streq.w	r1, [r8]
 8002c48:	5162      	str	r2, [r4, r5]
 8002c4a:	604b      	str	r3, [r1, #4]
 8002c4c:	4630      	mov	r0, r6
 8002c4e:	f000 f82f 	bl	8002cb0 <__malloc_unlock>
 8002c52:	f104 000b 	add.w	r0, r4, #11
 8002c56:	1d23      	adds	r3, r4, #4
 8002c58:	f020 0007 	bic.w	r0, r0, #7
 8002c5c:	1ac2      	subs	r2, r0, r3
 8002c5e:	bf1c      	itt	ne
 8002c60:	1a1b      	subne	r3, r3, r0
 8002c62:	50a3      	strne	r3, [r4, r2]
 8002c64:	e7af      	b.n	8002bc6 <_malloc_r+0x22>
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	42a3      	cmp	r3, r4
 8002c6a:	bf0c      	ite	eq
 8002c6c:	f8c8 2000 	streq.w	r2, [r8]
 8002c70:	605a      	strne	r2, [r3, #4]
 8002c72:	e7eb      	b.n	8002c4c <_malloc_r+0xa8>
 8002c74:	4623      	mov	r3, r4
 8002c76:	6864      	ldr	r4, [r4, #4]
 8002c78:	e7ae      	b.n	8002bd8 <_malloc_r+0x34>
 8002c7a:	463c      	mov	r4, r7
 8002c7c:	687f      	ldr	r7, [r7, #4]
 8002c7e:	e7b6      	b.n	8002bee <_malloc_r+0x4a>
 8002c80:	461a      	mov	r2, r3
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	42a3      	cmp	r3, r4
 8002c86:	d1fb      	bne.n	8002c80 <_malloc_r+0xdc>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	6053      	str	r3, [r2, #4]
 8002c8c:	e7de      	b.n	8002c4c <_malloc_r+0xa8>
 8002c8e:	230c      	movs	r3, #12
 8002c90:	4630      	mov	r0, r6
 8002c92:	6033      	str	r3, [r6, #0]
 8002c94:	f000 f80c 	bl	8002cb0 <__malloc_unlock>
 8002c98:	e794      	b.n	8002bc4 <_malloc_r+0x20>
 8002c9a:	6005      	str	r5, [r0, #0]
 8002c9c:	e7d6      	b.n	8002c4c <_malloc_r+0xa8>
 8002c9e:	bf00      	nop
 8002ca0:	200002f8 	.word	0x200002f8

08002ca4 <__malloc_lock>:
 8002ca4:	4801      	ldr	r0, [pc, #4]	@ (8002cac <__malloc_lock+0x8>)
 8002ca6:	f7ff bf10 	b.w	8002aca <__retarget_lock_acquire_recursive>
 8002caa:	bf00      	nop
 8002cac:	200002f0 	.word	0x200002f0

08002cb0 <__malloc_unlock>:
 8002cb0:	4801      	ldr	r0, [pc, #4]	@ (8002cb8 <__malloc_unlock+0x8>)
 8002cb2:	f7ff bf0b 	b.w	8002acc <__retarget_lock_release_recursive>
 8002cb6:	bf00      	nop
 8002cb8:	200002f0 	.word	0x200002f0

08002cbc <__ssputs_r>:
 8002cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc0:	461f      	mov	r7, r3
 8002cc2:	688e      	ldr	r6, [r1, #8]
 8002cc4:	4682      	mov	sl, r0
 8002cc6:	42be      	cmp	r6, r7
 8002cc8:	460c      	mov	r4, r1
 8002cca:	4690      	mov	r8, r2
 8002ccc:	680b      	ldr	r3, [r1, #0]
 8002cce:	d82d      	bhi.n	8002d2c <__ssputs_r+0x70>
 8002cd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002cd8:	d026      	beq.n	8002d28 <__ssputs_r+0x6c>
 8002cda:	6965      	ldr	r5, [r4, #20]
 8002cdc:	6909      	ldr	r1, [r1, #16]
 8002cde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ce2:	eba3 0901 	sub.w	r9, r3, r1
 8002ce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002cea:	1c7b      	adds	r3, r7, #1
 8002cec:	444b      	add	r3, r9
 8002cee:	106d      	asrs	r5, r5, #1
 8002cf0:	429d      	cmp	r5, r3
 8002cf2:	bf38      	it	cc
 8002cf4:	461d      	movcc	r5, r3
 8002cf6:	0553      	lsls	r3, r2, #21
 8002cf8:	d527      	bpl.n	8002d4a <__ssputs_r+0x8e>
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	f7ff ff52 	bl	8002ba4 <_malloc_r>
 8002d00:	4606      	mov	r6, r0
 8002d02:	b360      	cbz	r0, 8002d5e <__ssputs_r+0xa2>
 8002d04:	464a      	mov	r2, r9
 8002d06:	6921      	ldr	r1, [r4, #16]
 8002d08:	f000 fc24 	bl	8003554 <memcpy>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d16:	81a3      	strh	r3, [r4, #12]
 8002d18:	6126      	str	r6, [r4, #16]
 8002d1a:	444e      	add	r6, r9
 8002d1c:	6026      	str	r6, [r4, #0]
 8002d1e:	463e      	mov	r6, r7
 8002d20:	6165      	str	r5, [r4, #20]
 8002d22:	eba5 0509 	sub.w	r5, r5, r9
 8002d26:	60a5      	str	r5, [r4, #8]
 8002d28:	42be      	cmp	r6, r7
 8002d2a:	d900      	bls.n	8002d2e <__ssputs_r+0x72>
 8002d2c:	463e      	mov	r6, r7
 8002d2e:	4632      	mov	r2, r6
 8002d30:	4641      	mov	r1, r8
 8002d32:	6820      	ldr	r0, [r4, #0]
 8002d34:	f000 fbb3 	bl	800349e <memmove>
 8002d38:	2000      	movs	r0, #0
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	1b9b      	subs	r3, r3, r6
 8002d3e:	60a3      	str	r3, [r4, #8]
 8002d40:	6823      	ldr	r3, [r4, #0]
 8002d42:	4433      	add	r3, r6
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4a:	462a      	mov	r2, r5
 8002d4c:	f000 fc10 	bl	8003570 <_realloc_r>
 8002d50:	4606      	mov	r6, r0
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d1e0      	bne.n	8002d18 <__ssputs_r+0x5c>
 8002d56:	4650      	mov	r0, sl
 8002d58:	6921      	ldr	r1, [r4, #16]
 8002d5a:	f7ff feb9 	bl	8002ad0 <_free_r>
 8002d5e:	230c      	movs	r3, #12
 8002d60:	f8ca 3000 	str.w	r3, [sl]
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	e7e9      	b.n	8002d46 <__ssputs_r+0x8a>
	...

08002d74 <_svfiprintf_r>:
 8002d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d78:	4698      	mov	r8, r3
 8002d7a:	898b      	ldrh	r3, [r1, #12]
 8002d7c:	4607      	mov	r7, r0
 8002d7e:	061b      	lsls	r3, r3, #24
 8002d80:	460d      	mov	r5, r1
 8002d82:	4614      	mov	r4, r2
 8002d84:	b09d      	sub	sp, #116	@ 0x74
 8002d86:	d510      	bpl.n	8002daa <_svfiprintf_r+0x36>
 8002d88:	690b      	ldr	r3, [r1, #16]
 8002d8a:	b973      	cbnz	r3, 8002daa <_svfiprintf_r+0x36>
 8002d8c:	2140      	movs	r1, #64	@ 0x40
 8002d8e:	f7ff ff09 	bl	8002ba4 <_malloc_r>
 8002d92:	6028      	str	r0, [r5, #0]
 8002d94:	6128      	str	r0, [r5, #16]
 8002d96:	b930      	cbnz	r0, 8002da6 <_svfiprintf_r+0x32>
 8002d98:	230c      	movs	r3, #12
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002da0:	b01d      	add	sp, #116	@ 0x74
 8002da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002da6:	2340      	movs	r3, #64	@ 0x40
 8002da8:	616b      	str	r3, [r5, #20]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dae:	2320      	movs	r3, #32
 8002db0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002db4:	2330      	movs	r3, #48	@ 0x30
 8002db6:	f04f 0901 	mov.w	r9, #1
 8002dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8002dbe:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002f58 <_svfiprintf_r+0x1e4>
 8002dc2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002dc6:	4623      	mov	r3, r4
 8002dc8:	469a      	mov	sl, r3
 8002dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002dce:	b10a      	cbz	r2, 8002dd4 <_svfiprintf_r+0x60>
 8002dd0:	2a25      	cmp	r2, #37	@ 0x25
 8002dd2:	d1f9      	bne.n	8002dc8 <_svfiprintf_r+0x54>
 8002dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8002dd8:	d00b      	beq.n	8002df2 <_svfiprintf_r+0x7e>
 8002dda:	465b      	mov	r3, fp
 8002ddc:	4622      	mov	r2, r4
 8002dde:	4629      	mov	r1, r5
 8002de0:	4638      	mov	r0, r7
 8002de2:	f7ff ff6b 	bl	8002cbc <__ssputs_r>
 8002de6:	3001      	adds	r0, #1
 8002de8:	f000 80a7 	beq.w	8002f3a <_svfiprintf_r+0x1c6>
 8002dec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002dee:	445a      	add	r2, fp
 8002df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8002df2:	f89a 3000 	ldrb.w	r3, [sl]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f000 809f 	beq.w	8002f3a <_svfiprintf_r+0x1c6>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e06:	f10a 0a01 	add.w	sl, sl, #1
 8002e0a:	9304      	str	r3, [sp, #16]
 8002e0c:	9307      	str	r3, [sp, #28]
 8002e0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002e12:	931a      	str	r3, [sp, #104]	@ 0x68
 8002e14:	4654      	mov	r4, sl
 8002e16:	2205      	movs	r2, #5
 8002e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1c:	484e      	ldr	r0, [pc, #312]	@ (8002f58 <_svfiprintf_r+0x1e4>)
 8002e1e:	f000 fb8b 	bl	8003538 <memchr>
 8002e22:	9a04      	ldr	r2, [sp, #16]
 8002e24:	b9d8      	cbnz	r0, 8002e5e <_svfiprintf_r+0xea>
 8002e26:	06d0      	lsls	r0, r2, #27
 8002e28:	bf44      	itt	mi
 8002e2a:	2320      	movmi	r3, #32
 8002e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e30:	0711      	lsls	r1, r2, #28
 8002e32:	bf44      	itt	mi
 8002e34:	232b      	movmi	r3, #43	@ 0x2b
 8002e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e40:	d015      	beq.n	8002e6e <_svfiprintf_r+0xfa>
 8002e42:	4654      	mov	r4, sl
 8002e44:	2000      	movs	r0, #0
 8002e46:	f04f 0c0a 	mov.w	ip, #10
 8002e4a:	9a07      	ldr	r2, [sp, #28]
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e52:	3b30      	subs	r3, #48	@ 0x30
 8002e54:	2b09      	cmp	r3, #9
 8002e56:	d94b      	bls.n	8002ef0 <_svfiprintf_r+0x17c>
 8002e58:	b1b0      	cbz	r0, 8002e88 <_svfiprintf_r+0x114>
 8002e5a:	9207      	str	r2, [sp, #28]
 8002e5c:	e014      	b.n	8002e88 <_svfiprintf_r+0x114>
 8002e5e:	eba0 0308 	sub.w	r3, r0, r8
 8002e62:	fa09 f303 	lsl.w	r3, r9, r3
 8002e66:	4313      	orrs	r3, r2
 8002e68:	46a2      	mov	sl, r4
 8002e6a:	9304      	str	r3, [sp, #16]
 8002e6c:	e7d2      	b.n	8002e14 <_svfiprintf_r+0xa0>
 8002e6e:	9b03      	ldr	r3, [sp, #12]
 8002e70:	1d19      	adds	r1, r3, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	9103      	str	r1, [sp, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bfbb      	ittet	lt
 8002e7a:	425b      	neglt	r3, r3
 8002e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e80:	9307      	strge	r3, [sp, #28]
 8002e82:	9307      	strlt	r3, [sp, #28]
 8002e84:	bfb8      	it	lt
 8002e86:	9204      	strlt	r2, [sp, #16]
 8002e88:	7823      	ldrb	r3, [r4, #0]
 8002e8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002e8c:	d10a      	bne.n	8002ea4 <_svfiprintf_r+0x130>
 8002e8e:	7863      	ldrb	r3, [r4, #1]
 8002e90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e92:	d132      	bne.n	8002efa <_svfiprintf_r+0x186>
 8002e94:	9b03      	ldr	r3, [sp, #12]
 8002e96:	3402      	adds	r4, #2
 8002e98:	1d1a      	adds	r2, r3, #4
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	9203      	str	r2, [sp, #12]
 8002e9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002ea2:	9305      	str	r3, [sp, #20]
 8002ea4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002f5c <_svfiprintf_r+0x1e8>
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	4650      	mov	r0, sl
 8002eac:	7821      	ldrb	r1, [r4, #0]
 8002eae:	f000 fb43 	bl	8003538 <memchr>
 8002eb2:	b138      	cbz	r0, 8002ec4 <_svfiprintf_r+0x150>
 8002eb4:	2240      	movs	r2, #64	@ 0x40
 8002eb6:	9b04      	ldr	r3, [sp, #16]
 8002eb8:	eba0 000a 	sub.w	r0, r0, sl
 8002ebc:	4082      	lsls	r2, r0
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	3401      	adds	r4, #1
 8002ec2:	9304      	str	r3, [sp, #16]
 8002ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ec8:	2206      	movs	r2, #6
 8002eca:	4825      	ldr	r0, [pc, #148]	@ (8002f60 <_svfiprintf_r+0x1ec>)
 8002ecc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ed0:	f000 fb32 	bl	8003538 <memchr>
 8002ed4:	2800      	cmp	r0, #0
 8002ed6:	d036      	beq.n	8002f46 <_svfiprintf_r+0x1d2>
 8002ed8:	4b22      	ldr	r3, [pc, #136]	@ (8002f64 <_svfiprintf_r+0x1f0>)
 8002eda:	bb1b      	cbnz	r3, 8002f24 <_svfiprintf_r+0x1b0>
 8002edc:	9b03      	ldr	r3, [sp, #12]
 8002ede:	3307      	adds	r3, #7
 8002ee0:	f023 0307 	bic.w	r3, r3, #7
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	9303      	str	r3, [sp, #12]
 8002ee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eea:	4433      	add	r3, r6
 8002eec:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eee:	e76a      	b.n	8002dc6 <_svfiprintf_r+0x52>
 8002ef0:	460c      	mov	r4, r1
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ef8:	e7a8      	b.n	8002e4c <_svfiprintf_r+0xd8>
 8002efa:	2300      	movs	r3, #0
 8002efc:	f04f 0c0a 	mov.w	ip, #10
 8002f00:	4619      	mov	r1, r3
 8002f02:	3401      	adds	r4, #1
 8002f04:	9305      	str	r3, [sp, #20]
 8002f06:	4620      	mov	r0, r4
 8002f08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f0c:	3a30      	subs	r2, #48	@ 0x30
 8002f0e:	2a09      	cmp	r2, #9
 8002f10:	d903      	bls.n	8002f1a <_svfiprintf_r+0x1a6>
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0c6      	beq.n	8002ea4 <_svfiprintf_r+0x130>
 8002f16:	9105      	str	r1, [sp, #20]
 8002f18:	e7c4      	b.n	8002ea4 <_svfiprintf_r+0x130>
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f22:	e7f0      	b.n	8002f06 <_svfiprintf_r+0x192>
 8002f24:	ab03      	add	r3, sp, #12
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	462a      	mov	r2, r5
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002f68 <_svfiprintf_r+0x1f4>)
 8002f2e:	a904      	add	r1, sp, #16
 8002f30:	f3af 8000 	nop.w
 8002f34:	1c42      	adds	r2, r0, #1
 8002f36:	4606      	mov	r6, r0
 8002f38:	d1d6      	bne.n	8002ee8 <_svfiprintf_r+0x174>
 8002f3a:	89ab      	ldrh	r3, [r5, #12]
 8002f3c:	065b      	lsls	r3, r3, #25
 8002f3e:	f53f af2d 	bmi.w	8002d9c <_svfiprintf_r+0x28>
 8002f42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002f44:	e72c      	b.n	8002da0 <_svfiprintf_r+0x2c>
 8002f46:	ab03      	add	r3, sp, #12
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	462a      	mov	r2, r5
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <_svfiprintf_r+0x1f4>)
 8002f50:	a904      	add	r1, sp, #16
 8002f52:	f000 f87d 	bl	8003050 <_printf_i>
 8002f56:	e7ed      	b.n	8002f34 <_svfiprintf_r+0x1c0>
 8002f58:	08003636 	.word	0x08003636
 8002f5c:	0800363c 	.word	0x0800363c
 8002f60:	08003640 	.word	0x08003640
 8002f64:	00000000 	.word	0x00000000
 8002f68:	08002cbd 	.word	0x08002cbd

08002f6c <_printf_common>:
 8002f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f70:	4616      	mov	r6, r2
 8002f72:	4698      	mov	r8, r3
 8002f74:	688a      	ldr	r2, [r1, #8]
 8002f76:	690b      	ldr	r3, [r1, #16]
 8002f78:	4607      	mov	r7, r0
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	bfb8      	it	lt
 8002f7e:	4613      	movlt	r3, r2
 8002f80:	6033      	str	r3, [r6, #0]
 8002f82:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002f86:	460c      	mov	r4, r1
 8002f88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002f8c:	b10a      	cbz	r2, 8002f92 <_printf_common+0x26>
 8002f8e:	3301      	adds	r3, #1
 8002f90:	6033      	str	r3, [r6, #0]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	0699      	lsls	r1, r3, #26
 8002f96:	bf42      	ittt	mi
 8002f98:	6833      	ldrmi	r3, [r6, #0]
 8002f9a:	3302      	addmi	r3, #2
 8002f9c:	6033      	strmi	r3, [r6, #0]
 8002f9e:	6825      	ldr	r5, [r4, #0]
 8002fa0:	f015 0506 	ands.w	r5, r5, #6
 8002fa4:	d106      	bne.n	8002fb4 <_printf_common+0x48>
 8002fa6:	f104 0a19 	add.w	sl, r4, #25
 8002faa:	68e3      	ldr	r3, [r4, #12]
 8002fac:	6832      	ldr	r2, [r6, #0]
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	42ab      	cmp	r3, r5
 8002fb2:	dc2b      	bgt.n	800300c <_printf_common+0xa0>
 8002fb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002fb8:	6822      	ldr	r2, [r4, #0]
 8002fba:	3b00      	subs	r3, #0
 8002fbc:	bf18      	it	ne
 8002fbe:	2301      	movne	r3, #1
 8002fc0:	0692      	lsls	r2, r2, #26
 8002fc2:	d430      	bmi.n	8003026 <_printf_common+0xba>
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	4638      	mov	r0, r7
 8002fc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002fcc:	47c8      	blx	r9
 8002fce:	3001      	adds	r0, #1
 8002fd0:	d023      	beq.n	800301a <_printf_common+0xae>
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	6922      	ldr	r2, [r4, #16]
 8002fd6:	f003 0306 	and.w	r3, r3, #6
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	bf14      	ite	ne
 8002fde:	2500      	movne	r5, #0
 8002fe0:	6833      	ldreq	r3, [r6, #0]
 8002fe2:	f04f 0600 	mov.w	r6, #0
 8002fe6:	bf08      	it	eq
 8002fe8:	68e5      	ldreq	r5, [r4, #12]
 8002fea:	f104 041a 	add.w	r4, r4, #26
 8002fee:	bf08      	it	eq
 8002ff0:	1aed      	subeq	r5, r5, r3
 8002ff2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002ff6:	bf08      	it	eq
 8002ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bfc4      	itt	gt
 8003000:	1a9b      	subgt	r3, r3, r2
 8003002:	18ed      	addgt	r5, r5, r3
 8003004:	42b5      	cmp	r5, r6
 8003006:	d11a      	bne.n	800303e <_printf_common+0xd2>
 8003008:	2000      	movs	r0, #0
 800300a:	e008      	b.n	800301e <_printf_common+0xb2>
 800300c:	2301      	movs	r3, #1
 800300e:	4652      	mov	r2, sl
 8003010:	4641      	mov	r1, r8
 8003012:	4638      	mov	r0, r7
 8003014:	47c8      	blx	r9
 8003016:	3001      	adds	r0, #1
 8003018:	d103      	bne.n	8003022 <_printf_common+0xb6>
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003022:	3501      	adds	r5, #1
 8003024:	e7c1      	b.n	8002faa <_printf_common+0x3e>
 8003026:	2030      	movs	r0, #48	@ 0x30
 8003028:	18e1      	adds	r1, r4, r3
 800302a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003034:	4422      	add	r2, r4
 8003036:	3302      	adds	r3, #2
 8003038:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800303c:	e7c2      	b.n	8002fc4 <_printf_common+0x58>
 800303e:	2301      	movs	r3, #1
 8003040:	4622      	mov	r2, r4
 8003042:	4641      	mov	r1, r8
 8003044:	4638      	mov	r0, r7
 8003046:	47c8      	blx	r9
 8003048:	3001      	adds	r0, #1
 800304a:	d0e6      	beq.n	800301a <_printf_common+0xae>
 800304c:	3601      	adds	r6, #1
 800304e:	e7d9      	b.n	8003004 <_printf_common+0x98>

08003050 <_printf_i>:
 8003050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003054:	7e0f      	ldrb	r7, [r1, #24]
 8003056:	4691      	mov	r9, r2
 8003058:	2f78      	cmp	r7, #120	@ 0x78
 800305a:	4680      	mov	r8, r0
 800305c:	460c      	mov	r4, r1
 800305e:	469a      	mov	sl, r3
 8003060:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003062:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003066:	d807      	bhi.n	8003078 <_printf_i+0x28>
 8003068:	2f62      	cmp	r7, #98	@ 0x62
 800306a:	d80a      	bhi.n	8003082 <_printf_i+0x32>
 800306c:	2f00      	cmp	r7, #0
 800306e:	f000 80d1 	beq.w	8003214 <_printf_i+0x1c4>
 8003072:	2f58      	cmp	r7, #88	@ 0x58
 8003074:	f000 80b8 	beq.w	80031e8 <_printf_i+0x198>
 8003078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800307c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003080:	e03a      	b.n	80030f8 <_printf_i+0xa8>
 8003082:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003086:	2b15      	cmp	r3, #21
 8003088:	d8f6      	bhi.n	8003078 <_printf_i+0x28>
 800308a:	a101      	add	r1, pc, #4	@ (adr r1, 8003090 <_printf_i+0x40>)
 800308c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003090:	080030e9 	.word	0x080030e9
 8003094:	080030fd 	.word	0x080030fd
 8003098:	08003079 	.word	0x08003079
 800309c:	08003079 	.word	0x08003079
 80030a0:	08003079 	.word	0x08003079
 80030a4:	08003079 	.word	0x08003079
 80030a8:	080030fd 	.word	0x080030fd
 80030ac:	08003079 	.word	0x08003079
 80030b0:	08003079 	.word	0x08003079
 80030b4:	08003079 	.word	0x08003079
 80030b8:	08003079 	.word	0x08003079
 80030bc:	080031fb 	.word	0x080031fb
 80030c0:	08003127 	.word	0x08003127
 80030c4:	080031b5 	.word	0x080031b5
 80030c8:	08003079 	.word	0x08003079
 80030cc:	08003079 	.word	0x08003079
 80030d0:	0800321d 	.word	0x0800321d
 80030d4:	08003079 	.word	0x08003079
 80030d8:	08003127 	.word	0x08003127
 80030dc:	08003079 	.word	0x08003079
 80030e0:	08003079 	.word	0x08003079
 80030e4:	080031bd 	.word	0x080031bd
 80030e8:	6833      	ldr	r3, [r6, #0]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6032      	str	r2, [r6, #0]
 80030f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80030f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80030f8:	2301      	movs	r3, #1
 80030fa:	e09c      	b.n	8003236 <_printf_i+0x1e6>
 80030fc:	6833      	ldr	r3, [r6, #0]
 80030fe:	6820      	ldr	r0, [r4, #0]
 8003100:	1d19      	adds	r1, r3, #4
 8003102:	6031      	str	r1, [r6, #0]
 8003104:	0606      	lsls	r6, r0, #24
 8003106:	d501      	bpl.n	800310c <_printf_i+0xbc>
 8003108:	681d      	ldr	r5, [r3, #0]
 800310a:	e003      	b.n	8003114 <_printf_i+0xc4>
 800310c:	0645      	lsls	r5, r0, #25
 800310e:	d5fb      	bpl.n	8003108 <_printf_i+0xb8>
 8003110:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003114:	2d00      	cmp	r5, #0
 8003116:	da03      	bge.n	8003120 <_printf_i+0xd0>
 8003118:	232d      	movs	r3, #45	@ 0x2d
 800311a:	426d      	negs	r5, r5
 800311c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003120:	230a      	movs	r3, #10
 8003122:	4858      	ldr	r0, [pc, #352]	@ (8003284 <_printf_i+0x234>)
 8003124:	e011      	b.n	800314a <_printf_i+0xfa>
 8003126:	6821      	ldr	r1, [r4, #0]
 8003128:	6833      	ldr	r3, [r6, #0]
 800312a:	0608      	lsls	r0, r1, #24
 800312c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003130:	d402      	bmi.n	8003138 <_printf_i+0xe8>
 8003132:	0649      	lsls	r1, r1, #25
 8003134:	bf48      	it	mi
 8003136:	b2ad      	uxthmi	r5, r5
 8003138:	2f6f      	cmp	r7, #111	@ 0x6f
 800313a:	6033      	str	r3, [r6, #0]
 800313c:	bf14      	ite	ne
 800313e:	230a      	movne	r3, #10
 8003140:	2308      	moveq	r3, #8
 8003142:	4850      	ldr	r0, [pc, #320]	@ (8003284 <_printf_i+0x234>)
 8003144:	2100      	movs	r1, #0
 8003146:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800314a:	6866      	ldr	r6, [r4, #4]
 800314c:	2e00      	cmp	r6, #0
 800314e:	60a6      	str	r6, [r4, #8]
 8003150:	db05      	blt.n	800315e <_printf_i+0x10e>
 8003152:	6821      	ldr	r1, [r4, #0]
 8003154:	432e      	orrs	r6, r5
 8003156:	f021 0104 	bic.w	r1, r1, #4
 800315a:	6021      	str	r1, [r4, #0]
 800315c:	d04b      	beq.n	80031f6 <_printf_i+0x1a6>
 800315e:	4616      	mov	r6, r2
 8003160:	fbb5 f1f3 	udiv	r1, r5, r3
 8003164:	fb03 5711 	mls	r7, r3, r1, r5
 8003168:	5dc7      	ldrb	r7, [r0, r7]
 800316a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800316e:	462f      	mov	r7, r5
 8003170:	42bb      	cmp	r3, r7
 8003172:	460d      	mov	r5, r1
 8003174:	d9f4      	bls.n	8003160 <_printf_i+0x110>
 8003176:	2b08      	cmp	r3, #8
 8003178:	d10b      	bne.n	8003192 <_printf_i+0x142>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	07df      	lsls	r7, r3, #31
 800317e:	d508      	bpl.n	8003192 <_printf_i+0x142>
 8003180:	6923      	ldr	r3, [r4, #16]
 8003182:	6861      	ldr	r1, [r4, #4]
 8003184:	4299      	cmp	r1, r3
 8003186:	bfde      	ittt	le
 8003188:	2330      	movle	r3, #48	@ 0x30
 800318a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800318e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003192:	1b92      	subs	r2, r2, r6
 8003194:	6122      	str	r2, [r4, #16]
 8003196:	464b      	mov	r3, r9
 8003198:	4621      	mov	r1, r4
 800319a:	4640      	mov	r0, r8
 800319c:	f8cd a000 	str.w	sl, [sp]
 80031a0:	aa03      	add	r2, sp, #12
 80031a2:	f7ff fee3 	bl	8002f6c <_printf_common>
 80031a6:	3001      	adds	r0, #1
 80031a8:	d14a      	bne.n	8003240 <_printf_i+0x1f0>
 80031aa:	f04f 30ff 	mov.w	r0, #4294967295
 80031ae:	b004      	add	sp, #16
 80031b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031b4:	6823      	ldr	r3, [r4, #0]
 80031b6:	f043 0320 	orr.w	r3, r3, #32
 80031ba:	6023      	str	r3, [r4, #0]
 80031bc:	2778      	movs	r7, #120	@ 0x78
 80031be:	4832      	ldr	r0, [pc, #200]	@ (8003288 <_printf_i+0x238>)
 80031c0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	6831      	ldr	r1, [r6, #0]
 80031c8:	061f      	lsls	r7, r3, #24
 80031ca:	f851 5b04 	ldr.w	r5, [r1], #4
 80031ce:	d402      	bmi.n	80031d6 <_printf_i+0x186>
 80031d0:	065f      	lsls	r7, r3, #25
 80031d2:	bf48      	it	mi
 80031d4:	b2ad      	uxthmi	r5, r5
 80031d6:	6031      	str	r1, [r6, #0]
 80031d8:	07d9      	lsls	r1, r3, #31
 80031da:	bf44      	itt	mi
 80031dc:	f043 0320 	orrmi.w	r3, r3, #32
 80031e0:	6023      	strmi	r3, [r4, #0]
 80031e2:	b11d      	cbz	r5, 80031ec <_printf_i+0x19c>
 80031e4:	2310      	movs	r3, #16
 80031e6:	e7ad      	b.n	8003144 <_printf_i+0xf4>
 80031e8:	4826      	ldr	r0, [pc, #152]	@ (8003284 <_printf_i+0x234>)
 80031ea:	e7e9      	b.n	80031c0 <_printf_i+0x170>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	6023      	str	r3, [r4, #0]
 80031f4:	e7f6      	b.n	80031e4 <_printf_i+0x194>
 80031f6:	4616      	mov	r6, r2
 80031f8:	e7bd      	b.n	8003176 <_printf_i+0x126>
 80031fa:	6833      	ldr	r3, [r6, #0]
 80031fc:	6825      	ldr	r5, [r4, #0]
 80031fe:	1d18      	adds	r0, r3, #4
 8003200:	6961      	ldr	r1, [r4, #20]
 8003202:	6030      	str	r0, [r6, #0]
 8003204:	062e      	lsls	r6, r5, #24
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	d501      	bpl.n	800320e <_printf_i+0x1be>
 800320a:	6019      	str	r1, [r3, #0]
 800320c:	e002      	b.n	8003214 <_printf_i+0x1c4>
 800320e:	0668      	lsls	r0, r5, #25
 8003210:	d5fb      	bpl.n	800320a <_printf_i+0x1ba>
 8003212:	8019      	strh	r1, [r3, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	4616      	mov	r6, r2
 8003218:	6123      	str	r3, [r4, #16]
 800321a:	e7bc      	b.n	8003196 <_printf_i+0x146>
 800321c:	6833      	ldr	r3, [r6, #0]
 800321e:	2100      	movs	r1, #0
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	6032      	str	r2, [r6, #0]
 8003224:	681e      	ldr	r6, [r3, #0]
 8003226:	6862      	ldr	r2, [r4, #4]
 8003228:	4630      	mov	r0, r6
 800322a:	f000 f985 	bl	8003538 <memchr>
 800322e:	b108      	cbz	r0, 8003234 <_printf_i+0x1e4>
 8003230:	1b80      	subs	r0, r0, r6
 8003232:	6060      	str	r0, [r4, #4]
 8003234:	6863      	ldr	r3, [r4, #4]
 8003236:	6123      	str	r3, [r4, #16]
 8003238:	2300      	movs	r3, #0
 800323a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800323e:	e7aa      	b.n	8003196 <_printf_i+0x146>
 8003240:	4632      	mov	r2, r6
 8003242:	4649      	mov	r1, r9
 8003244:	4640      	mov	r0, r8
 8003246:	6923      	ldr	r3, [r4, #16]
 8003248:	47d0      	blx	sl
 800324a:	3001      	adds	r0, #1
 800324c:	d0ad      	beq.n	80031aa <_printf_i+0x15a>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	079b      	lsls	r3, r3, #30
 8003252:	d413      	bmi.n	800327c <_printf_i+0x22c>
 8003254:	68e0      	ldr	r0, [r4, #12]
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	4298      	cmp	r0, r3
 800325a:	bfb8      	it	lt
 800325c:	4618      	movlt	r0, r3
 800325e:	e7a6      	b.n	80031ae <_printf_i+0x15e>
 8003260:	2301      	movs	r3, #1
 8003262:	4632      	mov	r2, r6
 8003264:	4649      	mov	r1, r9
 8003266:	4640      	mov	r0, r8
 8003268:	47d0      	blx	sl
 800326a:	3001      	adds	r0, #1
 800326c:	d09d      	beq.n	80031aa <_printf_i+0x15a>
 800326e:	3501      	adds	r5, #1
 8003270:	68e3      	ldr	r3, [r4, #12]
 8003272:	9903      	ldr	r1, [sp, #12]
 8003274:	1a5b      	subs	r3, r3, r1
 8003276:	42ab      	cmp	r3, r5
 8003278:	dcf2      	bgt.n	8003260 <_printf_i+0x210>
 800327a:	e7eb      	b.n	8003254 <_printf_i+0x204>
 800327c:	2500      	movs	r5, #0
 800327e:	f104 0619 	add.w	r6, r4, #25
 8003282:	e7f5      	b.n	8003270 <_printf_i+0x220>
 8003284:	08003647 	.word	0x08003647
 8003288:	08003658 	.word	0x08003658

0800328c <__sflush_r>:
 800328c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	0716      	lsls	r6, r2, #28
 8003294:	4605      	mov	r5, r0
 8003296:	460c      	mov	r4, r1
 8003298:	d454      	bmi.n	8003344 <__sflush_r+0xb8>
 800329a:	684b      	ldr	r3, [r1, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	dc02      	bgt.n	80032a6 <__sflush_r+0x1a>
 80032a0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	dd48      	ble.n	8003338 <__sflush_r+0xac>
 80032a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032a8:	2e00      	cmp	r6, #0
 80032aa:	d045      	beq.n	8003338 <__sflush_r+0xac>
 80032ac:	2300      	movs	r3, #0
 80032ae:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80032b2:	682f      	ldr	r7, [r5, #0]
 80032b4:	6a21      	ldr	r1, [r4, #32]
 80032b6:	602b      	str	r3, [r5, #0]
 80032b8:	d030      	beq.n	800331c <__sflush_r+0x90>
 80032ba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80032bc:	89a3      	ldrh	r3, [r4, #12]
 80032be:	0759      	lsls	r1, r3, #29
 80032c0:	d505      	bpl.n	80032ce <__sflush_r+0x42>
 80032c2:	6863      	ldr	r3, [r4, #4]
 80032c4:	1ad2      	subs	r2, r2, r3
 80032c6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80032c8:	b10b      	cbz	r3, 80032ce <__sflush_r+0x42>
 80032ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80032cc:	1ad2      	subs	r2, r2, r3
 80032ce:	2300      	movs	r3, #0
 80032d0:	4628      	mov	r0, r5
 80032d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80032d4:	6a21      	ldr	r1, [r4, #32]
 80032d6:	47b0      	blx	r6
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	89a3      	ldrh	r3, [r4, #12]
 80032dc:	d106      	bne.n	80032ec <__sflush_r+0x60>
 80032de:	6829      	ldr	r1, [r5, #0]
 80032e0:	291d      	cmp	r1, #29
 80032e2:	d82b      	bhi.n	800333c <__sflush_r+0xb0>
 80032e4:	4a28      	ldr	r2, [pc, #160]	@ (8003388 <__sflush_r+0xfc>)
 80032e6:	40ca      	lsrs	r2, r1
 80032e8:	07d6      	lsls	r6, r2, #31
 80032ea:	d527      	bpl.n	800333c <__sflush_r+0xb0>
 80032ec:	2200      	movs	r2, #0
 80032ee:	6062      	str	r2, [r4, #4]
 80032f0:	6922      	ldr	r2, [r4, #16]
 80032f2:	04d9      	lsls	r1, r3, #19
 80032f4:	6022      	str	r2, [r4, #0]
 80032f6:	d504      	bpl.n	8003302 <__sflush_r+0x76>
 80032f8:	1c42      	adds	r2, r0, #1
 80032fa:	d101      	bne.n	8003300 <__sflush_r+0x74>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	b903      	cbnz	r3, 8003302 <__sflush_r+0x76>
 8003300:	6560      	str	r0, [r4, #84]	@ 0x54
 8003302:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003304:	602f      	str	r7, [r5, #0]
 8003306:	b1b9      	cbz	r1, 8003338 <__sflush_r+0xac>
 8003308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800330c:	4299      	cmp	r1, r3
 800330e:	d002      	beq.n	8003316 <__sflush_r+0x8a>
 8003310:	4628      	mov	r0, r5
 8003312:	f7ff fbdd 	bl	8002ad0 <_free_r>
 8003316:	2300      	movs	r3, #0
 8003318:	6363      	str	r3, [r4, #52]	@ 0x34
 800331a:	e00d      	b.n	8003338 <__sflush_r+0xac>
 800331c:	2301      	movs	r3, #1
 800331e:	4628      	mov	r0, r5
 8003320:	47b0      	blx	r6
 8003322:	4602      	mov	r2, r0
 8003324:	1c50      	adds	r0, r2, #1
 8003326:	d1c9      	bne.n	80032bc <__sflush_r+0x30>
 8003328:	682b      	ldr	r3, [r5, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0c6      	beq.n	80032bc <__sflush_r+0x30>
 800332e:	2b1d      	cmp	r3, #29
 8003330:	d001      	beq.n	8003336 <__sflush_r+0xaa>
 8003332:	2b16      	cmp	r3, #22
 8003334:	d11d      	bne.n	8003372 <__sflush_r+0xe6>
 8003336:	602f      	str	r7, [r5, #0]
 8003338:	2000      	movs	r0, #0
 800333a:	e021      	b.n	8003380 <__sflush_r+0xf4>
 800333c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003340:	b21b      	sxth	r3, r3
 8003342:	e01a      	b.n	800337a <__sflush_r+0xee>
 8003344:	690f      	ldr	r7, [r1, #16]
 8003346:	2f00      	cmp	r7, #0
 8003348:	d0f6      	beq.n	8003338 <__sflush_r+0xac>
 800334a:	0793      	lsls	r3, r2, #30
 800334c:	bf18      	it	ne
 800334e:	2300      	movne	r3, #0
 8003350:	680e      	ldr	r6, [r1, #0]
 8003352:	bf08      	it	eq
 8003354:	694b      	ldreq	r3, [r1, #20]
 8003356:	1bf6      	subs	r6, r6, r7
 8003358:	600f      	str	r7, [r1, #0]
 800335a:	608b      	str	r3, [r1, #8]
 800335c:	2e00      	cmp	r6, #0
 800335e:	ddeb      	ble.n	8003338 <__sflush_r+0xac>
 8003360:	4633      	mov	r3, r6
 8003362:	463a      	mov	r2, r7
 8003364:	4628      	mov	r0, r5
 8003366:	6a21      	ldr	r1, [r4, #32]
 8003368:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800336c:	47e0      	blx	ip
 800336e:	2800      	cmp	r0, #0
 8003370:	dc07      	bgt.n	8003382 <__sflush_r+0xf6>
 8003372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003376:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800337a:	f04f 30ff 	mov.w	r0, #4294967295
 800337e:	81a3      	strh	r3, [r4, #12]
 8003380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003382:	4407      	add	r7, r0
 8003384:	1a36      	subs	r6, r6, r0
 8003386:	e7e9      	b.n	800335c <__sflush_r+0xd0>
 8003388:	20400001 	.word	0x20400001

0800338c <_fflush_r>:
 800338c:	b538      	push	{r3, r4, r5, lr}
 800338e:	690b      	ldr	r3, [r1, #16]
 8003390:	4605      	mov	r5, r0
 8003392:	460c      	mov	r4, r1
 8003394:	b913      	cbnz	r3, 800339c <_fflush_r+0x10>
 8003396:	2500      	movs	r5, #0
 8003398:	4628      	mov	r0, r5
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	b118      	cbz	r0, 80033a6 <_fflush_r+0x1a>
 800339e:	6a03      	ldr	r3, [r0, #32]
 80033a0:	b90b      	cbnz	r3, 80033a6 <_fflush_r+0x1a>
 80033a2:	f7ff f98b 	bl	80026bc <__sinit>
 80033a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d0f3      	beq.n	8003396 <_fflush_r+0xa>
 80033ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80033b0:	07d0      	lsls	r0, r2, #31
 80033b2:	d404      	bmi.n	80033be <_fflush_r+0x32>
 80033b4:	0599      	lsls	r1, r3, #22
 80033b6:	d402      	bmi.n	80033be <_fflush_r+0x32>
 80033b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033ba:	f7ff fb86 	bl	8002aca <__retarget_lock_acquire_recursive>
 80033be:	4628      	mov	r0, r5
 80033c0:	4621      	mov	r1, r4
 80033c2:	f7ff ff63 	bl	800328c <__sflush_r>
 80033c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80033c8:	4605      	mov	r5, r0
 80033ca:	07da      	lsls	r2, r3, #31
 80033cc:	d4e4      	bmi.n	8003398 <_fflush_r+0xc>
 80033ce:	89a3      	ldrh	r3, [r4, #12]
 80033d0:	059b      	lsls	r3, r3, #22
 80033d2:	d4e1      	bmi.n	8003398 <_fflush_r+0xc>
 80033d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80033d6:	f7ff fb79 	bl	8002acc <__retarget_lock_release_recursive>
 80033da:	e7dd      	b.n	8003398 <_fflush_r+0xc>

080033dc <__swhatbuf_r>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	460c      	mov	r4, r1
 80033e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033e4:	4615      	mov	r5, r2
 80033e6:	2900      	cmp	r1, #0
 80033e8:	461e      	mov	r6, r3
 80033ea:	b096      	sub	sp, #88	@ 0x58
 80033ec:	da0c      	bge.n	8003408 <__swhatbuf_r+0x2c>
 80033ee:	89a3      	ldrh	r3, [r4, #12]
 80033f0:	2100      	movs	r1, #0
 80033f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80033f6:	bf14      	ite	ne
 80033f8:	2340      	movne	r3, #64	@ 0x40
 80033fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80033fe:	2000      	movs	r0, #0
 8003400:	6031      	str	r1, [r6, #0]
 8003402:	602b      	str	r3, [r5, #0]
 8003404:	b016      	add	sp, #88	@ 0x58
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	466a      	mov	r2, sp
 800340a:	f000 f863 	bl	80034d4 <_fstat_r>
 800340e:	2800      	cmp	r0, #0
 8003410:	dbed      	blt.n	80033ee <__swhatbuf_r+0x12>
 8003412:	9901      	ldr	r1, [sp, #4]
 8003414:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003418:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800341c:	4259      	negs	r1, r3
 800341e:	4159      	adcs	r1, r3
 8003420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003424:	e7eb      	b.n	80033fe <__swhatbuf_r+0x22>

08003426 <__smakebuf_r>:
 8003426:	898b      	ldrh	r3, [r1, #12]
 8003428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800342a:	079d      	lsls	r5, r3, #30
 800342c:	4606      	mov	r6, r0
 800342e:	460c      	mov	r4, r1
 8003430:	d507      	bpl.n	8003442 <__smakebuf_r+0x1c>
 8003432:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003436:	6023      	str	r3, [r4, #0]
 8003438:	6123      	str	r3, [r4, #16]
 800343a:	2301      	movs	r3, #1
 800343c:	6163      	str	r3, [r4, #20]
 800343e:	b003      	add	sp, #12
 8003440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003442:	466a      	mov	r2, sp
 8003444:	ab01      	add	r3, sp, #4
 8003446:	f7ff ffc9 	bl	80033dc <__swhatbuf_r>
 800344a:	9f00      	ldr	r7, [sp, #0]
 800344c:	4605      	mov	r5, r0
 800344e:	4639      	mov	r1, r7
 8003450:	4630      	mov	r0, r6
 8003452:	f7ff fba7 	bl	8002ba4 <_malloc_r>
 8003456:	b948      	cbnz	r0, 800346c <__smakebuf_r+0x46>
 8003458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800345c:	059a      	lsls	r2, r3, #22
 800345e:	d4ee      	bmi.n	800343e <__smakebuf_r+0x18>
 8003460:	f023 0303 	bic.w	r3, r3, #3
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	81a3      	strh	r3, [r4, #12]
 800346a:	e7e2      	b.n	8003432 <__smakebuf_r+0xc>
 800346c:	89a3      	ldrh	r3, [r4, #12]
 800346e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003476:	81a3      	strh	r3, [r4, #12]
 8003478:	9b01      	ldr	r3, [sp, #4]
 800347a:	6020      	str	r0, [r4, #0]
 800347c:	b15b      	cbz	r3, 8003496 <__smakebuf_r+0x70>
 800347e:	4630      	mov	r0, r6
 8003480:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003484:	f000 f838 	bl	80034f8 <_isatty_r>
 8003488:	b128      	cbz	r0, 8003496 <__smakebuf_r+0x70>
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	f023 0303 	bic.w	r3, r3, #3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	431d      	orrs	r5, r3
 800349a:	81a5      	strh	r5, [r4, #12]
 800349c:	e7cf      	b.n	800343e <__smakebuf_r+0x18>

0800349e <memmove>:
 800349e:	4288      	cmp	r0, r1
 80034a0:	b510      	push	{r4, lr}
 80034a2:	eb01 0402 	add.w	r4, r1, r2
 80034a6:	d902      	bls.n	80034ae <memmove+0x10>
 80034a8:	4284      	cmp	r4, r0
 80034aa:	4623      	mov	r3, r4
 80034ac:	d807      	bhi.n	80034be <memmove+0x20>
 80034ae:	1e43      	subs	r3, r0, #1
 80034b0:	42a1      	cmp	r1, r4
 80034b2:	d008      	beq.n	80034c6 <memmove+0x28>
 80034b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80034bc:	e7f8      	b.n	80034b0 <memmove+0x12>
 80034be:	4601      	mov	r1, r0
 80034c0:	4402      	add	r2, r0
 80034c2:	428a      	cmp	r2, r1
 80034c4:	d100      	bne.n	80034c8 <memmove+0x2a>
 80034c6:	bd10      	pop	{r4, pc}
 80034c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80034d0:	e7f7      	b.n	80034c2 <memmove+0x24>
	...

080034d4 <_fstat_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	2300      	movs	r3, #0
 80034d8:	4d06      	ldr	r5, [pc, #24]	@ (80034f4 <_fstat_r+0x20>)
 80034da:	4604      	mov	r4, r0
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	602b      	str	r3, [r5, #0]
 80034e2:	f7fd f94d 	bl	8000780 <_fstat>
 80034e6:	1c43      	adds	r3, r0, #1
 80034e8:	d102      	bne.n	80034f0 <_fstat_r+0x1c>
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	b103      	cbz	r3, 80034f0 <_fstat_r+0x1c>
 80034ee:	6023      	str	r3, [r4, #0]
 80034f0:	bd38      	pop	{r3, r4, r5, pc}
 80034f2:	bf00      	nop
 80034f4:	200002ec 	.word	0x200002ec

080034f8 <_isatty_r>:
 80034f8:	b538      	push	{r3, r4, r5, lr}
 80034fa:	2300      	movs	r3, #0
 80034fc:	4d05      	ldr	r5, [pc, #20]	@ (8003514 <_isatty_r+0x1c>)
 80034fe:	4604      	mov	r4, r0
 8003500:	4608      	mov	r0, r1
 8003502:	602b      	str	r3, [r5, #0]
 8003504:	f7fd f94b 	bl	800079e <_isatty>
 8003508:	1c43      	adds	r3, r0, #1
 800350a:	d102      	bne.n	8003512 <_isatty_r+0x1a>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	b103      	cbz	r3, 8003512 <_isatty_r+0x1a>
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	bd38      	pop	{r3, r4, r5, pc}
 8003514:	200002ec 	.word	0x200002ec

08003518 <_sbrk_r>:
 8003518:	b538      	push	{r3, r4, r5, lr}
 800351a:	2300      	movs	r3, #0
 800351c:	4d05      	ldr	r5, [pc, #20]	@ (8003534 <_sbrk_r+0x1c>)
 800351e:	4604      	mov	r4, r0
 8003520:	4608      	mov	r0, r1
 8003522:	602b      	str	r3, [r5, #0]
 8003524:	f7fd f952 	bl	80007cc <_sbrk>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_sbrk_r+0x1a>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_sbrk_r+0x1a>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	200002ec 	.word	0x200002ec

08003538 <memchr>:
 8003538:	4603      	mov	r3, r0
 800353a:	b510      	push	{r4, lr}
 800353c:	b2c9      	uxtb	r1, r1
 800353e:	4402      	add	r2, r0
 8003540:	4293      	cmp	r3, r2
 8003542:	4618      	mov	r0, r3
 8003544:	d101      	bne.n	800354a <memchr+0x12>
 8003546:	2000      	movs	r0, #0
 8003548:	e003      	b.n	8003552 <memchr+0x1a>
 800354a:	7804      	ldrb	r4, [r0, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	428c      	cmp	r4, r1
 8003550:	d1f6      	bne.n	8003540 <memchr+0x8>
 8003552:	bd10      	pop	{r4, pc}

08003554 <memcpy>:
 8003554:	440a      	add	r2, r1
 8003556:	4291      	cmp	r1, r2
 8003558:	f100 33ff 	add.w	r3, r0, #4294967295
 800355c:	d100      	bne.n	8003560 <memcpy+0xc>
 800355e:	4770      	bx	lr
 8003560:	b510      	push	{r4, lr}
 8003562:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003566:	4291      	cmp	r1, r2
 8003568:	f803 4f01 	strb.w	r4, [r3, #1]!
 800356c:	d1f9      	bne.n	8003562 <memcpy+0xe>
 800356e:	bd10      	pop	{r4, pc}

08003570 <_realloc_r>:
 8003570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003574:	4607      	mov	r7, r0
 8003576:	4614      	mov	r4, r2
 8003578:	460d      	mov	r5, r1
 800357a:	b921      	cbnz	r1, 8003586 <_realloc_r+0x16>
 800357c:	4611      	mov	r1, r2
 800357e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003582:	f7ff bb0f 	b.w	8002ba4 <_malloc_r>
 8003586:	b92a      	cbnz	r2, 8003594 <_realloc_r+0x24>
 8003588:	f7ff faa2 	bl	8002ad0 <_free_r>
 800358c:	4625      	mov	r5, r4
 800358e:	4628      	mov	r0, r5
 8003590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003594:	f000 f81a 	bl	80035cc <_malloc_usable_size_r>
 8003598:	4284      	cmp	r4, r0
 800359a:	4606      	mov	r6, r0
 800359c:	d802      	bhi.n	80035a4 <_realloc_r+0x34>
 800359e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80035a2:	d8f4      	bhi.n	800358e <_realloc_r+0x1e>
 80035a4:	4621      	mov	r1, r4
 80035a6:	4638      	mov	r0, r7
 80035a8:	f7ff fafc 	bl	8002ba4 <_malloc_r>
 80035ac:	4680      	mov	r8, r0
 80035ae:	b908      	cbnz	r0, 80035b4 <_realloc_r+0x44>
 80035b0:	4645      	mov	r5, r8
 80035b2:	e7ec      	b.n	800358e <_realloc_r+0x1e>
 80035b4:	42b4      	cmp	r4, r6
 80035b6:	4622      	mov	r2, r4
 80035b8:	4629      	mov	r1, r5
 80035ba:	bf28      	it	cs
 80035bc:	4632      	movcs	r2, r6
 80035be:	f7ff ffc9 	bl	8003554 <memcpy>
 80035c2:	4629      	mov	r1, r5
 80035c4:	4638      	mov	r0, r7
 80035c6:	f7ff fa83 	bl	8002ad0 <_free_r>
 80035ca:	e7f1      	b.n	80035b0 <_realloc_r+0x40>

080035cc <_malloc_usable_size_r>:
 80035cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035d0:	1f18      	subs	r0, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bfbc      	itt	lt
 80035d6:	580b      	ldrlt	r3, [r1, r0]
 80035d8:	18c0      	addlt	r0, r0, r3
 80035da:	4770      	bx	lr

080035dc <_init>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr

080035e8 <_fini>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr
