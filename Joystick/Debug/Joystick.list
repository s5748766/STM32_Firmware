
Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004670  08004670  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004670  08004670  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004670  08004670  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004670  08004670  00005670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004674  08004674  00005674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004678  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  080046e0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080046e0  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4cd  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002478  00000000  00000000  0001455e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000169d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b57  00000000  00000000  00017860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019406  00000000  00000000  000183b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107a5  00000000  00000000  000317bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009172d  00000000  00000000  00041f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d368f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004428  00000000  00000000  000d36d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d7afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004598 	.word	0x08004598

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004598 	.word	0x08004598

0800014c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f003 f8ae 	bl	80032c4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f003 f8a7 	bl	80032c4 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	080045b0 	.word	0x080045b0
 8000184:	20000140 	.word	0x20000140

08000188 <apply_moving_average_filter>:
 * @param  new_value: 새로운 ADC 값
 * @param  filter_buffer: 필터 버퍼 포인터
 * @retval 필터링된 값
 */
uint16_t apply_moving_average_filter(uint16_t new_value,
		uint32_t *filter_buffer) {
 8000188:	b480      	push	{r7}
 800018a:	b087      	sub	sp, #28
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	6039      	str	r1, [r7, #0]
 8000192:	80fb      	strh	r3, [r7, #6]
	static uint8_t x_init = 0, y_init = 0;
	uint32_t sum = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	617b      	str	r3, [r7, #20]

	// 필터 버퍼 구분 (X축 또는 Y축)
	if (filter_buffer == x_filter_buffer) {
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4a29      	ldr	r2, [pc, #164]	@ (8000240 <apply_moving_average_filter+0xb8>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d117      	bne.n	80001d0 <apply_moving_average_filter+0x48>
		if (!x_init) {
 80001a0:	4b28      	ldr	r3, [pc, #160]	@ (8000244 <apply_moving_average_filter+0xbc>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d12b      	bne.n	8000200 <apply_moving_average_filter+0x78>
			// 초기화: 모든 버퍼를 첫 번째 값으로 채움
			for (int i = 0; i < FILTER_SIZE; i++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	613b      	str	r3, [r7, #16]
 80001ac:	e008      	b.n	80001c0 <apply_moving_average_filter+0x38>
				filter_buffer[i] = new_value;
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	009b      	lsls	r3, r3, #2
 80001b2:	683a      	ldr	r2, [r7, #0]
 80001b4:	4413      	add	r3, r2
 80001b6:	88fa      	ldrh	r2, [r7, #6]
 80001b8:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < FILTER_SIZE; i++) {
 80001ba:	693b      	ldr	r3, [r7, #16]
 80001bc:	3301      	adds	r3, #1
 80001be:	613b      	str	r3, [r7, #16]
 80001c0:	693b      	ldr	r3, [r7, #16]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	ddf3      	ble.n	80001ae <apply_moving_average_filter+0x26>
			}
			x_init = 1;
 80001c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000244 <apply_moving_average_filter+0xbc>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	701a      	strb	r2, [r3, #0]
			return new_value;
 80001cc:	88fb      	ldrh	r3, [r7, #6]
 80001ce:	e032      	b.n	8000236 <apply_moving_average_filter+0xae>
		}
	} else {
		if (!y_init) {
 80001d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000248 <apply_moving_average_filter+0xc0>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d113      	bne.n	8000200 <apply_moving_average_filter+0x78>
			// 초기화: 모든 버퍼를 첫 번째 값으로 채움
			for (int i = 0; i < FILTER_SIZE; i++) {
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	e008      	b.n	80001f0 <apply_moving_average_filter+0x68>
				filter_buffer[i] = new_value;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	4413      	add	r3, r2
 80001e6:	88fa      	ldrh	r2, [r7, #6]
 80001e8:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < FILTER_SIZE; i++) {
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	ddf3      	ble.n	80001de <apply_moving_average_filter+0x56>
			}
			y_init = 1;
 80001f6:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <apply_moving_average_filter+0xc0>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	701a      	strb	r2, [r3, #0]
			return new_value;
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	e01a      	b.n	8000236 <apply_moving_average_filter+0xae>
		}
	}

	// 새로운 값을 버퍼에 추가
	filter_buffer[filter_index] = new_value;
 8000200:	4b12      	ldr	r3, [pc, #72]	@ (800024c <apply_moving_average_filter+0xc4>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	4413      	add	r3, r2
 800020a:	88fa      	ldrh	r2, [r7, #6]
 800020c:	601a      	str	r2, [r3, #0]

	// 평균 계산
	for (int i = 0; i < FILTER_SIZE; i++) {
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
 8000212:	e00a      	b.n	800022a <apply_moving_average_filter+0xa2>
		sum += filter_buffer[i];
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	4413      	add	r3, r2
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4413      	add	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < FILTER_SIZE; i++) {
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	3301      	adds	r3, #1
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	2b07      	cmp	r3, #7
 800022e:	ddf1      	ble.n	8000214 <apply_moving_average_filter+0x8c>
	}

	return (uint16_t) (sum / FILTER_SIZE);
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	08db      	lsrs	r3, r3, #3
 8000234:	b29b      	uxth	r3, r3
}
 8000236:	4618      	mov	r0, r3
 8000238:	371c      	adds	r7, #28
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	20000190 	.word	0x20000190
 8000244:	200001da 	.word	0x200001da
 8000248:	200001db 	.word	0x200001db
 800024c:	200001d0 	.word	0x200001d0

08000250 <convert_to_percentage>:
/**
 * @brief  ADC 값을 백분율로 변환 (-100 ~ +100)
 * @param  adc_value: ADC 값 (0 ~ 4095)
 * @retval 백분율 값
 */
int16_t convert_to_percentage(uint16_t adc_value) {
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
	// ADC 중앙값을 기준으로 -100 ~ +100으로 변환
	int16_t centered_value = (int16_t) adc_value - (ADC_MAX_VALUE / 2);
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8000260:	b29b      	uxth	r3, r3
 8000262:	81bb      	strh	r3, [r7, #12]
	int16_t percentage = (centered_value * 100) / (ADC_MAX_VALUE / 2);
 8000264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000268:	2264      	movs	r2, #100	@ 0x64
 800026a:	fb02 f303 	mul.w	r3, r2, r3
 800026e:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <convert_to_percentage+0x58>)
 8000270:	fb82 1203 	smull	r1, r2, r2, r3
 8000274:	441a      	add	r2, r3
 8000276:	1292      	asrs	r2, r2, #10
 8000278:	17db      	asrs	r3, r3, #31
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	81fb      	strh	r3, [r7, #14]

	// 범위 제한
	if (percentage > 100)
 800027e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000282:	2b64      	cmp	r3, #100	@ 0x64
 8000284:	dd01      	ble.n	800028a <convert_to_percentage+0x3a>
		percentage = 100;
 8000286:	2364      	movs	r3, #100	@ 0x64
 8000288:	81fb      	strh	r3, [r7, #14]
	if (percentage < -100)
 800028a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800028e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000292:	da02      	bge.n	800029a <convert_to_percentage+0x4a>
		percentage = -100;
 8000294:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8000298:	81fb      	strh	r3, [r7, #14]

	return percentage;
 800029a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	80100201 	.word	0x80100201

080002ac <process_joystick_data>:
/**
 * @brief  조이스틱 데이터 처리
 * @param  None
 * @retval None
 */
void process_joystick_data(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	// 원시 ADC 값 읽기
	joystick_x_raw = adc_buffer[0];  // ADC Channel 0 (PA0)
 80002b0:	4b1e      	ldr	r3, [pc, #120]	@ (800032c <process_joystick_data+0x80>)
 80002b2:	881a      	ldrh	r2, [r3, #0]
 80002b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <process_joystick_data+0x84>)
 80002b6:	801a      	strh	r2, [r3, #0]
	joystick_y_raw = adc_buffer[1];  // ADC Channel 1 (PA1)
 80002b8:	4b1c      	ldr	r3, [pc, #112]	@ (800032c <process_joystick_data+0x80>)
 80002ba:	885a      	ldrh	r2, [r3, #2]
 80002bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000334 <process_joystick_data+0x88>)
 80002be:	801a      	strh	r2, [r3, #0]

	// 이동평균 필터 적용
	joystick_x_filtered = apply_moving_average_filter(joystick_x_raw,
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <process_joystick_data+0x84>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	491c      	ldr	r1, [pc, #112]	@ (8000338 <process_joystick_data+0x8c>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff5e 	bl	8000188 <apply_moving_average_filter>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <process_joystick_data+0x90>)
 80002d2:	801a      	strh	r2, [r3, #0]
			x_filter_buffer);
	joystick_y_filtered = apply_moving_average_filter(joystick_y_raw,
 80002d4:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <process_joystick_data+0x88>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	4919      	ldr	r1, [pc, #100]	@ (8000340 <process_joystick_data+0x94>)
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff54 	bl	8000188 <apply_moving_average_filter>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <process_joystick_data+0x98>)
 80002e6:	801a      	strh	r2, [r3, #0]
			y_filter_buffer);

	// 필터 인덱스 업데이트 (두 축 공통 사용)
	filter_index = (filter_index + 1) % FILTER_SIZE;
 80002e8:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <process_joystick_data+0x9c>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	425a      	negs	r2, r3
 80002f0:	f003 0307 	and.w	r3, r3, #7
 80002f4:	f002 0207 	and.w	r2, r2, #7
 80002f8:	bf58      	it	pl
 80002fa:	4253      	negpl	r3, r2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <process_joystick_data+0x9c>)
 8000300:	701a      	strb	r2, [r3, #0]

	// 백분율로 변환
	joystick_x_percent = convert_to_percentage(joystick_x_filtered);
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <process_joystick_data+0x90>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ffa2 	bl	8000250 <convert_to_percentage>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <process_joystick_data+0xa0>)
 8000312:	801a      	strh	r2, [r3, #0]
	joystick_y_percent = convert_to_percentage(joystick_y_filtered);
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <process_joystick_data+0x98>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff99 	bl	8000250 <convert_to_percentage>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <process_joystick_data+0xa4>)
 8000324:	801a      	strh	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000188 	.word	0x20000188
 8000330:	2000018c 	.word	0x2000018c
 8000334:	2000018e 	.word	0x2000018e
 8000338:	20000190 	.word	0x20000190
 800033c:	200001d2 	.word	0x200001d2
 8000340:	200001b0 	.word	0x200001b0
 8000344:	200001d4 	.word	0x200001d4
 8000348:	200001d0 	.word	0x200001d0
 800034c:	200001d6 	.word	0x200001d6
 8000350:	200001d8 	.word	0x200001d8

08000354 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief  타이머 콜백 함수 (주기적 ADC 읽기용)
 * @param  htim: 타이머 핸들
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af02      	add	r7, sp, #8
 800035a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000364:	d113      	bne.n	800038e <HAL_TIM_PeriodElapsedCallback+0x3a>
		// 조이스틱 데이터 처리
		process_joystick_data();
 8000366:	f7ff ffa1 	bl	80002ac <process_joystick_data>

		// UART로 데이터 출력 (디버깅용)
		printf("X: %d%% (%d), Y: %d%% (%d)\n", joystick_x_percent,
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800036c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000370:	4619      	mov	r1, r3
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	461a      	mov	r2, r3
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800037a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800037e:	4618      	mov	r0, r3
 8000380:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	4603      	mov	r3, r0
 8000388:	4807      	ldr	r0, [pc, #28]	@ (80003a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800038a:	f003 fa31 	bl	80037f0 <iprintf>
				joystick_x_filtered, joystick_y_percent, joystick_y_filtered);
	}
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200001d6 	.word	0x200001d6
 800039c:	200001d2 	.word	0x200001d2
 80003a0:	200001d8 	.word	0x200001d8
 80003a4:	200001d4 	.word	0x200001d4
 80003a8:	080045b4 	.word	0x080045b4

080003ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003b0:	f000 fc10 	bl	8000bd4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003b4:	f000 f834 	bl	8000420 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003b8:	f000 f96e 	bl	8000698 <MX_GPIO_Init>
	MX_DMA_Init();
 80003bc:	f000 f94e 	bl	800065c <MX_DMA_Init>
	MX_USART2_UART_Init();
 80003c0:	f000 f922 	bl	8000608 <MX_USART2_UART_Init>
	MX_ADC1_Init();
 80003c4:	f000 f884 	bl	80004d0 <MX_ADC1_Init>
	MX_TIM2_Init();
 80003c8:	f000 f8d0 	bl	800056c <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 80003cc:	480f      	ldr	r0, [pc, #60]	@ (800040c <main+0x60>)
 80003ce:	f001 fa0f 	bl	80017f0 <HAL_DMA_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <main+0x30>
		Error_Handler();
 80003d8:	f000 f9cc 	bl	8000774 <Error_Handler>
	}

	// ADC1 핸들과 DMA 링크
	__HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <main+0x64>)
 80003de:	4a0b      	ldr	r2, [pc, #44]	@ (800040c <main+0x60>)
 80003e0:	621a      	str	r2, [r3, #32]
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <main+0x60>)
 80003e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <main+0x64>)
 80003e6:	625a      	str	r2, [r3, #36]	@ 0x24

	// ADC 캘리브레이션
	HAL_ADCEx_Calibration_Start(&hadc1);
 80003e8:	4809      	ldr	r0, [pc, #36]	@ (8000410 <main+0x64>)
 80003ea:	f001 f845 	bl	8001478 <HAL_ADCEx_Calibration_Start>

	// DMA를 사용한 연속 ADC 변환 시작
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_BUFFER_SIZE);
 80003ee:	2202      	movs	r2, #2
 80003f0:	4908      	ldr	r1, [pc, #32]	@ (8000414 <main+0x68>)
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <main+0x64>)
 80003f4:	f000 fd4c 	bl	8000e90 <HAL_ADC_Start_DMA>

	// 타이머 시작 (50ms 주기로 데이터 처리)
	HAL_TIM_Base_Start_IT(&htim2);
 80003f8:	4807      	ldr	r0, [pc, #28]	@ (8000418 <main+0x6c>)
 80003fa:	f002 fb71 	bl	8002ae0 <HAL_TIM_Base_Start_IT>

	// 시작 메시지
	printf("STM32F103 조이스틱 ADC 읽기 시작\n");
 80003fe:	4807      	ldr	r0, [pc, #28]	@ (800041c <main+0x70>)
 8000400:	f003 fa5e 	bl	80038c0 <puts>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_Delay(10);  // 메인 루프 딜레이
 8000404:	200a      	movs	r0, #10
 8000406:	f000 fc47 	bl	8000c98 <HAL_Delay>
 800040a:	e7fb      	b.n	8000404 <main+0x58>
 800040c:	200000b4 	.word	0x200000b4
 8000410:	20000084 	.word	0x20000084
 8000414:	20000188 	.word	0x20000188
 8000418:	200000f8 	.word	0x200000f8
 800041c:	080045d0 	.word	0x080045d0

08000420 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b094      	sub	sp, #80	@ 0x50
 8000424:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800042a:	2228      	movs	r2, #40	@ 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fb26 	bl	8003a80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000450:	2302      	movs	r3, #2
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	2301      	movs	r3, #1
 8000456:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000458:	2310      	movs	r3, #16
 800045a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000460:	2300      	movs	r3, #0
 8000462:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000464:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000468:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800046a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fd6a 	bl	8001f48 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x5e>
		Error_Handler();
 800047a:	f000 f97b 	bl	8000774 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800048e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 ffd6 	bl	800244c <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x8a>
		Error_Handler();
 80004a6:	f000 f965 	bl	8000774 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004aa:	2302      	movs	r3, #2
 80004ac:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004b2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 f956 	bl	8002768 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xa6>
		Error_Handler();
 80004c2:	f000 f957 	bl	8000774 <Error_Handler>
	}
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	@ 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80004e0:	4b20      	ldr	r3, [pc, #128]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004e2:	4a21      	ldr	r2, [pc, #132]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004e4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004ec:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004fc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000500:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <MX_ADC1_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 2;
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <MX_ADC1_Init+0x94>)
 800050a:	2202      	movs	r2, #2
 800050c:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800050e:	4815      	ldr	r0, [pc, #84]	@ (8000564 <MX_ADC1_Init+0x94>)
 8000510:	f000 fbe6 	bl	8000ce0 <HAL_ADC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_ADC1_Init+0x4e>
		Error_Handler();
 800051a:	f000 f92b 	bl	8000774 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 800051e:	2304      	movs	r3, #4
 8000520:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000522:	2301      	movs	r3, #1
 8000524:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000526:	2307      	movs	r3, #7
 8000528:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4619      	mov	r1, r3
 800052e:	480d      	ldr	r0, [pc, #52]	@ (8000564 <MX_ADC1_Init+0x94>)
 8000530:	f000 fda8 	bl	8001084 <HAL_ADC_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ADC1_Init+0x6e>
		Error_Handler();
 800053a:	f000 f91b 	bl	8000774 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800053e:	2308      	movs	r3, #8
 8000540:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000542:	2302      	movs	r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	@ (8000564 <MX_ADC1_Init+0x94>)
 800054c:	f000 fd9a 	bl	8001084 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x8a>
		Error_Handler();
 8000556:	f000 f90d 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000084 	.word	0x20000084
 8000568:	40012400 	.word	0x40012400

0800056c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000588:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <MX_TIM2_Init+0x98>)
 800058a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 6400 - 1;
 8000590:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <MX_TIM2_Init+0x98>)
 8000592:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000596:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_TIM2_Init+0x98>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 500 - 1;
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005a0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80005a4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80005b2:	4814      	ldr	r0, [pc, #80]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005b4:	f002 fa44 	bl	8002a40 <HAL_TIM_Base_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x56>
		Error_Handler();
 80005be:	f000 f8d9 	bl	8000774 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005d0:	f002 fbc8 	bl	8002d64 <HAL_TIM_ConfigClockSource>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM2_Init+0x72>
		Error_Handler();
 80005da:	f000 f8cb 	bl	8000774 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005ec:	f002 fdaa 	bl	8003144 <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 80005f6:	f000 f8bd 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000f8 	.word	0x200000f8

08000608 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f002 fdf0 	bl	8003224 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800064a:	f000 f893 	bl	8000774 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000140 	.word	0x20000140
 8000658:	40004400 	.word	0x40004400

0800065c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_DMA_Init+0x38>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <MX_DMA_Init+0x38>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_DMA_Init+0x38>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	200b      	movs	r0, #11
 8000680:	f001 f87f 	bl	8001782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000684:	200b      	movs	r0, #11
 8000686:	f001 f898 	bl	80017ba <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_GPIO_Init+0xcc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	4815      	ldr	r0, [pc, #84]	@ (8000768 <MX_GPIO_Init+0xd0>)
 8000712:	f001 fbdf 	bl	8001ed4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_GPIO_Init+0xd4>)
 800071e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_GPIO_Init+0xd8>)
 800072c:	f001 fa4e 	bl	8001bcc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4808      	ldr	r0, [pc, #32]	@ (8000768 <MX_GPIO_Init+0xd0>)
 8000748:	f001 fa40 	bl	8001bcc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2028      	movs	r0, #40	@ 0x28
 8000752:	f001 f816 	bl	8001782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000756:	2028      	movs	r0, #40	@ 0x28
 8000758:	f001 f82f 	bl	80017ba <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40010800 	.word	0x40010800
 800076c:	10110000 	.word	0x10110000
 8000770:	40011000 	.word	0x40011000

08000774 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_MspInit+0x5c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <HAL_MspInit+0x5c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x5c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_MspInit+0x5c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_MspInit+0x60>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_MspInit+0x60>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010000 	.word	0x40010000

080007e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0318 	add.w	r3, r7, #24
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a34      	ldr	r2, [pc, #208]	@ (80008d0 <HAL_ADC_MspInit+0xec>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d160      	bne.n	80008c6 <HAL_ADC_MspInit+0xe2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000804:	4b33      	ldr	r3, [pc, #204]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a32      	ldr	r2, [pc, #200]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 800080a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b30      	ldr	r3, [pc, #192]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a2c      	ldr	r2, [pc, #176]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a26      	ldr	r2, [pc, #152]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 800083a:	f043 0308 	orr.w	r3, r3, #8
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <HAL_ADC_MspInit+0xf0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f003 0308 	and.w	r3, r3, #8
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800084c:	2310      	movs	r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	2303      	movs	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	4619      	mov	r1, r3
 800085a:	481f      	ldr	r0, [pc, #124]	@ (80008d8 <HAL_ADC_MspInit+0xf4>)
 800085c:	f001 f9b6 	bl	8001bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000860:	2301      	movs	r3, #1
 8000862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000864:	2303      	movs	r3, #3
 8000866:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4619      	mov	r1, r3
 800086e:	481b      	ldr	r0, [pc, #108]	@ (80008dc <HAL_ADC_MspInit+0xf8>)
 8000870:	f001 f9ac 	bl	8001bcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000874:	4b1a      	ldr	r3, [pc, #104]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 8000876:	4a1b      	ldr	r2, [pc, #108]	@ (80008e4 <HAL_ADC_MspInit+0x100>)
 8000878:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000880:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000886:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800088c:	4b14      	ldr	r3, [pc, #80]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 800088e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000892:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 8000896:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800089a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 800089e:	2220      	movs	r2, #32
 80008a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 80008a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80008aa:	480d      	ldr	r0, [pc, #52]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 80008ac:	f000 ffa0 	bl	80017f0 <HAL_DMA_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 80008b6:	f7ff ff5d 	bl	8000774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 80008be:	621a      	str	r2, [r3, #32]
 80008c0:	4a07      	ldr	r2, [pc, #28]	@ (80008e0 <HAL_ADC_MspInit+0xfc>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008c6:	bf00      	nop
 80008c8:	3728      	adds	r7, #40	@ 0x28
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40012400 	.word	0x40012400
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	200000b4 	.word	0x200000b4
 80008e4:	40020008 	.word	0x40020008

080008e8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008f8:	d113      	bne.n	8000922 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <HAL_TIM_Base_MspInit+0x44>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <HAL_TIM_Base_MspInit+0x44>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <HAL_TIM_Base_MspInit+0x44>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	201c      	movs	r0, #28
 8000918:	f000 ff33 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800091c:	201c      	movs	r0, #28
 800091e:	f000 ff4c 	bl	80017ba <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000

08000930 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000938:	f107 0310 	add.w	r3, r7, #16
 800093c:	2200      	movs	r2, #0
 800093e:	601a      	str	r2, [r3, #0]
 8000940:	605a      	str	r2, [r3, #4]
 8000942:	609a      	str	r2, [r3, #8]
 8000944:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a15      	ldr	r2, [pc, #84]	@ (80009a0 <HAL_UART_MspInit+0x70>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d123      	bne.n	8000998 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000950:	4b14      	ldr	r3, [pc, #80]	@ (80009a4 <HAL_UART_MspInit+0x74>)
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	4a13      	ldr	r2, [pc, #76]	@ (80009a4 <HAL_UART_MspInit+0x74>)
 8000956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800095a:	61d3      	str	r3, [r2, #28]
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <HAL_UART_MspInit+0x74>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <HAL_UART_MspInit+0x74>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <HAL_UART_MspInit+0x74>)
 800096e:	f043 0304 	orr.w	r3, r3, #4
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_UART_MspInit+0x74>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000980:	230c      	movs	r3, #12
 8000982:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2302      	movs	r3, #2
 800098a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098c:	f107 0310 	add.w	r3, r7, #16
 8000990:	4619      	mov	r1, r3
 8000992:	4805      	ldr	r0, [pc, #20]	@ (80009a8 <HAL_UART_MspInit+0x78>)
 8000994:	f001 f91a 	bl	8001bcc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800

080009ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <NMI_Handler+0x4>

080009b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <MemManage_Handler+0x4>

080009c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <BusFault_Handler+0x4>

080009cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <UsageFault_Handler+0x4>

080009d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f930 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <DMA1_Channel1_IRQHandler+0x10>)
 8000a0a:	f000 ffab 	bl	8001964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000b4 	.word	0x200000b4

08000a18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a1c:	4802      	ldr	r0, [pc, #8]	@ (8000a28 <TIM2_IRQHandler+0x10>)
 8000a1e:	f002 f8b1 	bl	8002b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	200000f8 	.word	0x200000f8

08000a2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a30:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a34:	f001 fa66 	bl	8001f04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
 8000a4c:	e00a      	b.n	8000a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a4e:	f3af 8000 	nop.w
 8000a52:	4601      	mov	r1, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	b2ca      	uxtb	r2, r1
 8000a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	3301      	adds	r3, #1
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dbf0      	blt.n	8000a4e <_read+0x12>
  }

  return len;
 8000a6c:	687b      	ldr	r3, [r7, #4]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b086      	sub	sp, #24
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
 8000a86:	e009      	b.n	8000a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fb5b 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	697a      	ldr	r2, [r7, #20]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	dbf1      	blt.n	8000a88 <_write+0x12>
  }
  return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <_close>:

int _close(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad6:	2300      	movs	r3, #0
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr

08000af6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f002 ffec 	bl	8003b1c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20005000 	.word	0x20005000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	200001dc 	.word	0x200001dc
 8000b78:	20000330 	.word	0x20000330

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff fff8 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b8e:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a09      	ldr	r2, [pc, #36]	@ (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba4:	4c09      	ldr	r4, [pc, #36]	@ (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 ffb9 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fbf9 	bl	80003ac <main>
  bx lr
 8000bba:	4770      	bx	lr
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bc4:	08004678 	.word	0x08004678
  ldr r2, =_sbss
 8000bc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bcc:	20000330 	.word	0x20000330

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 fdc1 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	2000      	movs	r0, #0
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fdc6 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 fdd9 	bl	80017d6 <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 fda1 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000004 	.word	0x20000004

08000c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x1c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a03      	ldr	r2, [pc, #12]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000008 	.word	0x20000008
 8000c80:	200001e0 	.word	0x200001e0

08000c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b02      	ldr	r3, [pc, #8]	@ (8000c94 <HAL_GetTick+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200001e0 	.word	0x200001e0

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff fff0 	bl	8000c84 <HAL_GetTick>
 8000ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cbe:	bf00      	nop
 8000cc0:	f7ff ffe0 	bl	8000c84 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008

08000ce0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e0be      	b.n	8000e80 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d109      	bne.n	8000d24 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f7ff fd60 	bl	80007e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 faff 	bl	8001328 <ADC_ConversionStop_Disable>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f040 8099 	bne.w	8000e6e <HAL_ADC_Init+0x18e>
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8095 	bne.w	8000e6e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d4c:	f023 0302 	bic.w	r3, r3, #2
 8000d50:	f043 0202 	orr.w	r2, r3, #2
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d60:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7b1b      	ldrb	r3, [r3, #12]
 8000d66:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d68:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_Init+0xa2>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d102      	bne.n	8000d88 <HAL_ADC_Init+0xa8>
 8000d82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d86:	e000      	b.n	8000d8a <HAL_ADC_Init+0xaa>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7d1b      	ldrb	r3, [r3, #20]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d119      	bne.n	8000dcc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7b1b      	ldrb	r3, [r3, #12]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	035a      	lsls	r2, r3, #13
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	e00b      	b.n	8000dcc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000db8:	f043 0220 	orr.w	r2, r3, #32
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc4:	f043 0201 	orr.w	r2, r3, #1
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	430a      	orrs	r2, r1
 8000dde:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	4b28      	ldr	r3, [pc, #160]	@ (8000e88 <HAL_ADC_Init+0x1a8>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	68b9      	ldr	r1, [r7, #8]
 8000df0:	430b      	orrs	r3, r1
 8000df2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dfc:	d003      	beq.n	8000e06 <HAL_ADC_Init+0x126>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d104      	bne.n	8000e10 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	051b      	lsls	r3, r3, #20
 8000e0e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e16:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_ADC_Init+0x1ac>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d10b      	bne.n	8000e4c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3e:	f023 0303 	bic.w	r3, r3, #3
 8000e42:	f043 0201 	orr.w	r2, r3, #1
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4a:	e018      	b.n	8000e7e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e50:	f023 0312 	bic.w	r3, r3, #18
 8000e54:	f043 0210 	orr.w	r2, r3, #16
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e60:	f043 0201 	orr.w	r2, r3, #1
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e6c:	e007      	b.n	8000e7e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e72:	f043 0210 	orr.w	r2, r3, #16
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	ffe1f7fd 	.word	0xffe1f7fd
 8000e8c:	ff1f0efe 	.word	0xff1f0efe

08000e90 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a64      	ldr	r2, [pc, #400]	@ (8001038 <HAL_ADC_Start_DMA+0x1a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d004      	beq.n	8000eb4 <HAL_ADC_Start_DMA+0x24>
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a63      	ldr	r2, [pc, #396]	@ (800103c <HAL_ADC_Start_DMA+0x1ac>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d106      	bne.n	8000ec2 <HAL_ADC_Start_DMA+0x32>
 8000eb4:	4b60      	ldr	r3, [pc, #384]	@ (8001038 <HAL_ADC_Start_DMA+0x1a8>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f040 80b3 	bne.w	8001028 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <HAL_ADC_Start_DMA+0x40>
 8000ecc:	2302      	movs	r3, #2
 8000ece:	e0ae      	b.n	800102e <HAL_ADC_Start_DMA+0x19e>
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ed8:	68f8      	ldr	r0, [r7, #12]
 8000eda:	f000 f9cb 	bl	8001274 <ADC_Enable>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ee2:	7dfb      	ldrb	r3, [r7, #23]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f040 809a 	bne.w	800101e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ef2:	f023 0301 	bic.w	r3, r3, #1
 8000ef6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a4e      	ldr	r2, [pc, #312]	@ (800103c <HAL_ADC_Start_DMA+0x1ac>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d105      	bne.n	8000f14 <HAL_ADC_Start_DMA+0x84>
 8000f08:	4b4b      	ldr	r3, [pc, #300]	@ (8001038 <HAL_ADC_Start_DMA+0x1a8>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d115      	bne.n	8000f40 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d026      	beq.n	8000f7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f3e:	e01d      	b.n	8000f7c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f44:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a39      	ldr	r2, [pc, #228]	@ (8001038 <HAL_ADC_Start_DMA+0x1a8>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d004      	beq.n	8000f60 <HAL_ADC_Start_DMA+0xd0>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a38      	ldr	r2, [pc, #224]	@ (800103c <HAL_ADC_Start_DMA+0x1ac>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d10d      	bne.n	8000f7c <HAL_ADC_Start_DMA+0xec>
 8000f60:	4b35      	ldr	r3, [pc, #212]	@ (8001038 <HAL_ADC_Start_DMA+0x1a8>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d007      	beq.n	8000f7c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d006      	beq.n	8000f96 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8c:	f023 0206 	bic.w	r2, r3, #6
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f94:	e002      	b.n	8000f9c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	4a25      	ldr	r2, [pc, #148]	@ (8001040 <HAL_ADC_Start_DMA+0x1b0>)
 8000faa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a1b      	ldr	r3, [r3, #32]
 8000fb0:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <HAL_ADC_Start_DMA+0x1b4>)
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a23      	ldr	r2, [pc, #140]	@ (8001048 <HAL_ADC_Start_DMA+0x1b8>)
 8000fba:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f06f 0202 	mvn.w	r2, #2
 8000fc4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fd4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a18      	ldr	r0, [r3, #32]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	334c      	adds	r3, #76	@ 0x4c
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f000 fc5d 	bl	80018a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ff4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ff8:	d108      	bne.n	800100c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001008:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800100a:	e00f      	b.n	800102c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800101a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800101c:	e006      	b.n	800102c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001026:	e001      	b.n	800102c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102c:	7dfb      	ldrb	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40012400 	.word	0x40012400
 800103c:	40012800 	.word	0x40012800
 8001040:	080013ab 	.word	0x080013ab
 8001044:	08001427 	.word	0x08001427
 8001048:	08001443 	.word	0x08001443

0800104c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr

08001070 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
	...

08001084 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800109c:	2b01      	cmp	r3, #1
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_ConfigChannel+0x20>
 80010a0:	2302      	movs	r3, #2
 80010a2:	e0dc      	b.n	800125e <HAL_ADC_ConfigChannel+0x1da>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b06      	cmp	r3, #6
 80010b2:	d81c      	bhi.n	80010ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685a      	ldr	r2, [r3, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	4413      	add	r3, r2
 80010c4:	3b05      	subs	r3, #5
 80010c6:	221f      	movs	r2, #31
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	4019      	ands	r1, r3
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	3b05      	subs	r3, #5
 80010e0:	fa00 f203 	lsl.w	r2, r0, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	430a      	orrs	r2, r1
 80010ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ec:	e03c      	b.n	8001168 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b0c      	cmp	r3, #12
 80010f4:	d81c      	bhi.n	8001130 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3b23      	subs	r3, #35	@ 0x23
 8001108:	221f      	movs	r2, #31
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	4019      	ands	r1, r3
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	3b23      	subs	r3, #35	@ 0x23
 8001122:	fa00 f203 	lsl.w	r2, r0, r3
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	631a      	str	r2, [r3, #48]	@ 0x30
 800112e:	e01b      	b.n	8001168 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685a      	ldr	r2, [r3, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	3b41      	subs	r3, #65	@ 0x41
 8001142:	221f      	movs	r2, #31
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	4019      	ands	r1, r3
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	6818      	ldr	r0, [r3, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b41      	subs	r3, #65	@ 0x41
 800115c:	fa00 f203 	lsl.w	r2, r0, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b09      	cmp	r3, #9
 800116e:	d91c      	bls.n	80011aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68d9      	ldr	r1, [r3, #12]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	3b1e      	subs	r3, #30
 8001182:	2207      	movs	r2, #7
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	4019      	ands	r1, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	4613      	mov	r3, r2
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	4413      	add	r3, r2
 800119a:	3b1e      	subs	r3, #30
 800119c:	fa00 f203 	lsl.w	r2, r0, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	e019      	b.n	80011de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	6919      	ldr	r1, [r3, #16]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4019      	ands	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6898      	ldr	r0, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	fa00 f203 	lsl.w	r2, r0, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b10      	cmp	r3, #16
 80011e4:	d003      	beq.n	80011ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ea:	2b11      	cmp	r3, #17
 80011ec:	d132      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <HAL_ADC_ConfigChannel+0x1e4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d125      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d126      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001214:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d11a      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800121e:	4b13      	ldr	r3, [pc, #76]	@ (800126c <HAL_ADC_ConfigChannel+0x1e8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <HAL_ADC_ConfigChannel+0x1ec>)
 8001224:	fba2 2303 	umull	r2, r3, r2, r3
 8001228:	0c9a      	lsrs	r2, r3, #18
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	005b      	lsls	r3, r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001234:	e002      	b.n	800123c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3b01      	subs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f9      	bne.n	8001236 <HAL_ADC_ConfigChannel+0x1b2>
 8001242:	e007      	b.n	8001254 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001248:	f043 0220 	orr.w	r2, r3, #32
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40012400 	.word	0x40012400
 800126c:	20000000 	.word	0x20000000
 8001270:	431bde83 	.word	0x431bde83

08001274 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b01      	cmp	r3, #1
 8001290:	d040      	beq.n	8001314 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f042 0201 	orr.w	r2, r2, #1
 80012a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80012a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <ADC_Enable+0xac>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a1f      	ldr	r2, [pc, #124]	@ (8001324 <ADC_Enable+0xb0>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b0:	e002      	b.n	80012b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f9      	bne.n	80012b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012be:	f7ff fce1 	bl	8000c84 <HAL_GetTick>
 80012c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012c4:	e01f      	b.n	8001306 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012c6:	f7ff fcdd 	bl	8000c84 <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d918      	bls.n	8001306 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d011      	beq.n	8001306 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e6:	f043 0210 	orr.w	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f2:	f043 0201 	orr.w	r2, r3, #1
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e007      	b.n	8001316 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b01      	cmp	r3, #1
 8001312:	d1d8      	bne.n	80012c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	431bde83 	.word	0x431bde83

08001328 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d12e      	bne.n	80013a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0201 	bic.w	r2, r2, #1
 8001350:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001352:	f7ff fc97 	bl	8000c84 <HAL_GetTick>
 8001356:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001358:	e01b      	b.n	8001392 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800135a:	f7ff fc93 	bl	8000c84 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d914      	bls.n	8001392 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b01      	cmp	r3, #1
 8001374:	d10d      	bne.n	8001392 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137a:	f043 0210 	orr.w	r2, r3, #16
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	f043 0201 	orr.w	r2, r3, #1
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e007      	b.n	80013a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b01      	cmp	r3, #1
 800139e:	d0dc      	beq.n	800135a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b084      	sub	sp, #16
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d127      	bne.n	8001414 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013da:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013de:	d115      	bne.n	800140c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d111      	bne.n	800140c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f7ff fe1d 	bl	800104c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001412:	e004      	b.n	800141e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	4798      	blx	r3
}
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b084      	sub	sp, #16
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fe12 	bl	800105e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b084      	sub	sp, #16
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001454:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f7ff fe01 	bl	8001070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001480:	2300      	movs	r3, #0
 8001482:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_ADCEx_Calibration_Start+0x1e>
 8001492:	2302      	movs	r3, #2
 8001494:	e097      	b.n	80015c6 <HAL_ADCEx_Calibration_Start+0x14e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ff42 	bl	8001328 <ADC_ConversionStop_Disable>
 80014a4:	4603      	mov	r3, r0
 80014a6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fee3 	bl	8001274 <ADC_Enable>
 80014ae:	4603      	mov	r3, r0
 80014b0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f040 8081 	bne.w	80015bc <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014be:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014c2:	f023 0302 	bic.w	r3, r3, #2
 80014c6:	f043 0202 	orr.w	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80014ce:	4b40      	ldr	r3, [pc, #256]	@ (80015d0 <HAL_ADCEx_Calibration_Start+0x158>)
 80014d0:	681c      	ldr	r4, [r3, #0]
 80014d2:	2002      	movs	r0, #2
 80014d4:	f001 f9fe 	bl	80028d4 <HAL_RCCEx_GetPeriphCLKFreq>
 80014d8:	4603      	mov	r3, r0
 80014da:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80014de:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80014e0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80014e2:	e002      	b.n	80014ea <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f042 0208 	orr.w	r2, r2, #8
 80014fe:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001500:	f7ff fbc0 	bl	8000c84 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001506:	e01b      	b.n	8001540 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001508:	f7ff fbbc 	bl	8000c84 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d914      	bls.n	8001540 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00d      	beq.n	8001540 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	f023 0312 	bic.w	r3, r3, #18
 800152c:	f043 0210 	orr.w	r2, r3, #16
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e042      	b.n	80015c6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1dc      	bne.n	8001508 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 0204 	orr.w	r2, r2, #4
 800155c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800155e:	f7ff fb91 	bl	8000c84 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001564:	e01b      	b.n	800159e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001566:	f7ff fb8d 	bl	8000c84 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b0a      	cmp	r3, #10
 8001572:	d914      	bls.n	800159e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00d      	beq.n	800159e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	f023 0312 	bic.w	r3, r3, #18
 800158a:	f043 0210 	orr.w	r2, r3, #16
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e013      	b.n	80015c6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1dc      	bne.n	8001566 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b0:	f023 0303 	bic.w	r3, r3, #3
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	371c      	adds	r7, #28
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd90      	pop	{r4, r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000000 	.word	0x20000000

080015d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ea:	68ba      	ldr	r2, [r7, #8]
 80015ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015f0:	4013      	ands	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001600:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001606:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <__NVIC_SetPriorityGrouping+0x44>)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	60d3      	str	r3, [r2, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <__NVIC_GetPriorityGrouping+0x18>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	0a1b      	lsrs	r3, r3, #8
 8001626:	f003 0307 	and.w	r3, r3, #7
}
 800162a:	4618      	mov	r0, r3
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	2b00      	cmp	r3, #0
 8001648:	db0b      	blt.n	8001662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	f003 021f 	and.w	r2, r3, #31
 8001650:	4906      	ldr	r1, [pc, #24]	@ (800166c <__NVIC_EnableIRQ+0x34>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2001      	movs	r0, #1
 800165a:	fa00 f202 	lsl.w	r2, r0, r2
 800165e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	2b00      	cmp	r3, #0
 8001682:	db0a      	blt.n	800169a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	b2da      	uxtb	r2, r3
 8001688:	490c      	ldr	r1, [pc, #48]	@ (80016bc <__NVIC_SetPriority+0x4c>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	0112      	lsls	r2, r2, #4
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	440b      	add	r3, r1
 8001694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001698:	e00a      	b.n	80016b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	4908      	ldr	r1, [pc, #32]	@ (80016c0 <__NVIC_SetPriority+0x50>)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	3b04      	subs	r3, #4
 80016a8:	0112      	lsls	r2, r2, #4
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	440b      	add	r3, r1
 80016ae:	761a      	strb	r2, [r3, #24]
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b089      	sub	sp, #36	@ 0x24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f1c3 0307 	rsb	r3, r3, #7
 80016de:	2b04      	cmp	r3, #4
 80016e0:	bf28      	it	cs
 80016e2:	2304      	movcs	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3304      	adds	r3, #4
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	d902      	bls.n	80016f4 <NVIC_EncodePriority+0x30>
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3b03      	subs	r3, #3
 80016f2:	e000      	b.n	80016f6 <NVIC_EncodePriority+0x32>
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 32ff 	mov.w	r2, #4294967295
 80016fc:	69bb      	ldr	r3, [r7, #24]
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	43da      	mvns	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	401a      	ands	r2, r3
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170c:	f04f 31ff 	mov.w	r1, #4294967295
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa01 f303 	lsl.w	r3, r1, r3
 8001716:	43d9      	mvns	r1, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	4313      	orrs	r3, r2
         );
}
 800171e:	4618      	mov	r0, r3
 8001720:	3724      	adds	r7, #36	@ 0x24
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff90 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff2d 	bl	80015d4 <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001794:	f7ff ff42 	bl	800161c <__NVIC_GetPriorityGrouping>
 8001798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68b9      	ldr	r1, [r7, #8]
 800179e:	6978      	ldr	r0, [r7, #20]
 80017a0:	f7ff ff90 	bl	80016c4 <NVIC_EncodePriority>
 80017a4:	4602      	mov	r2, r0
 80017a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ff5f 	bl	8001670 <__NVIC_SetPriority>
}
 80017b2:	bf00      	nop
 80017b4:	3718      	adds	r7, #24
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff ff35 	bl	8001638 <__NVIC_EnableIRQ>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffa2 	bl	8001728 <SysTick_Config>
 80017e4:	4603      	mov	r3, r0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e043      	b.n	800188e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	4b22      	ldr	r3, [pc, #136]	@ (8001898 <HAL_DMA_Init+0xa8>)
 800180e:	4413      	add	r3, r2
 8001810:	4a22      	ldr	r2, [pc, #136]	@ (800189c <HAL_DMA_Init+0xac>)
 8001812:	fba2 2303 	umull	r2, r3, r2, r3
 8001816:	091b      	lsrs	r3, r3, #4
 8001818:	009a      	lsls	r2, r3, #2
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1f      	ldr	r2, [pc, #124]	@ (80018a0 <HAL_DMA_Init+0xb0>)
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2202      	movs	r2, #2
 8001828:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800183a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800183e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	bffdfff8 	.word	0xbffdfff8
 800189c:	cccccccd 	.word	0xcccccccd
 80018a0:	40020000 	.word	0x40020000

080018a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
 80018b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d101      	bne.n	80018c4 <HAL_DMA_Start_IT+0x20>
 80018c0:	2302      	movs	r3, #2
 80018c2:	e04b      	b.n	800195c <HAL_DMA_Start_IT+0xb8>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d13a      	bne.n	800194e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2202      	movs	r2, #2
 80018dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0201 	bic.w	r2, r2, #1
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f000 f937 	bl	8001b70 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001906:	2b00      	cmp	r3, #0
 8001908:	d008      	beq.n	800191c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 020e 	orr.w	r2, r2, #14
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	e00f      	b.n	800193c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0204 	bic.w	r2, r2, #4
 800192a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 020a 	orr.w	r2, r2, #10
 800193a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f042 0201 	orr.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	e005      	b.n	800195a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001956:	2302      	movs	r3, #2
 8001958:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800195a:	7dfb      	ldrb	r3, [r7, #23]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	2204      	movs	r2, #4
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d04f      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xc8>
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d04a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0320 	and.w	r3, r3, #32
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d107      	bne.n	80019b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0204 	bic.w	r2, r2, #4
 80019b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a66      	ldr	r2, [pc, #408]	@ (8001b54 <HAL_DMA_IRQHandler+0x1f0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d029      	beq.n	8001a12 <HAL_DMA_IRQHandler+0xae>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a65      	ldr	r2, [pc, #404]	@ (8001b58 <HAL_DMA_IRQHandler+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <HAL_DMA_IRQHandler+0xaa>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a63      	ldr	r2, [pc, #396]	@ (8001b5c <HAL_DMA_IRQHandler+0x1f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d01a      	beq.n	8001a08 <HAL_DMA_IRQHandler+0xa4>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a62      	ldr	r2, [pc, #392]	@ (8001b60 <HAL_DMA_IRQHandler+0x1fc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d012      	beq.n	8001a02 <HAL_DMA_IRQHandler+0x9e>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a60      	ldr	r2, [pc, #384]	@ (8001b64 <HAL_DMA_IRQHandler+0x200>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00a      	beq.n	80019fc <HAL_DMA_IRQHandler+0x98>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001b68 <HAL_DMA_IRQHandler+0x204>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d102      	bne.n	80019f6 <HAL_DMA_IRQHandler+0x92>
 80019f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019f4:	e00e      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 80019f6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019fa:	e00b      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 80019fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a00:	e008      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a06:	e005      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a0c:	e002      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a0e:	2340      	movs	r3, #64	@ 0x40
 8001a10:	e000      	b.n	8001a14 <HAL_DMA_IRQHandler+0xb0>
 8001a12:	2304      	movs	r3, #4
 8001a14:	4a55      	ldr	r2, [pc, #340]	@ (8001b6c <HAL_DMA_IRQHandler+0x208>)
 8001a16:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 8094 	beq.w	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a2a:	e08e      	b.n	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a30:	2202      	movs	r2, #2
 8001a32:	409a      	lsls	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d056      	beq.n	8001aea <HAL_DMA_IRQHandler+0x186>
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d051      	beq.n	8001aea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10b      	bne.n	8001a6c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 020a 	bic.w	r2, r2, #10
 8001a62:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a38      	ldr	r2, [pc, #224]	@ (8001b54 <HAL_DMA_IRQHandler+0x1f0>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d029      	beq.n	8001aca <HAL_DMA_IRQHandler+0x166>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a37      	ldr	r2, [pc, #220]	@ (8001b58 <HAL_DMA_IRQHandler+0x1f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d022      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x162>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a35      	ldr	r2, [pc, #212]	@ (8001b5c <HAL_DMA_IRQHandler+0x1f8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01a      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x15c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a34      	ldr	r2, [pc, #208]	@ (8001b60 <HAL_DMA_IRQHandler+0x1fc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d012      	beq.n	8001aba <HAL_DMA_IRQHandler+0x156>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a32      	ldr	r2, [pc, #200]	@ (8001b64 <HAL_DMA_IRQHandler+0x200>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_DMA_IRQHandler+0x150>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a31      	ldr	r2, [pc, #196]	@ (8001b68 <HAL_DMA_IRQHandler+0x204>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d102      	bne.n	8001aae <HAL_DMA_IRQHandler+0x14a>
 8001aa8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001aac:	e00e      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ab2:	e00b      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ab8:	e008      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001aba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001abe:	e005      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac4:	e002      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001ac6:	2320      	movs	r3, #32
 8001ac8:	e000      	b.n	8001acc <HAL_DMA_IRQHandler+0x168>
 8001aca:	2302      	movs	r3, #2
 8001acc:	4a27      	ldr	r2, [pc, #156]	@ (8001b6c <HAL_DMA_IRQHandler+0x208>)
 8001ace:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d034      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ae8:	e02f      	b.n	8001b4a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	2208      	movs	r2, #8
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d028      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1e8>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d023      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 020e 	bic.w	r2, r2, #14
 8001b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d004      	beq.n	8001b4c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	4798      	blx	r3
    }
  }
  return;
 8001b4a:	bf00      	nop
 8001b4c:	bf00      	nop
}
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40020008 	.word	0x40020008
 8001b58:	4002001c 	.word	0x4002001c
 8001b5c:	40020030 	.word	0x40020030
 8001b60:	40020044 	.word	0x40020044
 8001b64:	40020058 	.word	0x40020058
 8001b68:	4002006c 	.word	0x4002006c
 8001b6c:	40020000 	.word	0x40020000

08001b70 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b86:	2101      	movs	r1, #1
 8001b88:	fa01 f202 	lsl.w	r2, r1, r2
 8001b8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b10      	cmp	r3, #16
 8001b9c:	d108      	bne.n	8001bb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bae:	e007      	b.n	8001bc0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	60da      	str	r2, [r3, #12]
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bc80      	pop	{r7}
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b08b      	sub	sp, #44	@ 0x2c
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bde:	e169      	b.n	8001eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001be0:	2201      	movs	r2, #1
 8001be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	f040 8158 	bne.w	8001eae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	4a9a      	ldr	r2, [pc, #616]	@ (8001e6c <HAL_GPIO_Init+0x2a0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d05e      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c08:	4a98      	ldr	r2, [pc, #608]	@ (8001e6c <HAL_GPIO_Init+0x2a0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d875      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c0e:	4a98      	ldr	r2, [pc, #608]	@ (8001e70 <HAL_GPIO_Init+0x2a4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d058      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c14:	4a96      	ldr	r2, [pc, #600]	@ (8001e70 <HAL_GPIO_Init+0x2a4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d86f      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c1a:	4a96      	ldr	r2, [pc, #600]	@ (8001e74 <HAL_GPIO_Init+0x2a8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d052      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c20:	4a94      	ldr	r2, [pc, #592]	@ (8001e74 <HAL_GPIO_Init+0x2a8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d869      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c26:	4a94      	ldr	r2, [pc, #592]	@ (8001e78 <HAL_GPIO_Init+0x2ac>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d04c      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c2c:	4a92      	ldr	r2, [pc, #584]	@ (8001e78 <HAL_GPIO_Init+0x2ac>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d863      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c32:	4a92      	ldr	r2, [pc, #584]	@ (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d046      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
 8001c38:	4a90      	ldr	r2, [pc, #576]	@ (8001e7c <HAL_GPIO_Init+0x2b0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d85d      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c3e:	2b12      	cmp	r3, #18
 8001c40:	d82a      	bhi.n	8001c98 <HAL_GPIO_Init+0xcc>
 8001c42:	2b12      	cmp	r3, #18
 8001c44:	d859      	bhi.n	8001cfa <HAL_GPIO_Init+0x12e>
 8001c46:	a201      	add	r2, pc, #4	@ (adr r2, 8001c4c <HAL_GPIO_Init+0x80>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001cc7 	.word	0x08001cc7
 8001c50:	08001ca1 	.word	0x08001ca1
 8001c54:	08001cb3 	.word	0x08001cb3
 8001c58:	08001cf5 	.word	0x08001cf5
 8001c5c:	08001cfb 	.word	0x08001cfb
 8001c60:	08001cfb 	.word	0x08001cfb
 8001c64:	08001cfb 	.word	0x08001cfb
 8001c68:	08001cfb 	.word	0x08001cfb
 8001c6c:	08001cfb 	.word	0x08001cfb
 8001c70:	08001cfb 	.word	0x08001cfb
 8001c74:	08001cfb 	.word	0x08001cfb
 8001c78:	08001cfb 	.word	0x08001cfb
 8001c7c:	08001cfb 	.word	0x08001cfb
 8001c80:	08001cfb 	.word	0x08001cfb
 8001c84:	08001cfb 	.word	0x08001cfb
 8001c88:	08001cfb 	.word	0x08001cfb
 8001c8c:	08001cfb 	.word	0x08001cfb
 8001c90:	08001ca9 	.word	0x08001ca9
 8001c94:	08001cbd 	.word	0x08001cbd
 8001c98:	4a79      	ldr	r2, [pc, #484]	@ (8001e80 <HAL_GPIO_Init+0x2b4>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c9e:	e02c      	b.n	8001cfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e029      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	3304      	adds	r3, #4
 8001cae:	623b      	str	r3, [r7, #32]
          break;
 8001cb0:	e024      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	3308      	adds	r3, #8
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e01f      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e01a      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d102      	bne.n	8001cd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cce:	2304      	movs	r3, #4
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e013      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cdc:	2308      	movs	r3, #8
 8001cde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	611a      	str	r2, [r3, #16]
          break;
 8001ce6:	e009      	b.n	8001cfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	615a      	str	r2, [r3, #20]
          break;
 8001cf2:	e003      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
          break;
 8001cf8:	e000      	b.n	8001cfc <HAL_GPIO_Init+0x130>
          break;
 8001cfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2bff      	cmp	r3, #255	@ 0xff
 8001d00:	d801      	bhi.n	8001d06 <HAL_GPIO_Init+0x13a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	e001      	b.n	8001d0a <HAL_GPIO_Init+0x13e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2bff      	cmp	r3, #255	@ 0xff
 8001d10:	d802      	bhi.n	8001d18 <HAL_GPIO_Init+0x14c>
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	e002      	b.n	8001d1e <HAL_GPIO_Init+0x152>
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	3b08      	subs	r3, #8
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	210f      	movs	r1, #15
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	fa01 f303 	lsl.w	r3, r1, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	401a      	ands	r2, r3
 8001d30:	6a39      	ldr	r1, [r7, #32]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80b1 	beq.w	8001eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d4c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e84 <HAL_GPIO_Init+0x2b8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a4c      	ldr	r2, [pc, #304]	@ (8001e84 <HAL_GPIO_Init+0x2b8>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b4a      	ldr	r3, [pc, #296]	@ (8001e84 <HAL_GPIO_Init+0x2b8>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d64:	4a48      	ldr	r2, [pc, #288]	@ (8001e88 <HAL_GPIO_Init+0x2bc>)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4013      	ands	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a40      	ldr	r2, [pc, #256]	@ (8001e8c <HAL_GPIO_Init+0x2c0>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d013      	beq.n	8001db8 <HAL_GPIO_Init+0x1ec>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a3f      	ldr	r2, [pc, #252]	@ (8001e90 <HAL_GPIO_Init+0x2c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d00d      	beq.n	8001db4 <HAL_GPIO_Init+0x1e8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e94 <HAL_GPIO_Init+0x2c8>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d007      	beq.n	8001db0 <HAL_GPIO_Init+0x1e4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a3d      	ldr	r2, [pc, #244]	@ (8001e98 <HAL_GPIO_Init+0x2cc>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_GPIO_Init+0x1e0>
 8001da8:	2303      	movs	r3, #3
 8001daa:	e006      	b.n	8001dba <HAL_GPIO_Init+0x1ee>
 8001dac:	2304      	movs	r3, #4
 8001dae:	e004      	b.n	8001dba <HAL_GPIO_Init+0x1ee>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e002      	b.n	8001dba <HAL_GPIO_Init+0x1ee>
 8001db4:	2301      	movs	r3, #1
 8001db6:	e000      	b.n	8001dba <HAL_GPIO_Init+0x1ee>
 8001db8:	2300      	movs	r3, #0
 8001dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dbc:	f002 0203 	and.w	r2, r2, #3
 8001dc0:	0092      	lsls	r2, r2, #2
 8001dc2:	4093      	lsls	r3, r2
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dca:	492f      	ldr	r1, [pc, #188]	@ (8001e88 <HAL_GPIO_Init+0x2bc>)
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001de4:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	492c      	ldr	r1, [pc, #176]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001df4:	689a      	ldr	r2, [r3, #8]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	4928      	ldr	r1, [pc, #160]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e0c:	4b23      	ldr	r3, [pc, #140]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4922      	ldr	r1, [pc, #136]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60cb      	str	r3, [r1, #12]
 8001e18:	e006      	b.n	8001e28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	491e      	ldr	r1, [pc, #120]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e24:	4013      	ands	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d006      	beq.n	8001e42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4918      	ldr	r1, [pc, #96]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e42:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	4914      	ldr	r1, [pc, #80]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d021      	beq.n	8001ea0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	490e      	ldr	r1, [pc, #56]	@ (8001e9c <HAL_GPIO_Init+0x2d0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	600b      	str	r3, [r1, #0]
 8001e68:	e021      	b.n	8001eae <HAL_GPIO_Init+0x2e2>
 8001e6a:	bf00      	nop
 8001e6c:	10320000 	.word	0x10320000
 8001e70:	10310000 	.word	0x10310000
 8001e74:	10220000 	.word	0x10220000
 8001e78:	10210000 	.word	0x10210000
 8001e7c:	10120000 	.word	0x10120000
 8001e80:	10110000 	.word	0x10110000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	40010800 	.word	0x40010800
 8001e90:	40010c00 	.word	0x40010c00
 8001e94:	40011000 	.word	0x40011000
 8001e98:	40011400 	.word	0x40011400
 8001e9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed0 <HAL_GPIO_Init+0x304>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	4909      	ldr	r1, [pc, #36]	@ (8001ed0 <HAL_GPIO_Init+0x304>)
 8001eaa:	4013      	ands	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eba:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f47f ae8e 	bne.w	8001be0 <HAL_GPIO_Init+0x14>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	bf00      	nop
 8001ec8:	372c      	adds	r7, #44	@ 0x2c
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	460b      	mov	r3, r1
 8001ede:	807b      	strh	r3, [r7, #2]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee4:	787b      	ldrb	r3, [r7, #1]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef0:	e003      	b.n	8001efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef2:	887b      	ldrh	r3, [r7, #2]
 8001ef4:	041a      	lsls	r2, r3, #16
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	611a      	str	r2, [r3, #16]
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f0e:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f10:	695a      	ldr	r2, [r3, #20]
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f1a:	4a05      	ldr	r2, [pc, #20]	@ (8001f30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f806 	bl	8001f34 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40010400 	.word	0x40010400

08001f34 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e272      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 8087 	beq.w	8002076 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f68:	4b92      	ldr	r3, [pc, #584]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d00c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f74:	4b8f      	ldr	r3, [pc, #572]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 030c 	and.w	r3, r3, #12
 8001f7c:	2b08      	cmp	r3, #8
 8001f7e:	d112      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
 8001f80:	4b8c      	ldr	r3, [pc, #560]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f8c:	d10b      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8e:	4b89      	ldr	r3, [pc, #548]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d06c      	beq.n	8002074 <HAL_RCC_OscConfig+0x12c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d168      	bne.n	8002074 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e24c      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x76>
 8001fb0:	4b80      	ldr	r3, [pc, #512]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7f      	ldr	r2, [pc, #508]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	e02e      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10c      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x98>
 8001fc6:	4b7b      	ldr	r3, [pc, #492]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7a      	ldr	r2, [pc, #488]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	4b78      	ldr	r3, [pc, #480]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a77      	ldr	r2, [pc, #476]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e01d      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0xbc>
 8001fea:	4b72      	ldr	r3, [pc, #456]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a71      	ldr	r2, [pc, #452]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b6f      	ldr	r3, [pc, #444]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a6e      	ldr	r2, [pc, #440]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0xd4>
 8002004:	4b6b      	ldr	r3, [pc, #428]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6a      	ldr	r2, [pc, #424]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800200a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b68      	ldr	r3, [pc, #416]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a67      	ldr	r2, [pc, #412]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002016:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800201a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002024:	f7fe fe2e 	bl	8000c84 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe fe2a 	bl	8000c84 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b64      	cmp	r3, #100	@ 0x64
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e200      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b5d      	ldr	r3, [pc, #372]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0xe4>
 800204a:	e014      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fe1a 	bl	8000c84 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7fe fe16 	bl	8000c84 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	@ 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1ec      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	4b53      	ldr	r3, [pc, #332]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x10c>
 8002072:	e000      	b.n	8002076 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d063      	beq.n	800214a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002082:	4b4c      	ldr	r3, [pc, #304]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800208e:	4b49      	ldr	r3, [pc, #292]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d11c      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
 800209a:	4b46      	ldr	r3, [pc, #280]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a6:	4b43      	ldr	r3, [pc, #268]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d005      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e1c0      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4939      	ldr	r1, [pc, #228]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	e03a      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d020      	beq.n	800211e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020dc:	4b36      	ldr	r3, [pc, #216]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fdcf 	bl	8000c84 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ea:	f7fe fdcb 	bl	8000c84 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e1a1      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	4b2d      	ldr	r3, [pc, #180]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4b2a      	ldr	r3, [pc, #168]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4927      	ldr	r1, [pc, #156]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002118:	4313      	orrs	r3, r2
 800211a:	600b      	str	r3, [r1, #0]
 800211c:	e015      	b.n	800214a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800211e:	4b26      	ldr	r3, [pc, #152]	@ (80021b8 <HAL_RCC_OscConfig+0x270>)
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7fe fdae 	bl	8000c84 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7fe fdaa 	bl	8000c84 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e180      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d03a      	beq.n	80021cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b17      	ldr	r3, [pc, #92]	@ (80021bc <HAL_RCC_OscConfig+0x274>)
 8002160:	2201      	movs	r2, #1
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe fd8e 	bl	8000c84 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fd8a 	bl	8000c84 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e160      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800218a:	2001      	movs	r0, #1
 800218c:	f000 face 	bl	800272c <RCC_Delay>
 8002190:	e01c      	b.n	80021cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b0a      	ldr	r3, [pc, #40]	@ (80021bc <HAL_RCC_OscConfig+0x274>)
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe fd74 	bl	8000c84 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219e:	e00f      	b.n	80021c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fd70 	bl	8000c84 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d908      	bls.n	80021c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e146      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	42420000 	.word	0x42420000
 80021bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b92      	ldr	r3, [pc, #584]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e9      	bne.n	80021a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a6 	beq.w	8002326 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b8b      	ldr	r3, [pc, #556]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	4b88      	ldr	r3, [pc, #544]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a87      	ldr	r2, [pc, #540]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b85      	ldr	r3, [pc, #532]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002202:	2301      	movs	r3, #1
 8002204:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002206:	4b82      	ldr	r3, [pc, #520]	@ (8002410 <HAL_RCC_OscConfig+0x4c8>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d118      	bne.n	8002244 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002212:	4b7f      	ldr	r3, [pc, #508]	@ (8002410 <HAL_RCC_OscConfig+0x4c8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a7e      	ldr	r2, [pc, #504]	@ (8002410 <HAL_RCC_OscConfig+0x4c8>)
 8002218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800221c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800221e:	f7fe fd31 	bl	8000c84 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002226:	f7fe fd2d 	bl	8000c84 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b64      	cmp	r3, #100	@ 0x64
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e103      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	4b75      	ldr	r3, [pc, #468]	@ (8002410 <HAL_RCC_OscConfig+0x4c8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x312>
 800224c:	4b6f      	ldr	r3, [pc, #444]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a6e      	ldr	r2, [pc, #440]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e02d      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x334>
 8002262:	4b6a      	ldr	r3, [pc, #424]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a69      	ldr	r2, [pc, #420]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	6213      	str	r3, [r2, #32]
 800226e:	4b67      	ldr	r3, [pc, #412]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a66      	ldr	r2, [pc, #408]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	e01c      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	2b05      	cmp	r3, #5
 8002282:	d10c      	bne.n	800229e <HAL_RCC_OscConfig+0x356>
 8002284:	4b61      	ldr	r3, [pc, #388]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	4a60      	ldr	r2, [pc, #384]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 800228a:	f043 0304 	orr.w	r3, r3, #4
 800228e:	6213      	str	r3, [r2, #32]
 8002290:	4b5e      	ldr	r3, [pc, #376]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002292:	6a1b      	ldr	r3, [r3, #32]
 8002294:	4a5d      	ldr	r2, [pc, #372]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	f043 0301 	orr.w	r3, r3, #1
 800229a:	6213      	str	r3, [r2, #32]
 800229c:	e00b      	b.n	80022b6 <HAL_RCC_OscConfig+0x36e>
 800229e:	4b5b      	ldr	r3, [pc, #364]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4a5a      	ldr	r2, [pc, #360]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	6213      	str	r3, [r2, #32]
 80022aa:	4b58      	ldr	r3, [pc, #352]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	4a57      	ldr	r2, [pc, #348]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d015      	beq.n	80022ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7fe fce1 	bl	8000c84 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fcdd 	bl	8000c84 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e0b1      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022dc:	4b4b      	ldr	r3, [pc, #300]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0ee      	beq.n	80022c6 <HAL_RCC_OscConfig+0x37e>
 80022e8:	e014      	b.n	8002314 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fccb 	bl	8000c84 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fcc7 	bl	8000c84 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e09b      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002308:	4b40      	ldr	r3, [pc, #256]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b3c      	ldr	r3, [pc, #240]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	4a3b      	ldr	r2, [pc, #236]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002324:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002330:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d061      	beq.n	8002400 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d146      	bne.n	80023d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002344:	4b33      	ldr	r3, [pc, #204]	@ (8002414 <HAL_RCC_OscConfig+0x4cc>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fc9b 	bl	8000c84 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe fc97 	bl	8000c84 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e06d      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	4b29      	ldr	r3, [pc, #164]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002378:	d108      	bne.n	800238c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237a:	4b24      	ldr	r3, [pc, #144]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4921      	ldr	r1, [pc, #132]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800238c:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a19      	ldr	r1, [r3, #32]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239c:	430b      	orrs	r3, r1
 800239e:	491b      	ldr	r1, [pc, #108]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_RCC_OscConfig+0x4cc>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fc6b 	bl	8000c84 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b2:	f7fe fc67 	bl	8000c84 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e03d      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x46a>
 80023d0:	e035      	b.n	800243e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <HAL_RCC_OscConfig+0x4cc>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d8:	f7fe fc54 	bl	8000c84 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e0:	f7fe fc50 	bl	8000c84 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e026      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f0      	bne.n	80023e0 <HAL_RCC_OscConfig+0x498>
 80023fe:	e01e      	b.n	800243e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e019      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002418:	4b0b      	ldr	r3, [pc, #44]	@ (8002448 <HAL_RCC_OscConfig+0x500>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	429a      	cmp	r2, r3
 800242a:	d106      	bne.n	800243a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0d0      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002460:	4b6a      	ldr	r3, [pc, #424]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d910      	bls.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b67      	ldr	r3, [pc, #412]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4965      	ldr	r1, [pc, #404]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a58      	ldr	r2, [pc, #352]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a52      	ldr	r2, [pc, #328]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250a:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e073      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251a:	4b3d      	ldr	r3, [pc, #244]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e06b      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b39      	ldr	r3, [pc, #228]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4936      	ldr	r1, [pc, #216]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800253c:	f7fe fba2 	bl	8000c84 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fb9e 	bl	8000c84 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e053      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b2d      	ldr	r3, [pc, #180]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800256c:	4b27      	ldr	r3, [pc, #156]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	683a      	ldr	r2, [r7, #0]
 8002576:	429a      	cmp	r2, r3
 8002578:	d210      	bcs.n	800259c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257a:	4b24      	ldr	r3, [pc, #144]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0207 	bic.w	r2, r3, #7
 8002582:	4922      	ldr	r1, [pc, #136]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	@ (8002614 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	@ (8002618 <HAL_RCC_ClockConfig+0x1cc>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	@ (800261c <HAL_RCC_ClockConfig+0x1d0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fb00 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40022000 	.word	0x40022000
 8002610:	40021000 	.word	0x40021000
 8002614:	080045fc 	.word	0x080045fc
 8002618:	20000000 	.word	0x20000000
 800261c:	20000004 	.word	0x20000004

08002620 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	b087      	sub	sp, #28
 8002624:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	2300      	movs	r3, #0
 8002634:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800263a:	4b1e      	ldr	r3, [pc, #120]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d002      	beq.n	8002650 <HAL_RCC_GetSysClockFreq+0x30>
 800264a:	2b08      	cmp	r3, #8
 800264c:	d003      	beq.n	8002656 <HAL_RCC_GetSysClockFreq+0x36>
 800264e:	e027      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002650:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002652:	613b      	str	r3, [r7, #16]
      break;
 8002654:	e027      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	0c9b      	lsrs	r3, r3, #18
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a17      	ldr	r2, [pc, #92]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d010      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	0c5b      	lsrs	r3, r3, #17
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	4a11      	ldr	r2, [pc, #68]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a0d      	ldr	r2, [pc, #52]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002682:	fb03 f202 	mul.w	r2, r3, r2
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	e004      	b.n	800269a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a0c      	ldr	r2, [pc, #48]	@ (80026c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	613b      	str	r3, [r7, #16]
      break;
 800269e:	e002      	b.n	80026a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026a0:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	613b      	str	r3, [r7, #16]
      break;
 80026a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a6:	693b      	ldr	r3, [r7, #16]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	007a1200 	.word	0x007a1200
 80026bc:	08004614 	.word	0x08004614
 80026c0:	08004624 	.word	0x08004624
 80026c4:	003d0900 	.word	0x003d0900

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026cc:	4b02      	ldr	r3, [pc, #8]	@ (80026d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr
 80026d8:	20000000 	.word	0x20000000

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026e0:	f7ff fff2 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4903      	ldr	r1, [pc, #12]	@ (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	0800460c 	.word	0x0800460c

08002704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002708:	f7ff ffde 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	@ (8002724 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0adb      	lsrs	r3, r3, #11
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	@ (8002728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	0800460c 	.word	0x0800460c

0800272c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002734:	4b0a      	ldr	r3, [pc, #40]	@ (8002760 <RCC_Delay+0x34>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <RCC_Delay+0x38>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002748:	bf00      	nop
  }
  while (Delay --);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	60fa      	str	r2, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f9      	bne.n	8002748 <RCC_Delay+0x1c>
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000000 	.word	0x20000000
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b00      	cmp	r3, #0
 8002782:	d07d      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002784:	2300      	movs	r3, #0
 8002786:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4b4f      	ldr	r3, [pc, #316]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10d      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	4b4c      	ldr	r3, [pc, #304]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4a4b      	ldr	r2, [pc, #300]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279e:	61d3      	str	r3, [r2, #28]
 80027a0:	4b49      	ldr	r3, [pc, #292]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ac:	2301      	movs	r3, #1
 80027ae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b46      	ldr	r3, [pc, #280]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d118      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027bc:	4b43      	ldr	r3, [pc, #268]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a42      	ldr	r2, [pc, #264]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c8:	f7fe fa5c 	bl	8000c84 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	e008      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7fe fa58 	bl	8000c84 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e06d      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e2:	4b3a      	ldr	r3, [pc, #232]	@ (80028cc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f0      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ee:	4b36      	ldr	r3, [pc, #216]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d02e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d027      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800280c:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002814:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002816:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002822:	4a29      	ldr	r2, [pc, #164]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d014      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002832:	f7fe fa27 	bl	8000c84 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fa23 	bl	8000c84 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e036      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b1d      	ldr	r3, [pc, #116]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800285c:	4b1a      	ldr	r3, [pc, #104]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4917      	ldr	r1, [pc, #92]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	4313      	orrs	r3, r2
 800286c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800286e:	7dfb      	ldrb	r3, [r7, #23]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800287e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	490b      	ldr	r1, [pc, #44]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028aa:	4b07      	ldr	r3, [pc, #28]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	4904      	ldr	r1, [pc, #16]	@ (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40007000 	.word	0x40007000
 80028d0:	42420440 	.word	0x42420440

080028d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	2300      	movs	r3, #0
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	2300      	movs	r3, #0
 80028e6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	2300      	movs	r3, #0
 80028ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b10      	cmp	r3, #16
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	f200 808a 	bhi.w	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d045      	beq.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d075      	beq.n	80029f6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800290a:	e082      	b.n	8002a12 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 800290c:	4b46      	ldr	r3, [pc, #280]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002912:	4b45      	ldr	r3, [pc, #276]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d07b      	beq.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0c9b      	lsrs	r3, r3, #18
 8002922:	f003 030f 	and.w	r3, r3, #15
 8002926:	4a41      	ldr	r2, [pc, #260]	@ (8002a2c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002928:	5cd3      	ldrb	r3, [r2, r3]
 800292a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d015      	beq.n	8002962 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002936:	4b3c      	ldr	r3, [pc, #240]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0c5b      	lsrs	r3, r3, #17
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	4a3b      	ldr	r2, [pc, #236]	@ (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00d      	beq.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002950:	4a38      	ldr	r2, [pc, #224]	@ (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	fbb2 f2f3 	udiv	r2, r2, r3
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	fb02 f303 	mul.w	r3, r2, r3
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	e004      	b.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	4a34      	ldr	r2, [pc, #208]	@ (8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002966:	fb02 f303 	mul.w	r3, r2, r3
 800296a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800296c:	4b2e      	ldr	r3, [pc, #184]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002974:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002978:	d102      	bne.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	61bb      	str	r3, [r7, #24]
      break;
 800297e:	e04a      	b.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4a2d      	ldr	r2, [pc, #180]	@ (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002986:	fba2 2303 	umull	r2, r3, r2, r3
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	61bb      	str	r3, [r7, #24]
      break;
 800298e:	e042      	b.n	8002a16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002990:	4b25      	ldr	r3, [pc, #148]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800299c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029a0:	d108      	bne.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80029ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	e01f      	b.n	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029be:	d109      	bne.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029c0:	4b19      	ldr	r3, [pc, #100]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80029cc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	e00f      	b.n	80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029de:	d11c      	bne.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d016      	beq.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80029ec:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80029f0:	61bb      	str	r3, [r7, #24]
      break;
 80029f2:	e012      	b.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029f4:	e011      	b.n	8002a1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029f6:	f7ff fe85 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	0b9b      	lsrs	r3, r3, #14
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	3301      	adds	r3, #1
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	61bb      	str	r3, [r7, #24]
      break;
 8002a10:	e004      	b.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a12:	bf00      	nop
 8002a14:	e002      	b.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a16:	bf00      	nop
 8002a18:	e000      	b.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a1a:	bf00      	nop
    }
  }
  return (frequency);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004628 	.word	0x08004628
 8002a30:	08004638 	.word	0x08004638
 8002a34:	007a1200 	.word	0x007a1200
 8002a38:	003d0900 	.word	0x003d0900
 8002a3c:	aaaaaaab 	.word	0xaaaaaaab

08002a40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e041      	b.n	8002ad6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7fd ff3e 	bl	80008e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2202      	movs	r2, #2
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	3304      	adds	r3, #4
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	f000 fa5c 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d001      	beq.n	8002af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e03a      	b.n	8002b6e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a18      	ldr	r2, [pc, #96]	@ (8002b78 <HAL_TIM_Base_Start_IT+0x98>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x58>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b22:	d009      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x58>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a14      	ldr	r2, [pc, #80]	@ (8002b7c <HAL_TIM_Base_Start_IT+0x9c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x58>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	@ (8002b80 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d111      	bne.n	8002b5c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d010      	beq.n	8002b6c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0201 	orr.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5a:	e007      	b.n	8002b6c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr
 8002b78:	40012c00 	.word	0x40012c00
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800

08002b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d020      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01b      	beq.n	8002be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0202 	mvn.w	r2, #2
 8002bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f998 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002bd4:	e005      	b.n	8002be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f98b 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f99a 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d020      	beq.n	8002c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d01b      	beq.n	8002c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f06f 0204 	mvn.w	r2, #4
 8002c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f972 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002c20:	e005      	b.n	8002c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f965 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f000 f974 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d020      	beq.n	8002c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01b      	beq.n	8002c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0208 	mvn.w	r2, #8
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f94c 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f93f 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f94e 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f003 0310 	and.w	r3, r3, #16
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d020      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f003 0310 	and.w	r3, r3, #16
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f06f 0210 	mvn.w	r2, #16
 8002c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f926 	bl	8002f04 <HAL_TIM_IC_CaptureCallback>
 8002cb8:	e005      	b.n	8002cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f919 	bl	8002ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f928 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0201 	mvn.w	r2, #1
 8002ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fb32 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d007      	beq.n	8002d14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fa7f 	bl	8003212 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8f8 	bl	8002f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f06f 0220 	mvn.w	r2, #32
 8002d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa52 	bl	8003200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d5c:	bf00      	nop
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_ConfigClockSource+0x1c>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0b4      	b.n	8002eea <HAL_TIM_ConfigClockSource+0x186>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002da6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db8:	d03e      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0xd4>
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dbe:	f200 8087 	bhi.w	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc6:	f000 8086 	beq.w	8002ed6 <HAL_TIM_ConfigClockSource+0x172>
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dce:	d87f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b70      	cmp	r3, #112	@ 0x70
 8002dd2:	d01a      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xa6>
 8002dd4:	2b70      	cmp	r3, #112	@ 0x70
 8002dd6:	d87b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b60      	cmp	r3, #96	@ 0x60
 8002dda:	d050      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x11a>
 8002ddc:	2b60      	cmp	r3, #96	@ 0x60
 8002dde:	d877      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b50      	cmp	r3, #80	@ 0x50
 8002de2:	d03c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xfa>
 8002de4:	2b50      	cmp	r3, #80	@ 0x50
 8002de6:	d873      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d058      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x13a>
 8002dec:	2b40      	cmp	r3, #64	@ 0x40
 8002dee:	d86f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b30      	cmp	r3, #48	@ 0x30
 8002df2:	d064      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002df4:	2b30      	cmp	r3, #48	@ 0x30
 8002df6:	d86b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d060      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d867      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d05c      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d05a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x15a>
 8002e08:	e062      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	f000 f974 	bl	8003106 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	609a      	str	r2, [r3, #8]
      break;
 8002e36:	e04f      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	f000 f95d 	bl	8003106 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e5a:	609a      	str	r2, [r3, #8]
      break;
 8002e5c:	e03c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f000 f8d4 	bl	8003018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2150      	movs	r1, #80	@ 0x50
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f92b 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e02c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f000 f8f2 	bl	8003074 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2160      	movs	r1, #96	@ 0x60
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f91b 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002e9c:	e01c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f8b4 	bl	8003018 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2140      	movs	r1, #64	@ 0x40
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f90b 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e00c      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 f902 	bl	80030d2 <TIM_ITRx_SetConfig>
      break;
 8002ece:	e003      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e000      	b.n	8002ed8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bc80      	pop	{r7}
 8002f38:	4770      	bx	lr
	...

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800300c <TIM_Base_SetConfig+0xd0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f5a:	d007      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <TIM_Base_SetConfig+0xd4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d003      	beq.n	8002f6c <TIM_Base_SetConfig+0x30>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a2b      	ldr	r2, [pc, #172]	@ (8003014 <TIM_Base_SetConfig+0xd8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a22      	ldr	r2, [pc, #136]	@ (800300c <TIM_Base_SetConfig+0xd0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00b      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f8c:	d007      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <TIM_Base_SetConfig+0xd4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <TIM_Base_SetConfig+0x62>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1e      	ldr	r2, [pc, #120]	@ (8003014 <TIM_Base_SetConfig+0xd8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d108      	bne.n	8002fb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a0d      	ldr	r2, [pc, #52]	@ (800300c <TIM_Base_SetConfig+0xd0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d103      	bne.n	8002fe4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f023 0201 	bic.w	r2, r3, #1
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	611a      	str	r2, [r3, #16]
  }
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	40012c00 	.word	0x40012c00
 8003010:	40000400 	.word	0x40000400
 8003014:	40000800 	.word	0x40000800

08003018 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003042:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f023 030a 	bic.w	r3, r3, #10
 8003054:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	621a      	str	r2, [r3, #32]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr

08003074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0210 	bic.w	r2, r3, #16
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800309e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	031b      	lsls	r3, r3, #12
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030b0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	621a      	str	r2, [r3, #32]
}
 80030c8:	bf00      	nop
 80030ca:	371c      	adds	r7, #28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
 80030da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	609a      	str	r2, [r3, #8]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	bc80      	pop	{r7}
 8003104:	4770      	bx	lr

08003106 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003106:	b480      	push	{r7}
 8003108:	b087      	sub	sp, #28
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
 8003112:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003120:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	431a      	orrs	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4313      	orrs	r3, r2
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4313      	orrs	r3, r2
 8003132:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	697a      	ldr	r2, [r7, #20]
 8003138:	609a      	str	r2, [r3, #8]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e046      	b.n	80031ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	4313      	orrs	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68fa      	ldr	r2, [r7, #12]
 8003194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a16      	ldr	r2, [pc, #88]	@ (80031f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d00e      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031a8:	d009      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a12      	ldr	r2, [pc, #72]	@ (80031f8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d004      	beq.n	80031be <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a10      	ldr	r2, [pc, #64]	@ (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10c      	bne.n	80031d8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68ba      	ldr	r2, [r7, #8]
 80031d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40000400 	.word	0x40000400
 80031fc:	40000800 	.word	0x40000800

08003200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr

08003224 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d101      	bne.n	8003236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e042      	b.n	80032bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d106      	bne.n	8003250 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fd fb70 	bl	8000930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2224      	movs	r2, #36	@ 0x24
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003266:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f971 	bl	8003550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	691a      	ldr	r2, [r3, #16]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800327c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800328c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800329c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3708      	adds	r7, #8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b08a      	sub	sp, #40	@ 0x28
 80032c8:	af02      	add	r7, sp, #8
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	603b      	str	r3, [r7, #0]
 80032d0:	4613      	mov	r3, r2
 80032d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d175      	bne.n	80033d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d002      	beq.n	80032f0 <HAL_UART_Transmit+0x2c>
 80032ea:	88fb      	ldrh	r3, [r7, #6]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e06e      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2221      	movs	r2, #33	@ 0x21
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003302:	f7fd fcbf 	bl	8000c84 <HAL_GetTick>
 8003306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	88fa      	ldrh	r2, [r7, #6]
 800330c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331c:	d108      	bne.n	8003330 <HAL_UART_Transmit+0x6c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	e003      	b.n	8003338 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003338:	e02e      	b.n	8003398 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	2180      	movs	r1, #128	@ 0x80
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f848 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d005      	beq.n	800335c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e03a      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10b      	bne.n	800337a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	461a      	mov	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	3302      	adds	r3, #2
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	e007      	b.n	800338a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	3301      	adds	r3, #1
 8003388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1cb      	bne.n	800333a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2200      	movs	r2, #0
 80033aa:	2140      	movs	r1, #64	@ 0x40
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f814 	bl	80033da <UART_WaitOnFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e006      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2220      	movs	r2, #32
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	e000      	b.n	80033d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80033d0:	2302      	movs	r3, #2
  }
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	4613      	mov	r3, r2
 80033e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ea:	e03b      	b.n	8003464 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d037      	beq.n	8003464 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f4:	f7fd fc46 	bl	8000c84 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	6a3a      	ldr	r2, [r7, #32]
 8003400:	429a      	cmp	r2, r3
 8003402:	d302      	bcc.n	800340a <UART_WaitOnFlagUntilTimeout+0x30>
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e03a      	b.n	8003484 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	d023      	beq.n	8003464 <UART_WaitOnFlagUntilTimeout+0x8a>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2b80      	cmp	r3, #128	@ 0x80
 8003420:	d020      	beq.n	8003464 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b40      	cmp	r3, #64	@ 0x40
 8003426:	d01d      	beq.n	8003464 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	2b08      	cmp	r3, #8
 8003434:	d116      	bne.n	8003464 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f81d 	bl	800348c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2208      	movs	r2, #8
 8003456:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e00f      	b.n	8003484 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	429a      	cmp	r2, r3
 8003472:	bf0c      	ite	eq
 8003474:	2301      	moveq	r3, #1
 8003476:	2300      	movne	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	429a      	cmp	r2, r3
 8003480:	d0b4      	beq.n	80033ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800348c:	b480      	push	{r7}
 800348e:	b095      	sub	sp, #84	@ 0x54
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	330c      	adds	r3, #12
 80034b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034b4:	643a      	str	r2, [r7, #64]	@ 0x40
 80034b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e5      	bne.n	8003494 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3314      	adds	r3, #20
 80034ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	e853 3f00 	ldrex	r3, [r3]
 80034d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f023 0301 	bic.w	r3, r3, #1
 80034de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	3314      	adds	r3, #20
 80034e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f0:	e841 2300 	strex	r3, r2, [r1]
 80034f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1e5      	bne.n	80034c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003500:	2b01      	cmp	r3, #1
 8003502:	d119      	bne.n	8003538 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	60bb      	str	r3, [r7, #8]
   return(result);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f023 0310 	bic.w	r3, r3, #16
 800351a:	647b      	str	r3, [r7, #68]	@ 0x44
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	330c      	adds	r3, #12
 8003522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003524:	61ba      	str	r2, [r7, #24]
 8003526:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003528:	6979      	ldr	r1, [r7, #20]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	e841 2300 	strex	r3, r2, [r1]
 8003530:	613b      	str	r3, [r7, #16]
   return(result);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1e5      	bne.n	8003504 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003546:	bf00      	nop
 8003548:	3754      	adds	r7, #84	@ 0x54
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800358a:	f023 030c 	bic.w	r3, r3, #12
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	68b9      	ldr	r1, [r7, #8]
 8003594:	430b      	orrs	r3, r1
 8003596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003664 <UART_SetConfig+0x114>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d103      	bne.n	80035c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035b8:	f7ff f8a4 	bl	8002704 <HAL_RCC_GetPCLK2Freq>
 80035bc:	60f8      	str	r0, [r7, #12]
 80035be:	e002      	b.n	80035c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035c0:	f7ff f88c 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80035c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009a      	lsls	r2, r3, #2
 80035d0:	441a      	add	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035dc:	4a22      	ldr	r2, [pc, #136]	@ (8003668 <UART_SetConfig+0x118>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	0119      	lsls	r1, r3, #4
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	009a      	lsls	r2, r3, #2
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003668 <UART_SetConfig+0x118>)
 80035fe:	fba3 0302 	umull	r0, r3, r3, r2
 8003602:	095b      	lsrs	r3, r3, #5
 8003604:	2064      	movs	r0, #100	@ 0x64
 8003606:	fb00 f303 	mul.w	r3, r0, r3
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	3332      	adds	r3, #50	@ 0x32
 8003610:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <UART_SetConfig+0x118>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800361c:	4419      	add	r1, r3
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	009a      	lsls	r2, r3, #2
 8003628:	441a      	add	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	fbb2 f2f3 	udiv	r2, r2, r3
 8003634:	4b0c      	ldr	r3, [pc, #48]	@ (8003668 <UART_SetConfig+0x118>)
 8003636:	fba3 0302 	umull	r0, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2064      	movs	r0, #100	@ 0x64
 800363e:	fb00 f303 	mul.w	r3, r0, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	3332      	adds	r3, #50	@ 0x32
 8003648:	4a07      	ldr	r2, [pc, #28]	@ (8003668 <UART_SetConfig+0x118>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	440a      	add	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	40013800 	.word	0x40013800
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <std>:
 800366c:	2300      	movs	r3, #0
 800366e:	b510      	push	{r4, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	e9c0 3300 	strd	r3, r3, [r0]
 8003676:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800367a:	6083      	str	r3, [r0, #8]
 800367c:	8181      	strh	r1, [r0, #12]
 800367e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003680:	81c2      	strh	r2, [r0, #14]
 8003682:	6183      	str	r3, [r0, #24]
 8003684:	4619      	mov	r1, r3
 8003686:	2208      	movs	r2, #8
 8003688:	305c      	adds	r0, #92	@ 0x5c
 800368a:	f000 f9f9 	bl	8003a80 <memset>
 800368e:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <std+0x58>)
 8003690:	6224      	str	r4, [r4, #32]
 8003692:	6263      	str	r3, [r4, #36]	@ 0x24
 8003694:	4b0c      	ldr	r3, [pc, #48]	@ (80036c8 <std+0x5c>)
 8003696:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <std+0x60>)
 800369a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800369c:	4b0c      	ldr	r3, [pc, #48]	@ (80036d0 <std+0x64>)
 800369e:	6323      	str	r3, [r4, #48]	@ 0x30
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <std+0x68>)
 80036a2:	429c      	cmp	r4, r3
 80036a4:	d006      	beq.n	80036b4 <std+0x48>
 80036a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80036aa:	4294      	cmp	r4, r2
 80036ac:	d002      	beq.n	80036b4 <std+0x48>
 80036ae:	33d0      	adds	r3, #208	@ 0xd0
 80036b0:	429c      	cmp	r4, r3
 80036b2:	d105      	bne.n	80036c0 <std+0x54>
 80036b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80036b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036bc:	f000 ba58 	b.w	8003b70 <__retarget_lock_init_recursive>
 80036c0:	bd10      	pop	{r4, pc}
 80036c2:	bf00      	nop
 80036c4:	080038d1 	.word	0x080038d1
 80036c8:	080038f3 	.word	0x080038f3
 80036cc:	0800392b 	.word	0x0800392b
 80036d0:	0800394f 	.word	0x0800394f
 80036d4:	200001e4 	.word	0x200001e4

080036d8 <stdio_exit_handler>:
 80036d8:	4a02      	ldr	r2, [pc, #8]	@ (80036e4 <stdio_exit_handler+0xc>)
 80036da:	4903      	ldr	r1, [pc, #12]	@ (80036e8 <stdio_exit_handler+0x10>)
 80036dc:	4803      	ldr	r0, [pc, #12]	@ (80036ec <stdio_exit_handler+0x14>)
 80036de:	f000 b869 	b.w	80037b4 <_fwalk_sglue>
 80036e2:	bf00      	nop
 80036e4:	2000000c 	.word	0x2000000c
 80036e8:	08004405 	.word	0x08004405
 80036ec:	2000001c 	.word	0x2000001c

080036f0 <cleanup_stdio>:
 80036f0:	6841      	ldr	r1, [r0, #4]
 80036f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003724 <cleanup_stdio+0x34>)
 80036f4:	b510      	push	{r4, lr}
 80036f6:	4299      	cmp	r1, r3
 80036f8:	4604      	mov	r4, r0
 80036fa:	d001      	beq.n	8003700 <cleanup_stdio+0x10>
 80036fc:	f000 fe82 	bl	8004404 <_fflush_r>
 8003700:	68a1      	ldr	r1, [r4, #8]
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <cleanup_stdio+0x38>)
 8003704:	4299      	cmp	r1, r3
 8003706:	d002      	beq.n	800370e <cleanup_stdio+0x1e>
 8003708:	4620      	mov	r0, r4
 800370a:	f000 fe7b 	bl	8004404 <_fflush_r>
 800370e:	68e1      	ldr	r1, [r4, #12]
 8003710:	4b06      	ldr	r3, [pc, #24]	@ (800372c <cleanup_stdio+0x3c>)
 8003712:	4299      	cmp	r1, r3
 8003714:	d004      	beq.n	8003720 <cleanup_stdio+0x30>
 8003716:	4620      	mov	r0, r4
 8003718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800371c:	f000 be72 	b.w	8004404 <_fflush_r>
 8003720:	bd10      	pop	{r4, pc}
 8003722:	bf00      	nop
 8003724:	200001e4 	.word	0x200001e4
 8003728:	2000024c 	.word	0x2000024c
 800372c:	200002b4 	.word	0x200002b4

08003730 <global_stdio_init.part.0>:
 8003730:	b510      	push	{r4, lr}
 8003732:	4b0b      	ldr	r3, [pc, #44]	@ (8003760 <global_stdio_init.part.0+0x30>)
 8003734:	4c0b      	ldr	r4, [pc, #44]	@ (8003764 <global_stdio_init.part.0+0x34>)
 8003736:	4a0c      	ldr	r2, [pc, #48]	@ (8003768 <global_stdio_init.part.0+0x38>)
 8003738:	4620      	mov	r0, r4
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	2104      	movs	r1, #4
 800373e:	2200      	movs	r2, #0
 8003740:	f7ff ff94 	bl	800366c <std>
 8003744:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003748:	2201      	movs	r2, #1
 800374a:	2109      	movs	r1, #9
 800374c:	f7ff ff8e 	bl	800366c <std>
 8003750:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003754:	2202      	movs	r2, #2
 8003756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800375a:	2112      	movs	r1, #18
 800375c:	f7ff bf86 	b.w	800366c <std>
 8003760:	2000031c 	.word	0x2000031c
 8003764:	200001e4 	.word	0x200001e4
 8003768:	080036d9 	.word	0x080036d9

0800376c <__sfp_lock_acquire>:
 800376c:	4801      	ldr	r0, [pc, #4]	@ (8003774 <__sfp_lock_acquire+0x8>)
 800376e:	f000 ba00 	b.w	8003b72 <__retarget_lock_acquire_recursive>
 8003772:	bf00      	nop
 8003774:	20000325 	.word	0x20000325

08003778 <__sfp_lock_release>:
 8003778:	4801      	ldr	r0, [pc, #4]	@ (8003780 <__sfp_lock_release+0x8>)
 800377a:	f000 b9fb 	b.w	8003b74 <__retarget_lock_release_recursive>
 800377e:	bf00      	nop
 8003780:	20000325 	.word	0x20000325

08003784 <__sinit>:
 8003784:	b510      	push	{r4, lr}
 8003786:	4604      	mov	r4, r0
 8003788:	f7ff fff0 	bl	800376c <__sfp_lock_acquire>
 800378c:	6a23      	ldr	r3, [r4, #32]
 800378e:	b11b      	cbz	r3, 8003798 <__sinit+0x14>
 8003790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003794:	f7ff bff0 	b.w	8003778 <__sfp_lock_release>
 8003798:	4b04      	ldr	r3, [pc, #16]	@ (80037ac <__sinit+0x28>)
 800379a:	6223      	str	r3, [r4, #32]
 800379c:	4b04      	ldr	r3, [pc, #16]	@ (80037b0 <__sinit+0x2c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f5      	bne.n	8003790 <__sinit+0xc>
 80037a4:	f7ff ffc4 	bl	8003730 <global_stdio_init.part.0>
 80037a8:	e7f2      	b.n	8003790 <__sinit+0xc>
 80037aa:	bf00      	nop
 80037ac:	080036f1 	.word	0x080036f1
 80037b0:	2000031c 	.word	0x2000031c

080037b4 <_fwalk_sglue>:
 80037b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b8:	4607      	mov	r7, r0
 80037ba:	4688      	mov	r8, r1
 80037bc:	4614      	mov	r4, r2
 80037be:	2600      	movs	r6, #0
 80037c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037c4:	f1b9 0901 	subs.w	r9, r9, #1
 80037c8:	d505      	bpl.n	80037d6 <_fwalk_sglue+0x22>
 80037ca:	6824      	ldr	r4, [r4, #0]
 80037cc:	2c00      	cmp	r4, #0
 80037ce:	d1f7      	bne.n	80037c0 <_fwalk_sglue+0xc>
 80037d0:	4630      	mov	r0, r6
 80037d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d6:	89ab      	ldrh	r3, [r5, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d907      	bls.n	80037ec <_fwalk_sglue+0x38>
 80037dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037e0:	3301      	adds	r3, #1
 80037e2:	d003      	beq.n	80037ec <_fwalk_sglue+0x38>
 80037e4:	4629      	mov	r1, r5
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c0      	blx	r8
 80037ea:	4306      	orrs	r6, r0
 80037ec:	3568      	adds	r5, #104	@ 0x68
 80037ee:	e7e9      	b.n	80037c4 <_fwalk_sglue+0x10>

080037f0 <iprintf>:
 80037f0:	b40f      	push	{r0, r1, r2, r3}
 80037f2:	b507      	push	{r0, r1, r2, lr}
 80037f4:	4906      	ldr	r1, [pc, #24]	@ (8003810 <iprintf+0x20>)
 80037f6:	ab04      	add	r3, sp, #16
 80037f8:	6808      	ldr	r0, [r1, #0]
 80037fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80037fe:	6881      	ldr	r1, [r0, #8]
 8003800:	9301      	str	r3, [sp, #4]
 8003802:	f000 fad7 	bl	8003db4 <_vfiprintf_r>
 8003806:	b003      	add	sp, #12
 8003808:	f85d eb04 	ldr.w	lr, [sp], #4
 800380c:	b004      	add	sp, #16
 800380e:	4770      	bx	lr
 8003810:	20000018 	.word	0x20000018

08003814 <_puts_r>:
 8003814:	6a03      	ldr	r3, [r0, #32]
 8003816:	b570      	push	{r4, r5, r6, lr}
 8003818:	4605      	mov	r5, r0
 800381a:	460e      	mov	r6, r1
 800381c:	6884      	ldr	r4, [r0, #8]
 800381e:	b90b      	cbnz	r3, 8003824 <_puts_r+0x10>
 8003820:	f7ff ffb0 	bl	8003784 <__sinit>
 8003824:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003826:	07db      	lsls	r3, r3, #31
 8003828:	d405      	bmi.n	8003836 <_puts_r+0x22>
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	0598      	lsls	r0, r3, #22
 800382e:	d402      	bmi.n	8003836 <_puts_r+0x22>
 8003830:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003832:	f000 f99e 	bl	8003b72 <__retarget_lock_acquire_recursive>
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	0719      	lsls	r1, r3, #28
 800383a:	d502      	bpl.n	8003842 <_puts_r+0x2e>
 800383c:	6923      	ldr	r3, [r4, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d135      	bne.n	80038ae <_puts_r+0x9a>
 8003842:	4621      	mov	r1, r4
 8003844:	4628      	mov	r0, r5
 8003846:	f000 f8c5 	bl	80039d4 <__swsetup_r>
 800384a:	b380      	cbz	r0, 80038ae <_puts_r+0x9a>
 800384c:	f04f 35ff 	mov.w	r5, #4294967295
 8003850:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003852:	07da      	lsls	r2, r3, #31
 8003854:	d405      	bmi.n	8003862 <_puts_r+0x4e>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	059b      	lsls	r3, r3, #22
 800385a:	d402      	bmi.n	8003862 <_puts_r+0x4e>
 800385c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800385e:	f000 f989 	bl	8003b74 <__retarget_lock_release_recursive>
 8003862:	4628      	mov	r0, r5
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	2b00      	cmp	r3, #0
 8003868:	da04      	bge.n	8003874 <_puts_r+0x60>
 800386a:	69a2      	ldr	r2, [r4, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	dc17      	bgt.n	80038a0 <_puts_r+0x8c>
 8003870:	290a      	cmp	r1, #10
 8003872:	d015      	beq.n	80038a0 <_puts_r+0x8c>
 8003874:	6823      	ldr	r3, [r4, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	6022      	str	r2, [r4, #0]
 800387a:	7019      	strb	r1, [r3, #0]
 800387c:	68a3      	ldr	r3, [r4, #8]
 800387e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003882:	3b01      	subs	r3, #1
 8003884:	60a3      	str	r3, [r4, #8]
 8003886:	2900      	cmp	r1, #0
 8003888:	d1ed      	bne.n	8003866 <_puts_r+0x52>
 800388a:	2b00      	cmp	r3, #0
 800388c:	da11      	bge.n	80038b2 <_puts_r+0x9e>
 800388e:	4622      	mov	r2, r4
 8003890:	210a      	movs	r1, #10
 8003892:	4628      	mov	r0, r5
 8003894:	f000 f85f 	bl	8003956 <__swbuf_r>
 8003898:	3001      	adds	r0, #1
 800389a:	d0d7      	beq.n	800384c <_puts_r+0x38>
 800389c:	250a      	movs	r5, #10
 800389e:	e7d7      	b.n	8003850 <_puts_r+0x3c>
 80038a0:	4622      	mov	r2, r4
 80038a2:	4628      	mov	r0, r5
 80038a4:	f000 f857 	bl	8003956 <__swbuf_r>
 80038a8:	3001      	adds	r0, #1
 80038aa:	d1e7      	bne.n	800387c <_puts_r+0x68>
 80038ac:	e7ce      	b.n	800384c <_puts_r+0x38>
 80038ae:	3e01      	subs	r6, #1
 80038b0:	e7e4      	b.n	800387c <_puts_r+0x68>
 80038b2:	6823      	ldr	r3, [r4, #0]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	6022      	str	r2, [r4, #0]
 80038b8:	220a      	movs	r2, #10
 80038ba:	701a      	strb	r2, [r3, #0]
 80038bc:	e7ee      	b.n	800389c <_puts_r+0x88>
	...

080038c0 <puts>:
 80038c0:	4b02      	ldr	r3, [pc, #8]	@ (80038cc <puts+0xc>)
 80038c2:	4601      	mov	r1, r0
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	f7ff bfa5 	b.w	8003814 <_puts_r>
 80038ca:	bf00      	nop
 80038cc:	20000018 	.word	0x20000018

080038d0 <__sread>:
 80038d0:	b510      	push	{r4, lr}
 80038d2:	460c      	mov	r4, r1
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	f000 f8fc 	bl	8003ad4 <_read_r>
 80038dc:	2800      	cmp	r0, #0
 80038de:	bfab      	itete	ge
 80038e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038e2:	89a3      	ldrhlt	r3, [r4, #12]
 80038e4:	181b      	addge	r3, r3, r0
 80038e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038ea:	bfac      	ite	ge
 80038ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038ee:	81a3      	strhlt	r3, [r4, #12]
 80038f0:	bd10      	pop	{r4, pc}

080038f2 <__swrite>:
 80038f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038f6:	461f      	mov	r7, r3
 80038f8:	898b      	ldrh	r3, [r1, #12]
 80038fa:	4605      	mov	r5, r0
 80038fc:	05db      	lsls	r3, r3, #23
 80038fe:	460c      	mov	r4, r1
 8003900:	4616      	mov	r6, r2
 8003902:	d505      	bpl.n	8003910 <__swrite+0x1e>
 8003904:	2302      	movs	r3, #2
 8003906:	2200      	movs	r2, #0
 8003908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800390c:	f000 f8d0 	bl	8003ab0 <_lseek_r>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	4632      	mov	r2, r6
 8003914:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	4628      	mov	r0, r5
 800391c:	463b      	mov	r3, r7
 800391e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003926:	f000 b8e7 	b.w	8003af8 <_write_r>

0800392a <__sseek>:
 800392a:	b510      	push	{r4, lr}
 800392c:	460c      	mov	r4, r1
 800392e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003932:	f000 f8bd 	bl	8003ab0 <_lseek_r>
 8003936:	1c43      	adds	r3, r0, #1
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	bf15      	itete	ne
 800393c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800393e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003942:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003946:	81a3      	strheq	r3, [r4, #12]
 8003948:	bf18      	it	ne
 800394a:	81a3      	strhne	r3, [r4, #12]
 800394c:	bd10      	pop	{r4, pc}

0800394e <__sclose>:
 800394e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003952:	f000 b89d 	b.w	8003a90 <_close_r>

08003956 <__swbuf_r>:
 8003956:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003958:	460e      	mov	r6, r1
 800395a:	4614      	mov	r4, r2
 800395c:	4605      	mov	r5, r0
 800395e:	b118      	cbz	r0, 8003968 <__swbuf_r+0x12>
 8003960:	6a03      	ldr	r3, [r0, #32]
 8003962:	b90b      	cbnz	r3, 8003968 <__swbuf_r+0x12>
 8003964:	f7ff ff0e 	bl	8003784 <__sinit>
 8003968:	69a3      	ldr	r3, [r4, #24]
 800396a:	60a3      	str	r3, [r4, #8]
 800396c:	89a3      	ldrh	r3, [r4, #12]
 800396e:	071a      	lsls	r2, r3, #28
 8003970:	d501      	bpl.n	8003976 <__swbuf_r+0x20>
 8003972:	6923      	ldr	r3, [r4, #16]
 8003974:	b943      	cbnz	r3, 8003988 <__swbuf_r+0x32>
 8003976:	4621      	mov	r1, r4
 8003978:	4628      	mov	r0, r5
 800397a:	f000 f82b 	bl	80039d4 <__swsetup_r>
 800397e:	b118      	cbz	r0, 8003988 <__swbuf_r+0x32>
 8003980:	f04f 37ff 	mov.w	r7, #4294967295
 8003984:	4638      	mov	r0, r7
 8003986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	6922      	ldr	r2, [r4, #16]
 800398c:	b2f6      	uxtb	r6, r6
 800398e:	1a98      	subs	r0, r3, r2
 8003990:	6963      	ldr	r3, [r4, #20]
 8003992:	4637      	mov	r7, r6
 8003994:	4283      	cmp	r3, r0
 8003996:	dc05      	bgt.n	80039a4 <__swbuf_r+0x4e>
 8003998:	4621      	mov	r1, r4
 800399a:	4628      	mov	r0, r5
 800399c:	f000 fd32 	bl	8004404 <_fflush_r>
 80039a0:	2800      	cmp	r0, #0
 80039a2:	d1ed      	bne.n	8003980 <__swbuf_r+0x2a>
 80039a4:	68a3      	ldr	r3, [r4, #8]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	60a3      	str	r3, [r4, #8]
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	6022      	str	r2, [r4, #0]
 80039b0:	701e      	strb	r6, [r3, #0]
 80039b2:	6962      	ldr	r2, [r4, #20]
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d004      	beq.n	80039c4 <__swbuf_r+0x6e>
 80039ba:	89a3      	ldrh	r3, [r4, #12]
 80039bc:	07db      	lsls	r3, r3, #31
 80039be:	d5e1      	bpl.n	8003984 <__swbuf_r+0x2e>
 80039c0:	2e0a      	cmp	r6, #10
 80039c2:	d1df      	bne.n	8003984 <__swbuf_r+0x2e>
 80039c4:	4621      	mov	r1, r4
 80039c6:	4628      	mov	r0, r5
 80039c8:	f000 fd1c 	bl	8004404 <_fflush_r>
 80039cc:	2800      	cmp	r0, #0
 80039ce:	d0d9      	beq.n	8003984 <__swbuf_r+0x2e>
 80039d0:	e7d6      	b.n	8003980 <__swbuf_r+0x2a>
	...

080039d4 <__swsetup_r>:
 80039d4:	b538      	push	{r3, r4, r5, lr}
 80039d6:	4b29      	ldr	r3, [pc, #164]	@ (8003a7c <__swsetup_r+0xa8>)
 80039d8:	4605      	mov	r5, r0
 80039da:	6818      	ldr	r0, [r3, #0]
 80039dc:	460c      	mov	r4, r1
 80039de:	b118      	cbz	r0, 80039e8 <__swsetup_r+0x14>
 80039e0:	6a03      	ldr	r3, [r0, #32]
 80039e2:	b90b      	cbnz	r3, 80039e8 <__swsetup_r+0x14>
 80039e4:	f7ff fece 	bl	8003784 <__sinit>
 80039e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ec:	0719      	lsls	r1, r3, #28
 80039ee:	d422      	bmi.n	8003a36 <__swsetup_r+0x62>
 80039f0:	06da      	lsls	r2, r3, #27
 80039f2:	d407      	bmi.n	8003a04 <__swsetup_r+0x30>
 80039f4:	2209      	movs	r2, #9
 80039f6:	602a      	str	r2, [r5, #0]
 80039f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	e033      	b.n	8003a6c <__swsetup_r+0x98>
 8003a04:	0758      	lsls	r0, r3, #29
 8003a06:	d512      	bpl.n	8003a2e <__swsetup_r+0x5a>
 8003a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a0a:	b141      	cbz	r1, 8003a1e <__swsetup_r+0x4a>
 8003a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a10:	4299      	cmp	r1, r3
 8003a12:	d002      	beq.n	8003a1a <__swsetup_r+0x46>
 8003a14:	4628      	mov	r0, r5
 8003a16:	f000 f8af 	bl	8003b78 <_free_r>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a24:	81a3      	strh	r3, [r4, #12]
 8003a26:	2300      	movs	r3, #0
 8003a28:	6063      	str	r3, [r4, #4]
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	89a3      	ldrh	r3, [r4, #12]
 8003a30:	f043 0308 	orr.w	r3, r3, #8
 8003a34:	81a3      	strh	r3, [r4, #12]
 8003a36:	6923      	ldr	r3, [r4, #16]
 8003a38:	b94b      	cbnz	r3, 8003a4e <__swsetup_r+0x7a>
 8003a3a:	89a3      	ldrh	r3, [r4, #12]
 8003a3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a44:	d003      	beq.n	8003a4e <__swsetup_r+0x7a>
 8003a46:	4621      	mov	r1, r4
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 fd28 	bl	800449e <__smakebuf_r>
 8003a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a52:	f013 0201 	ands.w	r2, r3, #1
 8003a56:	d00a      	beq.n	8003a6e <__swsetup_r+0x9a>
 8003a58:	2200      	movs	r2, #0
 8003a5a:	60a2      	str	r2, [r4, #8]
 8003a5c:	6962      	ldr	r2, [r4, #20]
 8003a5e:	4252      	negs	r2, r2
 8003a60:	61a2      	str	r2, [r4, #24]
 8003a62:	6922      	ldr	r2, [r4, #16]
 8003a64:	b942      	cbnz	r2, 8003a78 <__swsetup_r+0xa4>
 8003a66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a6a:	d1c5      	bne.n	80039f8 <__swsetup_r+0x24>
 8003a6c:	bd38      	pop	{r3, r4, r5, pc}
 8003a6e:	0799      	lsls	r1, r3, #30
 8003a70:	bf58      	it	pl
 8003a72:	6962      	ldrpl	r2, [r4, #20]
 8003a74:	60a2      	str	r2, [r4, #8]
 8003a76:	e7f4      	b.n	8003a62 <__swsetup_r+0x8e>
 8003a78:	2000      	movs	r0, #0
 8003a7a:	e7f7      	b.n	8003a6c <__swsetup_r+0x98>
 8003a7c:	20000018 	.word	0x20000018

08003a80 <memset>:
 8003a80:	4603      	mov	r3, r0
 8003a82:	4402      	add	r2, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d100      	bne.n	8003a8a <memset+0xa>
 8003a88:	4770      	bx	lr
 8003a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8e:	e7f9      	b.n	8003a84 <memset+0x4>

08003a90 <_close_r>:
 8003a90:	b538      	push	{r3, r4, r5, lr}
 8003a92:	2300      	movs	r3, #0
 8003a94:	4d05      	ldr	r5, [pc, #20]	@ (8003aac <_close_r+0x1c>)
 8003a96:	4604      	mov	r4, r0
 8003a98:	4608      	mov	r0, r1
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	f7fd f807 	bl	8000aae <_close>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d102      	bne.n	8003aaa <_close_r+0x1a>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	b103      	cbz	r3, 8003aaa <_close_r+0x1a>
 8003aa8:	6023      	str	r3, [r4, #0]
 8003aaa:	bd38      	pop	{r3, r4, r5, pc}
 8003aac:	20000320 	.word	0x20000320

08003ab0 <_lseek_r>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	4608      	mov	r0, r1
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4d05      	ldr	r5, [pc, #20]	@ (8003ad0 <_lseek_r+0x20>)
 8003abc:	602a      	str	r2, [r5, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f7fd f819 	bl	8000af6 <_lseek>
 8003ac4:	1c43      	adds	r3, r0, #1
 8003ac6:	d102      	bne.n	8003ace <_lseek_r+0x1e>
 8003ac8:	682b      	ldr	r3, [r5, #0]
 8003aca:	b103      	cbz	r3, 8003ace <_lseek_r+0x1e>
 8003acc:	6023      	str	r3, [r4, #0]
 8003ace:	bd38      	pop	{r3, r4, r5, pc}
 8003ad0:	20000320 	.word	0x20000320

08003ad4 <_read_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4611      	mov	r1, r2
 8003adc:	2200      	movs	r2, #0
 8003ade:	4d05      	ldr	r5, [pc, #20]	@ (8003af4 <_read_r+0x20>)
 8003ae0:	602a      	str	r2, [r5, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	f7fc ffaa 	bl	8000a3c <_read>
 8003ae8:	1c43      	adds	r3, r0, #1
 8003aea:	d102      	bne.n	8003af2 <_read_r+0x1e>
 8003aec:	682b      	ldr	r3, [r5, #0]
 8003aee:	b103      	cbz	r3, 8003af2 <_read_r+0x1e>
 8003af0:	6023      	str	r3, [r4, #0]
 8003af2:	bd38      	pop	{r3, r4, r5, pc}
 8003af4:	20000320 	.word	0x20000320

08003af8 <_write_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4604      	mov	r4, r0
 8003afc:	4608      	mov	r0, r1
 8003afe:	4611      	mov	r1, r2
 8003b00:	2200      	movs	r2, #0
 8003b02:	4d05      	ldr	r5, [pc, #20]	@ (8003b18 <_write_r+0x20>)
 8003b04:	602a      	str	r2, [r5, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f7fc ffb5 	bl	8000a76 <_write>
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d102      	bne.n	8003b16 <_write_r+0x1e>
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	b103      	cbz	r3, 8003b16 <_write_r+0x1e>
 8003b14:	6023      	str	r3, [r4, #0]
 8003b16:	bd38      	pop	{r3, r4, r5, pc}
 8003b18:	20000320 	.word	0x20000320

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	@ (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000018 	.word	0x20000018

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003b60 <__libc_init_array+0x38>)
 8003b2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003b64 <__libc_init_array+0x3c>)
 8003b30:	1b64      	subs	r4, r4, r5
 8003b32:	10a4      	asrs	r4, r4, #2
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	f000 fd2e 	bl	8004598 <_init>
 8003b3c:	2600      	movs	r6, #0
 8003b3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003b68 <__libc_init_array+0x40>)
 8003b40:	4c0a      	ldr	r4, [pc, #40]	@ (8003b6c <__libc_init_array+0x44>)
 8003b42:	1b64      	subs	r4, r4, r5
 8003b44:	10a4      	asrs	r4, r4, #2
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	08004670 	.word	0x08004670
 8003b64:	08004670 	.word	0x08004670
 8003b68:	08004670 	.word	0x08004670
 8003b6c:	08004674 	.word	0x08004674

08003b70 <__retarget_lock_init_recursive>:
 8003b70:	4770      	bx	lr

08003b72 <__retarget_lock_acquire_recursive>:
 8003b72:	4770      	bx	lr

08003b74 <__retarget_lock_release_recursive>:
 8003b74:	4770      	bx	lr
	...

08003b78 <_free_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4605      	mov	r5, r0
 8003b7c:	2900      	cmp	r1, #0
 8003b7e:	d040      	beq.n	8003c02 <_free_r+0x8a>
 8003b80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b84:	1f0c      	subs	r4, r1, #4
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	bfb8      	it	lt
 8003b8a:	18e4      	addlt	r4, r4, r3
 8003b8c:	f000 f8de 	bl	8003d4c <__malloc_lock>
 8003b90:	4a1c      	ldr	r2, [pc, #112]	@ (8003c04 <_free_r+0x8c>)
 8003b92:	6813      	ldr	r3, [r2, #0]
 8003b94:	b933      	cbnz	r3, 8003ba4 <_free_r+0x2c>
 8003b96:	6063      	str	r3, [r4, #4]
 8003b98:	6014      	str	r4, [r2, #0]
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ba0:	f000 b8da 	b.w	8003d58 <__malloc_unlock>
 8003ba4:	42a3      	cmp	r3, r4
 8003ba6:	d908      	bls.n	8003bba <_free_r+0x42>
 8003ba8:	6820      	ldr	r0, [r4, #0]
 8003baa:	1821      	adds	r1, r4, r0
 8003bac:	428b      	cmp	r3, r1
 8003bae:	bf01      	itttt	eq
 8003bb0:	6819      	ldreq	r1, [r3, #0]
 8003bb2:	685b      	ldreq	r3, [r3, #4]
 8003bb4:	1809      	addeq	r1, r1, r0
 8003bb6:	6021      	streq	r1, [r4, #0]
 8003bb8:	e7ed      	b.n	8003b96 <_free_r+0x1e>
 8003bba:	461a      	mov	r2, r3
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b10b      	cbz	r3, 8003bc4 <_free_r+0x4c>
 8003bc0:	42a3      	cmp	r3, r4
 8003bc2:	d9fa      	bls.n	8003bba <_free_r+0x42>
 8003bc4:	6811      	ldr	r1, [r2, #0]
 8003bc6:	1850      	adds	r0, r2, r1
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d10b      	bne.n	8003be4 <_free_r+0x6c>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	4401      	add	r1, r0
 8003bd0:	1850      	adds	r0, r2, r1
 8003bd2:	4283      	cmp	r3, r0
 8003bd4:	6011      	str	r1, [r2, #0]
 8003bd6:	d1e0      	bne.n	8003b9a <_free_r+0x22>
 8003bd8:	6818      	ldr	r0, [r3, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	4408      	add	r0, r1
 8003bde:	6010      	str	r0, [r2, #0]
 8003be0:	6053      	str	r3, [r2, #4]
 8003be2:	e7da      	b.n	8003b9a <_free_r+0x22>
 8003be4:	d902      	bls.n	8003bec <_free_r+0x74>
 8003be6:	230c      	movs	r3, #12
 8003be8:	602b      	str	r3, [r5, #0]
 8003bea:	e7d6      	b.n	8003b9a <_free_r+0x22>
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	1821      	adds	r1, r4, r0
 8003bf0:	428b      	cmp	r3, r1
 8003bf2:	bf01      	itttt	eq
 8003bf4:	6819      	ldreq	r1, [r3, #0]
 8003bf6:	685b      	ldreq	r3, [r3, #4]
 8003bf8:	1809      	addeq	r1, r1, r0
 8003bfa:	6021      	streq	r1, [r4, #0]
 8003bfc:	6063      	str	r3, [r4, #4]
 8003bfe:	6054      	str	r4, [r2, #4]
 8003c00:	e7cb      	b.n	8003b9a <_free_r+0x22>
 8003c02:	bd38      	pop	{r3, r4, r5, pc}
 8003c04:	2000032c 	.word	0x2000032c

08003c08 <sbrk_aligned>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c48 <sbrk_aligned+0x40>)
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	6831      	ldr	r1, [r6, #0]
 8003c10:	4605      	mov	r5, r0
 8003c12:	b911      	cbnz	r1, 8003c1a <sbrk_aligned+0x12>
 8003c14:	f000 fca2 	bl	800455c <_sbrk_r>
 8003c18:	6030      	str	r0, [r6, #0]
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 fc9d 	bl	800455c <_sbrk_r>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	d103      	bne.n	8003c2e <sbrk_aligned+0x26>
 8003c26:	f04f 34ff 	mov.w	r4, #4294967295
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	1cc4      	adds	r4, r0, #3
 8003c30:	f024 0403 	bic.w	r4, r4, #3
 8003c34:	42a0      	cmp	r0, r4
 8003c36:	d0f8      	beq.n	8003c2a <sbrk_aligned+0x22>
 8003c38:	1a21      	subs	r1, r4, r0
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f000 fc8e 	bl	800455c <_sbrk_r>
 8003c40:	3001      	adds	r0, #1
 8003c42:	d1f2      	bne.n	8003c2a <sbrk_aligned+0x22>
 8003c44:	e7ef      	b.n	8003c26 <sbrk_aligned+0x1e>
 8003c46:	bf00      	nop
 8003c48:	20000328 	.word	0x20000328

08003c4c <_malloc_r>:
 8003c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	1ccd      	adds	r5, r1, #3
 8003c52:	f025 0503 	bic.w	r5, r5, #3
 8003c56:	3508      	adds	r5, #8
 8003c58:	2d0c      	cmp	r5, #12
 8003c5a:	bf38      	it	cc
 8003c5c:	250c      	movcc	r5, #12
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	4606      	mov	r6, r0
 8003c62:	db01      	blt.n	8003c68 <_malloc_r+0x1c>
 8003c64:	42a9      	cmp	r1, r5
 8003c66:	d904      	bls.n	8003c72 <_malloc_r+0x26>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d48 <_malloc_r+0xfc>
 8003c76:	f000 f869 	bl	8003d4c <__malloc_lock>
 8003c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7e:	461c      	mov	r4, r3
 8003c80:	bb44      	cbnz	r4, 8003cd4 <_malloc_r+0x88>
 8003c82:	4629      	mov	r1, r5
 8003c84:	4630      	mov	r0, r6
 8003c86:	f7ff ffbf 	bl	8003c08 <sbrk_aligned>
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	d158      	bne.n	8003d42 <_malloc_r+0xf6>
 8003c90:	f8d8 4000 	ldr.w	r4, [r8]
 8003c94:	4627      	mov	r7, r4
 8003c96:	2f00      	cmp	r7, #0
 8003c98:	d143      	bne.n	8003d22 <_malloc_r+0xd6>
 8003c9a:	2c00      	cmp	r4, #0
 8003c9c:	d04b      	beq.n	8003d36 <_malloc_r+0xea>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	eb04 0903 	add.w	r9, r4, r3
 8003ca8:	f000 fc58 	bl	800455c <_sbrk_r>
 8003cac:	4581      	cmp	r9, r0
 8003cae:	d142      	bne.n	8003d36 <_malloc_r+0xea>
 8003cb0:	6821      	ldr	r1, [r4, #0]
 8003cb2:	4630      	mov	r0, r6
 8003cb4:	1a6d      	subs	r5, r5, r1
 8003cb6:	4629      	mov	r1, r5
 8003cb8:	f7ff ffa6 	bl	8003c08 <sbrk_aligned>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d03a      	beq.n	8003d36 <_malloc_r+0xea>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	442b      	add	r3, r5
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	bb62      	cbnz	r2, 8003d28 <_malloc_r+0xdc>
 8003cce:	f8c8 7000 	str.w	r7, [r8]
 8003cd2:	e00f      	b.n	8003cf4 <_malloc_r+0xa8>
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	1b52      	subs	r2, r2, r5
 8003cd8:	d420      	bmi.n	8003d1c <_malloc_r+0xd0>
 8003cda:	2a0b      	cmp	r2, #11
 8003cdc:	d917      	bls.n	8003d0e <_malloc_r+0xc2>
 8003cde:	1961      	adds	r1, r4, r5
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	6025      	str	r5, [r4, #0]
 8003ce4:	bf18      	it	ne
 8003ce6:	6059      	strne	r1, [r3, #4]
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	bf08      	it	eq
 8003cec:	f8c8 1000 	streq.w	r1, [r8]
 8003cf0:	5162      	str	r2, [r4, r5]
 8003cf2:	604b      	str	r3, [r1, #4]
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 f82f 	bl	8003d58 <__malloc_unlock>
 8003cfa:	f104 000b 	add.w	r0, r4, #11
 8003cfe:	1d23      	adds	r3, r4, #4
 8003d00:	f020 0007 	bic.w	r0, r0, #7
 8003d04:	1ac2      	subs	r2, r0, r3
 8003d06:	bf1c      	itt	ne
 8003d08:	1a1b      	subne	r3, r3, r0
 8003d0a:	50a3      	strne	r3, [r4, r2]
 8003d0c:	e7af      	b.n	8003c6e <_malloc_r+0x22>
 8003d0e:	6862      	ldr	r2, [r4, #4]
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	bf0c      	ite	eq
 8003d14:	f8c8 2000 	streq.w	r2, [r8]
 8003d18:	605a      	strne	r2, [r3, #4]
 8003d1a:	e7eb      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	6864      	ldr	r4, [r4, #4]
 8003d20:	e7ae      	b.n	8003c80 <_malloc_r+0x34>
 8003d22:	463c      	mov	r4, r7
 8003d24:	687f      	ldr	r7, [r7, #4]
 8003d26:	e7b6      	b.n	8003c96 <_malloc_r+0x4a>
 8003d28:	461a      	mov	r2, r3
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d1fb      	bne.n	8003d28 <_malloc_r+0xdc>
 8003d30:	2300      	movs	r3, #0
 8003d32:	6053      	str	r3, [r2, #4]
 8003d34:	e7de      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d36:	230c      	movs	r3, #12
 8003d38:	4630      	mov	r0, r6
 8003d3a:	6033      	str	r3, [r6, #0]
 8003d3c:	f000 f80c 	bl	8003d58 <__malloc_unlock>
 8003d40:	e794      	b.n	8003c6c <_malloc_r+0x20>
 8003d42:	6005      	str	r5, [r0, #0]
 8003d44:	e7d6      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d46:	bf00      	nop
 8003d48:	2000032c 	.word	0x2000032c

08003d4c <__malloc_lock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	@ (8003d54 <__malloc_lock+0x8>)
 8003d4e:	f7ff bf10 	b.w	8003b72 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	20000324 	.word	0x20000324

08003d58 <__malloc_unlock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	@ (8003d60 <__malloc_unlock+0x8>)
 8003d5a:	f7ff bf0b 	b.w	8003b74 <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	20000324 	.word	0x20000324

08003d64 <__sfputc_r>:
 8003d64:	6893      	ldr	r3, [r2, #8]
 8003d66:	b410      	push	{r4}
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	6093      	str	r3, [r2, #8]
 8003d6e:	da07      	bge.n	8003d80 <__sfputc_r+0x1c>
 8003d70:	6994      	ldr	r4, [r2, #24]
 8003d72:	42a3      	cmp	r3, r4
 8003d74:	db01      	blt.n	8003d7a <__sfputc_r+0x16>
 8003d76:	290a      	cmp	r1, #10
 8003d78:	d102      	bne.n	8003d80 <__sfputc_r+0x1c>
 8003d7a:	bc10      	pop	{r4}
 8003d7c:	f7ff bdeb 	b.w	8003956 <__swbuf_r>
 8003d80:	6813      	ldr	r3, [r2, #0]
 8003d82:	1c58      	adds	r0, r3, #1
 8003d84:	6010      	str	r0, [r2, #0]
 8003d86:	7019      	strb	r1, [r3, #0]
 8003d88:	4608      	mov	r0, r1
 8003d8a:	bc10      	pop	{r4}
 8003d8c:	4770      	bx	lr

08003d8e <__sfputs_r>:
 8003d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d90:	4606      	mov	r6, r0
 8003d92:	460f      	mov	r7, r1
 8003d94:	4614      	mov	r4, r2
 8003d96:	18d5      	adds	r5, r2, r3
 8003d98:	42ac      	cmp	r4, r5
 8003d9a:	d101      	bne.n	8003da0 <__sfputs_r+0x12>
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e007      	b.n	8003db0 <__sfputs_r+0x22>
 8003da0:	463a      	mov	r2, r7
 8003da2:	4630      	mov	r0, r6
 8003da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003da8:	f7ff ffdc 	bl	8003d64 <__sfputc_r>
 8003dac:	1c43      	adds	r3, r0, #1
 8003dae:	d1f3      	bne.n	8003d98 <__sfputs_r+0xa>
 8003db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003db4 <_vfiprintf_r>:
 8003db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db8:	460d      	mov	r5, r1
 8003dba:	4614      	mov	r4, r2
 8003dbc:	4698      	mov	r8, r3
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	b09d      	sub	sp, #116	@ 0x74
 8003dc2:	b118      	cbz	r0, 8003dcc <_vfiprintf_r+0x18>
 8003dc4:	6a03      	ldr	r3, [r0, #32]
 8003dc6:	b90b      	cbnz	r3, 8003dcc <_vfiprintf_r+0x18>
 8003dc8:	f7ff fcdc 	bl	8003784 <__sinit>
 8003dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dce:	07d9      	lsls	r1, r3, #31
 8003dd0:	d405      	bmi.n	8003dde <_vfiprintf_r+0x2a>
 8003dd2:	89ab      	ldrh	r3, [r5, #12]
 8003dd4:	059a      	lsls	r2, r3, #22
 8003dd6:	d402      	bmi.n	8003dde <_vfiprintf_r+0x2a>
 8003dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dda:	f7ff feca 	bl	8003b72 <__retarget_lock_acquire_recursive>
 8003dde:	89ab      	ldrh	r3, [r5, #12]
 8003de0:	071b      	lsls	r3, r3, #28
 8003de2:	d501      	bpl.n	8003de8 <_vfiprintf_r+0x34>
 8003de4:	692b      	ldr	r3, [r5, #16]
 8003de6:	b99b      	cbnz	r3, 8003e10 <_vfiprintf_r+0x5c>
 8003de8:	4629      	mov	r1, r5
 8003dea:	4630      	mov	r0, r6
 8003dec:	f7ff fdf2 	bl	80039d4 <__swsetup_r>
 8003df0:	b170      	cbz	r0, 8003e10 <_vfiprintf_r+0x5c>
 8003df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003df4:	07dc      	lsls	r4, r3, #31
 8003df6:	d504      	bpl.n	8003e02 <_vfiprintf_r+0x4e>
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295
 8003dfc:	b01d      	add	sp, #116	@ 0x74
 8003dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e02:	89ab      	ldrh	r3, [r5, #12]
 8003e04:	0598      	lsls	r0, r3, #22
 8003e06:	d4f7      	bmi.n	8003df8 <_vfiprintf_r+0x44>
 8003e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003e0a:	f7ff feb3 	bl	8003b74 <__retarget_lock_release_recursive>
 8003e0e:	e7f3      	b.n	8003df8 <_vfiprintf_r+0x44>
 8003e10:	2300      	movs	r3, #0
 8003e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e14:	2320      	movs	r3, #32
 8003e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e1a:	2330      	movs	r3, #48	@ 0x30
 8003e1c:	f04f 0901 	mov.w	r9, #1
 8003e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e24:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003fd0 <_vfiprintf_r+0x21c>
 8003e28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e2c:	4623      	mov	r3, r4
 8003e2e:	469a      	mov	sl, r3
 8003e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e34:	b10a      	cbz	r2, 8003e3a <_vfiprintf_r+0x86>
 8003e36:	2a25      	cmp	r2, #37	@ 0x25
 8003e38:	d1f9      	bne.n	8003e2e <_vfiprintf_r+0x7a>
 8003e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003e3e:	d00b      	beq.n	8003e58 <_vfiprintf_r+0xa4>
 8003e40:	465b      	mov	r3, fp
 8003e42:	4622      	mov	r2, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	4630      	mov	r0, r6
 8003e48:	f7ff ffa1 	bl	8003d8e <__sfputs_r>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	f000 80a7 	beq.w	8003fa0 <_vfiprintf_r+0x1ec>
 8003e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e54:	445a      	add	r2, fp
 8003e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e58:	f89a 3000 	ldrb.w	r3, [sl]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 809f 	beq.w	8003fa0 <_vfiprintf_r+0x1ec>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f04f 32ff 	mov.w	r2, #4294967295
 8003e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e6c:	f10a 0a01 	add.w	sl, sl, #1
 8003e70:	9304      	str	r3, [sp, #16]
 8003e72:	9307      	str	r3, [sp, #28]
 8003e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e7a:	4654      	mov	r4, sl
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e82:	4853      	ldr	r0, [pc, #332]	@ (8003fd0 <_vfiprintf_r+0x21c>)
 8003e84:	f000 fb7a 	bl	800457c <memchr>
 8003e88:	9a04      	ldr	r2, [sp, #16]
 8003e8a:	b9d8      	cbnz	r0, 8003ec4 <_vfiprintf_r+0x110>
 8003e8c:	06d1      	lsls	r1, r2, #27
 8003e8e:	bf44      	itt	mi
 8003e90:	2320      	movmi	r3, #32
 8003e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e96:	0713      	lsls	r3, r2, #28
 8003e98:	bf44      	itt	mi
 8003e9a:	232b      	movmi	r3, #43	@ 0x2b
 8003e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ea6:	d015      	beq.n	8003ed4 <_vfiprintf_r+0x120>
 8003ea8:	4654      	mov	r4, sl
 8003eaa:	2000      	movs	r0, #0
 8003eac:	f04f 0c0a 	mov.w	ip, #10
 8003eb0:	9a07      	ldr	r2, [sp, #28]
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eb8:	3b30      	subs	r3, #48	@ 0x30
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d94b      	bls.n	8003f56 <_vfiprintf_r+0x1a2>
 8003ebe:	b1b0      	cbz	r0, 8003eee <_vfiprintf_r+0x13a>
 8003ec0:	9207      	str	r2, [sp, #28]
 8003ec2:	e014      	b.n	8003eee <_vfiprintf_r+0x13a>
 8003ec4:	eba0 0308 	sub.w	r3, r0, r8
 8003ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	46a2      	mov	sl, r4
 8003ed0:	9304      	str	r3, [sp, #16]
 8003ed2:	e7d2      	b.n	8003e7a <_vfiprintf_r+0xc6>
 8003ed4:	9b03      	ldr	r3, [sp, #12]
 8003ed6:	1d19      	adds	r1, r3, #4
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	9103      	str	r1, [sp, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bfbb      	ittet	lt
 8003ee0:	425b      	neglt	r3, r3
 8003ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ee6:	9307      	strge	r3, [sp, #28]
 8003ee8:	9307      	strlt	r3, [sp, #28]
 8003eea:	bfb8      	it	lt
 8003eec:	9204      	strlt	r2, [sp, #16]
 8003eee:	7823      	ldrb	r3, [r4, #0]
 8003ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ef2:	d10a      	bne.n	8003f0a <_vfiprintf_r+0x156>
 8003ef4:	7863      	ldrb	r3, [r4, #1]
 8003ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ef8:	d132      	bne.n	8003f60 <_vfiprintf_r+0x1ac>
 8003efa:	9b03      	ldr	r3, [sp, #12]
 8003efc:	3402      	adds	r4, #2
 8003efe:	1d1a      	adds	r2, r3, #4
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	9203      	str	r2, [sp, #12]
 8003f04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f08:	9305      	str	r3, [sp, #20]
 8003f0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003fd4 <_vfiprintf_r+0x220>
 8003f0e:	2203      	movs	r2, #3
 8003f10:	4650      	mov	r0, sl
 8003f12:	7821      	ldrb	r1, [r4, #0]
 8003f14:	f000 fb32 	bl	800457c <memchr>
 8003f18:	b138      	cbz	r0, 8003f2a <_vfiprintf_r+0x176>
 8003f1a:	2240      	movs	r2, #64	@ 0x40
 8003f1c:	9b04      	ldr	r3, [sp, #16]
 8003f1e:	eba0 000a 	sub.w	r0, r0, sl
 8003f22:	4082      	lsls	r2, r0
 8003f24:	4313      	orrs	r3, r2
 8003f26:	3401      	adds	r4, #1
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f2e:	2206      	movs	r2, #6
 8003f30:	4829      	ldr	r0, [pc, #164]	@ (8003fd8 <_vfiprintf_r+0x224>)
 8003f32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f36:	f000 fb21 	bl	800457c <memchr>
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d03f      	beq.n	8003fbe <_vfiprintf_r+0x20a>
 8003f3e:	4b27      	ldr	r3, [pc, #156]	@ (8003fdc <_vfiprintf_r+0x228>)
 8003f40:	bb1b      	cbnz	r3, 8003f8a <_vfiprintf_r+0x1d6>
 8003f42:	9b03      	ldr	r3, [sp, #12]
 8003f44:	3307      	adds	r3, #7
 8003f46:	f023 0307 	bic.w	r3, r3, #7
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	9303      	str	r3, [sp, #12]
 8003f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f50:	443b      	add	r3, r7
 8003f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f54:	e76a      	b.n	8003e2c <_vfiprintf_r+0x78>
 8003f56:	460c      	mov	r4, r1
 8003f58:	2001      	movs	r0, #1
 8003f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f5e:	e7a8      	b.n	8003eb2 <_vfiprintf_r+0xfe>
 8003f60:	2300      	movs	r3, #0
 8003f62:	f04f 0c0a 	mov.w	ip, #10
 8003f66:	4619      	mov	r1, r3
 8003f68:	3401      	adds	r4, #1
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f72:	3a30      	subs	r2, #48	@ 0x30
 8003f74:	2a09      	cmp	r2, #9
 8003f76:	d903      	bls.n	8003f80 <_vfiprintf_r+0x1cc>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0c6      	beq.n	8003f0a <_vfiprintf_r+0x156>
 8003f7c:	9105      	str	r1, [sp, #20]
 8003f7e:	e7c4      	b.n	8003f0a <_vfiprintf_r+0x156>
 8003f80:	4604      	mov	r4, r0
 8003f82:	2301      	movs	r3, #1
 8003f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f88:	e7f0      	b.n	8003f6c <_vfiprintf_r+0x1b8>
 8003f8a:	ab03      	add	r3, sp, #12
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	462a      	mov	r2, r5
 8003f90:	4630      	mov	r0, r6
 8003f92:	4b13      	ldr	r3, [pc, #76]	@ (8003fe0 <_vfiprintf_r+0x22c>)
 8003f94:	a904      	add	r1, sp, #16
 8003f96:	f3af 8000 	nop.w
 8003f9a:	4607      	mov	r7, r0
 8003f9c:	1c78      	adds	r0, r7, #1
 8003f9e:	d1d6      	bne.n	8003f4e <_vfiprintf_r+0x19a>
 8003fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003fa2:	07d9      	lsls	r1, r3, #31
 8003fa4:	d405      	bmi.n	8003fb2 <_vfiprintf_r+0x1fe>
 8003fa6:	89ab      	ldrh	r3, [r5, #12]
 8003fa8:	059a      	lsls	r2, r3, #22
 8003faa:	d402      	bmi.n	8003fb2 <_vfiprintf_r+0x1fe>
 8003fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003fae:	f7ff fde1 	bl	8003b74 <__retarget_lock_release_recursive>
 8003fb2:	89ab      	ldrh	r3, [r5, #12]
 8003fb4:	065b      	lsls	r3, r3, #25
 8003fb6:	f53f af1f 	bmi.w	8003df8 <_vfiprintf_r+0x44>
 8003fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fbc:	e71e      	b.n	8003dfc <_vfiprintf_r+0x48>
 8003fbe:	ab03      	add	r3, sp, #12
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	462a      	mov	r2, r5
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	4b06      	ldr	r3, [pc, #24]	@ (8003fe0 <_vfiprintf_r+0x22c>)
 8003fc8:	a904      	add	r1, sp, #16
 8003fca:	f000 f87d 	bl	80040c8 <_printf_i>
 8003fce:	e7e4      	b.n	8003f9a <_vfiprintf_r+0x1e6>
 8003fd0:	0800463a 	.word	0x0800463a
 8003fd4:	08004640 	.word	0x08004640
 8003fd8:	08004644 	.word	0x08004644
 8003fdc:	00000000 	.word	0x00000000
 8003fe0:	08003d8f 	.word	0x08003d8f

08003fe4 <_printf_common>:
 8003fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe8:	4616      	mov	r6, r2
 8003fea:	4698      	mov	r8, r3
 8003fec:	688a      	ldr	r2, [r1, #8]
 8003fee:	690b      	ldr	r3, [r1, #16]
 8003ff0:	4607      	mov	r7, r0
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	bfb8      	it	lt
 8003ff6:	4613      	movlt	r3, r2
 8003ff8:	6033      	str	r3, [r6, #0]
 8003ffa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ffe:	460c      	mov	r4, r1
 8004000:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004004:	b10a      	cbz	r2, 800400a <_printf_common+0x26>
 8004006:	3301      	adds	r3, #1
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	0699      	lsls	r1, r3, #26
 800400e:	bf42      	ittt	mi
 8004010:	6833      	ldrmi	r3, [r6, #0]
 8004012:	3302      	addmi	r3, #2
 8004014:	6033      	strmi	r3, [r6, #0]
 8004016:	6825      	ldr	r5, [r4, #0]
 8004018:	f015 0506 	ands.w	r5, r5, #6
 800401c:	d106      	bne.n	800402c <_printf_common+0x48>
 800401e:	f104 0a19 	add.w	sl, r4, #25
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	6832      	ldr	r2, [r6, #0]
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	42ab      	cmp	r3, r5
 800402a:	dc2b      	bgt.n	8004084 <_printf_common+0xa0>
 800402c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004030:	6822      	ldr	r2, [r4, #0]
 8004032:	3b00      	subs	r3, #0
 8004034:	bf18      	it	ne
 8004036:	2301      	movne	r3, #1
 8004038:	0692      	lsls	r2, r2, #26
 800403a:	d430      	bmi.n	800409e <_printf_common+0xba>
 800403c:	4641      	mov	r1, r8
 800403e:	4638      	mov	r0, r7
 8004040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004044:	47c8      	blx	r9
 8004046:	3001      	adds	r0, #1
 8004048:	d023      	beq.n	8004092 <_printf_common+0xae>
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	6922      	ldr	r2, [r4, #16]
 800404e:	f003 0306 	and.w	r3, r3, #6
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf14      	ite	ne
 8004056:	2500      	movne	r5, #0
 8004058:	6833      	ldreq	r3, [r6, #0]
 800405a:	f04f 0600 	mov.w	r6, #0
 800405e:	bf08      	it	eq
 8004060:	68e5      	ldreq	r5, [r4, #12]
 8004062:	f104 041a 	add.w	r4, r4, #26
 8004066:	bf08      	it	eq
 8004068:	1aed      	subeq	r5, r5, r3
 800406a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800406e:	bf08      	it	eq
 8004070:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004074:	4293      	cmp	r3, r2
 8004076:	bfc4      	itt	gt
 8004078:	1a9b      	subgt	r3, r3, r2
 800407a:	18ed      	addgt	r5, r5, r3
 800407c:	42b5      	cmp	r5, r6
 800407e:	d11a      	bne.n	80040b6 <_printf_common+0xd2>
 8004080:	2000      	movs	r0, #0
 8004082:	e008      	b.n	8004096 <_printf_common+0xb2>
 8004084:	2301      	movs	r3, #1
 8004086:	4652      	mov	r2, sl
 8004088:	4641      	mov	r1, r8
 800408a:	4638      	mov	r0, r7
 800408c:	47c8      	blx	r9
 800408e:	3001      	adds	r0, #1
 8004090:	d103      	bne.n	800409a <_printf_common+0xb6>
 8004092:	f04f 30ff 	mov.w	r0, #4294967295
 8004096:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800409a:	3501      	adds	r5, #1
 800409c:	e7c1      	b.n	8004022 <_printf_common+0x3e>
 800409e:	2030      	movs	r0, #48	@ 0x30
 80040a0:	18e1      	adds	r1, r4, r3
 80040a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040a6:	1c5a      	adds	r2, r3, #1
 80040a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040ac:	4422      	add	r2, r4
 80040ae:	3302      	adds	r3, #2
 80040b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040b4:	e7c2      	b.n	800403c <_printf_common+0x58>
 80040b6:	2301      	movs	r3, #1
 80040b8:	4622      	mov	r2, r4
 80040ba:	4641      	mov	r1, r8
 80040bc:	4638      	mov	r0, r7
 80040be:	47c8      	blx	r9
 80040c0:	3001      	adds	r0, #1
 80040c2:	d0e6      	beq.n	8004092 <_printf_common+0xae>
 80040c4:	3601      	adds	r6, #1
 80040c6:	e7d9      	b.n	800407c <_printf_common+0x98>

080040c8 <_printf_i>:
 80040c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	7e0f      	ldrb	r7, [r1, #24]
 80040ce:	4691      	mov	r9, r2
 80040d0:	2f78      	cmp	r7, #120	@ 0x78
 80040d2:	4680      	mov	r8, r0
 80040d4:	460c      	mov	r4, r1
 80040d6:	469a      	mov	sl, r3
 80040d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040de:	d807      	bhi.n	80040f0 <_printf_i+0x28>
 80040e0:	2f62      	cmp	r7, #98	@ 0x62
 80040e2:	d80a      	bhi.n	80040fa <_printf_i+0x32>
 80040e4:	2f00      	cmp	r7, #0
 80040e6:	f000 80d1 	beq.w	800428c <_printf_i+0x1c4>
 80040ea:	2f58      	cmp	r7, #88	@ 0x58
 80040ec:	f000 80b8 	beq.w	8004260 <_printf_i+0x198>
 80040f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040f8:	e03a      	b.n	8004170 <_printf_i+0xa8>
 80040fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040fe:	2b15      	cmp	r3, #21
 8004100:	d8f6      	bhi.n	80040f0 <_printf_i+0x28>
 8004102:	a101      	add	r1, pc, #4	@ (adr r1, 8004108 <_printf_i+0x40>)
 8004104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004108:	08004161 	.word	0x08004161
 800410c:	08004175 	.word	0x08004175
 8004110:	080040f1 	.word	0x080040f1
 8004114:	080040f1 	.word	0x080040f1
 8004118:	080040f1 	.word	0x080040f1
 800411c:	080040f1 	.word	0x080040f1
 8004120:	08004175 	.word	0x08004175
 8004124:	080040f1 	.word	0x080040f1
 8004128:	080040f1 	.word	0x080040f1
 800412c:	080040f1 	.word	0x080040f1
 8004130:	080040f1 	.word	0x080040f1
 8004134:	08004273 	.word	0x08004273
 8004138:	0800419f 	.word	0x0800419f
 800413c:	0800422d 	.word	0x0800422d
 8004140:	080040f1 	.word	0x080040f1
 8004144:	080040f1 	.word	0x080040f1
 8004148:	08004295 	.word	0x08004295
 800414c:	080040f1 	.word	0x080040f1
 8004150:	0800419f 	.word	0x0800419f
 8004154:	080040f1 	.word	0x080040f1
 8004158:	080040f1 	.word	0x080040f1
 800415c:	08004235 	.word	0x08004235
 8004160:	6833      	ldr	r3, [r6, #0]
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6032      	str	r2, [r6, #0]
 8004168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800416c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004170:	2301      	movs	r3, #1
 8004172:	e09c      	b.n	80042ae <_printf_i+0x1e6>
 8004174:	6833      	ldr	r3, [r6, #0]
 8004176:	6820      	ldr	r0, [r4, #0]
 8004178:	1d19      	adds	r1, r3, #4
 800417a:	6031      	str	r1, [r6, #0]
 800417c:	0606      	lsls	r6, r0, #24
 800417e:	d501      	bpl.n	8004184 <_printf_i+0xbc>
 8004180:	681d      	ldr	r5, [r3, #0]
 8004182:	e003      	b.n	800418c <_printf_i+0xc4>
 8004184:	0645      	lsls	r5, r0, #25
 8004186:	d5fb      	bpl.n	8004180 <_printf_i+0xb8>
 8004188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800418c:	2d00      	cmp	r5, #0
 800418e:	da03      	bge.n	8004198 <_printf_i+0xd0>
 8004190:	232d      	movs	r3, #45	@ 0x2d
 8004192:	426d      	negs	r5, r5
 8004194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004198:	230a      	movs	r3, #10
 800419a:	4858      	ldr	r0, [pc, #352]	@ (80042fc <_printf_i+0x234>)
 800419c:	e011      	b.n	80041c2 <_printf_i+0xfa>
 800419e:	6821      	ldr	r1, [r4, #0]
 80041a0:	6833      	ldr	r3, [r6, #0]
 80041a2:	0608      	lsls	r0, r1, #24
 80041a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041a8:	d402      	bmi.n	80041b0 <_printf_i+0xe8>
 80041aa:	0649      	lsls	r1, r1, #25
 80041ac:	bf48      	it	mi
 80041ae:	b2ad      	uxthmi	r5, r5
 80041b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80041b2:	6033      	str	r3, [r6, #0]
 80041b4:	bf14      	ite	ne
 80041b6:	230a      	movne	r3, #10
 80041b8:	2308      	moveq	r3, #8
 80041ba:	4850      	ldr	r0, [pc, #320]	@ (80042fc <_printf_i+0x234>)
 80041bc:	2100      	movs	r1, #0
 80041be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041c2:	6866      	ldr	r6, [r4, #4]
 80041c4:	2e00      	cmp	r6, #0
 80041c6:	60a6      	str	r6, [r4, #8]
 80041c8:	db05      	blt.n	80041d6 <_printf_i+0x10e>
 80041ca:	6821      	ldr	r1, [r4, #0]
 80041cc:	432e      	orrs	r6, r5
 80041ce:	f021 0104 	bic.w	r1, r1, #4
 80041d2:	6021      	str	r1, [r4, #0]
 80041d4:	d04b      	beq.n	800426e <_printf_i+0x1a6>
 80041d6:	4616      	mov	r6, r2
 80041d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041dc:	fb03 5711 	mls	r7, r3, r1, r5
 80041e0:	5dc7      	ldrb	r7, [r0, r7]
 80041e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041e6:	462f      	mov	r7, r5
 80041e8:	42bb      	cmp	r3, r7
 80041ea:	460d      	mov	r5, r1
 80041ec:	d9f4      	bls.n	80041d8 <_printf_i+0x110>
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10b      	bne.n	800420a <_printf_i+0x142>
 80041f2:	6823      	ldr	r3, [r4, #0]
 80041f4:	07df      	lsls	r7, r3, #31
 80041f6:	d508      	bpl.n	800420a <_printf_i+0x142>
 80041f8:	6923      	ldr	r3, [r4, #16]
 80041fa:	6861      	ldr	r1, [r4, #4]
 80041fc:	4299      	cmp	r1, r3
 80041fe:	bfde      	ittt	le
 8004200:	2330      	movle	r3, #48	@ 0x30
 8004202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800420a:	1b92      	subs	r2, r2, r6
 800420c:	6122      	str	r2, [r4, #16]
 800420e:	464b      	mov	r3, r9
 8004210:	4621      	mov	r1, r4
 8004212:	4640      	mov	r0, r8
 8004214:	f8cd a000 	str.w	sl, [sp]
 8004218:	aa03      	add	r2, sp, #12
 800421a:	f7ff fee3 	bl	8003fe4 <_printf_common>
 800421e:	3001      	adds	r0, #1
 8004220:	d14a      	bne.n	80042b8 <_printf_i+0x1f0>
 8004222:	f04f 30ff 	mov.w	r0, #4294967295
 8004226:	b004      	add	sp, #16
 8004228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	f043 0320 	orr.w	r3, r3, #32
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	2778      	movs	r7, #120	@ 0x78
 8004236:	4832      	ldr	r0, [pc, #200]	@ (8004300 <_printf_i+0x238>)
 8004238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	6831      	ldr	r1, [r6, #0]
 8004240:	061f      	lsls	r7, r3, #24
 8004242:	f851 5b04 	ldr.w	r5, [r1], #4
 8004246:	d402      	bmi.n	800424e <_printf_i+0x186>
 8004248:	065f      	lsls	r7, r3, #25
 800424a:	bf48      	it	mi
 800424c:	b2ad      	uxthmi	r5, r5
 800424e:	6031      	str	r1, [r6, #0]
 8004250:	07d9      	lsls	r1, r3, #31
 8004252:	bf44      	itt	mi
 8004254:	f043 0320 	orrmi.w	r3, r3, #32
 8004258:	6023      	strmi	r3, [r4, #0]
 800425a:	b11d      	cbz	r5, 8004264 <_printf_i+0x19c>
 800425c:	2310      	movs	r3, #16
 800425e:	e7ad      	b.n	80041bc <_printf_i+0xf4>
 8004260:	4826      	ldr	r0, [pc, #152]	@ (80042fc <_printf_i+0x234>)
 8004262:	e7e9      	b.n	8004238 <_printf_i+0x170>
 8004264:	6823      	ldr	r3, [r4, #0]
 8004266:	f023 0320 	bic.w	r3, r3, #32
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	e7f6      	b.n	800425c <_printf_i+0x194>
 800426e:	4616      	mov	r6, r2
 8004270:	e7bd      	b.n	80041ee <_printf_i+0x126>
 8004272:	6833      	ldr	r3, [r6, #0]
 8004274:	6825      	ldr	r5, [r4, #0]
 8004276:	1d18      	adds	r0, r3, #4
 8004278:	6961      	ldr	r1, [r4, #20]
 800427a:	6030      	str	r0, [r6, #0]
 800427c:	062e      	lsls	r6, r5, #24
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	d501      	bpl.n	8004286 <_printf_i+0x1be>
 8004282:	6019      	str	r1, [r3, #0]
 8004284:	e002      	b.n	800428c <_printf_i+0x1c4>
 8004286:	0668      	lsls	r0, r5, #25
 8004288:	d5fb      	bpl.n	8004282 <_printf_i+0x1ba>
 800428a:	8019      	strh	r1, [r3, #0]
 800428c:	2300      	movs	r3, #0
 800428e:	4616      	mov	r6, r2
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	e7bc      	b.n	800420e <_printf_i+0x146>
 8004294:	6833      	ldr	r3, [r6, #0]
 8004296:	2100      	movs	r1, #0
 8004298:	1d1a      	adds	r2, r3, #4
 800429a:	6032      	str	r2, [r6, #0]
 800429c:	681e      	ldr	r6, [r3, #0]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	4630      	mov	r0, r6
 80042a2:	f000 f96b 	bl	800457c <memchr>
 80042a6:	b108      	cbz	r0, 80042ac <_printf_i+0x1e4>
 80042a8:	1b80      	subs	r0, r0, r6
 80042aa:	6060      	str	r0, [r4, #4]
 80042ac:	6863      	ldr	r3, [r4, #4]
 80042ae:	6123      	str	r3, [r4, #16]
 80042b0:	2300      	movs	r3, #0
 80042b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042b6:	e7aa      	b.n	800420e <_printf_i+0x146>
 80042b8:	4632      	mov	r2, r6
 80042ba:	4649      	mov	r1, r9
 80042bc:	4640      	mov	r0, r8
 80042be:	6923      	ldr	r3, [r4, #16]
 80042c0:	47d0      	blx	sl
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0ad      	beq.n	8004222 <_printf_i+0x15a>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	079b      	lsls	r3, r3, #30
 80042ca:	d413      	bmi.n	80042f4 <_printf_i+0x22c>
 80042cc:	68e0      	ldr	r0, [r4, #12]
 80042ce:	9b03      	ldr	r3, [sp, #12]
 80042d0:	4298      	cmp	r0, r3
 80042d2:	bfb8      	it	lt
 80042d4:	4618      	movlt	r0, r3
 80042d6:	e7a6      	b.n	8004226 <_printf_i+0x15e>
 80042d8:	2301      	movs	r3, #1
 80042da:	4632      	mov	r2, r6
 80042dc:	4649      	mov	r1, r9
 80042de:	4640      	mov	r0, r8
 80042e0:	47d0      	blx	sl
 80042e2:	3001      	adds	r0, #1
 80042e4:	d09d      	beq.n	8004222 <_printf_i+0x15a>
 80042e6:	3501      	adds	r5, #1
 80042e8:	68e3      	ldr	r3, [r4, #12]
 80042ea:	9903      	ldr	r1, [sp, #12]
 80042ec:	1a5b      	subs	r3, r3, r1
 80042ee:	42ab      	cmp	r3, r5
 80042f0:	dcf2      	bgt.n	80042d8 <_printf_i+0x210>
 80042f2:	e7eb      	b.n	80042cc <_printf_i+0x204>
 80042f4:	2500      	movs	r5, #0
 80042f6:	f104 0619 	add.w	r6, r4, #25
 80042fa:	e7f5      	b.n	80042e8 <_printf_i+0x220>
 80042fc:	0800464b 	.word	0x0800464b
 8004300:	0800465c 	.word	0x0800465c

08004304 <__sflush_r>:
 8004304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	0716      	lsls	r6, r2, #28
 800430c:	4605      	mov	r5, r0
 800430e:	460c      	mov	r4, r1
 8004310:	d454      	bmi.n	80043bc <__sflush_r+0xb8>
 8004312:	684b      	ldr	r3, [r1, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	dc02      	bgt.n	800431e <__sflush_r+0x1a>
 8004318:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	dd48      	ble.n	80043b0 <__sflush_r+0xac>
 800431e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004320:	2e00      	cmp	r6, #0
 8004322:	d045      	beq.n	80043b0 <__sflush_r+0xac>
 8004324:	2300      	movs	r3, #0
 8004326:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800432a:	682f      	ldr	r7, [r5, #0]
 800432c:	6a21      	ldr	r1, [r4, #32]
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	d030      	beq.n	8004394 <__sflush_r+0x90>
 8004332:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	0759      	lsls	r1, r3, #29
 8004338:	d505      	bpl.n	8004346 <__sflush_r+0x42>
 800433a:	6863      	ldr	r3, [r4, #4]
 800433c:	1ad2      	subs	r2, r2, r3
 800433e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004340:	b10b      	cbz	r3, 8004346 <__sflush_r+0x42>
 8004342:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004344:	1ad2      	subs	r2, r2, r3
 8004346:	2300      	movs	r3, #0
 8004348:	4628      	mov	r0, r5
 800434a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800434c:	6a21      	ldr	r1, [r4, #32]
 800434e:	47b0      	blx	r6
 8004350:	1c43      	adds	r3, r0, #1
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	d106      	bne.n	8004364 <__sflush_r+0x60>
 8004356:	6829      	ldr	r1, [r5, #0]
 8004358:	291d      	cmp	r1, #29
 800435a:	d82b      	bhi.n	80043b4 <__sflush_r+0xb0>
 800435c:	4a28      	ldr	r2, [pc, #160]	@ (8004400 <__sflush_r+0xfc>)
 800435e:	40ca      	lsrs	r2, r1
 8004360:	07d6      	lsls	r6, r2, #31
 8004362:	d527      	bpl.n	80043b4 <__sflush_r+0xb0>
 8004364:	2200      	movs	r2, #0
 8004366:	6062      	str	r2, [r4, #4]
 8004368:	6922      	ldr	r2, [r4, #16]
 800436a:	04d9      	lsls	r1, r3, #19
 800436c:	6022      	str	r2, [r4, #0]
 800436e:	d504      	bpl.n	800437a <__sflush_r+0x76>
 8004370:	1c42      	adds	r2, r0, #1
 8004372:	d101      	bne.n	8004378 <__sflush_r+0x74>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b903      	cbnz	r3, 800437a <__sflush_r+0x76>
 8004378:	6560      	str	r0, [r4, #84]	@ 0x54
 800437a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800437c:	602f      	str	r7, [r5, #0]
 800437e:	b1b9      	cbz	r1, 80043b0 <__sflush_r+0xac>
 8004380:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004384:	4299      	cmp	r1, r3
 8004386:	d002      	beq.n	800438e <__sflush_r+0x8a>
 8004388:	4628      	mov	r0, r5
 800438a:	f7ff fbf5 	bl	8003b78 <_free_r>
 800438e:	2300      	movs	r3, #0
 8004390:	6363      	str	r3, [r4, #52]	@ 0x34
 8004392:	e00d      	b.n	80043b0 <__sflush_r+0xac>
 8004394:	2301      	movs	r3, #1
 8004396:	4628      	mov	r0, r5
 8004398:	47b0      	blx	r6
 800439a:	4602      	mov	r2, r0
 800439c:	1c50      	adds	r0, r2, #1
 800439e:	d1c9      	bne.n	8004334 <__sflush_r+0x30>
 80043a0:	682b      	ldr	r3, [r5, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0c6      	beq.n	8004334 <__sflush_r+0x30>
 80043a6:	2b1d      	cmp	r3, #29
 80043a8:	d001      	beq.n	80043ae <__sflush_r+0xaa>
 80043aa:	2b16      	cmp	r3, #22
 80043ac:	d11d      	bne.n	80043ea <__sflush_r+0xe6>
 80043ae:	602f      	str	r7, [r5, #0]
 80043b0:	2000      	movs	r0, #0
 80043b2:	e021      	b.n	80043f8 <__sflush_r+0xf4>
 80043b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043b8:	b21b      	sxth	r3, r3
 80043ba:	e01a      	b.n	80043f2 <__sflush_r+0xee>
 80043bc:	690f      	ldr	r7, [r1, #16]
 80043be:	2f00      	cmp	r7, #0
 80043c0:	d0f6      	beq.n	80043b0 <__sflush_r+0xac>
 80043c2:	0793      	lsls	r3, r2, #30
 80043c4:	bf18      	it	ne
 80043c6:	2300      	movne	r3, #0
 80043c8:	680e      	ldr	r6, [r1, #0]
 80043ca:	bf08      	it	eq
 80043cc:	694b      	ldreq	r3, [r1, #20]
 80043ce:	1bf6      	subs	r6, r6, r7
 80043d0:	600f      	str	r7, [r1, #0]
 80043d2:	608b      	str	r3, [r1, #8]
 80043d4:	2e00      	cmp	r6, #0
 80043d6:	ddeb      	ble.n	80043b0 <__sflush_r+0xac>
 80043d8:	4633      	mov	r3, r6
 80043da:	463a      	mov	r2, r7
 80043dc:	4628      	mov	r0, r5
 80043de:	6a21      	ldr	r1, [r4, #32]
 80043e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80043e4:	47e0      	blx	ip
 80043e6:	2800      	cmp	r0, #0
 80043e8:	dc07      	bgt.n	80043fa <__sflush_r+0xf6>
 80043ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043f2:	f04f 30ff 	mov.w	r0, #4294967295
 80043f6:	81a3      	strh	r3, [r4, #12]
 80043f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fa:	4407      	add	r7, r0
 80043fc:	1a36      	subs	r6, r6, r0
 80043fe:	e7e9      	b.n	80043d4 <__sflush_r+0xd0>
 8004400:	20400001 	.word	0x20400001

08004404 <_fflush_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	690b      	ldr	r3, [r1, #16]
 8004408:	4605      	mov	r5, r0
 800440a:	460c      	mov	r4, r1
 800440c:	b913      	cbnz	r3, 8004414 <_fflush_r+0x10>
 800440e:	2500      	movs	r5, #0
 8004410:	4628      	mov	r0, r5
 8004412:	bd38      	pop	{r3, r4, r5, pc}
 8004414:	b118      	cbz	r0, 800441e <_fflush_r+0x1a>
 8004416:	6a03      	ldr	r3, [r0, #32]
 8004418:	b90b      	cbnz	r3, 800441e <_fflush_r+0x1a>
 800441a:	f7ff f9b3 	bl	8003784 <__sinit>
 800441e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0f3      	beq.n	800440e <_fflush_r+0xa>
 8004426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004428:	07d0      	lsls	r0, r2, #31
 800442a:	d404      	bmi.n	8004436 <_fflush_r+0x32>
 800442c:	0599      	lsls	r1, r3, #22
 800442e:	d402      	bmi.n	8004436 <_fflush_r+0x32>
 8004430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004432:	f7ff fb9e 	bl	8003b72 <__retarget_lock_acquire_recursive>
 8004436:	4628      	mov	r0, r5
 8004438:	4621      	mov	r1, r4
 800443a:	f7ff ff63 	bl	8004304 <__sflush_r>
 800443e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004440:	4605      	mov	r5, r0
 8004442:	07da      	lsls	r2, r3, #31
 8004444:	d4e4      	bmi.n	8004410 <_fflush_r+0xc>
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	059b      	lsls	r3, r3, #22
 800444a:	d4e1      	bmi.n	8004410 <_fflush_r+0xc>
 800444c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800444e:	f7ff fb91 	bl	8003b74 <__retarget_lock_release_recursive>
 8004452:	e7dd      	b.n	8004410 <_fflush_r+0xc>

08004454 <__swhatbuf_r>:
 8004454:	b570      	push	{r4, r5, r6, lr}
 8004456:	460c      	mov	r4, r1
 8004458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800445c:	4615      	mov	r5, r2
 800445e:	2900      	cmp	r1, #0
 8004460:	461e      	mov	r6, r3
 8004462:	b096      	sub	sp, #88	@ 0x58
 8004464:	da0c      	bge.n	8004480 <__swhatbuf_r+0x2c>
 8004466:	89a3      	ldrh	r3, [r4, #12]
 8004468:	2100      	movs	r1, #0
 800446a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800446e:	bf14      	ite	ne
 8004470:	2340      	movne	r3, #64	@ 0x40
 8004472:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004476:	2000      	movs	r0, #0
 8004478:	6031      	str	r1, [r6, #0]
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	b016      	add	sp, #88	@ 0x58
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	466a      	mov	r2, sp
 8004482:	f000 f849 	bl	8004518 <_fstat_r>
 8004486:	2800      	cmp	r0, #0
 8004488:	dbed      	blt.n	8004466 <__swhatbuf_r+0x12>
 800448a:	9901      	ldr	r1, [sp, #4]
 800448c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004490:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004494:	4259      	negs	r1, r3
 8004496:	4159      	adcs	r1, r3
 8004498:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800449c:	e7eb      	b.n	8004476 <__swhatbuf_r+0x22>

0800449e <__smakebuf_r>:
 800449e:	898b      	ldrh	r3, [r1, #12]
 80044a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044a2:	079d      	lsls	r5, r3, #30
 80044a4:	4606      	mov	r6, r0
 80044a6:	460c      	mov	r4, r1
 80044a8:	d507      	bpl.n	80044ba <__smakebuf_r+0x1c>
 80044aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	6123      	str	r3, [r4, #16]
 80044b2:	2301      	movs	r3, #1
 80044b4:	6163      	str	r3, [r4, #20]
 80044b6:	b003      	add	sp, #12
 80044b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ba:	466a      	mov	r2, sp
 80044bc:	ab01      	add	r3, sp, #4
 80044be:	f7ff ffc9 	bl	8004454 <__swhatbuf_r>
 80044c2:	9f00      	ldr	r7, [sp, #0]
 80044c4:	4605      	mov	r5, r0
 80044c6:	4639      	mov	r1, r7
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7ff fbbf 	bl	8003c4c <_malloc_r>
 80044ce:	b948      	cbnz	r0, 80044e4 <__smakebuf_r+0x46>
 80044d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044d4:	059a      	lsls	r2, r3, #22
 80044d6:	d4ee      	bmi.n	80044b6 <__smakebuf_r+0x18>
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	f043 0302 	orr.w	r3, r3, #2
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	e7e2      	b.n	80044aa <__smakebuf_r+0xc>
 80044e4:	89a3      	ldrh	r3, [r4, #12]
 80044e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ee:	81a3      	strh	r3, [r4, #12]
 80044f0:	9b01      	ldr	r3, [sp, #4]
 80044f2:	6020      	str	r0, [r4, #0]
 80044f4:	b15b      	cbz	r3, 800450e <__smakebuf_r+0x70>
 80044f6:	4630      	mov	r0, r6
 80044f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044fc:	f000 f81e 	bl	800453c <_isatty_r>
 8004500:	b128      	cbz	r0, 800450e <__smakebuf_r+0x70>
 8004502:	89a3      	ldrh	r3, [r4, #12]
 8004504:	f023 0303 	bic.w	r3, r3, #3
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	81a3      	strh	r3, [r4, #12]
 800450e:	89a3      	ldrh	r3, [r4, #12]
 8004510:	431d      	orrs	r5, r3
 8004512:	81a5      	strh	r5, [r4, #12]
 8004514:	e7cf      	b.n	80044b6 <__smakebuf_r+0x18>
	...

08004518 <_fstat_r>:
 8004518:	b538      	push	{r3, r4, r5, lr}
 800451a:	2300      	movs	r3, #0
 800451c:	4d06      	ldr	r5, [pc, #24]	@ (8004538 <_fstat_r+0x20>)
 800451e:	4604      	mov	r4, r0
 8004520:	4608      	mov	r0, r1
 8004522:	4611      	mov	r1, r2
 8004524:	602b      	str	r3, [r5, #0]
 8004526:	f7fc facd 	bl	8000ac4 <_fstat>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d102      	bne.n	8004534 <_fstat_r+0x1c>
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	b103      	cbz	r3, 8004534 <_fstat_r+0x1c>
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	bd38      	pop	{r3, r4, r5, pc}
 8004536:	bf00      	nop
 8004538:	20000320 	.word	0x20000320

0800453c <_isatty_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	2300      	movs	r3, #0
 8004540:	4d05      	ldr	r5, [pc, #20]	@ (8004558 <_isatty_r+0x1c>)
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fc facb 	bl	8000ae2 <_isatty>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_isatty_r+0x1a>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_isatty_r+0x1a>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	20000320 	.word	0x20000320

0800455c <_sbrk_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	2300      	movs	r3, #0
 8004560:	4d05      	ldr	r5, [pc, #20]	@ (8004578 <_sbrk_r+0x1c>)
 8004562:	4604      	mov	r4, r0
 8004564:	4608      	mov	r0, r1
 8004566:	602b      	str	r3, [r5, #0]
 8004568:	f7fc fad2 	bl	8000b10 <_sbrk>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d102      	bne.n	8004576 <_sbrk_r+0x1a>
 8004570:	682b      	ldr	r3, [r5, #0]
 8004572:	b103      	cbz	r3, 8004576 <_sbrk_r+0x1a>
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	bd38      	pop	{r3, r4, r5, pc}
 8004578:	20000320 	.word	0x20000320

0800457c <memchr>:
 800457c:	4603      	mov	r3, r0
 800457e:	b510      	push	{r4, lr}
 8004580:	b2c9      	uxtb	r1, r1
 8004582:	4402      	add	r2, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	4618      	mov	r0, r3
 8004588:	d101      	bne.n	800458e <memchr+0x12>
 800458a:	2000      	movs	r0, #0
 800458c:	e003      	b.n	8004596 <memchr+0x1a>
 800458e:	7804      	ldrb	r4, [r0, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	428c      	cmp	r4, r1
 8004594:	d1f6      	bne.n	8004584 <memchr+0x8>
 8004596:	bd10      	pop	{r4, pc}

08004598 <_init>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr

080045a4 <_fini>:
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	bf00      	nop
 80045a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045aa:	bc08      	pop	{r3}
 80045ac:	469e      	mov	lr, r3
 80045ae:	4770      	bx	lr
