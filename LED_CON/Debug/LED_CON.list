
LED_CON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08003050  08003050  00004050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003130  08003130  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003130  08003130  00004130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003138  08003138  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003138  08003138  00004138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800313c  0800313c  0000413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003140  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  080031a8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080031a8  00005324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006fa3  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001552  00000000  00000000  0000c034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000d588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054a  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017780  00000000  00000000  0000e1d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f76  00000000  00000000  00025952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ed6  00000000  00000000  0002d8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b179e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  000b17e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b3b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003038 	.word	0x08003038

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003038 	.word	0x08003038

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f001 fcd8 	bl	8001b28 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f001 fcd1 	bl	8001b28 <HAL_UART_Transmit>

		return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08003050 	.word	0x08003050
 8000194:	20000084 	.word	0x20000084

08000198 <smartcar_F>:

void smartcar_F(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a2:	481a      	ldr	r0, [pc, #104]	@ (800020c <smartcar_F+0x74>)
 80001a4:	f001 f826 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ae:	4818      	ldr	r0, [pc, #96]	@ (8000210 <smartcar_F+0x78>)
 80001b0:	f001 f820 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	4815      	ldr	r0, [pc, #84]	@ (8000210 <smartcar_F+0x78>)
 80001ba:	f001 f81b 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001c4:	4812      	ldr	r0, [pc, #72]	@ (8000210 <smartcar_F+0x78>)
 80001c6:	f001 f815 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80001ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001ce:	f000 fd5b 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80001d2:	2201      	movs	r2, #1
 80001d4:	2108      	movs	r1, #8
 80001d6:	480e      	ldr	r0, [pc, #56]	@ (8000210 <smartcar_F+0x78>)
 80001d8:	f001 f80c 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e2:	480a      	ldr	r0, [pc, #40]	@ (800020c <smartcar_F+0x74>)
 80001e4:	f001 f806 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80001e8:	2201      	movs	r2, #1
 80001ea:	2110      	movs	r1, #16
 80001ec:	4808      	ldr	r0, [pc, #32]	@ (8000210 <smartcar_F+0x78>)
 80001ee:	f001 f801 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80001f2:	2201      	movs	r2, #1
 80001f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f8:	4805      	ldr	r0, [pc, #20]	@ (8000210 <smartcar_F+0x78>)
 80001fa:	f000 fffb 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80001fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000202:	f000 fd41 	bl	8000c88 <HAL_Delay>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010800 	.word	0x40010800
 8000210:	40010c00 	.word	0x40010c00

08000214 <smartcar_B>:

void smartcar_B(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000218:	2200      	movs	r2, #0
 800021a:	2108      	movs	r1, #8
 800021c:	481a      	ldr	r0, [pc, #104]	@ (8000288 <smartcar_B+0x74>)
 800021e:	f000 ffe9 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000222:	2200      	movs	r2, #0
 8000224:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000228:	4818      	ldr	r0, [pc, #96]	@ (800028c <smartcar_B+0x78>)
 800022a:	f000 ffe3 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800022e:	2200      	movs	r2, #0
 8000230:	2110      	movs	r1, #16
 8000232:	4815      	ldr	r0, [pc, #84]	@ (8000288 <smartcar_B+0x74>)
 8000234:	f000 ffde 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800023e:	4812      	ldr	r0, [pc, #72]	@ (8000288 <smartcar_B+0x74>)
 8000240:	f000 ffd8 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000244:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000248:	f000 fd1e 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000252:	480e      	ldr	r0, [pc, #56]	@ (800028c <smartcar_B+0x78>)
 8000254:	f000 ffce 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 8000258:	2201      	movs	r2, #1
 800025a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800025e:	480a      	ldr	r0, [pc, #40]	@ (8000288 <smartcar_B+0x74>)
 8000260:	f000 ffc8 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 8000264:	2201      	movs	r2, #1
 8000266:	2120      	movs	r1, #32
 8000268:	4807      	ldr	r0, [pc, #28]	@ (8000288 <smartcar_B+0x74>)
 800026a:	f000 ffc3 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 800026e:	2201      	movs	r2, #1
 8000270:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000274:	4804      	ldr	r0, [pc, #16]	@ (8000288 <smartcar_B+0x74>)
 8000276:	f000 ffbd 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800027a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800027e:	f000 fd03 	bl	8000c88 <HAL_Delay>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40010c00 	.word	0x40010c00
 800028c:	40010800 	.word	0x40010800

08000290 <smartcar_S>:

void smartcar_S(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800029a:	481a      	ldr	r0, [pc, #104]	@ (8000304 <smartcar_S+0x74>)
 800029c:	f000 ffaa 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002a6:	4818      	ldr	r0, [pc, #96]	@ (8000308 <smartcar_S+0x78>)
 80002a8:	f000 ffa4 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2120      	movs	r1, #32
 80002b0:	4815      	ldr	r0, [pc, #84]	@ (8000308 <smartcar_S+0x78>)
 80002b2:	f000 ff9f 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002bc:	4812      	ldr	r0, [pc, #72]	@ (8000308 <smartcar_S+0x78>)
 80002be:	f000 ff99 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80002c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002c6:	f000 fcdf 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	480e      	ldr	r0, [pc, #56]	@ (8000308 <smartcar_S+0x78>)
 80002d0:	f000 ff90 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002da:	480a      	ldr	r0, [pc, #40]	@ (8000304 <smartcar_S+0x74>)
 80002dc:	f000 ff8a 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2110      	movs	r1, #16
 80002e4:	4808      	ldr	r0, [pc, #32]	@ (8000308 <smartcar_S+0x78>)
 80002e6:	f000 ff85 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80002ea:	2200      	movs	r2, #0
 80002ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002f0:	4805      	ldr	r0, [pc, #20]	@ (8000308 <smartcar_S+0x78>)
 80002f2:	f000 ff7f 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80002f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002fa:	f000 fcc5 	bl	8000c88 <HAL_Delay>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	40010800 	.word	0x40010800
 8000308:	40010c00 	.word	0x40010c00

0800030c <smartcar_FL>:

void smartcar_FL(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000310:	2200      	movs	r2, #0
 8000312:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000316:	481a      	ldr	r0, [pc, #104]	@ (8000380 <smartcar_FL+0x74>)
 8000318:	f000 ff6c 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000322:	4818      	ldr	r0, [pc, #96]	@ (8000384 <smartcar_FL+0x78>)
 8000324:	f000 ff66 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	4815      	ldr	r0, [pc, #84]	@ (8000384 <smartcar_FL+0x78>)
 800032e:	f000 ff61 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000332:	2200      	movs	r2, #0
 8000334:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000338:	4812      	ldr	r0, [pc, #72]	@ (8000384 <smartcar_FL+0x78>)
 800033a:	f000 ff5b 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800033e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000342:	f000 fca1 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000346:	2200      	movs	r2, #0
 8000348:	2108      	movs	r1, #8
 800034a:	480e      	ldr	r0, [pc, #56]	@ (8000384 <smartcar_FL+0x78>)
 800034c:	f000 ff52 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000350:	2200      	movs	r2, #0
 8000352:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000356:	480a      	ldr	r0, [pc, #40]	@ (8000380 <smartcar_FL+0x74>)
 8000358:	f000 ff4c 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 800035c:	2201      	movs	r2, #1
 800035e:	2110      	movs	r1, #16
 8000360:	4808      	ldr	r0, [pc, #32]	@ (8000384 <smartcar_FL+0x78>)
 8000362:	f000 ff47 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 8000366:	2201      	movs	r2, #1
 8000368:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800036c:	4805      	ldr	r0, [pc, #20]	@ (8000384 <smartcar_FL+0x78>)
 800036e:	f000 ff41 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000372:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000376:	f000 fc87 	bl	8000c88 <HAL_Delay>
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010800 	.word	0x40010800
 8000384:	40010c00 	.word	0x40010c00

08000388 <smartcar_FR>:


void smartcar_FR(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000392:	481a      	ldr	r0, [pc, #104]	@ (80003fc <smartcar_FR+0x74>)
 8000394:	f000 ff2e 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800039e:	4818      	ldr	r0, [pc, #96]	@ (8000400 <smartcar_FR+0x78>)
 80003a0:	f000 ff28 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2120      	movs	r1, #32
 80003a8:	4815      	ldr	r0, [pc, #84]	@ (8000400 <smartcar_FR+0x78>)
 80003aa:	f000 ff23 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80003ae:	2200      	movs	r2, #0
 80003b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003b4:	4812      	ldr	r0, [pc, #72]	@ (8000400 <smartcar_FR+0x78>)
 80003b6:	f000 ff1d 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80003ba:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003be:	f000 fc63 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	2108      	movs	r1, #8
 80003c6:	480e      	ldr	r0, [pc, #56]	@ (8000400 <smartcar_FR+0x78>)
 80003c8:	f000 ff14 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003d2:	480a      	ldr	r0, [pc, #40]	@ (80003fc <smartcar_FR+0x74>)
 80003d4:	f000 ff0e 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	2110      	movs	r1, #16
 80003dc:	4808      	ldr	r0, [pc, #32]	@ (8000400 <smartcar_FR+0x78>)
 80003de:	f000 ff09 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80003e2:	2200      	movs	r2, #0
 80003e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <smartcar_FR+0x78>)
 80003ea:	f000 ff03 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80003ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003f2:	f000 fc49 	bl	8000c88 <HAL_Delay>
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010800 	.word	0x40010800
 8000400:	40010c00 	.word	0x40010c00

08000404 <smartcar_BL>:

void smartcar_BL(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000408:	2200      	movs	r2, #0
 800040a:	2108      	movs	r1, #8
 800040c:	481a      	ldr	r0, [pc, #104]	@ (8000478 <smartcar_BL+0x74>)
 800040e:	f000 fef1 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000412:	2200      	movs	r2, #0
 8000414:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000418:	4818      	ldr	r0, [pc, #96]	@ (800047c <smartcar_BL+0x78>)
 800041a:	f000 feeb 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2110      	movs	r1, #16
 8000422:	4815      	ldr	r0, [pc, #84]	@ (8000478 <smartcar_BL+0x74>)
 8000424:	f000 fee6 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000428:	2200      	movs	r2, #0
 800042a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800042e:	4812      	ldr	r0, [pc, #72]	@ (8000478 <smartcar_BL+0x74>)
 8000430:	f000 fee0 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000434:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000438:	f000 fc26 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000442:	480e      	ldr	r0, [pc, #56]	@ (800047c <smartcar_BL+0x78>)
 8000444:	f000 fed6 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800044e:	480a      	ldr	r0, [pc, #40]	@ (8000478 <smartcar_BL+0x74>)
 8000450:	f000 fed0 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 8000454:	2201      	movs	r2, #1
 8000456:	2120      	movs	r1, #32
 8000458:	4807      	ldr	r0, [pc, #28]	@ (8000478 <smartcar_BL+0x74>)
 800045a:	f000 fecb 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 800045e:	2201      	movs	r2, #1
 8000460:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000464:	4804      	ldr	r0, [pc, #16]	@ (8000478 <smartcar_BL+0x74>)
 8000466:	f000 fec5 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800046a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800046e:	f000 fc0b 	bl	8000c88 <HAL_Delay>
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010c00 	.word	0x40010c00
 800047c:	40010800 	.word	0x40010800

08000480 <smartcar_BR>:


void smartcar_BR(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000484:	2200      	movs	r2, #0
 8000486:	2108      	movs	r1, #8
 8000488:	481a      	ldr	r0, [pc, #104]	@ (80004f4 <smartcar_BR+0x74>)
 800048a:	f000 feb3 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000494:	4818      	ldr	r0, [pc, #96]	@ (80004f8 <smartcar_BR+0x78>)
 8000496:	f000 fead 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2110      	movs	r1, #16
 800049e:	4815      	ldr	r0, [pc, #84]	@ (80004f4 <smartcar_BR+0x74>)
 80004a0:	f000 fea8 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004aa:	4812      	ldr	r0, [pc, #72]	@ (80004f4 <smartcar_BR+0x74>)
 80004ac:	f000 fea2 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004b4:	f000 fbe8 	bl	8000c88 <HAL_Delay>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004be:	480e      	ldr	r0, [pc, #56]	@ (80004f8 <smartcar_BR+0x78>)
 80004c0:	f000 fe98 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004ca:	480a      	ldr	r0, [pc, #40]	@ (80004f4 <smartcar_BR+0x74>)
 80004cc:	f000 fe92 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2120      	movs	r1, #32
 80004d4:	4807      	ldr	r0, [pc, #28]	@ (80004f4 <smartcar_BR+0x74>)
 80004d6:	f000 fe8d 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <smartcar_BR+0x74>)
 80004e2:	f000 fe87 	bl	80011f4 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004ea:	f000 fbcd 	bl	8000c88 <HAL_Delay>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40010c00 	.word	0x40010c00
 80004f8:	40010800 	.word	0x40010800

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fb60 	bl	8000bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f8f4 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f95e 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f932 	bl	8000774 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("=== RC CAR Test ===\r\n");
 8000510:	4869      	ldr	r0, [pc, #420]	@ (80006b8 <main+0x1bc>)
 8000512:	f001 fe8d 	bl	8002230 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("=== Enter your word ===\r\n");
 8000516:	4869      	ldr	r0, [pc, #420]	@ (80006bc <main+0x1c0>)
 8000518:	f001 fe8a 	bl	8002230 <puts>
	  HAL_UART_Receive(&huart2, &receive, 1, HAL_MAX_DELAY);
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	2201      	movs	r2, #1
 8000522:	4967      	ldr	r1, [pc, #412]	@ (80006c0 <main+0x1c4>)
 8000524:	4867      	ldr	r0, [pc, #412]	@ (80006c4 <main+0x1c8>)
 8000526:	f001 fb8a 	bl	8001c3e <HAL_UART_Receive>
	  if(receive == 'W')
 800052a:	4b65      	ldr	r3, [pc, #404]	@ (80006c0 <main+0x1c4>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b57      	cmp	r3, #87	@ 0x57
 8000530:	d117      	bne.n	8000562 <main+0x66>
	  {
		  printf("\r\n");
 8000532:	4865      	ldr	r0, [pc, #404]	@ (80006c8 <main+0x1cc>)
 8000534:	f001 fe7c 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2120      	movs	r1, #32
 800053c:	4863      	ldr	r0, [pc, #396]	@ (80006cc <main+0x1d0>)
 800053e:	f000 fe59 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "GO\n\r");
 8000542:	4963      	ldr	r1, [pc, #396]	@ (80006d0 <main+0x1d4>)
 8000544:	4863      	ldr	r0, [pc, #396]	@ (80006d4 <main+0x1d8>)
 8000546:	f001 fe7b 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800054a:	4862      	ldr	r0, [pc, #392]	@ (80006d4 <main+0x1d8>)
 800054c:	f7ff fdfe 	bl	800014c <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	2364      	movs	r3, #100	@ 0x64
 8000556:	495f      	ldr	r1, [pc, #380]	@ (80006d4 <main+0x1d8>)
 8000558:	485a      	ldr	r0, [pc, #360]	@ (80006c4 <main+0x1c8>)
 800055a:	f001 fae5 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_F();
 800055e:	f7ff fe1b 	bl	8000198 <smartcar_F>

	  }

	  if(receive == 'S')
 8000562:	4b57      	ldr	r3, [pc, #348]	@ (80006c0 <main+0x1c4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b53      	cmp	r3, #83	@ 0x53
 8000568:	d117      	bne.n	800059a <main+0x9e>
	  {
		  printf("\r\n");
 800056a:	4857      	ldr	r0, [pc, #348]	@ (80006c8 <main+0x1cc>)
 800056c:	f001 fe60 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	4855      	ldr	r0, [pc, #340]	@ (80006cc <main+0x1d0>)
 8000576:	f000 fe3d 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "BACK\n\r");
 800057a:	4957      	ldr	r1, [pc, #348]	@ (80006d8 <main+0x1dc>)
 800057c:	4855      	ldr	r0, [pc, #340]	@ (80006d4 <main+0x1d8>)
 800057e:	f001 fe5f 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000582:	4854      	ldr	r0, [pc, #336]	@ (80006d4 <main+0x1d8>)
 8000584:	f7ff fde2 	bl	800014c <strlen>
 8000588:	4603      	mov	r3, r0
 800058a:	b29a      	uxth	r2, r3
 800058c:	2364      	movs	r3, #100	@ 0x64
 800058e:	4951      	ldr	r1, [pc, #324]	@ (80006d4 <main+0x1d8>)
 8000590:	484c      	ldr	r0, [pc, #304]	@ (80006c4 <main+0x1c8>)
 8000592:	f001 fac9 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_B();
 8000596:	f7ff fe3d 	bl	8000214 <smartcar_B>
	  }

	  if(receive == 'A')
 800059a:	4b49      	ldr	r3, [pc, #292]	@ (80006c0 <main+0x1c4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b41      	cmp	r3, #65	@ 0x41
 80005a0:	d117      	bne.n	80005d2 <main+0xd6>
	  {
		  printf("\r\n");
 80005a2:	4849      	ldr	r0, [pc, #292]	@ (80006c8 <main+0x1cc>)
 80005a4:	f001 fe44 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	4847      	ldr	r0, [pc, #284]	@ (80006cc <main+0x1d0>)
 80005ae:	f000 fe21 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_LEFT\n\r");
 80005b2:	494a      	ldr	r1, [pc, #296]	@ (80006dc <main+0x1e0>)
 80005b4:	4847      	ldr	r0, [pc, #284]	@ (80006d4 <main+0x1d8>)
 80005b6:	f001 fe43 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80005ba:	4846      	ldr	r0, [pc, #280]	@ (80006d4 <main+0x1d8>)
 80005bc:	f7ff fdc6 	bl	800014c <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	4943      	ldr	r1, [pc, #268]	@ (80006d4 <main+0x1d8>)
 80005c8:	483e      	ldr	r0, [pc, #248]	@ (80006c4 <main+0x1c8>)
 80005ca:	f001 faad 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_FL();
 80005ce:	f7ff fe9d 	bl	800030c <smartcar_FL>
	  }

	  if(receive == 'D')
 80005d2:	4b3b      	ldr	r3, [pc, #236]	@ (80006c0 <main+0x1c4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b44      	cmp	r3, #68	@ 0x44
 80005d8:	d117      	bne.n	800060a <main+0x10e>
	  {
		  printf("\r\n");
 80005da:	483b      	ldr	r0, [pc, #236]	@ (80006c8 <main+0x1cc>)
 80005dc:	f001 fe28 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	4839      	ldr	r0, [pc, #228]	@ (80006cc <main+0x1d0>)
 80005e6:	f000 fe05 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_RIGHT\n\r");
 80005ea:	493d      	ldr	r1, [pc, #244]	@ (80006e0 <main+0x1e4>)
 80005ec:	4839      	ldr	r0, [pc, #228]	@ (80006d4 <main+0x1d8>)
 80005ee:	f001 fe27 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80005f2:	4838      	ldr	r0, [pc, #224]	@ (80006d4 <main+0x1d8>)
 80005f4:	f7ff fdaa 	bl	800014c <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	4935      	ldr	r1, [pc, #212]	@ (80006d4 <main+0x1d8>)
 8000600:	4830      	ldr	r0, [pc, #192]	@ (80006c4 <main+0x1c8>)
 8000602:	f001 fa91 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_FR();
 8000606:	f7ff febf 	bl	8000388 <smartcar_FR>
	  }

	  if(receive == 'Z')
 800060a:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <main+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000610:	d117      	bne.n	8000642 <main+0x146>
	  {
		  printf("\r\n");
 8000612:	482d      	ldr	r0, [pc, #180]	@ (80006c8 <main+0x1cc>)
 8000614:	f001 fe0c 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	2120      	movs	r1, #32
 800061c:	482b      	ldr	r0, [pc, #172]	@ (80006cc <main+0x1d0>)
 800061e:	f000 fde9 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "B_LEFT\n\r");
 8000622:	4930      	ldr	r1, [pc, #192]	@ (80006e4 <main+0x1e8>)
 8000624:	482b      	ldr	r0, [pc, #172]	@ (80006d4 <main+0x1d8>)
 8000626:	f001 fe0b 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800062a:	482a      	ldr	r0, [pc, #168]	@ (80006d4 <main+0x1d8>)
 800062c:	f7ff fd8e 	bl	800014c <strlen>
 8000630:	4603      	mov	r3, r0
 8000632:	b29a      	uxth	r2, r3
 8000634:	2364      	movs	r3, #100	@ 0x64
 8000636:	4927      	ldr	r1, [pc, #156]	@ (80006d4 <main+0x1d8>)
 8000638:	4822      	ldr	r0, [pc, #136]	@ (80006c4 <main+0x1c8>)
 800063a:	f001 fa75 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_BL();
 800063e:	f7ff fee1 	bl	8000404 <smartcar_BL>
	  }

	  if(receive == 'C')
 8000642:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <main+0x1c4>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b43      	cmp	r3, #67	@ 0x43
 8000648:	d117      	bne.n	800067a <main+0x17e>
	  {
		  printf("\r\n");
 800064a:	481f      	ldr	r0, [pc, #124]	@ (80006c8 <main+0x1cc>)
 800064c:	f001 fdf0 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000650:	2201      	movs	r2, #1
 8000652:	2120      	movs	r1, #32
 8000654:	481d      	ldr	r0, [pc, #116]	@ (80006cc <main+0x1d0>)
 8000656:	f000 fdcd 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "B_RIGHT\n\r");
 800065a:	4923      	ldr	r1, [pc, #140]	@ (80006e8 <main+0x1ec>)
 800065c:	481d      	ldr	r0, [pc, #116]	@ (80006d4 <main+0x1d8>)
 800065e:	f001 fdef 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000662:	481c      	ldr	r0, [pc, #112]	@ (80006d4 <main+0x1d8>)
 8000664:	f7ff fd72 	bl	800014c <strlen>
 8000668:	4603      	mov	r3, r0
 800066a:	b29a      	uxth	r2, r3
 800066c:	2364      	movs	r3, #100	@ 0x64
 800066e:	4919      	ldr	r1, [pc, #100]	@ (80006d4 <main+0x1d8>)
 8000670:	4814      	ldr	r0, [pc, #80]	@ (80006c4 <main+0x1c8>)
 8000672:	f001 fa59 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_BR();
 8000676:	f7ff ff03 	bl	8000480 <smartcar_BR>
	  }

	  if(receive == 'P')
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <main+0x1c4>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b50      	cmp	r3, #80	@ 0x50
 8000680:	f47f af49 	bne.w	8000516 <main+0x1a>
	  {
		  printf("\r\n");
 8000684:	4810      	ldr	r0, [pc, #64]	@ (80006c8 <main+0x1cc>)
 8000686:	f001 fdd3 	bl	8002230 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	480f      	ldr	r0, [pc, #60]	@ (80006cc <main+0x1d0>)
 8000690:	f000 fdb0 	bl	80011f4 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "OFF\n\r");
 8000694:	4915      	ldr	r1, [pc, #84]	@ (80006ec <main+0x1f0>)
 8000696:	480f      	ldr	r0, [pc, #60]	@ (80006d4 <main+0x1d8>)
 8000698:	f001 fdd2 	bl	8002240 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800069c:	480d      	ldr	r0, [pc, #52]	@ (80006d4 <main+0x1d8>)
 800069e:	f7ff fd55 	bl	800014c <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	2364      	movs	r3, #100	@ 0x64
 80006a8:	490a      	ldr	r1, [pc, #40]	@ (80006d4 <main+0x1d8>)
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <main+0x1c8>)
 80006ac:	f001 fa3c 	bl	8001b28 <HAL_UART_Transmit>
		  smartcar_S();
 80006b0:	f7ff fdee 	bl	8000290 <smartcar_S>
	  printf("=== Enter your word ===\r\n");
 80006b4:	e72f      	b.n	8000516 <main+0x1a>
 80006b6:	bf00      	nop
 80006b8:	08003054 	.word	0x08003054
 80006bc:	0800306c 	.word	0x0800306c
 80006c0:	200001cc 	.word	0x200001cc
 80006c4:	20000084 	.word	0x20000084
 80006c8:	08003050 	.word	0x08003050
 80006cc:	40010800 	.word	0x40010800
 80006d0:	08003088 	.word	0x08003088
 80006d4:	200000cc 	.word	0x200000cc
 80006d8:	08003090 	.word	0x08003090
 80006dc:	08003098 	.word	0x08003098
 80006e0:	080030a4 	.word	0x080030a4
 80006e4:	080030b0 	.word	0x080030b0
 80006e8:	080030bc 	.word	0x080030bc
 80006ec:	080030c8 	.word	0x080030c8

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b090      	sub	sp, #64	@ 0x40
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0318 	add.w	r3, r7, #24
 80006fa:	2228      	movs	r2, #40	@ 0x28
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fe98 	bl	8002434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000716:	2301      	movs	r3, #1
 8000718:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071a:	2310      	movs	r3, #16
 800071c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000722:	2300      	movs	r3, #0
 8000724:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000726:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fd99 	bl	8001268 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800073c:	f000 f8cc 	bl	80008d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f806 	bl	800176c <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000766:	f000 f8b7 	bl	80008d8 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3740      	adds	r7, #64	@ 0x40
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
	...

08000774 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <MX_USART2_UART_Init+0x50>)
 800077c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000784:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 800079a:	220c      	movs	r2, #12
 800079c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_USART2_UART_Init+0x4c>)
 80007ac:	f001 f96c 	bl	8001a88 <HAL_UART_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007b6:	f000 f88f 	bl	80008d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000084 	.word	0x20000084
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007dc:	4b39      	ldr	r3, [pc, #228]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a38      	ldr	r2, [pc, #224]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b36      	ldr	r3, [pc, #216]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0310 	and.w	r3, r3, #16
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f4:	4b33      	ldr	r3, [pc, #204]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a32      	ldr	r2, [pc, #200]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0320 	and.w	r3, r3, #32
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a26      	ldr	r2, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <MX_GPIO_Init+0xfc>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|LBF_Pin|LFB_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f240 6121 	movw	r1, #1569	@ 0x621
 8000842:	4821      	ldr	r0, [pc, #132]	@ (80008c8 <MX_GPIO_Init+0x100>)
 8000844:	f000 fcd6 	bl	80011f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 800084e:	481f      	ldr	r0, [pc, #124]	@ (80008cc <MX_GPIO_Init+0x104>)
 8000850:	f000 fcd0 	bl	80011f4 <HAL_GPIO_WritePin>
                          |RBF_Pin|RBB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000854:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000858:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	4b1d      	ldr	r3, [pc, #116]	@ (80008d0 <MX_GPIO_Init+0x108>)
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <MX_GPIO_Init+0x10c>)
 800086a:	f000 fb3f 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin LBF_Pin LFB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|LBF_Pin|LFB_Pin;
 800086e:	f240 6321 	movw	r3, #1569	@ 0x621
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2302      	movs	r3, #2
 800087e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4619      	mov	r1, r3
 8000886:	4810      	ldr	r0, [pc, #64]	@ (80008c8 <MX_GPIO_Init+0x100>)
 8000888:	f000 fb30 	bl	8000eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LBB_Pin LFF_Pin RFF_Pin RFB_Pin
                           RBF_Pin RBB_Pin */
  GPIO_InitStruct.Pin = LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 800088c:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 8000890:	613b      	str	r3, [r7, #16]
                          |RBF_Pin|RBB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	4809      	ldr	r0, [pc, #36]	@ (80008cc <MX_GPIO_Init+0x104>)
 80008a6:	f000 fb21 	bl	8000eec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2028      	movs	r0, #40	@ 0x28
 80008b0:	f000 fae5 	bl	8000e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b4:	2028      	movs	r0, #40	@ 0x28
 80008b6:	f000 fafe 	bl	8000eb6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ba:	bf00      	nop
 80008bc:	3720      	adds	r7, #32
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010800 	.word	0x40010800
 80008cc:	40010c00 	.word	0x40010c00
 80008d0:	10110000 	.word	0x10110000
 80008d4:	40011000 	.word	0x40011000

080008d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008dc:	b672      	cpsid	i
}
 80008de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <Error_Handler+0x8>

080008e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ea:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <HAL_MspInit+0x5c>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	4a14      	ldr	r2, [pc, #80]	@ (8000940 <HAL_MspInit+0x5c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6193      	str	r3, [r2, #24]
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_MspInit+0x5c>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x5c>)
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <HAL_MspInit+0x5c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	61d3      	str	r3, [r2, #28]
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_MspInit+0x5c>)
 8000910:	69db      	ldr	r3, [r3, #28]
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800091a:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <HAL_MspInit+0x60>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <HAL_MspInit+0x60>)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3714      	adds	r7, #20
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	40021000 	.word	0x40021000
 8000944:	40010000 	.word	0x40010000

08000948 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a15      	ldr	r2, [pc, #84]	@ (80009b8 <HAL_UART_MspInit+0x70>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d123      	bne.n	80009b0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <HAL_UART_MspInit+0x74>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	4a13      	ldr	r2, [pc, #76]	@ (80009bc <HAL_UART_MspInit+0x74>)
 800096e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000972:	61d3      	str	r3, [r2, #28]
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <HAL_UART_MspInit+0x74>)
 8000976:	69db      	ldr	r3, [r3, #28]
 8000978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000980:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <HAL_UART_MspInit+0x74>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <HAL_UART_MspInit+0x74>)
 8000986:	f043 0304 	orr.w	r3, r3, #4
 800098a:	6193      	str	r3, [r2, #24]
 800098c:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <HAL_UART_MspInit+0x74>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f003 0304 	and.w	r3, r3, #4
 8000994:	60bb      	str	r3, [r7, #8]
 8000996:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000998:	230c      	movs	r3, #12
 800099a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2302      	movs	r3, #2
 80009a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	4619      	mov	r1, r3
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <HAL_UART_MspInit+0x78>)
 80009ac:	f000 fa9e 	bl	8000eec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40004400 	.word	0x40004400
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f91c 	bl	8000c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a20:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a24:	f000 fbfe 	bl	8001224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	e00a      	b.n	8000a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a3e:	f3af 8000 	nop.w
 8000a42:	4601      	mov	r1, r0
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	60ba      	str	r2, [r7, #8]
 8000a4a:	b2ca      	uxtb	r2, r1
 8000a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	3301      	adds	r3, #1
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbf0      	blt.n	8000a3e <_read+0x12>
  }

  return len;
 8000a5c:	687b      	ldr	r3, [r7, #4]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3718      	adds	r7, #24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b086      	sub	sp, #24
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	60f8      	str	r0, [r7, #12]
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	1c5a      	adds	r2, r3, #1
 8000a7c:	60ba      	str	r2, [r7, #8]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fb6b 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	697a      	ldr	r2, [r7, #20]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dbf1      	blt.n	8000a78 <_write+0x12>
  }
  return len;
 8000a94:	687b      	ldr	r3, [r7, #4]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3718      	adds	r7, #24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_close>:

int _close(int file)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	b083      	sub	sp, #12
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ac4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <_isatty>:

int _isatty(int file)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ada:	2301      	movs	r3, #1
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b085      	sub	sp, #20
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	60f8      	str	r0, [r7, #12]
 8000aee:	60b9      	str	r1, [r7, #8]
 8000af0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr
	...

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	@ (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f001 fcce 	bl	80024d0 <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20005000 	.word	0x20005000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	200001d0 	.word	0x200001d0
 8000b68:	20000328 	.word	0x20000328

08000b6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b78:	f7ff fff8 	bl	8000b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480b      	ldr	r0, [pc, #44]	@ (8000bac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b7e:	490c      	ldr	r1, [pc, #48]	@ (8000bb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b80:	4a0c      	ldr	r2, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a09      	ldr	r2, [pc, #36]	@ (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b94:	4c09      	ldr	r4, [pc, #36]	@ (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba2:	f001 fc9b 	bl	80024dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ba6:	f7ff fca9 	bl	80004fc <main>
  bx lr
 8000baa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000bb4:	08003140 	.word	0x08003140
  ldr r2, =_sbss
 8000bb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bbc:	20000324 	.word	0x20000324

08000bc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc0:	e7fe      	b.n	8000bc0 <ADC1_2_IRQHandler>
	...

08000bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <HAL_Init+0x28>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a07      	ldr	r2, [pc, #28]	@ (8000bec <HAL_Init+0x28>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f947 	bl	8000e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f808 	bl	8000bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be0:	f7ff fe80 	bl	80008e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be4:	2300      	movs	r3, #0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40022000 	.word	0x40022000

08000bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_InitTick+0x54>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_InitTick+0x58>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4619      	mov	r1, r3
 8000c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f95f 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e00e      	b.n	8000c3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b0f      	cmp	r3, #15
 8000c22:	d80a      	bhi.n	8000c3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c24:	2200      	movs	r2, #0
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2c:	f000 f927 	bl	8000e7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c30:	4a06      	ldr	r2, [pc, #24]	@ (8000c4c <HAL_InitTick+0x5c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	e000      	b.n	8000c3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000000 	.word	0x20000000
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a03      	ldr	r2, [pc, #12]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	200001d4 	.word	0x200001d4

08000c74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	@ (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	200001d4 	.word	0x200001d4

08000c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c90:	f7ff fff0 	bl	8000c74 <HAL_GetTick>
 8000c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca0:	d005      	beq.n	8000cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <HAL_Delay+0x44>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	461a      	mov	r2, r3
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4413      	add	r3, r2
 8000cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cae:	bf00      	nop
 8000cb0:	f7ff ffe0 	bl	8000c74 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d8f7      	bhi.n	8000cb0 <HAL_Delay+0x28>
  {
  }
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cec:	4013      	ands	r3, r2
 8000cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d02:	4a04      	ldr	r2, [pc, #16]	@ (8000d14 <__NVIC_SetPriorityGrouping+0x44>)
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	60d3      	str	r3, [r2, #12]
}
 8000d08:	bf00      	nop
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d1c:	4b04      	ldr	r3, [pc, #16]	@ (8000d30 <__NVIC_GetPriorityGrouping+0x18>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	f003 0307 	and.w	r3, r3, #7
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	db0b      	blt.n	8000d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	f003 021f 	and.w	r2, r3, #31
 8000d4c:	4906      	ldr	r1, [pc, #24]	@ (8000d68 <__NVIC_EnableIRQ+0x34>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	2001      	movs	r0, #1
 8000d56:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d5e:	bf00      	nop
 8000d60:	370c      	adds	r7, #12
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	db0a      	blt.n	8000d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <__NVIC_SetPriority+0x4c>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	0112      	lsls	r2, r2, #4
 8000d8c:	b2d2      	uxtb	r2, r2
 8000d8e:	440b      	add	r3, r1
 8000d90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d94:	e00a      	b.n	8000dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	4908      	ldr	r1, [pc, #32]	@ (8000dbc <__NVIC_SetPriority+0x50>)
 8000d9c:	79fb      	ldrb	r3, [r7, #7]
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	3b04      	subs	r3, #4
 8000da4:	0112      	lsls	r2, r2, #4
 8000da6:	b2d2      	uxtb	r2, r2
 8000da8:	440b      	add	r3, r1
 8000daa:	761a      	strb	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	f1c3 0307 	rsb	r3, r3, #7
 8000dda:	2b04      	cmp	r3, #4
 8000ddc:	bf28      	it	cs
 8000dde:	2304      	movcs	r3, #4
 8000de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	3304      	adds	r3, #4
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d902      	bls.n	8000df0 <NVIC_EncodePriority+0x30>
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3b03      	subs	r3, #3
 8000dee:	e000      	b.n	8000df2 <NVIC_EncodePriority+0x32>
 8000df0:	2300      	movs	r3, #0
 8000df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df4:	f04f 32ff 	mov.w	r2, #4294967295
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43da      	mvns	r2, r3
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e08:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43d9      	mvns	r1, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e18:	4313      	orrs	r3, r2
         );
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3724      	adds	r7, #36	@ 0x24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e34:	d301      	bcc.n	8000e3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00f      	b.n	8000e5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e64 <SysTick_Config+0x40>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e42:	210f      	movs	r1, #15
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f7ff ff90 	bl	8000d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e4c:	4b05      	ldr	r3, [pc, #20]	@ (8000e64 <SysTick_Config+0x40>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e52:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <SysTick_Config+0x40>)
 8000e54:	2207      	movs	r2, #7
 8000e56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e58:	2300      	movs	r3, #0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	e000e010 	.word	0xe000e010

08000e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff2d 	bl	8000cd0 <__NVIC_SetPriorityGrouping>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
 8000e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e90:	f7ff ff42 	bl	8000d18 <__NVIC_GetPriorityGrouping>
 8000e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	68b9      	ldr	r1, [r7, #8]
 8000e9a:	6978      	ldr	r0, [r7, #20]
 8000e9c:	f7ff ff90 	bl	8000dc0 <NVIC_EncodePriority>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5f 	bl	8000d6c <__NVIC_SetPriority>
}
 8000eae:	bf00      	nop
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff35 	bl	8000d34 <__NVIC_EnableIRQ>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffa2 	bl	8000e24 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b08b      	sub	sp, #44	@ 0x2c
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efe:	e169      	b.n	80011d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f00:	2201      	movs	r2, #1
 8000f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	69fa      	ldr	r2, [r7, #28]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	f040 8158 	bne.w	80011ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	4a9a      	ldr	r2, [pc, #616]	@ (800118c <HAL_GPIO_Init+0x2a0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d05e      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f28:	4a98      	ldr	r2, [pc, #608]	@ (800118c <HAL_GPIO_Init+0x2a0>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d875      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f2e:	4a98      	ldr	r2, [pc, #608]	@ (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d058      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f34:	4a96      	ldr	r2, [pc, #600]	@ (8001190 <HAL_GPIO_Init+0x2a4>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d86f      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f3a:	4a96      	ldr	r2, [pc, #600]	@ (8001194 <HAL_GPIO_Init+0x2a8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d052      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f40:	4a94      	ldr	r2, [pc, #592]	@ (8001194 <HAL_GPIO_Init+0x2a8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d869      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f46:	4a94      	ldr	r2, [pc, #592]	@ (8001198 <HAL_GPIO_Init+0x2ac>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d04c      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f4c:	4a92      	ldr	r2, [pc, #584]	@ (8001198 <HAL_GPIO_Init+0x2ac>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d863      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f52:	4a92      	ldr	r2, [pc, #584]	@ (800119c <HAL_GPIO_Init+0x2b0>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d046      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
 8000f58:	4a90      	ldr	r2, [pc, #576]	@ (800119c <HAL_GPIO_Init+0x2b0>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d85d      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f5e:	2b12      	cmp	r3, #18
 8000f60:	d82a      	bhi.n	8000fb8 <HAL_GPIO_Init+0xcc>
 8000f62:	2b12      	cmp	r3, #18
 8000f64:	d859      	bhi.n	800101a <HAL_GPIO_Init+0x12e>
 8000f66:	a201      	add	r2, pc, #4	@ (adr r2, 8000f6c <HAL_GPIO_Init+0x80>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000fe7 	.word	0x08000fe7
 8000f70:	08000fc1 	.word	0x08000fc1
 8000f74:	08000fd3 	.word	0x08000fd3
 8000f78:	08001015 	.word	0x08001015
 8000f7c:	0800101b 	.word	0x0800101b
 8000f80:	0800101b 	.word	0x0800101b
 8000f84:	0800101b 	.word	0x0800101b
 8000f88:	0800101b 	.word	0x0800101b
 8000f8c:	0800101b 	.word	0x0800101b
 8000f90:	0800101b 	.word	0x0800101b
 8000f94:	0800101b 	.word	0x0800101b
 8000f98:	0800101b 	.word	0x0800101b
 8000f9c:	0800101b 	.word	0x0800101b
 8000fa0:	0800101b 	.word	0x0800101b
 8000fa4:	0800101b 	.word	0x0800101b
 8000fa8:	0800101b 	.word	0x0800101b
 8000fac:	0800101b 	.word	0x0800101b
 8000fb0:	08000fc9 	.word	0x08000fc9
 8000fb4:	08000fdd 	.word	0x08000fdd
 8000fb8:	4a79      	ldr	r2, [pc, #484]	@ (80011a0 <HAL_GPIO_Init+0x2b4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fbe:	e02c      	b.n	800101a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	623b      	str	r3, [r7, #32]
          break;
 8000fc6:	e029      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	623b      	str	r3, [r7, #32]
          break;
 8000fd0:	e024      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	3308      	adds	r3, #8
 8000fd8:	623b      	str	r3, [r7, #32]
          break;
 8000fda:	e01f      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	330c      	adds	r3, #12
 8000fe2:	623b      	str	r3, [r7, #32]
          break;
 8000fe4:	e01a      	b.n	800101c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e013      	b.n	800101c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d105      	bne.n	8001008 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ffc:	2308      	movs	r3, #8
 8000ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	611a      	str	r2, [r3, #16]
          break;
 8001006:	e009      	b.n	800101c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001008:	2308      	movs	r3, #8
 800100a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	615a      	str	r2, [r3, #20]
          break;
 8001012:	e003      	b.n	800101c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
          break;
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x130>
          break;
 800101a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	2bff      	cmp	r3, #255	@ 0xff
 8001020:	d801      	bhi.n	8001026 <HAL_GPIO_Init+0x13a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	e001      	b.n	800102a <HAL_GPIO_Init+0x13e>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3304      	adds	r3, #4
 800102a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2bff      	cmp	r3, #255	@ 0xff
 8001030:	d802      	bhi.n	8001038 <HAL_GPIO_Init+0x14c>
 8001032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	e002      	b.n	800103e <HAL_GPIO_Init+0x152>
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	3b08      	subs	r3, #8
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	210f      	movs	r1, #15
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	fa01 f303 	lsl.w	r3, r1, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	6a39      	ldr	r1, [r7, #32]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80b1 	beq.w	80011ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800106c:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <HAL_GPIO_Init+0x2b8>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a4c      	ldr	r2, [pc, #304]	@ (80011a4 <HAL_GPIO_Init+0x2b8>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b4a      	ldr	r3, [pc, #296]	@ (80011a4 <HAL_GPIO_Init+0x2b8>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001084:	4a48      	ldr	r2, [pc, #288]	@ (80011a8 <HAL_GPIO_Init+0x2bc>)
 8001086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001088:	089b      	lsrs	r3, r3, #2
 800108a:	3302      	adds	r3, #2
 800108c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001090:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a40      	ldr	r2, [pc, #256]	@ (80011ac <HAL_GPIO_Init+0x2c0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d013      	beq.n	80010d8 <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a3f      	ldr	r2, [pc, #252]	@ (80011b0 <HAL_GPIO_Init+0x2c4>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d00d      	beq.n	80010d4 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a3e      	ldr	r2, [pc, #248]	@ (80011b4 <HAL_GPIO_Init+0x2c8>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <HAL_GPIO_Init+0x1e4>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a3d      	ldr	r2, [pc, #244]	@ (80011b8 <HAL_GPIO_Init+0x2cc>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d101      	bne.n	80010cc <HAL_GPIO_Init+0x1e0>
 80010c8:	2303      	movs	r3, #3
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010cc:	2304      	movs	r3, #4
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1ee>
 80010d8:	2300      	movs	r3, #0
 80010da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010ea:	492f      	ldr	r1, [pc, #188]	@ (80011a8 <HAL_GPIO_Init+0x2bc>)
 80010ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001104:	4b2d      	ldr	r3, [pc, #180]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	492c      	ldr	r1, [pc, #176]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001112:	4b2a      	ldr	r3, [pc, #168]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	4928      	ldr	r1, [pc, #160]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800111c:	4013      	ands	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800112c:	4b23      	ldr	r3, [pc, #140]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	4922      	ldr	r1, [pc, #136]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	60cb      	str	r3, [r1, #12]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800113a:	4b20      	ldr	r3, [pc, #128]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800113c:	68da      	ldr	r2, [r3, #12]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	491e      	ldr	r1, [pc, #120]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001144:	4013      	ands	r3, r2
 8001146:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	4918      	ldr	r1, [pc, #96]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	604b      	str	r3, [r1, #4]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001164:	685a      	ldr	r2, [r3, #4]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4914      	ldr	r1, [pc, #80]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d021      	beq.n	80011c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800117c:	4b0f      	ldr	r3, [pc, #60]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	490e      	ldr	r1, [pc, #56]	@ (80011bc <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	600b      	str	r3, [r1, #0]
 8001188:	e021      	b.n	80011ce <HAL_GPIO_Init+0x2e2>
 800118a:	bf00      	nop
 800118c:	10320000 	.word	0x10320000
 8001190:	10310000 	.word	0x10310000
 8001194:	10220000 	.word	0x10220000
 8001198:	10210000 	.word	0x10210000
 800119c:	10120000 	.word	0x10120000
 80011a0:	10110000 	.word	0x10110000
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40011400 	.word	0x40011400
 80011bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_GPIO_Init+0x304>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	4909      	ldr	r1, [pc, #36]	@ (80011f0 <HAL_GPIO_Init+0x304>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	3301      	adds	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011da:	fa22 f303 	lsr.w	r3, r2, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f47f ae8e 	bne.w	8000f00 <HAL_GPIO_Init+0x14>
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	372c      	adds	r7, #44	@ 0x2c
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	40010400 	.word	0x40010400

080011f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
 8001200:	4613      	mov	r3, r2
 8001202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001204:	787b      	ldrb	r3, [r7, #1]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800120a:	887a      	ldrh	r2, [r7, #2]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001210:	e003      	b.n	800121a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	041a      	lsls	r2, r3, #16
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	611a      	str	r2, [r3, #16]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001230:	695a      	ldr	r2, [r3, #20]
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	4013      	ands	r3, r2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d006      	beq.n	8001248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800123a:	4a05      	ldr	r2, [pc, #20]	@ (8001250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f806 	bl	8001254 <HAL_GPIO_EXTI_Callback>
  }
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr

08001268 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e272      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	f000 8087 	beq.w	8001396 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001288:	4b92      	ldr	r3, [pc, #584]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 030c 	and.w	r3, r3, #12
 8001290:	2b04      	cmp	r3, #4
 8001292:	d00c      	beq.n	80012ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001294:	4b8f      	ldr	r3, [pc, #572]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b08      	cmp	r3, #8
 800129e:	d112      	bne.n	80012c6 <HAL_RCC_OscConfig+0x5e>
 80012a0:	4b8c      	ldr	r3, [pc, #560]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ac:	d10b      	bne.n	80012c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	4b89      	ldr	r3, [pc, #548]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d06c      	beq.n	8001394 <HAL_RCC_OscConfig+0x12c>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d168      	bne.n	8001394 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e24c      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ce:	d106      	bne.n	80012de <HAL_RCC_OscConfig+0x76>
 80012d0:	4b80      	ldr	r3, [pc, #512]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a7f      	ldr	r2, [pc, #508]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e02e      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10c      	bne.n	8001300 <HAL_RCC_OscConfig+0x98>
 80012e6:	4b7b      	ldr	r3, [pc, #492]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a7a      	ldr	r2, [pc, #488]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012f0:	6013      	str	r3, [r2, #0]
 80012f2:	4b78      	ldr	r3, [pc, #480]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a77      	ldr	r2, [pc, #476]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0xbc>
 800130a:	4b72      	ldr	r3, [pc, #456]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a71      	ldr	r2, [pc, #452]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b6f      	ldr	r3, [pc, #444]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6e      	ldr	r2, [pc, #440]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xd4>
 8001324:	4b6b      	ldr	r3, [pc, #428]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a6a      	ldr	r2, [pc, #424]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b68      	ldr	r3, [pc, #416]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a67      	ldr	r2, [pc, #412]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fc96 	bl	8000c74 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fc92 	bl	8000c74 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	@ 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e200      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b5d      	ldr	r3, [pc, #372]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xe4>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fc82 	bl	8000c74 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fc7e 	bl	8000c74 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	@ 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1ec      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b53      	ldr	r3, [pc, #332]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0x10c>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a2:	4b4c      	ldr	r3, [pc, #304]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ae:	4b49      	ldr	r3, [pc, #292]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x18c>
 80013ba:	4b46      	ldr	r3, [pc, #280]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b43      	ldr	r3, [pc, #268]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x176>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1c0      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b3d      	ldr	r3, [pc, #244]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4939      	ldr	r1, [pc, #228]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b36      	ldr	r3, [pc, #216]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001402:	f7ff fc37 	bl	8000c74 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fc33 	bl	8000c74 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1a1      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b2d      	ldr	r3, [pc, #180]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b2a      	ldr	r3, [pc, #168]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	695b      	ldr	r3, [r3, #20]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4927      	ldr	r1, [pc, #156]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b26      	ldr	r3, [pc, #152]	@ (80014d8 <HAL_RCC_OscConfig+0x270>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fc16 	bl	8000c74 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc12 	bl	8000c74 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e180      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b1d      	ldr	r3, [pc, #116]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d03a      	beq.n	80014ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d019      	beq.n	80014b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <HAL_RCC_OscConfig+0x274>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001484:	f7ff fbf6 	bl	8000c74 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fbf2 	bl	8000c74 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e160      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f000 face 	bl	8001a4c <RCC_Delay>
 80014b0:	e01c      	b.n	80014ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_RCC_OscConfig+0x274>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b8:	f7ff fbdc 	bl	8000c74 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014be:	e00f      	b.n	80014e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fbd8 	bl	8000c74 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d908      	bls.n	80014e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e146      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	42420000 	.word	0x42420000
 80014dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e0:	4b92      	ldr	r3, [pc, #584]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1e9      	bne.n	80014c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 80a6 	beq.w	8001646 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014fe:	4b8b      	ldr	r3, [pc, #556]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10d      	bne.n	8001526 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a87      	ldr	r2, [pc, #540]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b85      	ldr	r3, [pc, #532]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001522:	2301      	movs	r3, #1
 8001524:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001526:	4b82      	ldr	r3, [pc, #520]	@ (8001730 <HAL_RCC_OscConfig+0x4c8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152e:	2b00      	cmp	r3, #0
 8001530:	d118      	bne.n	8001564 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001532:	4b7f      	ldr	r3, [pc, #508]	@ (8001730 <HAL_RCC_OscConfig+0x4c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a7e      	ldr	r2, [pc, #504]	@ (8001730 <HAL_RCC_OscConfig+0x4c8>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800153c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb99 	bl	8000c74 <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb95 	bl	8000c74 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	@ 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e103      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001558:	4b75      	ldr	r3, [pc, #468]	@ (8001730 <HAL_RCC_OscConfig+0x4c8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x312>
 800156c:	4b6f      	ldr	r3, [pc, #444]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4a6e      	ldr	r2, [pc, #440]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6213      	str	r3, [r2, #32]
 8001578:	e02d      	b.n	80015d6 <HAL_RCC_OscConfig+0x36e>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x334>
 8001582:	4b6a      	ldr	r3, [pc, #424]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	4a69      	ldr	r2, [pc, #420]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f023 0301 	bic.w	r3, r3, #1
 800158c:	6213      	str	r3, [r2, #32]
 800158e:	4b67      	ldr	r3, [pc, #412]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a66      	ldr	r2, [pc, #408]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 0304 	bic.w	r3, r3, #4
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	e01c      	b.n	80015d6 <HAL_RCC_OscConfig+0x36e>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b05      	cmp	r3, #5
 80015a2:	d10c      	bne.n	80015be <HAL_RCC_OscConfig+0x356>
 80015a4:	4b61      	ldr	r3, [pc, #388]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a60      	ldr	r2, [pc, #384]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	f043 0304 	orr.w	r3, r3, #4
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	4b5e      	ldr	r3, [pc, #376]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a5d      	ldr	r2, [pc, #372]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	e00b      	b.n	80015d6 <HAL_RCC_OscConfig+0x36e>
 80015be:	4b5b      	ldr	r3, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4a5a      	ldr	r2, [pc, #360]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0304 	bic.w	r3, r3, #4
 80015d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d015      	beq.n	800160a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015de:	f7ff fb49 	bl	8000c74 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e4:	e00a      	b.n	80015fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e6:	f7ff fb45 	bl	8000c74 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0b1      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	4b4b      	ldr	r3, [pc, #300]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d0ee      	beq.n	80015e6 <HAL_RCC_OscConfig+0x37e>
 8001608:	e014      	b.n	8001634 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160a:	f7ff fb33 	bl	8000c74 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001612:	f7ff fb2f 	bl	8000c74 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001620:	4293      	cmp	r3, r2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e09b      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	4b40      	ldr	r3, [pc, #256]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ee      	bne.n	8001612 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d105      	bne.n	8001646 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163a:	4b3c      	ldr	r3, [pc, #240]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a3b      	ldr	r2, [pc, #236]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001644:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8087 	beq.w	800175e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001650:	4b36      	ldr	r3, [pc, #216]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d061      	beq.n	8001720 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d146      	bne.n	80016f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001664:	4b33      	ldr	r3, [pc, #204]	@ (8001734 <HAL_RCC_OscConfig+0x4cc>)
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb03 	bl	8000c74 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff faff 	bl	8000c74 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e06d      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001684:	4b29      	ldr	r3, [pc, #164]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f0      	bne.n	8001672 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001698:	d108      	bne.n	80016ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4921      	ldr	r1, [pc, #132]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ac:	4b1f      	ldr	r3, [pc, #124]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a19      	ldr	r1, [r3, #32]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016bc:	430b      	orrs	r3, r1
 80016be:	491b      	ldr	r1, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fad3 	bl	8000c74 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff facf 	bl	8000c74 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e03d      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x46a>
 80016f0:	e035      	b.n	800175e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_RCC_OscConfig+0x4cc>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fabc 	bl	8000c74 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fab8 	bl	8000c74 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e026      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x4c4>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x498>
 800171e:	e01e      	b.n	800175e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e019      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
 800172c:	40021000 	.word	0x40021000
 8001730:	40007000 	.word	0x40007000
 8001734:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <HAL_RCC_OscConfig+0x500>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	429a      	cmp	r2, r3
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e000      	b.n	8001760 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3718      	adds	r7, #24
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40021000 	.word	0x40021000

0800176c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d0      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b6a      	ldr	r3, [pc, #424]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d910      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b67      	ldr	r3, [pc, #412]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	4965      	ldr	r1, [pc, #404]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a58      	ldr	r2, [pc, #352]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a52      	ldr	r2, [pc, #328]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d040      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e073      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3d      	ldr	r3, [pc, #244]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4936      	ldr	r1, [pc, #216]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff fa0a 	bl	8000c74 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff fa06 	bl	8000c74 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e053      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d210      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b24      	ldr	r3, [pc, #144]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4922      	ldr	r1, [pc, #136]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	@ (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	@ (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	@ (8001938 <HAL_RCC_ClockConfig+0x1cc>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1d0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff f968 	bl	8000bf0 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	080030d0 	.word	0x080030d0
 8001938:	20000000 	.word	0x20000000
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800195a:	4b1e      	ldr	r3, [pc, #120]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b04      	cmp	r3, #4
 8001968:	d002      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x30>
 800196a:	2b08      	cmp	r3, #8
 800196c:	d003      	beq.n	8001976 <HAL_RCC_GetSysClockFreq+0x36>
 800196e:	e027      	b.n	80019c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001970:	4b19      	ldr	r3, [pc, #100]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001972:	613b      	str	r3, [r7, #16]
      break;
 8001974:	e027      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	0c9b      	lsrs	r3, r3, #18
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	4a17      	ldr	r2, [pc, #92]	@ (80019dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d010      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	0c5b      	lsrs	r3, r3, #17
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	4a11      	ldr	r2, [pc, #68]	@ (80019e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80019a2:	fb03 f202 	mul.w	r2, r3, r2
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e004      	b.n	80019ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	613b      	str	r3, [r7, #16]
      break;
 80019be:	e002      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80019c2:	613b      	str	r3, [r7, #16]
      break;
 80019c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019c6:	693b      	ldr	r3, [r7, #16]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	371c      	adds	r7, #28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000
 80019d8:	007a1200 	.word	0x007a1200
 80019dc:	080030e8 	.word	0x080030e8
 80019e0:	080030f8 	.word	0x080030f8
 80019e4:	003d0900 	.word	0x003d0900

080019e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019ec:	4b02      	ldr	r3, [pc, #8]	@ (80019f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	20000000 	.word	0x20000000

080019fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a00:	f7ff fff2 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4903      	ldr	r1, [pc, #12]	@ (8001a20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	080030e0 	.word	0x080030e0

08001a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_RCC_GetHCLKFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	0adb      	lsrs	r3, r3, #11
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	4903      	ldr	r1, [pc, #12]	@ (8001a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	080030e0 	.word	0x080030e0

08001a4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a54:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <RCC_Delay+0x34>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <RCC_Delay+0x38>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0a5b      	lsrs	r3, r3, #9
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	fb02 f303 	mul.w	r3, r2, r3
 8001a66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a68:	bf00      	nop
  }
  while (Delay --);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	1e5a      	subs	r2, r3, #1
 8001a6e:	60fa      	str	r2, [r7, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f9      	bne.n	8001a68 <RCC_Delay+0x1c>
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000000 	.word	0x20000000
 8001a84:	10624dd3 	.word	0x10624dd3

08001a88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e042      	b.n	8001b20 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7fe ff4a 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2224      	movs	r2, #36	@ 0x24
 8001ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001aca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fa09 	bl	8001ee4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ae0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695a      	ldr	r2, [r3, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001af0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2220      	movs	r2, #32
 8001b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af02      	add	r7, sp, #8
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b20      	cmp	r3, #32
 8001b46:	d175      	bne.n	8001c34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <HAL_UART_Transmit+0x2c>
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e06e      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2221      	movs	r2, #33	@ 0x21
 8001b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b66:	f7ff f885 	bl	8000c74 <HAL_GetTick>
 8001b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b80:	d108      	bne.n	8001b94 <HAL_UART_Transmit+0x6c>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d104      	bne.n	8001b94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	61bb      	str	r3, [r7, #24]
 8001b92:	e003      	b.n	8001b9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b9c:	e02e      	b.n	8001bfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f8df 	bl	8001d6c <UART_WaitOnFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2220      	movs	r2, #32
 8001bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e03a      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10b      	bne.n	8001bde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
 8001bdc:	e007      	b.n	8001bee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1cb      	bne.n	8001b9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2140      	movs	r1, #64	@ 0x40
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 f8ab 	bl	8001d6c <UART_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b08a      	sub	sp, #40	@ 0x28
 8001c42:	af02      	add	r7, sp, #8
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b20      	cmp	r3, #32
 8001c5c:	f040 8081 	bne.w	8001d62 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d002      	beq.n	8001c6c <HAL_UART_Receive+0x2e>
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e079      	b.n	8001d64 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2222      	movs	r2, #34	@ 0x22
 8001c7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c84:	f7fe fff6 	bl	8000c74 <HAL_GetTick>
 8001c88:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	88fa      	ldrh	r2, [r7, #6]
 8001c8e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c9e:	d108      	bne.n	8001cb2 <HAL_UART_Receive+0x74>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	e003      	b.n	8001cba <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001cba:	e047      	b.n	8001d4c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2120      	movs	r1, #32
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 f850 	bl	8001d6c <UART_WaitOnFlagUntilTimeout>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2220      	movs	r2, #32
 8001cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e042      	b.n	8001d64 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	e01f      	b.n	8001d3e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d06:	d007      	beq.n	8001d18 <HAL_UART_Receive+0xda>
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10a      	bne.n	8001d26 <HAL_UART_Receive+0xe8>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d106      	bne.n	8001d26 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e008      	b.n	8001d38 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1b2      	bne.n	8001cbc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e000      	b.n	8001d64 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001d62:	2302      	movs	r3, #2
  }
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d7c:	e03b      	b.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d037      	beq.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d86:	f7fe ff75 	bl	8000c74 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	6a3a      	ldr	r2, [r7, #32]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d302      	bcc.n	8001d9c <UART_WaitOnFlagUntilTimeout+0x30>
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e03a      	b.n	8001e16 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d023      	beq.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	2b80      	cmp	r3, #128	@ 0x80
 8001db2:	d020      	beq.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b40      	cmp	r3, #64	@ 0x40
 8001db8:	d01d      	beq.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d116      	bne.n	8001df6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f81d 	bl	8001e1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2208      	movs	r2, #8
 8001de8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e00f      	b.n	8001e16 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	68ba      	ldr	r2, [r7, #8]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	bf0c      	ite	eq
 8001e06:	2301      	moveq	r3, #1
 8001e08:	2300      	movne	r3, #0
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d0b4      	beq.n	8001d7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b095      	sub	sp, #84	@ 0x54
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	330c      	adds	r3, #12
 8001e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e30:	e853 3f00 	ldrex	r3, [r3]
 8001e34:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001e36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	330c      	adds	r3, #12
 8001e44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e46:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e4a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e4c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e4e:	e841 2300 	strex	r3, r2, [r1]
 8001e52:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1e5      	bne.n	8001e26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3314      	adds	r3, #20
 8001e60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	e853 3f00 	ldrex	r3, [r3]
 8001e68:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	3314      	adds	r3, #20
 8001e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e82:	e841 2300 	strex	r3, r2, [r1]
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e5      	bne.n	8001e5a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d119      	bne.n	8001eca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	e853 3f00 	ldrex	r3, [r3]
 8001ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f023 0310 	bic.w	r3, r3, #16
 8001eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	330c      	adds	r3, #12
 8001eb4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001eb6:	61ba      	str	r2, [r7, #24]
 8001eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001eba:	6979      	ldr	r1, [r7, #20]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	e841 2300 	strex	r3, r2, [r1]
 8001ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1e5      	bne.n	8001e96 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001ed8:	bf00      	nop
 8001eda:	3754      	adds	r7, #84	@ 0x54
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr
	...

08001ee4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	695b      	ldr	r3, [r3, #20]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001f1e:	f023 030c 	bic.w	r3, r3, #12
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699a      	ldr	r2, [r3, #24]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff8 <UART_SetConfig+0x114>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d103      	bne.n	8001f54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f4c:	f7ff fd6a 	bl	8001a24 <HAL_RCC_GetPCLK2Freq>
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	e002      	b.n	8001f5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f54:	f7ff fd52 	bl	80019fc <HAL_RCC_GetPCLK1Freq>
 8001f58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	009a      	lsls	r2, r3, #2
 8001f64:	441a      	add	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f70:	4a22      	ldr	r2, [pc, #136]	@ (8001ffc <UART_SetConfig+0x118>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	0119      	lsls	r1, r3, #4
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009a      	lsls	r2, r3, #2
 8001f84:	441a      	add	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f90:	4b1a      	ldr	r3, [pc, #104]	@ (8001ffc <UART_SetConfig+0x118>)
 8001f92:	fba3 0302 	umull	r0, r3, r3, r2
 8001f96:	095b      	lsrs	r3, r3, #5
 8001f98:	2064      	movs	r0, #100	@ 0x64
 8001f9a:	fb00 f303 	mul.w	r3, r0, r3
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	3332      	adds	r3, #50	@ 0x32
 8001fa4:	4a15      	ldr	r2, [pc, #84]	@ (8001ffc <UART_SetConfig+0x118>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fb0:	4419      	add	r1, r3
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	009a      	lsls	r2, r3, #2
 8001fbc:	441a      	add	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <UART_SetConfig+0x118>)
 8001fca:	fba3 0302 	umull	r0, r3, r3, r2
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2064      	movs	r0, #100	@ 0x64
 8001fd2:	fb00 f303 	mul.w	r3, r0, r3
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	3332      	adds	r3, #50	@ 0x32
 8001fdc:	4a07      	ldr	r2, [pc, #28]	@ (8001ffc <UART_SetConfig+0x118>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	f003 020f 	and.w	r2, r3, #15
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	440a      	add	r2, r1
 8001fee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40013800 	.word	0x40013800
 8001ffc:	51eb851f 	.word	0x51eb851f

08002000 <std>:
 8002000:	2300      	movs	r3, #0
 8002002:	b510      	push	{r4, lr}
 8002004:	4604      	mov	r4, r0
 8002006:	e9c0 3300 	strd	r3, r3, [r0]
 800200a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800200e:	6083      	str	r3, [r0, #8]
 8002010:	8181      	strh	r1, [r0, #12]
 8002012:	6643      	str	r3, [r0, #100]	@ 0x64
 8002014:	81c2      	strh	r2, [r0, #14]
 8002016:	6183      	str	r3, [r0, #24]
 8002018:	4619      	mov	r1, r3
 800201a:	2208      	movs	r2, #8
 800201c:	305c      	adds	r0, #92	@ 0x5c
 800201e:	f000 fa09 	bl	8002434 <memset>
 8002022:	4b0d      	ldr	r3, [pc, #52]	@ (8002058 <std+0x58>)
 8002024:	6224      	str	r4, [r4, #32]
 8002026:	6263      	str	r3, [r4, #36]	@ 0x24
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <std+0x5c>)
 800202a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800202c:	4b0c      	ldr	r3, [pc, #48]	@ (8002060 <std+0x60>)
 800202e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <std+0x64>)
 8002032:	6323      	str	r3, [r4, #48]	@ 0x30
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <std+0x68>)
 8002036:	429c      	cmp	r4, r3
 8002038:	d006      	beq.n	8002048 <std+0x48>
 800203a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800203e:	4294      	cmp	r4, r2
 8002040:	d002      	beq.n	8002048 <std+0x48>
 8002042:	33d0      	adds	r3, #208	@ 0xd0
 8002044:	429c      	cmp	r4, r3
 8002046:	d105      	bne.n	8002054 <std+0x54>
 8002048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800204c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002050:	f000 ba68 	b.w	8002524 <__retarget_lock_init_recursive>
 8002054:	bd10      	pop	{r4, pc}
 8002056:	bf00      	nop
 8002058:	08002285 	.word	0x08002285
 800205c:	080022a7 	.word	0x080022a7
 8002060:	080022df 	.word	0x080022df
 8002064:	08002303 	.word	0x08002303
 8002068:	200001d8 	.word	0x200001d8

0800206c <stdio_exit_handler>:
 800206c:	4a02      	ldr	r2, [pc, #8]	@ (8002078 <stdio_exit_handler+0xc>)
 800206e:	4903      	ldr	r1, [pc, #12]	@ (800207c <stdio_exit_handler+0x10>)
 8002070:	4803      	ldr	r0, [pc, #12]	@ (8002080 <stdio_exit_handler+0x14>)
 8002072:	f000 b869 	b.w	8002148 <_fwalk_sglue>
 8002076:	bf00      	nop
 8002078:	2000000c 	.word	0x2000000c
 800207c:	08002de9 	.word	0x08002de9
 8002080:	2000001c 	.word	0x2000001c

08002084 <cleanup_stdio>:
 8002084:	6841      	ldr	r1, [r0, #4]
 8002086:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <cleanup_stdio+0x34>)
 8002088:	b510      	push	{r4, lr}
 800208a:	4299      	cmp	r1, r3
 800208c:	4604      	mov	r4, r0
 800208e:	d001      	beq.n	8002094 <cleanup_stdio+0x10>
 8002090:	f000 feaa 	bl	8002de8 <_fflush_r>
 8002094:	68a1      	ldr	r1, [r4, #8]
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <cleanup_stdio+0x38>)
 8002098:	4299      	cmp	r1, r3
 800209a:	d002      	beq.n	80020a2 <cleanup_stdio+0x1e>
 800209c:	4620      	mov	r0, r4
 800209e:	f000 fea3 	bl	8002de8 <_fflush_r>
 80020a2:	68e1      	ldr	r1, [r4, #12]
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <cleanup_stdio+0x3c>)
 80020a6:	4299      	cmp	r1, r3
 80020a8:	d004      	beq.n	80020b4 <cleanup_stdio+0x30>
 80020aa:	4620      	mov	r0, r4
 80020ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020b0:	f000 be9a 	b.w	8002de8 <_fflush_r>
 80020b4:	bd10      	pop	{r4, pc}
 80020b6:	bf00      	nop
 80020b8:	200001d8 	.word	0x200001d8
 80020bc:	20000240 	.word	0x20000240
 80020c0:	200002a8 	.word	0x200002a8

080020c4 <global_stdio_init.part.0>:
 80020c4:	b510      	push	{r4, lr}
 80020c6:	4b0b      	ldr	r3, [pc, #44]	@ (80020f4 <global_stdio_init.part.0+0x30>)
 80020c8:	4c0b      	ldr	r4, [pc, #44]	@ (80020f8 <global_stdio_init.part.0+0x34>)
 80020ca:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <global_stdio_init.part.0+0x38>)
 80020cc:	4620      	mov	r0, r4
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	2104      	movs	r1, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	f7ff ff94 	bl	8002000 <std>
 80020d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80020dc:	2201      	movs	r2, #1
 80020de:	2109      	movs	r1, #9
 80020e0:	f7ff ff8e 	bl	8002000 <std>
 80020e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80020e8:	2202      	movs	r2, #2
 80020ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ee:	2112      	movs	r1, #18
 80020f0:	f7ff bf86 	b.w	8002000 <std>
 80020f4:	20000310 	.word	0x20000310
 80020f8:	200001d8 	.word	0x200001d8
 80020fc:	0800206d 	.word	0x0800206d

08002100 <__sfp_lock_acquire>:
 8002100:	4801      	ldr	r0, [pc, #4]	@ (8002108 <__sfp_lock_acquire+0x8>)
 8002102:	f000 ba10 	b.w	8002526 <__retarget_lock_acquire_recursive>
 8002106:	bf00      	nop
 8002108:	20000319 	.word	0x20000319

0800210c <__sfp_lock_release>:
 800210c:	4801      	ldr	r0, [pc, #4]	@ (8002114 <__sfp_lock_release+0x8>)
 800210e:	f000 ba0b 	b.w	8002528 <__retarget_lock_release_recursive>
 8002112:	bf00      	nop
 8002114:	20000319 	.word	0x20000319

08002118 <__sinit>:
 8002118:	b510      	push	{r4, lr}
 800211a:	4604      	mov	r4, r0
 800211c:	f7ff fff0 	bl	8002100 <__sfp_lock_acquire>
 8002120:	6a23      	ldr	r3, [r4, #32]
 8002122:	b11b      	cbz	r3, 800212c <__sinit+0x14>
 8002124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002128:	f7ff bff0 	b.w	800210c <__sfp_lock_release>
 800212c:	4b04      	ldr	r3, [pc, #16]	@ (8002140 <__sinit+0x28>)
 800212e:	6223      	str	r3, [r4, #32]
 8002130:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <__sinit+0x2c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f5      	bne.n	8002124 <__sinit+0xc>
 8002138:	f7ff ffc4 	bl	80020c4 <global_stdio_init.part.0>
 800213c:	e7f2      	b.n	8002124 <__sinit+0xc>
 800213e:	bf00      	nop
 8002140:	08002085 	.word	0x08002085
 8002144:	20000310 	.word	0x20000310

08002148 <_fwalk_sglue>:
 8002148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800214c:	4607      	mov	r7, r0
 800214e:	4688      	mov	r8, r1
 8002150:	4614      	mov	r4, r2
 8002152:	2600      	movs	r6, #0
 8002154:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002158:	f1b9 0901 	subs.w	r9, r9, #1
 800215c:	d505      	bpl.n	800216a <_fwalk_sglue+0x22>
 800215e:	6824      	ldr	r4, [r4, #0]
 8002160:	2c00      	cmp	r4, #0
 8002162:	d1f7      	bne.n	8002154 <_fwalk_sglue+0xc>
 8002164:	4630      	mov	r0, r6
 8002166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800216a:	89ab      	ldrh	r3, [r5, #12]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d907      	bls.n	8002180 <_fwalk_sglue+0x38>
 8002170:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002174:	3301      	adds	r3, #1
 8002176:	d003      	beq.n	8002180 <_fwalk_sglue+0x38>
 8002178:	4629      	mov	r1, r5
 800217a:	4638      	mov	r0, r7
 800217c:	47c0      	blx	r8
 800217e:	4306      	orrs	r6, r0
 8002180:	3568      	adds	r5, #104	@ 0x68
 8002182:	e7e9      	b.n	8002158 <_fwalk_sglue+0x10>

08002184 <_puts_r>:
 8002184:	6a03      	ldr	r3, [r0, #32]
 8002186:	b570      	push	{r4, r5, r6, lr}
 8002188:	4605      	mov	r5, r0
 800218a:	460e      	mov	r6, r1
 800218c:	6884      	ldr	r4, [r0, #8]
 800218e:	b90b      	cbnz	r3, 8002194 <_puts_r+0x10>
 8002190:	f7ff ffc2 	bl	8002118 <__sinit>
 8002194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002196:	07db      	lsls	r3, r3, #31
 8002198:	d405      	bmi.n	80021a6 <_puts_r+0x22>
 800219a:	89a3      	ldrh	r3, [r4, #12]
 800219c:	0598      	lsls	r0, r3, #22
 800219e:	d402      	bmi.n	80021a6 <_puts_r+0x22>
 80021a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021a2:	f000 f9c0 	bl	8002526 <__retarget_lock_acquire_recursive>
 80021a6:	89a3      	ldrh	r3, [r4, #12]
 80021a8:	0719      	lsls	r1, r3, #28
 80021aa:	d502      	bpl.n	80021b2 <_puts_r+0x2e>
 80021ac:	6923      	ldr	r3, [r4, #16]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d135      	bne.n	800221e <_puts_r+0x9a>
 80021b2:	4621      	mov	r1, r4
 80021b4:	4628      	mov	r0, r5
 80021b6:	f000 f8e7 	bl	8002388 <__swsetup_r>
 80021ba:	b380      	cbz	r0, 800221e <_puts_r+0x9a>
 80021bc:	f04f 35ff 	mov.w	r5, #4294967295
 80021c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80021c2:	07da      	lsls	r2, r3, #31
 80021c4:	d405      	bmi.n	80021d2 <_puts_r+0x4e>
 80021c6:	89a3      	ldrh	r3, [r4, #12]
 80021c8:	059b      	lsls	r3, r3, #22
 80021ca:	d402      	bmi.n	80021d2 <_puts_r+0x4e>
 80021cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80021ce:	f000 f9ab 	bl	8002528 <__retarget_lock_release_recursive>
 80021d2:	4628      	mov	r0, r5
 80021d4:	bd70      	pop	{r4, r5, r6, pc}
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da04      	bge.n	80021e4 <_puts_r+0x60>
 80021da:	69a2      	ldr	r2, [r4, #24]
 80021dc:	429a      	cmp	r2, r3
 80021de:	dc17      	bgt.n	8002210 <_puts_r+0x8c>
 80021e0:	290a      	cmp	r1, #10
 80021e2:	d015      	beq.n	8002210 <_puts_r+0x8c>
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	6022      	str	r2, [r4, #0]
 80021ea:	7019      	strb	r1, [r3, #0]
 80021ec:	68a3      	ldr	r3, [r4, #8]
 80021ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80021f2:	3b01      	subs	r3, #1
 80021f4:	60a3      	str	r3, [r4, #8]
 80021f6:	2900      	cmp	r1, #0
 80021f8:	d1ed      	bne.n	80021d6 <_puts_r+0x52>
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da11      	bge.n	8002222 <_puts_r+0x9e>
 80021fe:	4622      	mov	r2, r4
 8002200:	210a      	movs	r1, #10
 8002202:	4628      	mov	r0, r5
 8002204:	f000 f881 	bl	800230a <__swbuf_r>
 8002208:	3001      	adds	r0, #1
 800220a:	d0d7      	beq.n	80021bc <_puts_r+0x38>
 800220c:	250a      	movs	r5, #10
 800220e:	e7d7      	b.n	80021c0 <_puts_r+0x3c>
 8002210:	4622      	mov	r2, r4
 8002212:	4628      	mov	r0, r5
 8002214:	f000 f879 	bl	800230a <__swbuf_r>
 8002218:	3001      	adds	r0, #1
 800221a:	d1e7      	bne.n	80021ec <_puts_r+0x68>
 800221c:	e7ce      	b.n	80021bc <_puts_r+0x38>
 800221e:	3e01      	subs	r6, #1
 8002220:	e7e4      	b.n	80021ec <_puts_r+0x68>
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	6022      	str	r2, [r4, #0]
 8002228:	220a      	movs	r2, #10
 800222a:	701a      	strb	r2, [r3, #0]
 800222c:	e7ee      	b.n	800220c <_puts_r+0x88>
	...

08002230 <puts>:
 8002230:	4b02      	ldr	r3, [pc, #8]	@ (800223c <puts+0xc>)
 8002232:	4601      	mov	r1, r0
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	f7ff bfa5 	b.w	8002184 <_puts_r>
 800223a:	bf00      	nop
 800223c:	20000018 	.word	0x20000018

08002240 <siprintf>:
 8002240:	b40e      	push	{r1, r2, r3}
 8002242:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002246:	b510      	push	{r4, lr}
 8002248:	2400      	movs	r4, #0
 800224a:	b09d      	sub	sp, #116	@ 0x74
 800224c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800224e:	9002      	str	r0, [sp, #8]
 8002250:	9006      	str	r0, [sp, #24]
 8002252:	9107      	str	r1, [sp, #28]
 8002254:	9104      	str	r1, [sp, #16]
 8002256:	4809      	ldr	r0, [pc, #36]	@ (800227c <siprintf+0x3c>)
 8002258:	4909      	ldr	r1, [pc, #36]	@ (8002280 <siprintf+0x40>)
 800225a:	f853 2b04 	ldr.w	r2, [r3], #4
 800225e:	9105      	str	r1, [sp, #20]
 8002260:	6800      	ldr	r0, [r0, #0]
 8002262:	a902      	add	r1, sp, #8
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002268:	f000 fab2 	bl	80027d0 <_svfiprintf_r>
 800226c:	9b02      	ldr	r3, [sp, #8]
 800226e:	701c      	strb	r4, [r3, #0]
 8002270:	b01d      	add	sp, #116	@ 0x74
 8002272:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002276:	b003      	add	sp, #12
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000018 	.word	0x20000018
 8002280:	ffff0208 	.word	0xffff0208

08002284 <__sread>:
 8002284:	b510      	push	{r4, lr}
 8002286:	460c      	mov	r4, r1
 8002288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800228c:	f000 f8fc 	bl	8002488 <_read_r>
 8002290:	2800      	cmp	r0, #0
 8002292:	bfab      	itete	ge
 8002294:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002296:	89a3      	ldrhlt	r3, [r4, #12]
 8002298:	181b      	addge	r3, r3, r0
 800229a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800229e:	bfac      	ite	ge
 80022a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80022a2:	81a3      	strhlt	r3, [r4, #12]
 80022a4:	bd10      	pop	{r4, pc}

080022a6 <__swrite>:
 80022a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022aa:	461f      	mov	r7, r3
 80022ac:	898b      	ldrh	r3, [r1, #12]
 80022ae:	4605      	mov	r5, r0
 80022b0:	05db      	lsls	r3, r3, #23
 80022b2:	460c      	mov	r4, r1
 80022b4:	4616      	mov	r6, r2
 80022b6:	d505      	bpl.n	80022c4 <__swrite+0x1e>
 80022b8:	2302      	movs	r3, #2
 80022ba:	2200      	movs	r2, #0
 80022bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022c0:	f000 f8d0 	bl	8002464 <_lseek_r>
 80022c4:	89a3      	ldrh	r3, [r4, #12]
 80022c6:	4632      	mov	r2, r6
 80022c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80022cc:	81a3      	strh	r3, [r4, #12]
 80022ce:	4628      	mov	r0, r5
 80022d0:	463b      	mov	r3, r7
 80022d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80022d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80022da:	f000 b8e7 	b.w	80024ac <_write_r>

080022de <__sseek>:
 80022de:	b510      	push	{r4, lr}
 80022e0:	460c      	mov	r4, r1
 80022e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022e6:	f000 f8bd 	bl	8002464 <_lseek_r>
 80022ea:	1c43      	adds	r3, r0, #1
 80022ec:	89a3      	ldrh	r3, [r4, #12]
 80022ee:	bf15      	itete	ne
 80022f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80022f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80022f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80022fa:	81a3      	strheq	r3, [r4, #12]
 80022fc:	bf18      	it	ne
 80022fe:	81a3      	strhne	r3, [r4, #12]
 8002300:	bd10      	pop	{r4, pc}

08002302 <__sclose>:
 8002302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002306:	f000 b89d 	b.w	8002444 <_close_r>

0800230a <__swbuf_r>:
 800230a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230c:	460e      	mov	r6, r1
 800230e:	4614      	mov	r4, r2
 8002310:	4605      	mov	r5, r0
 8002312:	b118      	cbz	r0, 800231c <__swbuf_r+0x12>
 8002314:	6a03      	ldr	r3, [r0, #32]
 8002316:	b90b      	cbnz	r3, 800231c <__swbuf_r+0x12>
 8002318:	f7ff fefe 	bl	8002118 <__sinit>
 800231c:	69a3      	ldr	r3, [r4, #24]
 800231e:	60a3      	str	r3, [r4, #8]
 8002320:	89a3      	ldrh	r3, [r4, #12]
 8002322:	071a      	lsls	r2, r3, #28
 8002324:	d501      	bpl.n	800232a <__swbuf_r+0x20>
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	b943      	cbnz	r3, 800233c <__swbuf_r+0x32>
 800232a:	4621      	mov	r1, r4
 800232c:	4628      	mov	r0, r5
 800232e:	f000 f82b 	bl	8002388 <__swsetup_r>
 8002332:	b118      	cbz	r0, 800233c <__swbuf_r+0x32>
 8002334:	f04f 37ff 	mov.w	r7, #4294967295
 8002338:	4638      	mov	r0, r7
 800233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	6922      	ldr	r2, [r4, #16]
 8002340:	b2f6      	uxtb	r6, r6
 8002342:	1a98      	subs	r0, r3, r2
 8002344:	6963      	ldr	r3, [r4, #20]
 8002346:	4637      	mov	r7, r6
 8002348:	4283      	cmp	r3, r0
 800234a:	dc05      	bgt.n	8002358 <__swbuf_r+0x4e>
 800234c:	4621      	mov	r1, r4
 800234e:	4628      	mov	r0, r5
 8002350:	f000 fd4a 	bl	8002de8 <_fflush_r>
 8002354:	2800      	cmp	r0, #0
 8002356:	d1ed      	bne.n	8002334 <__swbuf_r+0x2a>
 8002358:	68a3      	ldr	r3, [r4, #8]
 800235a:	3b01      	subs	r3, #1
 800235c:	60a3      	str	r3, [r4, #8]
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	6022      	str	r2, [r4, #0]
 8002364:	701e      	strb	r6, [r3, #0]
 8002366:	6962      	ldr	r2, [r4, #20]
 8002368:	1c43      	adds	r3, r0, #1
 800236a:	429a      	cmp	r2, r3
 800236c:	d004      	beq.n	8002378 <__swbuf_r+0x6e>
 800236e:	89a3      	ldrh	r3, [r4, #12]
 8002370:	07db      	lsls	r3, r3, #31
 8002372:	d5e1      	bpl.n	8002338 <__swbuf_r+0x2e>
 8002374:	2e0a      	cmp	r6, #10
 8002376:	d1df      	bne.n	8002338 <__swbuf_r+0x2e>
 8002378:	4621      	mov	r1, r4
 800237a:	4628      	mov	r0, r5
 800237c:	f000 fd34 	bl	8002de8 <_fflush_r>
 8002380:	2800      	cmp	r0, #0
 8002382:	d0d9      	beq.n	8002338 <__swbuf_r+0x2e>
 8002384:	e7d6      	b.n	8002334 <__swbuf_r+0x2a>
	...

08002388 <__swsetup_r>:
 8002388:	b538      	push	{r3, r4, r5, lr}
 800238a:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <__swsetup_r+0xa8>)
 800238c:	4605      	mov	r5, r0
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	460c      	mov	r4, r1
 8002392:	b118      	cbz	r0, 800239c <__swsetup_r+0x14>
 8002394:	6a03      	ldr	r3, [r0, #32]
 8002396:	b90b      	cbnz	r3, 800239c <__swsetup_r+0x14>
 8002398:	f7ff febe 	bl	8002118 <__sinit>
 800239c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023a0:	0719      	lsls	r1, r3, #28
 80023a2:	d422      	bmi.n	80023ea <__swsetup_r+0x62>
 80023a4:	06da      	lsls	r2, r3, #27
 80023a6:	d407      	bmi.n	80023b8 <__swsetup_r+0x30>
 80023a8:	2209      	movs	r2, #9
 80023aa:	602a      	str	r2, [r5, #0]
 80023ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	81a3      	strh	r3, [r4, #12]
 80023b6:	e033      	b.n	8002420 <__swsetup_r+0x98>
 80023b8:	0758      	lsls	r0, r3, #29
 80023ba:	d512      	bpl.n	80023e2 <__swsetup_r+0x5a>
 80023bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023be:	b141      	cbz	r1, 80023d2 <__swsetup_r+0x4a>
 80023c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023c4:	4299      	cmp	r1, r3
 80023c6:	d002      	beq.n	80023ce <__swsetup_r+0x46>
 80023c8:	4628      	mov	r0, r5
 80023ca:	f000 f8af 	bl	800252c <_free_r>
 80023ce:	2300      	movs	r3, #0
 80023d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80023d2:	89a3      	ldrh	r3, [r4, #12]
 80023d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80023d8:	81a3      	strh	r3, [r4, #12]
 80023da:	2300      	movs	r3, #0
 80023dc:	6063      	str	r3, [r4, #4]
 80023de:	6923      	ldr	r3, [r4, #16]
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	89a3      	ldrh	r3, [r4, #12]
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	81a3      	strh	r3, [r4, #12]
 80023ea:	6923      	ldr	r3, [r4, #16]
 80023ec:	b94b      	cbnz	r3, 8002402 <__swsetup_r+0x7a>
 80023ee:	89a3      	ldrh	r3, [r4, #12]
 80023f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80023f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023f8:	d003      	beq.n	8002402 <__swsetup_r+0x7a>
 80023fa:	4621      	mov	r1, r4
 80023fc:	4628      	mov	r0, r5
 80023fe:	f000 fd40 	bl	8002e82 <__smakebuf_r>
 8002402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002406:	f013 0201 	ands.w	r2, r3, #1
 800240a:	d00a      	beq.n	8002422 <__swsetup_r+0x9a>
 800240c:	2200      	movs	r2, #0
 800240e:	60a2      	str	r2, [r4, #8]
 8002410:	6962      	ldr	r2, [r4, #20]
 8002412:	4252      	negs	r2, r2
 8002414:	61a2      	str	r2, [r4, #24]
 8002416:	6922      	ldr	r2, [r4, #16]
 8002418:	b942      	cbnz	r2, 800242c <__swsetup_r+0xa4>
 800241a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800241e:	d1c5      	bne.n	80023ac <__swsetup_r+0x24>
 8002420:	bd38      	pop	{r3, r4, r5, pc}
 8002422:	0799      	lsls	r1, r3, #30
 8002424:	bf58      	it	pl
 8002426:	6962      	ldrpl	r2, [r4, #20]
 8002428:	60a2      	str	r2, [r4, #8]
 800242a:	e7f4      	b.n	8002416 <__swsetup_r+0x8e>
 800242c:	2000      	movs	r0, #0
 800242e:	e7f7      	b.n	8002420 <__swsetup_r+0x98>
 8002430:	20000018 	.word	0x20000018

08002434 <memset>:
 8002434:	4603      	mov	r3, r0
 8002436:	4402      	add	r2, r0
 8002438:	4293      	cmp	r3, r2
 800243a:	d100      	bne.n	800243e <memset+0xa>
 800243c:	4770      	bx	lr
 800243e:	f803 1b01 	strb.w	r1, [r3], #1
 8002442:	e7f9      	b.n	8002438 <memset+0x4>

08002444 <_close_r>:
 8002444:	b538      	push	{r3, r4, r5, lr}
 8002446:	2300      	movs	r3, #0
 8002448:	4d05      	ldr	r5, [pc, #20]	@ (8002460 <_close_r+0x1c>)
 800244a:	4604      	mov	r4, r0
 800244c:	4608      	mov	r0, r1
 800244e:	602b      	str	r3, [r5, #0]
 8002450:	f7fe fb25 	bl	8000a9e <_close>
 8002454:	1c43      	adds	r3, r0, #1
 8002456:	d102      	bne.n	800245e <_close_r+0x1a>
 8002458:	682b      	ldr	r3, [r5, #0]
 800245a:	b103      	cbz	r3, 800245e <_close_r+0x1a>
 800245c:	6023      	str	r3, [r4, #0]
 800245e:	bd38      	pop	{r3, r4, r5, pc}
 8002460:	20000314 	.word	0x20000314

08002464 <_lseek_r>:
 8002464:	b538      	push	{r3, r4, r5, lr}
 8002466:	4604      	mov	r4, r0
 8002468:	4608      	mov	r0, r1
 800246a:	4611      	mov	r1, r2
 800246c:	2200      	movs	r2, #0
 800246e:	4d05      	ldr	r5, [pc, #20]	@ (8002484 <_lseek_r+0x20>)
 8002470:	602a      	str	r2, [r5, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	f7fe fb37 	bl	8000ae6 <_lseek>
 8002478:	1c43      	adds	r3, r0, #1
 800247a:	d102      	bne.n	8002482 <_lseek_r+0x1e>
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	b103      	cbz	r3, 8002482 <_lseek_r+0x1e>
 8002480:	6023      	str	r3, [r4, #0]
 8002482:	bd38      	pop	{r3, r4, r5, pc}
 8002484:	20000314 	.word	0x20000314

08002488 <_read_r>:
 8002488:	b538      	push	{r3, r4, r5, lr}
 800248a:	4604      	mov	r4, r0
 800248c:	4608      	mov	r0, r1
 800248e:	4611      	mov	r1, r2
 8002490:	2200      	movs	r2, #0
 8002492:	4d05      	ldr	r5, [pc, #20]	@ (80024a8 <_read_r+0x20>)
 8002494:	602a      	str	r2, [r5, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	f7fe fac8 	bl	8000a2c <_read>
 800249c:	1c43      	adds	r3, r0, #1
 800249e:	d102      	bne.n	80024a6 <_read_r+0x1e>
 80024a0:	682b      	ldr	r3, [r5, #0]
 80024a2:	b103      	cbz	r3, 80024a6 <_read_r+0x1e>
 80024a4:	6023      	str	r3, [r4, #0]
 80024a6:	bd38      	pop	{r3, r4, r5, pc}
 80024a8:	20000314 	.word	0x20000314

080024ac <_write_r>:
 80024ac:	b538      	push	{r3, r4, r5, lr}
 80024ae:	4604      	mov	r4, r0
 80024b0:	4608      	mov	r0, r1
 80024b2:	4611      	mov	r1, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	4d05      	ldr	r5, [pc, #20]	@ (80024cc <_write_r+0x20>)
 80024b8:	602a      	str	r2, [r5, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f7fe fad3 	bl	8000a66 <_write>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_write_r+0x1e>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_write_r+0x1e>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	20000314 	.word	0x20000314

080024d0 <__errno>:
 80024d0:	4b01      	ldr	r3, [pc, #4]	@ (80024d8 <__errno+0x8>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	20000018 	.word	0x20000018

080024dc <__libc_init_array>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	2600      	movs	r6, #0
 80024e0:	4d0c      	ldr	r5, [pc, #48]	@ (8002514 <__libc_init_array+0x38>)
 80024e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002518 <__libc_init_array+0x3c>)
 80024e4:	1b64      	subs	r4, r4, r5
 80024e6:	10a4      	asrs	r4, r4, #2
 80024e8:	42a6      	cmp	r6, r4
 80024ea:	d109      	bne.n	8002500 <__libc_init_array+0x24>
 80024ec:	f000 fda4 	bl	8003038 <_init>
 80024f0:	2600      	movs	r6, #0
 80024f2:	4d0a      	ldr	r5, [pc, #40]	@ (800251c <__libc_init_array+0x40>)
 80024f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002520 <__libc_init_array+0x44>)
 80024f6:	1b64      	subs	r4, r4, r5
 80024f8:	10a4      	asrs	r4, r4, #2
 80024fa:	42a6      	cmp	r6, r4
 80024fc:	d105      	bne.n	800250a <__libc_init_array+0x2e>
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	f855 3b04 	ldr.w	r3, [r5], #4
 8002504:	4798      	blx	r3
 8002506:	3601      	adds	r6, #1
 8002508:	e7ee      	b.n	80024e8 <__libc_init_array+0xc>
 800250a:	f855 3b04 	ldr.w	r3, [r5], #4
 800250e:	4798      	blx	r3
 8002510:	3601      	adds	r6, #1
 8002512:	e7f2      	b.n	80024fa <__libc_init_array+0x1e>
 8002514:	08003138 	.word	0x08003138
 8002518:	08003138 	.word	0x08003138
 800251c:	08003138 	.word	0x08003138
 8002520:	0800313c 	.word	0x0800313c

08002524 <__retarget_lock_init_recursive>:
 8002524:	4770      	bx	lr

08002526 <__retarget_lock_acquire_recursive>:
 8002526:	4770      	bx	lr

08002528 <__retarget_lock_release_recursive>:
 8002528:	4770      	bx	lr
	...

0800252c <_free_r>:
 800252c:	b538      	push	{r3, r4, r5, lr}
 800252e:	4605      	mov	r5, r0
 8002530:	2900      	cmp	r1, #0
 8002532:	d040      	beq.n	80025b6 <_free_r+0x8a>
 8002534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002538:	1f0c      	subs	r4, r1, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	bfb8      	it	lt
 800253e:	18e4      	addlt	r4, r4, r3
 8002540:	f000 f8de 	bl	8002700 <__malloc_lock>
 8002544:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <_free_r+0x8c>)
 8002546:	6813      	ldr	r3, [r2, #0]
 8002548:	b933      	cbnz	r3, 8002558 <_free_r+0x2c>
 800254a:	6063      	str	r3, [r4, #4]
 800254c:	6014      	str	r4, [r2, #0]
 800254e:	4628      	mov	r0, r5
 8002550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002554:	f000 b8da 	b.w	800270c <__malloc_unlock>
 8002558:	42a3      	cmp	r3, r4
 800255a:	d908      	bls.n	800256e <_free_r+0x42>
 800255c:	6820      	ldr	r0, [r4, #0]
 800255e:	1821      	adds	r1, r4, r0
 8002560:	428b      	cmp	r3, r1
 8002562:	bf01      	itttt	eq
 8002564:	6819      	ldreq	r1, [r3, #0]
 8002566:	685b      	ldreq	r3, [r3, #4]
 8002568:	1809      	addeq	r1, r1, r0
 800256a:	6021      	streq	r1, [r4, #0]
 800256c:	e7ed      	b.n	800254a <_free_r+0x1e>
 800256e:	461a      	mov	r2, r3
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	b10b      	cbz	r3, 8002578 <_free_r+0x4c>
 8002574:	42a3      	cmp	r3, r4
 8002576:	d9fa      	bls.n	800256e <_free_r+0x42>
 8002578:	6811      	ldr	r1, [r2, #0]
 800257a:	1850      	adds	r0, r2, r1
 800257c:	42a0      	cmp	r0, r4
 800257e:	d10b      	bne.n	8002598 <_free_r+0x6c>
 8002580:	6820      	ldr	r0, [r4, #0]
 8002582:	4401      	add	r1, r0
 8002584:	1850      	adds	r0, r2, r1
 8002586:	4283      	cmp	r3, r0
 8002588:	6011      	str	r1, [r2, #0]
 800258a:	d1e0      	bne.n	800254e <_free_r+0x22>
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4408      	add	r0, r1
 8002592:	6010      	str	r0, [r2, #0]
 8002594:	6053      	str	r3, [r2, #4]
 8002596:	e7da      	b.n	800254e <_free_r+0x22>
 8002598:	d902      	bls.n	80025a0 <_free_r+0x74>
 800259a:	230c      	movs	r3, #12
 800259c:	602b      	str	r3, [r5, #0]
 800259e:	e7d6      	b.n	800254e <_free_r+0x22>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	1821      	adds	r1, r4, r0
 80025a4:	428b      	cmp	r3, r1
 80025a6:	bf01      	itttt	eq
 80025a8:	6819      	ldreq	r1, [r3, #0]
 80025aa:	685b      	ldreq	r3, [r3, #4]
 80025ac:	1809      	addeq	r1, r1, r0
 80025ae:	6021      	streq	r1, [r4, #0]
 80025b0:	6063      	str	r3, [r4, #4]
 80025b2:	6054      	str	r4, [r2, #4]
 80025b4:	e7cb      	b.n	800254e <_free_r+0x22>
 80025b6:	bd38      	pop	{r3, r4, r5, pc}
 80025b8:	20000320 	.word	0x20000320

080025bc <sbrk_aligned>:
 80025bc:	b570      	push	{r4, r5, r6, lr}
 80025be:	4e0f      	ldr	r6, [pc, #60]	@ (80025fc <sbrk_aligned+0x40>)
 80025c0:	460c      	mov	r4, r1
 80025c2:	6831      	ldr	r1, [r6, #0]
 80025c4:	4605      	mov	r5, r0
 80025c6:	b911      	cbnz	r1, 80025ce <sbrk_aligned+0x12>
 80025c8:	f000 fcd4 	bl	8002f74 <_sbrk_r>
 80025cc:	6030      	str	r0, [r6, #0]
 80025ce:	4621      	mov	r1, r4
 80025d0:	4628      	mov	r0, r5
 80025d2:	f000 fccf 	bl	8002f74 <_sbrk_r>
 80025d6:	1c43      	adds	r3, r0, #1
 80025d8:	d103      	bne.n	80025e2 <sbrk_aligned+0x26>
 80025da:	f04f 34ff 	mov.w	r4, #4294967295
 80025de:	4620      	mov	r0, r4
 80025e0:	bd70      	pop	{r4, r5, r6, pc}
 80025e2:	1cc4      	adds	r4, r0, #3
 80025e4:	f024 0403 	bic.w	r4, r4, #3
 80025e8:	42a0      	cmp	r0, r4
 80025ea:	d0f8      	beq.n	80025de <sbrk_aligned+0x22>
 80025ec:	1a21      	subs	r1, r4, r0
 80025ee:	4628      	mov	r0, r5
 80025f0:	f000 fcc0 	bl	8002f74 <_sbrk_r>
 80025f4:	3001      	adds	r0, #1
 80025f6:	d1f2      	bne.n	80025de <sbrk_aligned+0x22>
 80025f8:	e7ef      	b.n	80025da <sbrk_aligned+0x1e>
 80025fa:	bf00      	nop
 80025fc:	2000031c 	.word	0x2000031c

08002600 <_malloc_r>:
 8002600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002604:	1ccd      	adds	r5, r1, #3
 8002606:	f025 0503 	bic.w	r5, r5, #3
 800260a:	3508      	adds	r5, #8
 800260c:	2d0c      	cmp	r5, #12
 800260e:	bf38      	it	cc
 8002610:	250c      	movcc	r5, #12
 8002612:	2d00      	cmp	r5, #0
 8002614:	4606      	mov	r6, r0
 8002616:	db01      	blt.n	800261c <_malloc_r+0x1c>
 8002618:	42a9      	cmp	r1, r5
 800261a:	d904      	bls.n	8002626 <_malloc_r+0x26>
 800261c:	230c      	movs	r3, #12
 800261e:	6033      	str	r3, [r6, #0]
 8002620:	2000      	movs	r0, #0
 8002622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002626:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80026fc <_malloc_r+0xfc>
 800262a:	f000 f869 	bl	8002700 <__malloc_lock>
 800262e:	f8d8 3000 	ldr.w	r3, [r8]
 8002632:	461c      	mov	r4, r3
 8002634:	bb44      	cbnz	r4, 8002688 <_malloc_r+0x88>
 8002636:	4629      	mov	r1, r5
 8002638:	4630      	mov	r0, r6
 800263a:	f7ff ffbf 	bl	80025bc <sbrk_aligned>
 800263e:	1c43      	adds	r3, r0, #1
 8002640:	4604      	mov	r4, r0
 8002642:	d158      	bne.n	80026f6 <_malloc_r+0xf6>
 8002644:	f8d8 4000 	ldr.w	r4, [r8]
 8002648:	4627      	mov	r7, r4
 800264a:	2f00      	cmp	r7, #0
 800264c:	d143      	bne.n	80026d6 <_malloc_r+0xd6>
 800264e:	2c00      	cmp	r4, #0
 8002650:	d04b      	beq.n	80026ea <_malloc_r+0xea>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	4639      	mov	r1, r7
 8002656:	4630      	mov	r0, r6
 8002658:	eb04 0903 	add.w	r9, r4, r3
 800265c:	f000 fc8a 	bl	8002f74 <_sbrk_r>
 8002660:	4581      	cmp	r9, r0
 8002662:	d142      	bne.n	80026ea <_malloc_r+0xea>
 8002664:	6821      	ldr	r1, [r4, #0]
 8002666:	4630      	mov	r0, r6
 8002668:	1a6d      	subs	r5, r5, r1
 800266a:	4629      	mov	r1, r5
 800266c:	f7ff ffa6 	bl	80025bc <sbrk_aligned>
 8002670:	3001      	adds	r0, #1
 8002672:	d03a      	beq.n	80026ea <_malloc_r+0xea>
 8002674:	6823      	ldr	r3, [r4, #0]
 8002676:	442b      	add	r3, r5
 8002678:	6023      	str	r3, [r4, #0]
 800267a:	f8d8 3000 	ldr.w	r3, [r8]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	bb62      	cbnz	r2, 80026dc <_malloc_r+0xdc>
 8002682:	f8c8 7000 	str.w	r7, [r8]
 8002686:	e00f      	b.n	80026a8 <_malloc_r+0xa8>
 8002688:	6822      	ldr	r2, [r4, #0]
 800268a:	1b52      	subs	r2, r2, r5
 800268c:	d420      	bmi.n	80026d0 <_malloc_r+0xd0>
 800268e:	2a0b      	cmp	r2, #11
 8002690:	d917      	bls.n	80026c2 <_malloc_r+0xc2>
 8002692:	1961      	adds	r1, r4, r5
 8002694:	42a3      	cmp	r3, r4
 8002696:	6025      	str	r5, [r4, #0]
 8002698:	bf18      	it	ne
 800269a:	6059      	strne	r1, [r3, #4]
 800269c:	6863      	ldr	r3, [r4, #4]
 800269e:	bf08      	it	eq
 80026a0:	f8c8 1000 	streq.w	r1, [r8]
 80026a4:	5162      	str	r2, [r4, r5]
 80026a6:	604b      	str	r3, [r1, #4]
 80026a8:	4630      	mov	r0, r6
 80026aa:	f000 f82f 	bl	800270c <__malloc_unlock>
 80026ae:	f104 000b 	add.w	r0, r4, #11
 80026b2:	1d23      	adds	r3, r4, #4
 80026b4:	f020 0007 	bic.w	r0, r0, #7
 80026b8:	1ac2      	subs	r2, r0, r3
 80026ba:	bf1c      	itt	ne
 80026bc:	1a1b      	subne	r3, r3, r0
 80026be:	50a3      	strne	r3, [r4, r2]
 80026c0:	e7af      	b.n	8002622 <_malloc_r+0x22>
 80026c2:	6862      	ldr	r2, [r4, #4]
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	bf0c      	ite	eq
 80026c8:	f8c8 2000 	streq.w	r2, [r8]
 80026cc:	605a      	strne	r2, [r3, #4]
 80026ce:	e7eb      	b.n	80026a8 <_malloc_r+0xa8>
 80026d0:	4623      	mov	r3, r4
 80026d2:	6864      	ldr	r4, [r4, #4]
 80026d4:	e7ae      	b.n	8002634 <_malloc_r+0x34>
 80026d6:	463c      	mov	r4, r7
 80026d8:	687f      	ldr	r7, [r7, #4]
 80026da:	e7b6      	b.n	800264a <_malloc_r+0x4a>
 80026dc:	461a      	mov	r2, r3
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	42a3      	cmp	r3, r4
 80026e2:	d1fb      	bne.n	80026dc <_malloc_r+0xdc>
 80026e4:	2300      	movs	r3, #0
 80026e6:	6053      	str	r3, [r2, #4]
 80026e8:	e7de      	b.n	80026a8 <_malloc_r+0xa8>
 80026ea:	230c      	movs	r3, #12
 80026ec:	4630      	mov	r0, r6
 80026ee:	6033      	str	r3, [r6, #0]
 80026f0:	f000 f80c 	bl	800270c <__malloc_unlock>
 80026f4:	e794      	b.n	8002620 <_malloc_r+0x20>
 80026f6:	6005      	str	r5, [r0, #0]
 80026f8:	e7d6      	b.n	80026a8 <_malloc_r+0xa8>
 80026fa:	bf00      	nop
 80026fc:	20000320 	.word	0x20000320

08002700 <__malloc_lock>:
 8002700:	4801      	ldr	r0, [pc, #4]	@ (8002708 <__malloc_lock+0x8>)
 8002702:	f7ff bf10 	b.w	8002526 <__retarget_lock_acquire_recursive>
 8002706:	bf00      	nop
 8002708:	20000318 	.word	0x20000318

0800270c <__malloc_unlock>:
 800270c:	4801      	ldr	r0, [pc, #4]	@ (8002714 <__malloc_unlock+0x8>)
 800270e:	f7ff bf0b 	b.w	8002528 <__retarget_lock_release_recursive>
 8002712:	bf00      	nop
 8002714:	20000318 	.word	0x20000318

08002718 <__ssputs_r>:
 8002718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800271c:	461f      	mov	r7, r3
 800271e:	688e      	ldr	r6, [r1, #8]
 8002720:	4682      	mov	sl, r0
 8002722:	42be      	cmp	r6, r7
 8002724:	460c      	mov	r4, r1
 8002726:	4690      	mov	r8, r2
 8002728:	680b      	ldr	r3, [r1, #0]
 800272a:	d82d      	bhi.n	8002788 <__ssputs_r+0x70>
 800272c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002730:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002734:	d026      	beq.n	8002784 <__ssputs_r+0x6c>
 8002736:	6965      	ldr	r5, [r4, #20]
 8002738:	6909      	ldr	r1, [r1, #16]
 800273a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800273e:	eba3 0901 	sub.w	r9, r3, r1
 8002742:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002746:	1c7b      	adds	r3, r7, #1
 8002748:	444b      	add	r3, r9
 800274a:	106d      	asrs	r5, r5, #1
 800274c:	429d      	cmp	r5, r3
 800274e:	bf38      	it	cc
 8002750:	461d      	movcc	r5, r3
 8002752:	0553      	lsls	r3, r2, #21
 8002754:	d527      	bpl.n	80027a6 <__ssputs_r+0x8e>
 8002756:	4629      	mov	r1, r5
 8002758:	f7ff ff52 	bl	8002600 <_malloc_r>
 800275c:	4606      	mov	r6, r0
 800275e:	b360      	cbz	r0, 80027ba <__ssputs_r+0xa2>
 8002760:	464a      	mov	r2, r9
 8002762:	6921      	ldr	r1, [r4, #16]
 8002764:	f000 fc24 	bl	8002fb0 <memcpy>
 8002768:	89a3      	ldrh	r3, [r4, #12]
 800276a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800276e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002772:	81a3      	strh	r3, [r4, #12]
 8002774:	6126      	str	r6, [r4, #16]
 8002776:	444e      	add	r6, r9
 8002778:	6026      	str	r6, [r4, #0]
 800277a:	463e      	mov	r6, r7
 800277c:	6165      	str	r5, [r4, #20]
 800277e:	eba5 0509 	sub.w	r5, r5, r9
 8002782:	60a5      	str	r5, [r4, #8]
 8002784:	42be      	cmp	r6, r7
 8002786:	d900      	bls.n	800278a <__ssputs_r+0x72>
 8002788:	463e      	mov	r6, r7
 800278a:	4632      	mov	r2, r6
 800278c:	4641      	mov	r1, r8
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	f000 fbb3 	bl	8002efa <memmove>
 8002794:	2000      	movs	r0, #0
 8002796:	68a3      	ldr	r3, [r4, #8]
 8002798:	1b9b      	subs	r3, r3, r6
 800279a:	60a3      	str	r3, [r4, #8]
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	4433      	add	r3, r6
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a6:	462a      	mov	r2, r5
 80027a8:	f000 fc10 	bl	8002fcc <_realloc_r>
 80027ac:	4606      	mov	r6, r0
 80027ae:	2800      	cmp	r0, #0
 80027b0:	d1e0      	bne.n	8002774 <__ssputs_r+0x5c>
 80027b2:	4650      	mov	r0, sl
 80027b4:	6921      	ldr	r1, [r4, #16]
 80027b6:	f7ff feb9 	bl	800252c <_free_r>
 80027ba:	230c      	movs	r3, #12
 80027bc:	f8ca 3000 	str.w	r3, [sl]
 80027c0:	89a3      	ldrh	r3, [r4, #12]
 80027c2:	f04f 30ff 	mov.w	r0, #4294967295
 80027c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ca:	81a3      	strh	r3, [r4, #12]
 80027cc:	e7e9      	b.n	80027a2 <__ssputs_r+0x8a>
	...

080027d0 <_svfiprintf_r>:
 80027d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027d4:	4698      	mov	r8, r3
 80027d6:	898b      	ldrh	r3, [r1, #12]
 80027d8:	4607      	mov	r7, r0
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	460d      	mov	r5, r1
 80027de:	4614      	mov	r4, r2
 80027e0:	b09d      	sub	sp, #116	@ 0x74
 80027e2:	d510      	bpl.n	8002806 <_svfiprintf_r+0x36>
 80027e4:	690b      	ldr	r3, [r1, #16]
 80027e6:	b973      	cbnz	r3, 8002806 <_svfiprintf_r+0x36>
 80027e8:	2140      	movs	r1, #64	@ 0x40
 80027ea:	f7ff ff09 	bl	8002600 <_malloc_r>
 80027ee:	6028      	str	r0, [r5, #0]
 80027f0:	6128      	str	r0, [r5, #16]
 80027f2:	b930      	cbnz	r0, 8002802 <_svfiprintf_r+0x32>
 80027f4:	230c      	movs	r3, #12
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	b01d      	add	sp, #116	@ 0x74
 80027fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002802:	2340      	movs	r3, #64	@ 0x40
 8002804:	616b      	str	r3, [r5, #20]
 8002806:	2300      	movs	r3, #0
 8002808:	9309      	str	r3, [sp, #36]	@ 0x24
 800280a:	2320      	movs	r3, #32
 800280c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002810:	2330      	movs	r3, #48	@ 0x30
 8002812:	f04f 0901 	mov.w	r9, #1
 8002816:	f8cd 800c 	str.w	r8, [sp, #12]
 800281a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80029b4 <_svfiprintf_r+0x1e4>
 800281e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002822:	4623      	mov	r3, r4
 8002824:	469a      	mov	sl, r3
 8002826:	f813 2b01 	ldrb.w	r2, [r3], #1
 800282a:	b10a      	cbz	r2, 8002830 <_svfiprintf_r+0x60>
 800282c:	2a25      	cmp	r2, #37	@ 0x25
 800282e:	d1f9      	bne.n	8002824 <_svfiprintf_r+0x54>
 8002830:	ebba 0b04 	subs.w	fp, sl, r4
 8002834:	d00b      	beq.n	800284e <_svfiprintf_r+0x7e>
 8002836:	465b      	mov	r3, fp
 8002838:	4622      	mov	r2, r4
 800283a:	4629      	mov	r1, r5
 800283c:	4638      	mov	r0, r7
 800283e:	f7ff ff6b 	bl	8002718 <__ssputs_r>
 8002842:	3001      	adds	r0, #1
 8002844:	f000 80a7 	beq.w	8002996 <_svfiprintf_r+0x1c6>
 8002848:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800284a:	445a      	add	r2, fp
 800284c:	9209      	str	r2, [sp, #36]	@ 0x24
 800284e:	f89a 3000 	ldrb.w	r3, [sl]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 809f 	beq.w	8002996 <_svfiprintf_r+0x1c6>
 8002858:	2300      	movs	r3, #0
 800285a:	f04f 32ff 	mov.w	r2, #4294967295
 800285e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002862:	f10a 0a01 	add.w	sl, sl, #1
 8002866:	9304      	str	r3, [sp, #16]
 8002868:	9307      	str	r3, [sp, #28]
 800286a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800286e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002870:	4654      	mov	r4, sl
 8002872:	2205      	movs	r2, #5
 8002874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002878:	484e      	ldr	r0, [pc, #312]	@ (80029b4 <_svfiprintf_r+0x1e4>)
 800287a:	f000 fb8b 	bl	8002f94 <memchr>
 800287e:	9a04      	ldr	r2, [sp, #16]
 8002880:	b9d8      	cbnz	r0, 80028ba <_svfiprintf_r+0xea>
 8002882:	06d0      	lsls	r0, r2, #27
 8002884:	bf44      	itt	mi
 8002886:	2320      	movmi	r3, #32
 8002888:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800288c:	0711      	lsls	r1, r2, #28
 800288e:	bf44      	itt	mi
 8002890:	232b      	movmi	r3, #43	@ 0x2b
 8002892:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002896:	f89a 3000 	ldrb.w	r3, [sl]
 800289a:	2b2a      	cmp	r3, #42	@ 0x2a
 800289c:	d015      	beq.n	80028ca <_svfiprintf_r+0xfa>
 800289e:	4654      	mov	r4, sl
 80028a0:	2000      	movs	r0, #0
 80028a2:	f04f 0c0a 	mov.w	ip, #10
 80028a6:	9a07      	ldr	r2, [sp, #28]
 80028a8:	4621      	mov	r1, r4
 80028aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ae:	3b30      	subs	r3, #48	@ 0x30
 80028b0:	2b09      	cmp	r3, #9
 80028b2:	d94b      	bls.n	800294c <_svfiprintf_r+0x17c>
 80028b4:	b1b0      	cbz	r0, 80028e4 <_svfiprintf_r+0x114>
 80028b6:	9207      	str	r2, [sp, #28]
 80028b8:	e014      	b.n	80028e4 <_svfiprintf_r+0x114>
 80028ba:	eba0 0308 	sub.w	r3, r0, r8
 80028be:	fa09 f303 	lsl.w	r3, r9, r3
 80028c2:	4313      	orrs	r3, r2
 80028c4:	46a2      	mov	sl, r4
 80028c6:	9304      	str	r3, [sp, #16]
 80028c8:	e7d2      	b.n	8002870 <_svfiprintf_r+0xa0>
 80028ca:	9b03      	ldr	r3, [sp, #12]
 80028cc:	1d19      	adds	r1, r3, #4
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	9103      	str	r1, [sp, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bfbb      	ittet	lt
 80028d6:	425b      	neglt	r3, r3
 80028d8:	f042 0202 	orrlt.w	r2, r2, #2
 80028dc:	9307      	strge	r3, [sp, #28]
 80028de:	9307      	strlt	r3, [sp, #28]
 80028e0:	bfb8      	it	lt
 80028e2:	9204      	strlt	r2, [sp, #16]
 80028e4:	7823      	ldrb	r3, [r4, #0]
 80028e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80028e8:	d10a      	bne.n	8002900 <_svfiprintf_r+0x130>
 80028ea:	7863      	ldrb	r3, [r4, #1]
 80028ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ee:	d132      	bne.n	8002956 <_svfiprintf_r+0x186>
 80028f0:	9b03      	ldr	r3, [sp, #12]
 80028f2:	3402      	adds	r4, #2
 80028f4:	1d1a      	adds	r2, r3, #4
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	9203      	str	r2, [sp, #12]
 80028fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028fe:	9305      	str	r3, [sp, #20]
 8002900:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80029b8 <_svfiprintf_r+0x1e8>
 8002904:	2203      	movs	r2, #3
 8002906:	4650      	mov	r0, sl
 8002908:	7821      	ldrb	r1, [r4, #0]
 800290a:	f000 fb43 	bl	8002f94 <memchr>
 800290e:	b138      	cbz	r0, 8002920 <_svfiprintf_r+0x150>
 8002910:	2240      	movs	r2, #64	@ 0x40
 8002912:	9b04      	ldr	r3, [sp, #16]
 8002914:	eba0 000a 	sub.w	r0, r0, sl
 8002918:	4082      	lsls	r2, r0
 800291a:	4313      	orrs	r3, r2
 800291c:	3401      	adds	r4, #1
 800291e:	9304      	str	r3, [sp, #16]
 8002920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002924:	2206      	movs	r2, #6
 8002926:	4825      	ldr	r0, [pc, #148]	@ (80029bc <_svfiprintf_r+0x1ec>)
 8002928:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800292c:	f000 fb32 	bl	8002f94 <memchr>
 8002930:	2800      	cmp	r0, #0
 8002932:	d036      	beq.n	80029a2 <_svfiprintf_r+0x1d2>
 8002934:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <_svfiprintf_r+0x1f0>)
 8002936:	bb1b      	cbnz	r3, 8002980 <_svfiprintf_r+0x1b0>
 8002938:	9b03      	ldr	r3, [sp, #12]
 800293a:	3307      	adds	r3, #7
 800293c:	f023 0307 	bic.w	r3, r3, #7
 8002940:	3308      	adds	r3, #8
 8002942:	9303      	str	r3, [sp, #12]
 8002944:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002946:	4433      	add	r3, r6
 8002948:	9309      	str	r3, [sp, #36]	@ 0x24
 800294a:	e76a      	b.n	8002822 <_svfiprintf_r+0x52>
 800294c:	460c      	mov	r4, r1
 800294e:	2001      	movs	r0, #1
 8002950:	fb0c 3202 	mla	r2, ip, r2, r3
 8002954:	e7a8      	b.n	80028a8 <_svfiprintf_r+0xd8>
 8002956:	2300      	movs	r3, #0
 8002958:	f04f 0c0a 	mov.w	ip, #10
 800295c:	4619      	mov	r1, r3
 800295e:	3401      	adds	r4, #1
 8002960:	9305      	str	r3, [sp, #20]
 8002962:	4620      	mov	r0, r4
 8002964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002968:	3a30      	subs	r2, #48	@ 0x30
 800296a:	2a09      	cmp	r2, #9
 800296c:	d903      	bls.n	8002976 <_svfiprintf_r+0x1a6>
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0c6      	beq.n	8002900 <_svfiprintf_r+0x130>
 8002972:	9105      	str	r1, [sp, #20]
 8002974:	e7c4      	b.n	8002900 <_svfiprintf_r+0x130>
 8002976:	4604      	mov	r4, r0
 8002978:	2301      	movs	r3, #1
 800297a:	fb0c 2101 	mla	r1, ip, r1, r2
 800297e:	e7f0      	b.n	8002962 <_svfiprintf_r+0x192>
 8002980:	ab03      	add	r3, sp, #12
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	462a      	mov	r2, r5
 8002986:	4638      	mov	r0, r7
 8002988:	4b0e      	ldr	r3, [pc, #56]	@ (80029c4 <_svfiprintf_r+0x1f4>)
 800298a:	a904      	add	r1, sp, #16
 800298c:	f3af 8000 	nop.w
 8002990:	1c42      	adds	r2, r0, #1
 8002992:	4606      	mov	r6, r0
 8002994:	d1d6      	bne.n	8002944 <_svfiprintf_r+0x174>
 8002996:	89ab      	ldrh	r3, [r5, #12]
 8002998:	065b      	lsls	r3, r3, #25
 800299a:	f53f af2d 	bmi.w	80027f8 <_svfiprintf_r+0x28>
 800299e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029a0:	e72c      	b.n	80027fc <_svfiprintf_r+0x2c>
 80029a2:	ab03      	add	r3, sp, #12
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	462a      	mov	r2, r5
 80029a8:	4638      	mov	r0, r7
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <_svfiprintf_r+0x1f4>)
 80029ac:	a904      	add	r1, sp, #16
 80029ae:	f000 f87d 	bl	8002aac <_printf_i>
 80029b2:	e7ed      	b.n	8002990 <_svfiprintf_r+0x1c0>
 80029b4:	080030fa 	.word	0x080030fa
 80029b8:	08003100 	.word	0x08003100
 80029bc:	08003104 	.word	0x08003104
 80029c0:	00000000 	.word	0x00000000
 80029c4:	08002719 	.word	0x08002719

080029c8 <_printf_common>:
 80029c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029cc:	4616      	mov	r6, r2
 80029ce:	4698      	mov	r8, r3
 80029d0:	688a      	ldr	r2, [r1, #8]
 80029d2:	690b      	ldr	r3, [r1, #16]
 80029d4:	4607      	mov	r7, r0
 80029d6:	4293      	cmp	r3, r2
 80029d8:	bfb8      	it	lt
 80029da:	4613      	movlt	r3, r2
 80029dc:	6033      	str	r3, [r6, #0]
 80029de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80029e2:	460c      	mov	r4, r1
 80029e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029e8:	b10a      	cbz	r2, 80029ee <_printf_common+0x26>
 80029ea:	3301      	adds	r3, #1
 80029ec:	6033      	str	r3, [r6, #0]
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	0699      	lsls	r1, r3, #26
 80029f2:	bf42      	ittt	mi
 80029f4:	6833      	ldrmi	r3, [r6, #0]
 80029f6:	3302      	addmi	r3, #2
 80029f8:	6033      	strmi	r3, [r6, #0]
 80029fa:	6825      	ldr	r5, [r4, #0]
 80029fc:	f015 0506 	ands.w	r5, r5, #6
 8002a00:	d106      	bne.n	8002a10 <_printf_common+0x48>
 8002a02:	f104 0a19 	add.w	sl, r4, #25
 8002a06:	68e3      	ldr	r3, [r4, #12]
 8002a08:	6832      	ldr	r2, [r6, #0]
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	42ab      	cmp	r3, r5
 8002a0e:	dc2b      	bgt.n	8002a68 <_printf_common+0xa0>
 8002a10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a14:	6822      	ldr	r2, [r4, #0]
 8002a16:	3b00      	subs	r3, #0
 8002a18:	bf18      	it	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	0692      	lsls	r2, r2, #26
 8002a1e:	d430      	bmi.n	8002a82 <_printf_common+0xba>
 8002a20:	4641      	mov	r1, r8
 8002a22:	4638      	mov	r0, r7
 8002a24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a28:	47c8      	blx	r9
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	d023      	beq.n	8002a76 <_printf_common+0xae>
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	6922      	ldr	r2, [r4, #16]
 8002a32:	f003 0306 	and.w	r3, r3, #6
 8002a36:	2b04      	cmp	r3, #4
 8002a38:	bf14      	ite	ne
 8002a3a:	2500      	movne	r5, #0
 8002a3c:	6833      	ldreq	r3, [r6, #0]
 8002a3e:	f04f 0600 	mov.w	r6, #0
 8002a42:	bf08      	it	eq
 8002a44:	68e5      	ldreq	r5, [r4, #12]
 8002a46:	f104 041a 	add.w	r4, r4, #26
 8002a4a:	bf08      	it	eq
 8002a4c:	1aed      	subeq	r5, r5, r3
 8002a4e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a52:	bf08      	it	eq
 8002a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	bfc4      	itt	gt
 8002a5c:	1a9b      	subgt	r3, r3, r2
 8002a5e:	18ed      	addgt	r5, r5, r3
 8002a60:	42b5      	cmp	r5, r6
 8002a62:	d11a      	bne.n	8002a9a <_printf_common+0xd2>
 8002a64:	2000      	movs	r0, #0
 8002a66:	e008      	b.n	8002a7a <_printf_common+0xb2>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	4652      	mov	r2, sl
 8002a6c:	4641      	mov	r1, r8
 8002a6e:	4638      	mov	r0, r7
 8002a70:	47c8      	blx	r9
 8002a72:	3001      	adds	r0, #1
 8002a74:	d103      	bne.n	8002a7e <_printf_common+0xb6>
 8002a76:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a7e:	3501      	adds	r5, #1
 8002a80:	e7c1      	b.n	8002a06 <_printf_common+0x3e>
 8002a82:	2030      	movs	r0, #48	@ 0x30
 8002a84:	18e1      	adds	r1, r4, r3
 8002a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a90:	4422      	add	r2, r4
 8002a92:	3302      	adds	r3, #2
 8002a94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a98:	e7c2      	b.n	8002a20 <_printf_common+0x58>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4622      	mov	r2, r4
 8002a9e:	4641      	mov	r1, r8
 8002aa0:	4638      	mov	r0, r7
 8002aa2:	47c8      	blx	r9
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d0e6      	beq.n	8002a76 <_printf_common+0xae>
 8002aa8:	3601      	adds	r6, #1
 8002aaa:	e7d9      	b.n	8002a60 <_printf_common+0x98>

08002aac <_printf_i>:
 8002aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ab0:	7e0f      	ldrb	r7, [r1, #24]
 8002ab2:	4691      	mov	r9, r2
 8002ab4:	2f78      	cmp	r7, #120	@ 0x78
 8002ab6:	4680      	mov	r8, r0
 8002ab8:	460c      	mov	r4, r1
 8002aba:	469a      	mov	sl, r3
 8002abc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ac2:	d807      	bhi.n	8002ad4 <_printf_i+0x28>
 8002ac4:	2f62      	cmp	r7, #98	@ 0x62
 8002ac6:	d80a      	bhi.n	8002ade <_printf_i+0x32>
 8002ac8:	2f00      	cmp	r7, #0
 8002aca:	f000 80d1 	beq.w	8002c70 <_printf_i+0x1c4>
 8002ace:	2f58      	cmp	r7, #88	@ 0x58
 8002ad0:	f000 80b8 	beq.w	8002c44 <_printf_i+0x198>
 8002ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002adc:	e03a      	b.n	8002b54 <_printf_i+0xa8>
 8002ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002ae2:	2b15      	cmp	r3, #21
 8002ae4:	d8f6      	bhi.n	8002ad4 <_printf_i+0x28>
 8002ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8002aec <_printf_i+0x40>)
 8002ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aec:	08002b45 	.word	0x08002b45
 8002af0:	08002b59 	.word	0x08002b59
 8002af4:	08002ad5 	.word	0x08002ad5
 8002af8:	08002ad5 	.word	0x08002ad5
 8002afc:	08002ad5 	.word	0x08002ad5
 8002b00:	08002ad5 	.word	0x08002ad5
 8002b04:	08002b59 	.word	0x08002b59
 8002b08:	08002ad5 	.word	0x08002ad5
 8002b0c:	08002ad5 	.word	0x08002ad5
 8002b10:	08002ad5 	.word	0x08002ad5
 8002b14:	08002ad5 	.word	0x08002ad5
 8002b18:	08002c57 	.word	0x08002c57
 8002b1c:	08002b83 	.word	0x08002b83
 8002b20:	08002c11 	.word	0x08002c11
 8002b24:	08002ad5 	.word	0x08002ad5
 8002b28:	08002ad5 	.word	0x08002ad5
 8002b2c:	08002c79 	.word	0x08002c79
 8002b30:	08002ad5 	.word	0x08002ad5
 8002b34:	08002b83 	.word	0x08002b83
 8002b38:	08002ad5 	.word	0x08002ad5
 8002b3c:	08002ad5 	.word	0x08002ad5
 8002b40:	08002c19 	.word	0x08002c19
 8002b44:	6833      	ldr	r3, [r6, #0]
 8002b46:	1d1a      	adds	r2, r3, #4
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6032      	str	r2, [r6, #0]
 8002b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b54:	2301      	movs	r3, #1
 8002b56:	e09c      	b.n	8002c92 <_printf_i+0x1e6>
 8002b58:	6833      	ldr	r3, [r6, #0]
 8002b5a:	6820      	ldr	r0, [r4, #0]
 8002b5c:	1d19      	adds	r1, r3, #4
 8002b5e:	6031      	str	r1, [r6, #0]
 8002b60:	0606      	lsls	r6, r0, #24
 8002b62:	d501      	bpl.n	8002b68 <_printf_i+0xbc>
 8002b64:	681d      	ldr	r5, [r3, #0]
 8002b66:	e003      	b.n	8002b70 <_printf_i+0xc4>
 8002b68:	0645      	lsls	r5, r0, #25
 8002b6a:	d5fb      	bpl.n	8002b64 <_printf_i+0xb8>
 8002b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b70:	2d00      	cmp	r5, #0
 8002b72:	da03      	bge.n	8002b7c <_printf_i+0xd0>
 8002b74:	232d      	movs	r3, #45	@ 0x2d
 8002b76:	426d      	negs	r5, r5
 8002b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b7c:	230a      	movs	r3, #10
 8002b7e:	4858      	ldr	r0, [pc, #352]	@ (8002ce0 <_printf_i+0x234>)
 8002b80:	e011      	b.n	8002ba6 <_printf_i+0xfa>
 8002b82:	6821      	ldr	r1, [r4, #0]
 8002b84:	6833      	ldr	r3, [r6, #0]
 8002b86:	0608      	lsls	r0, r1, #24
 8002b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b8c:	d402      	bmi.n	8002b94 <_printf_i+0xe8>
 8002b8e:	0649      	lsls	r1, r1, #25
 8002b90:	bf48      	it	mi
 8002b92:	b2ad      	uxthmi	r5, r5
 8002b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b96:	6033      	str	r3, [r6, #0]
 8002b98:	bf14      	ite	ne
 8002b9a:	230a      	movne	r3, #10
 8002b9c:	2308      	moveq	r3, #8
 8002b9e:	4850      	ldr	r0, [pc, #320]	@ (8002ce0 <_printf_i+0x234>)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002ba6:	6866      	ldr	r6, [r4, #4]
 8002ba8:	2e00      	cmp	r6, #0
 8002baa:	60a6      	str	r6, [r4, #8]
 8002bac:	db05      	blt.n	8002bba <_printf_i+0x10e>
 8002bae:	6821      	ldr	r1, [r4, #0]
 8002bb0:	432e      	orrs	r6, r5
 8002bb2:	f021 0104 	bic.w	r1, r1, #4
 8002bb6:	6021      	str	r1, [r4, #0]
 8002bb8:	d04b      	beq.n	8002c52 <_printf_i+0x1a6>
 8002bba:	4616      	mov	r6, r2
 8002bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8002bc4:	5dc7      	ldrb	r7, [r0, r7]
 8002bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bca:	462f      	mov	r7, r5
 8002bcc:	42bb      	cmp	r3, r7
 8002bce:	460d      	mov	r5, r1
 8002bd0:	d9f4      	bls.n	8002bbc <_printf_i+0x110>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d10b      	bne.n	8002bee <_printf_i+0x142>
 8002bd6:	6823      	ldr	r3, [r4, #0]
 8002bd8:	07df      	lsls	r7, r3, #31
 8002bda:	d508      	bpl.n	8002bee <_printf_i+0x142>
 8002bdc:	6923      	ldr	r3, [r4, #16]
 8002bde:	6861      	ldr	r1, [r4, #4]
 8002be0:	4299      	cmp	r1, r3
 8002be2:	bfde      	ittt	le
 8002be4:	2330      	movle	r3, #48	@ 0x30
 8002be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bee:	1b92      	subs	r2, r2, r6
 8002bf0:	6122      	str	r2, [r4, #16]
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	4640      	mov	r0, r8
 8002bf8:	f8cd a000 	str.w	sl, [sp]
 8002bfc:	aa03      	add	r2, sp, #12
 8002bfe:	f7ff fee3 	bl	80029c8 <_printf_common>
 8002c02:	3001      	adds	r0, #1
 8002c04:	d14a      	bne.n	8002c9c <_printf_i+0x1f0>
 8002c06:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0a:	b004      	add	sp, #16
 8002c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	f043 0320 	orr.w	r3, r3, #32
 8002c16:	6023      	str	r3, [r4, #0]
 8002c18:	2778      	movs	r7, #120	@ 0x78
 8002c1a:	4832      	ldr	r0, [pc, #200]	@ (8002ce4 <_printf_i+0x238>)
 8002c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	6831      	ldr	r1, [r6, #0]
 8002c24:	061f      	lsls	r7, r3, #24
 8002c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c2a:	d402      	bmi.n	8002c32 <_printf_i+0x186>
 8002c2c:	065f      	lsls	r7, r3, #25
 8002c2e:	bf48      	it	mi
 8002c30:	b2ad      	uxthmi	r5, r5
 8002c32:	6031      	str	r1, [r6, #0]
 8002c34:	07d9      	lsls	r1, r3, #31
 8002c36:	bf44      	itt	mi
 8002c38:	f043 0320 	orrmi.w	r3, r3, #32
 8002c3c:	6023      	strmi	r3, [r4, #0]
 8002c3e:	b11d      	cbz	r5, 8002c48 <_printf_i+0x19c>
 8002c40:	2310      	movs	r3, #16
 8002c42:	e7ad      	b.n	8002ba0 <_printf_i+0xf4>
 8002c44:	4826      	ldr	r0, [pc, #152]	@ (8002ce0 <_printf_i+0x234>)
 8002c46:	e7e9      	b.n	8002c1c <_printf_i+0x170>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	f023 0320 	bic.w	r3, r3, #32
 8002c4e:	6023      	str	r3, [r4, #0]
 8002c50:	e7f6      	b.n	8002c40 <_printf_i+0x194>
 8002c52:	4616      	mov	r6, r2
 8002c54:	e7bd      	b.n	8002bd2 <_printf_i+0x126>
 8002c56:	6833      	ldr	r3, [r6, #0]
 8002c58:	6825      	ldr	r5, [r4, #0]
 8002c5a:	1d18      	adds	r0, r3, #4
 8002c5c:	6961      	ldr	r1, [r4, #20]
 8002c5e:	6030      	str	r0, [r6, #0]
 8002c60:	062e      	lsls	r6, r5, #24
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	d501      	bpl.n	8002c6a <_printf_i+0x1be>
 8002c66:	6019      	str	r1, [r3, #0]
 8002c68:	e002      	b.n	8002c70 <_printf_i+0x1c4>
 8002c6a:	0668      	lsls	r0, r5, #25
 8002c6c:	d5fb      	bpl.n	8002c66 <_printf_i+0x1ba>
 8002c6e:	8019      	strh	r1, [r3, #0]
 8002c70:	2300      	movs	r3, #0
 8002c72:	4616      	mov	r6, r2
 8002c74:	6123      	str	r3, [r4, #16]
 8002c76:	e7bc      	b.n	8002bf2 <_printf_i+0x146>
 8002c78:	6833      	ldr	r3, [r6, #0]
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	1d1a      	adds	r2, r3, #4
 8002c7e:	6032      	str	r2, [r6, #0]
 8002c80:	681e      	ldr	r6, [r3, #0]
 8002c82:	6862      	ldr	r2, [r4, #4]
 8002c84:	4630      	mov	r0, r6
 8002c86:	f000 f985 	bl	8002f94 <memchr>
 8002c8a:	b108      	cbz	r0, 8002c90 <_printf_i+0x1e4>
 8002c8c:	1b80      	subs	r0, r0, r6
 8002c8e:	6060      	str	r0, [r4, #4]
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	6123      	str	r3, [r4, #16]
 8002c94:	2300      	movs	r3, #0
 8002c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c9a:	e7aa      	b.n	8002bf2 <_printf_i+0x146>
 8002c9c:	4632      	mov	r2, r6
 8002c9e:	4649      	mov	r1, r9
 8002ca0:	4640      	mov	r0, r8
 8002ca2:	6923      	ldr	r3, [r4, #16]
 8002ca4:	47d0      	blx	sl
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	d0ad      	beq.n	8002c06 <_printf_i+0x15a>
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	079b      	lsls	r3, r3, #30
 8002cae:	d413      	bmi.n	8002cd8 <_printf_i+0x22c>
 8002cb0:	68e0      	ldr	r0, [r4, #12]
 8002cb2:	9b03      	ldr	r3, [sp, #12]
 8002cb4:	4298      	cmp	r0, r3
 8002cb6:	bfb8      	it	lt
 8002cb8:	4618      	movlt	r0, r3
 8002cba:	e7a6      	b.n	8002c0a <_printf_i+0x15e>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	4632      	mov	r2, r6
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	4640      	mov	r0, r8
 8002cc4:	47d0      	blx	sl
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	d09d      	beq.n	8002c06 <_printf_i+0x15a>
 8002cca:	3501      	adds	r5, #1
 8002ccc:	68e3      	ldr	r3, [r4, #12]
 8002cce:	9903      	ldr	r1, [sp, #12]
 8002cd0:	1a5b      	subs	r3, r3, r1
 8002cd2:	42ab      	cmp	r3, r5
 8002cd4:	dcf2      	bgt.n	8002cbc <_printf_i+0x210>
 8002cd6:	e7eb      	b.n	8002cb0 <_printf_i+0x204>
 8002cd8:	2500      	movs	r5, #0
 8002cda:	f104 0619 	add.w	r6, r4, #25
 8002cde:	e7f5      	b.n	8002ccc <_printf_i+0x220>
 8002ce0:	0800310b 	.word	0x0800310b
 8002ce4:	0800311c 	.word	0x0800311c

08002ce8 <__sflush_r>:
 8002ce8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	0716      	lsls	r6, r2, #28
 8002cf0:	4605      	mov	r5, r0
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	d454      	bmi.n	8002da0 <__sflush_r+0xb8>
 8002cf6:	684b      	ldr	r3, [r1, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	dc02      	bgt.n	8002d02 <__sflush_r+0x1a>
 8002cfc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	dd48      	ble.n	8002d94 <__sflush_r+0xac>
 8002d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d04:	2e00      	cmp	r6, #0
 8002d06:	d045      	beq.n	8002d94 <__sflush_r+0xac>
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002d0e:	682f      	ldr	r7, [r5, #0]
 8002d10:	6a21      	ldr	r1, [r4, #32]
 8002d12:	602b      	str	r3, [r5, #0]
 8002d14:	d030      	beq.n	8002d78 <__sflush_r+0x90>
 8002d16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	0759      	lsls	r1, r3, #29
 8002d1c:	d505      	bpl.n	8002d2a <__sflush_r+0x42>
 8002d1e:	6863      	ldr	r3, [r4, #4]
 8002d20:	1ad2      	subs	r2, r2, r3
 8002d22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002d24:	b10b      	cbz	r3, 8002d2a <__sflush_r+0x42>
 8002d26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d28:	1ad2      	subs	r2, r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	4628      	mov	r0, r5
 8002d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002d30:	6a21      	ldr	r1, [r4, #32]
 8002d32:	47b0      	blx	r6
 8002d34:	1c43      	adds	r3, r0, #1
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	d106      	bne.n	8002d48 <__sflush_r+0x60>
 8002d3a:	6829      	ldr	r1, [r5, #0]
 8002d3c:	291d      	cmp	r1, #29
 8002d3e:	d82b      	bhi.n	8002d98 <__sflush_r+0xb0>
 8002d40:	4a28      	ldr	r2, [pc, #160]	@ (8002de4 <__sflush_r+0xfc>)
 8002d42:	40ca      	lsrs	r2, r1
 8002d44:	07d6      	lsls	r6, r2, #31
 8002d46:	d527      	bpl.n	8002d98 <__sflush_r+0xb0>
 8002d48:	2200      	movs	r2, #0
 8002d4a:	6062      	str	r2, [r4, #4]
 8002d4c:	6922      	ldr	r2, [r4, #16]
 8002d4e:	04d9      	lsls	r1, r3, #19
 8002d50:	6022      	str	r2, [r4, #0]
 8002d52:	d504      	bpl.n	8002d5e <__sflush_r+0x76>
 8002d54:	1c42      	adds	r2, r0, #1
 8002d56:	d101      	bne.n	8002d5c <__sflush_r+0x74>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	b903      	cbnz	r3, 8002d5e <__sflush_r+0x76>
 8002d5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8002d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002d60:	602f      	str	r7, [r5, #0]
 8002d62:	b1b9      	cbz	r1, 8002d94 <__sflush_r+0xac>
 8002d64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002d68:	4299      	cmp	r1, r3
 8002d6a:	d002      	beq.n	8002d72 <__sflush_r+0x8a>
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f7ff fbdd 	bl	800252c <_free_r>
 8002d72:	2300      	movs	r3, #0
 8002d74:	6363      	str	r3, [r4, #52]	@ 0x34
 8002d76:	e00d      	b.n	8002d94 <__sflush_r+0xac>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	4628      	mov	r0, r5
 8002d7c:	47b0      	blx	r6
 8002d7e:	4602      	mov	r2, r0
 8002d80:	1c50      	adds	r0, r2, #1
 8002d82:	d1c9      	bne.n	8002d18 <__sflush_r+0x30>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0c6      	beq.n	8002d18 <__sflush_r+0x30>
 8002d8a:	2b1d      	cmp	r3, #29
 8002d8c:	d001      	beq.n	8002d92 <__sflush_r+0xaa>
 8002d8e:	2b16      	cmp	r3, #22
 8002d90:	d11d      	bne.n	8002dce <__sflush_r+0xe6>
 8002d92:	602f      	str	r7, [r5, #0]
 8002d94:	2000      	movs	r0, #0
 8002d96:	e021      	b.n	8002ddc <__sflush_r+0xf4>
 8002d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	e01a      	b.n	8002dd6 <__sflush_r+0xee>
 8002da0:	690f      	ldr	r7, [r1, #16]
 8002da2:	2f00      	cmp	r7, #0
 8002da4:	d0f6      	beq.n	8002d94 <__sflush_r+0xac>
 8002da6:	0793      	lsls	r3, r2, #30
 8002da8:	bf18      	it	ne
 8002daa:	2300      	movne	r3, #0
 8002dac:	680e      	ldr	r6, [r1, #0]
 8002dae:	bf08      	it	eq
 8002db0:	694b      	ldreq	r3, [r1, #20]
 8002db2:	1bf6      	subs	r6, r6, r7
 8002db4:	600f      	str	r7, [r1, #0]
 8002db6:	608b      	str	r3, [r1, #8]
 8002db8:	2e00      	cmp	r6, #0
 8002dba:	ddeb      	ble.n	8002d94 <__sflush_r+0xac>
 8002dbc:	4633      	mov	r3, r6
 8002dbe:	463a      	mov	r2, r7
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	6a21      	ldr	r1, [r4, #32]
 8002dc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002dc8:	47e0      	blx	ip
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	dc07      	bgt.n	8002dde <__sflush_r+0xf6>
 8002dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002dda:	81a3      	strh	r3, [r4, #12]
 8002ddc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dde:	4407      	add	r7, r0
 8002de0:	1a36      	subs	r6, r6, r0
 8002de2:	e7e9      	b.n	8002db8 <__sflush_r+0xd0>
 8002de4:	20400001 	.word	0x20400001

08002de8 <_fflush_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	690b      	ldr	r3, [r1, #16]
 8002dec:	4605      	mov	r5, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	b913      	cbnz	r3, 8002df8 <_fflush_r+0x10>
 8002df2:	2500      	movs	r5, #0
 8002df4:	4628      	mov	r0, r5
 8002df6:	bd38      	pop	{r3, r4, r5, pc}
 8002df8:	b118      	cbz	r0, 8002e02 <_fflush_r+0x1a>
 8002dfa:	6a03      	ldr	r3, [r0, #32]
 8002dfc:	b90b      	cbnz	r3, 8002e02 <_fflush_r+0x1a>
 8002dfe:	f7ff f98b 	bl	8002118 <__sinit>
 8002e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f3      	beq.n	8002df2 <_fflush_r+0xa>
 8002e0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002e0c:	07d0      	lsls	r0, r2, #31
 8002e0e:	d404      	bmi.n	8002e1a <_fflush_r+0x32>
 8002e10:	0599      	lsls	r1, r3, #22
 8002e12:	d402      	bmi.n	8002e1a <_fflush_r+0x32>
 8002e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e16:	f7ff fb86 	bl	8002526 <__retarget_lock_acquire_recursive>
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	f7ff ff63 	bl	8002ce8 <__sflush_r>
 8002e22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e24:	4605      	mov	r5, r0
 8002e26:	07da      	lsls	r2, r3, #31
 8002e28:	d4e4      	bmi.n	8002df4 <_fflush_r+0xc>
 8002e2a:	89a3      	ldrh	r3, [r4, #12]
 8002e2c:	059b      	lsls	r3, r3, #22
 8002e2e:	d4e1      	bmi.n	8002df4 <_fflush_r+0xc>
 8002e30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e32:	f7ff fb79 	bl	8002528 <__retarget_lock_release_recursive>
 8002e36:	e7dd      	b.n	8002df4 <_fflush_r+0xc>

08002e38 <__swhatbuf_r>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	460c      	mov	r4, r1
 8002e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e40:	4615      	mov	r5, r2
 8002e42:	2900      	cmp	r1, #0
 8002e44:	461e      	mov	r6, r3
 8002e46:	b096      	sub	sp, #88	@ 0x58
 8002e48:	da0c      	bge.n	8002e64 <__swhatbuf_r+0x2c>
 8002e4a:	89a3      	ldrh	r3, [r4, #12]
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002e52:	bf14      	ite	ne
 8002e54:	2340      	movne	r3, #64	@ 0x40
 8002e56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	6031      	str	r1, [r6, #0]
 8002e5e:	602b      	str	r3, [r5, #0]
 8002e60:	b016      	add	sp, #88	@ 0x58
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	466a      	mov	r2, sp
 8002e66:	f000 f863 	bl	8002f30 <_fstat_r>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	dbed      	blt.n	8002e4a <__swhatbuf_r+0x12>
 8002e6e:	9901      	ldr	r1, [sp, #4]
 8002e70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002e74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002e78:	4259      	negs	r1, r3
 8002e7a:	4159      	adcs	r1, r3
 8002e7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e80:	e7eb      	b.n	8002e5a <__swhatbuf_r+0x22>

08002e82 <__smakebuf_r>:
 8002e82:	898b      	ldrh	r3, [r1, #12]
 8002e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e86:	079d      	lsls	r5, r3, #30
 8002e88:	4606      	mov	r6, r0
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	d507      	bpl.n	8002e9e <__smakebuf_r+0x1c>
 8002e8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	6123      	str	r3, [r4, #16]
 8002e96:	2301      	movs	r3, #1
 8002e98:	6163      	str	r3, [r4, #20]
 8002e9a:	b003      	add	sp, #12
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9e:	466a      	mov	r2, sp
 8002ea0:	ab01      	add	r3, sp, #4
 8002ea2:	f7ff ffc9 	bl	8002e38 <__swhatbuf_r>
 8002ea6:	9f00      	ldr	r7, [sp, #0]
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	4639      	mov	r1, r7
 8002eac:	4630      	mov	r0, r6
 8002eae:	f7ff fba7 	bl	8002600 <_malloc_r>
 8002eb2:	b948      	cbnz	r0, 8002ec8 <__smakebuf_r+0x46>
 8002eb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eb8:	059a      	lsls	r2, r3, #22
 8002eba:	d4ee      	bmi.n	8002e9a <__smakebuf_r+0x18>
 8002ebc:	f023 0303 	bic.w	r3, r3, #3
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	81a3      	strh	r3, [r4, #12]
 8002ec6:	e7e2      	b.n	8002e8e <__smakebuf_r+0xc>
 8002ec8:	89a3      	ldrh	r3, [r4, #12]
 8002eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ed2:	81a3      	strh	r3, [r4, #12]
 8002ed4:	9b01      	ldr	r3, [sp, #4]
 8002ed6:	6020      	str	r0, [r4, #0]
 8002ed8:	b15b      	cbz	r3, 8002ef2 <__smakebuf_r+0x70>
 8002eda:	4630      	mov	r0, r6
 8002edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ee0:	f000 f838 	bl	8002f54 <_isatty_r>
 8002ee4:	b128      	cbz	r0, 8002ef2 <__smakebuf_r+0x70>
 8002ee6:	89a3      	ldrh	r3, [r4, #12]
 8002ee8:	f023 0303 	bic.w	r3, r3, #3
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	81a3      	strh	r3, [r4, #12]
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	431d      	orrs	r5, r3
 8002ef6:	81a5      	strh	r5, [r4, #12]
 8002ef8:	e7cf      	b.n	8002e9a <__smakebuf_r+0x18>

08002efa <memmove>:
 8002efa:	4288      	cmp	r0, r1
 8002efc:	b510      	push	{r4, lr}
 8002efe:	eb01 0402 	add.w	r4, r1, r2
 8002f02:	d902      	bls.n	8002f0a <memmove+0x10>
 8002f04:	4284      	cmp	r4, r0
 8002f06:	4623      	mov	r3, r4
 8002f08:	d807      	bhi.n	8002f1a <memmove+0x20>
 8002f0a:	1e43      	subs	r3, r0, #1
 8002f0c:	42a1      	cmp	r1, r4
 8002f0e:	d008      	beq.n	8002f22 <memmove+0x28>
 8002f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f18:	e7f8      	b.n	8002f0c <memmove+0x12>
 8002f1a:	4601      	mov	r1, r0
 8002f1c:	4402      	add	r2, r0
 8002f1e:	428a      	cmp	r2, r1
 8002f20:	d100      	bne.n	8002f24 <memmove+0x2a>
 8002f22:	bd10      	pop	{r4, pc}
 8002f24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f2c:	e7f7      	b.n	8002f1e <memmove+0x24>
	...

08002f30 <_fstat_r>:
 8002f30:	b538      	push	{r3, r4, r5, lr}
 8002f32:	2300      	movs	r3, #0
 8002f34:	4d06      	ldr	r5, [pc, #24]	@ (8002f50 <_fstat_r+0x20>)
 8002f36:	4604      	mov	r4, r0
 8002f38:	4608      	mov	r0, r1
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	602b      	str	r3, [r5, #0]
 8002f3e:	f7fd fdb9 	bl	8000ab4 <_fstat>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	d102      	bne.n	8002f4c <_fstat_r+0x1c>
 8002f46:	682b      	ldr	r3, [r5, #0]
 8002f48:	b103      	cbz	r3, 8002f4c <_fstat_r+0x1c>
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	bd38      	pop	{r3, r4, r5, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000314 	.word	0x20000314

08002f54 <_isatty_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	2300      	movs	r3, #0
 8002f58:	4d05      	ldr	r5, [pc, #20]	@ (8002f70 <_isatty_r+0x1c>)
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	602b      	str	r3, [r5, #0]
 8002f60:	f7fd fdb7 	bl	8000ad2 <_isatty>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_isatty_r+0x1a>
 8002f68:	682b      	ldr	r3, [r5, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_isatty_r+0x1a>
 8002f6c:	6023      	str	r3, [r4, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	20000314 	.word	0x20000314

08002f74 <_sbrk_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	2300      	movs	r3, #0
 8002f78:	4d05      	ldr	r5, [pc, #20]	@ (8002f90 <_sbrk_r+0x1c>)
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	f7fd fdbe 	bl	8000b00 <_sbrk>
 8002f84:	1c43      	adds	r3, r0, #1
 8002f86:	d102      	bne.n	8002f8e <_sbrk_r+0x1a>
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	b103      	cbz	r3, 8002f8e <_sbrk_r+0x1a>
 8002f8c:	6023      	str	r3, [r4, #0]
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
 8002f90:	20000314 	.word	0x20000314

08002f94 <memchr>:
 8002f94:	4603      	mov	r3, r0
 8002f96:	b510      	push	{r4, lr}
 8002f98:	b2c9      	uxtb	r1, r1
 8002f9a:	4402      	add	r2, r0
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	d101      	bne.n	8002fa6 <memchr+0x12>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	e003      	b.n	8002fae <memchr+0x1a>
 8002fa6:	7804      	ldrb	r4, [r0, #0]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	428c      	cmp	r4, r1
 8002fac:	d1f6      	bne.n	8002f9c <memchr+0x8>
 8002fae:	bd10      	pop	{r4, pc}

08002fb0 <memcpy>:
 8002fb0:	440a      	add	r2, r1
 8002fb2:	4291      	cmp	r1, r2
 8002fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002fb8:	d100      	bne.n	8002fbc <memcpy+0xc>
 8002fba:	4770      	bx	lr
 8002fbc:	b510      	push	{r4, lr}
 8002fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fc2:	4291      	cmp	r1, r2
 8002fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fc8:	d1f9      	bne.n	8002fbe <memcpy+0xe>
 8002fca:	bd10      	pop	{r4, pc}

08002fcc <_realloc_r>:
 8002fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fd0:	4607      	mov	r7, r0
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	460d      	mov	r5, r1
 8002fd6:	b921      	cbnz	r1, 8002fe2 <_realloc_r+0x16>
 8002fd8:	4611      	mov	r1, r2
 8002fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002fde:	f7ff bb0f 	b.w	8002600 <_malloc_r>
 8002fe2:	b92a      	cbnz	r2, 8002ff0 <_realloc_r+0x24>
 8002fe4:	f7ff faa2 	bl	800252c <_free_r>
 8002fe8:	4625      	mov	r5, r4
 8002fea:	4628      	mov	r0, r5
 8002fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002ff0:	f000 f81a 	bl	8003028 <_malloc_usable_size_r>
 8002ff4:	4284      	cmp	r4, r0
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	d802      	bhi.n	8003000 <_realloc_r+0x34>
 8002ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002ffe:	d8f4      	bhi.n	8002fea <_realloc_r+0x1e>
 8003000:	4621      	mov	r1, r4
 8003002:	4638      	mov	r0, r7
 8003004:	f7ff fafc 	bl	8002600 <_malloc_r>
 8003008:	4680      	mov	r8, r0
 800300a:	b908      	cbnz	r0, 8003010 <_realloc_r+0x44>
 800300c:	4645      	mov	r5, r8
 800300e:	e7ec      	b.n	8002fea <_realloc_r+0x1e>
 8003010:	42b4      	cmp	r4, r6
 8003012:	4622      	mov	r2, r4
 8003014:	4629      	mov	r1, r5
 8003016:	bf28      	it	cs
 8003018:	4632      	movcs	r2, r6
 800301a:	f7ff ffc9 	bl	8002fb0 <memcpy>
 800301e:	4629      	mov	r1, r5
 8003020:	4638      	mov	r0, r7
 8003022:	f7ff fa83 	bl	800252c <_free_r>
 8003026:	e7f1      	b.n	800300c <_realloc_r+0x40>

08003028 <_malloc_usable_size_r>:
 8003028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800302c:	1f18      	subs	r0, r3, #4
 800302e:	2b00      	cmp	r3, #0
 8003030:	bfbc      	itt	lt
 8003032:	580b      	ldrlt	r3, [r1, r0]
 8003034:	18c0      	addlt	r0, r0, r3
 8003036:	4770      	bx	lr

08003038 <_init>:
 8003038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800303a:	bf00      	nop
 800303c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303e:	bc08      	pop	{r3}
 8003040:	469e      	mov	lr, r3
 8003042:	4770      	bx	lr

08003044 <_fini>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr
