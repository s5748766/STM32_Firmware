
LED_CON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003af0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08003bfc  08003bfc  00004bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d2c  08003d2c  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003d2c  08003d2c  00004d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d34  08003d34  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d34  08003d34  00004d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d38  08003d38  00004d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003d3c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000006c  08003da8  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003da8  00005384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b768  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b06  00000000  00000000  000107fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00012308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009cc  00000000  00000000  00012f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a7  00000000  00000000  00013964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d08f  00000000  00000000  0002be0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c37f  00000000  00000000  00038e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db4  00000000  00000000  000c525c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c9010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003be4 	.word	0x08003be4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003be4 	.word	0x08003be4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f002 f95c 	bl	8002430 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f002 f955 	bl	8002430 <HAL_UART_Transmit>

		return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08003bfc 	.word	0x08003bfc
 8000194:	200000d0 	.word	0x200000d0

08000198 <smartcar_F>:

void smartcar_F(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a2:	4816      	ldr	r0, [pc, #88]	@ (80001fc <smartcar_F+0x64>)
 80001a4:	f001 f9e5 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ae:	4814      	ldr	r0, [pc, #80]	@ (8000200 <smartcar_F+0x68>)
 80001b0:	f001 f9df 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <smartcar_F+0x68>)
 80001ba:	f001 f9da 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001c4:	480e      	ldr	r0, [pc, #56]	@ (8000200 <smartcar_F+0x68>)
 80001c6:	f001 f9d4 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2108      	movs	r1, #8
 80001ce:	480c      	ldr	r0, [pc, #48]	@ (8000200 <smartcar_F+0x68>)
 80001d0:	f001 f9cf 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001da:	4808      	ldr	r0, [pc, #32]	@ (80001fc <smartcar_F+0x64>)
 80001dc:	f001 f9c9 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2110      	movs	r1, #16
 80001e4:	4806      	ldr	r0, [pc, #24]	@ (8000200 <smartcar_F+0x68>)
 80001e6:	f001 f9c4 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <smartcar_F+0x68>)
 80001f2:	f001 f9be 	bl	8001572 <HAL_GPIO_WritePin>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <smartcar_B>:

void smartcar_B(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	4816      	ldr	r0, [pc, #88]	@ (8000268 <smartcar_B+0x64>)
 800020e:	f001 f9b0 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000218:	4814      	ldr	r0, [pc, #80]	@ (800026c <smartcar_B+0x68>)
 800021a:	f001 f9aa 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	2110      	movs	r1, #16
 8000222:	4811      	ldr	r0, [pc, #68]	@ (8000268 <smartcar_B+0x64>)
 8000224:	f001 f9a5 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800022e:	480e      	ldr	r0, [pc, #56]	@ (8000268 <smartcar_B+0x64>)
 8000230:	f001 f99f 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800023a:	480c      	ldr	r0, [pc, #48]	@ (800026c <smartcar_B+0x68>)
 800023c:	f001 f999 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000246:	4808      	ldr	r0, [pc, #32]	@ (8000268 <smartcar_B+0x64>)
 8000248:	f001 f993 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	2120      	movs	r1, #32
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <smartcar_B+0x64>)
 8000252:	f001 f98e 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <smartcar_B+0x64>)
 800025e:	f001 f988 	bl	8001572 <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <smartcar_S>:

void smartcar_S(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027a:	4816      	ldr	r0, [pc, #88]	@ (80002d4 <smartcar_S+0x64>)
 800027c:	f001 f979 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000286:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <smartcar_S+0x68>)
 8000288:	f001 f973 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	4811      	ldr	r0, [pc, #68]	@ (80002d8 <smartcar_S+0x68>)
 8000292:	f001 f96e 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800029c:	480e      	ldr	r0, [pc, #56]	@ (80002d8 <smartcar_S+0x68>)
 800029e:	f001 f968 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <smartcar_S+0x68>)
 80002a8:	f001 f963 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b2:	4808      	ldr	r0, [pc, #32]	@ (80002d4 <smartcar_S+0x64>)
 80002b4:	f001 f95d 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	4806      	ldr	r0, [pc, #24]	@ (80002d8 <smartcar_S+0x68>)
 80002be:	f001 f958 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <smartcar_S+0x68>)
 80002ca:	f001 f952 	bl	8001572 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40010c00 	.word	0x40010c00

080002dc <smartcar_FL>:

void smartcar_FL(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e6:	4816      	ldr	r0, [pc, #88]	@ (8000340 <smartcar_FL+0x64>)
 80002e8:	f001 f943 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f2:	4814      	ldr	r0, [pc, #80]	@ (8000344 <smartcar_FL+0x68>)
 80002f4:	f001 f93d 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2120      	movs	r1, #32
 80002fc:	4811      	ldr	r0, [pc, #68]	@ (8000344 <smartcar_FL+0x68>)
 80002fe:	f001 f938 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <smartcar_FL+0x68>)
 800030a:	f001 f932 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	2108      	movs	r1, #8
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <smartcar_FL+0x68>)
 8000314:	f001 f92d 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <smartcar_FL+0x64>)
 8000320:	f001 f927 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2110      	movs	r1, #16
 8000328:	4806      	ldr	r0, [pc, #24]	@ (8000344 <smartcar_FL+0x68>)
 800032a:	f001 f922 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000334:	4803      	ldr	r0, [pc, #12]	@ (8000344 <smartcar_FL+0x68>)
 8000336:	f001 f91c 	bl	8001572 <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800
 8000344:	40010c00 	.word	0x40010c00

08000348 <smartcar_FR>:


void smartcar_FR(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000352:	4816      	ldr	r0, [pc, #88]	@ (80003ac <smartcar_FR+0x64>)
 8000354:	f001 f90d 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800035e:	4814      	ldr	r0, [pc, #80]	@ (80003b0 <smartcar_FR+0x68>)
 8000360:	f001 f907 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 8000364:	2201      	movs	r2, #1
 8000366:	2120      	movs	r1, #32
 8000368:	4811      	ldr	r0, [pc, #68]	@ (80003b0 <smartcar_FR+0x68>)
 800036a:	f001 f902 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000374:	480e      	ldr	r0, [pc, #56]	@ (80003b0 <smartcar_FR+0x68>)
 8000376:	f001 f8fc 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2108      	movs	r1, #8
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <smartcar_FR+0x68>)
 8000380:	f001 f8f7 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800038a:	4808      	ldr	r0, [pc, #32]	@ (80003ac <smartcar_FR+0x64>)
 800038c:	f001 f8f1 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4806      	ldr	r0, [pc, #24]	@ (80003b0 <smartcar_FR+0x68>)
 8000396:	f001 f8ec 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a0:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <smartcar_FR+0x68>)
 80003a2:	f001 f8e6 	bl	8001572 <HAL_GPIO_WritePin>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <smartcar_BL>:

void smartcar_BL(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80003b8:	2201      	movs	r2, #1
 80003ba:	2108      	movs	r1, #8
 80003bc:	4816      	ldr	r0, [pc, #88]	@ (8000418 <smartcar_BL+0x64>)
 80003be:	f001 f8d8 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80003c2:	2201      	movs	r2, #1
 80003c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c8:	4814      	ldr	r0, [pc, #80]	@ (800041c <smartcar_BL+0x68>)
 80003ca:	f001 f8d2 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2110      	movs	r1, #16
 80003d2:	4811      	ldr	r0, [pc, #68]	@ (8000418 <smartcar_BL+0x64>)
 80003d4:	f001 f8cd 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003de:	480e      	ldr	r0, [pc, #56]	@ (8000418 <smartcar_BL+0x64>)
 80003e0:	f001 f8c7 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003ea:	480c      	ldr	r0, [pc, #48]	@ (800041c <smartcar_BL+0x68>)
 80003ec:	f001 f8c1 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003f6:	4808      	ldr	r0, [pc, #32]	@ (8000418 <smartcar_BL+0x64>)
 80003f8:	f001 f8bb 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2120      	movs	r1, #32
 8000400:	4805      	ldr	r0, [pc, #20]	@ (8000418 <smartcar_BL+0x64>)
 8000402:	f001 f8b6 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <smartcar_BL+0x64>)
 800040e:	f001 f8b0 	bl	8001572 <HAL_GPIO_WritePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800

08000420 <smartcar_BR>:


void smartcar_BR(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	4816      	ldr	r0, [pc, #88]	@ (8000484 <smartcar_BR+0x64>)
 800042a:	f001 f8a2 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000434:	4814      	ldr	r0, [pc, #80]	@ (8000488 <smartcar_BR+0x68>)
 8000436:	f001 f89c 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 800043a:	2201      	movs	r2, #1
 800043c:	2110      	movs	r1, #16
 800043e:	4811      	ldr	r0, [pc, #68]	@ (8000484 <smartcar_BR+0x64>)
 8000440:	f001 f897 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800044a:	480e      	ldr	r0, [pc, #56]	@ (8000484 <smartcar_BR+0x64>)
 800044c:	f001 f891 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000456:	480c      	ldr	r0, [pc, #48]	@ (8000488 <smartcar_BR+0x68>)
 8000458:	f001 f88b 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000462:	4808      	ldr	r0, [pc, #32]	@ (8000484 <smartcar_BR+0x64>)
 8000464:	f001 f885 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2120      	movs	r1, #32
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <smartcar_BR+0x64>)
 800046e:	f001 f880 	bl	8001572 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000478:	4802      	ldr	r0, [pc, #8]	@ (8000484 <smartcar_BR+0x64>)
 800047a:	f001 f87a 	bl	8001572 <HAL_GPIO_WritePin>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010c00 	.word	0x40010c00
 8000488:	40010800 	.word	0x40010800

0800048c <timer_start>:

void timer_start(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
   HAL_TIM_Base_Start(&htim1);
 8000490:	4809      	ldr	r0, [pc, #36]	@ (80004b8 <timer_start+0x2c>)
 8000492:	f001 fd09 	bl	8001ea8 <HAL_TIM_Base_Start>
   sprintf((char*)transmit, "=== HC-SR04 TEST===\r\n");
 8000496:	4909      	ldr	r1, [pc, #36]	@ (80004bc <timer_start+0x30>)
 8000498:	4809      	ldr	r0, [pc, #36]	@ (80004c0 <timer_start+0x34>)
 800049a:	f002 fb67 	bl	8002b6c <siprintf>
   HAL_UART_Transmit(&huart2, transmit, strlen((char *)transmit), 1000);
 800049e:	4808      	ldr	r0, [pc, #32]	@ (80004c0 <timer_start+0x34>)
 80004a0:	f7ff fe54 	bl	800014c <strlen>
 80004a4:	4603      	mov	r3, r0
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ac:	4904      	ldr	r1, [pc, #16]	@ (80004c0 <timer_start+0x34>)
 80004ae:	4805      	ldr	r0, [pc, #20]	@ (80004c4 <timer_start+0x38>)
 80004b0:	f001 ffbe 	bl	8002430 <HAL_UART_Transmit>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000088 	.word	0x20000088
 80004bc:	08003c00 	.word	0x08003c00
 80004c0:	20000118 	.word	0x20000118
 80004c4:	200000d0 	.word	0x200000d0

080004c8 <delay_us>:

void delay_us(uint16_t us)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
   __HAL_TIM_SET_COUNTER(&htim1, 0); // initislize counter to start from 0
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <delay_us+0x2c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
   while((__HAL_TIM_GET_COUNTER(&htim1))<us); // wait count until us
 80004da:	bf00      	nop
 80004dc:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <delay_us+0x2c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004e2:	88fb      	ldrh	r3, [r7, #6]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d3f9      	bcc.n	80004dc <delay_us+0x14>
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	370c      	adds	r7, #12
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	20000088 	.word	0x20000088

080004f8 <L_trig>:

void L_trig(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(L_TRIG_GPIO_Port, L_TRIG_Pin, HIGH);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000528 <L_trig+0x30>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	461a      	mov	r2, r3
 8000504:	2180      	movs	r1, #128	@ 0x80
 8000506:	4809      	ldr	r0, [pc, #36]	@ (800052c <L_trig+0x34>)
 8000508:	f001 f833 	bl	8001572 <HAL_GPIO_WritePin>
   delay_us(10);
 800050c:	200a      	movs	r0, #10
 800050e:	f7ff ffdb 	bl	80004c8 <delay_us>
   HAL_GPIO_WritePin(L_TRIG_GPIO_Port, L_TRIG_Pin, LOW);
 8000512:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <L_trig+0x38>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	4803      	ldr	r0, [pc, #12]	@ (800052c <L_trig+0x34>)
 800051e:	f001 f828 	bl	8001572 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	20000000 	.word	0x20000000
 800052c:	40011000 	.word	0x40011000
 8000530:	2000022c 	.word	0x2000022c

08000534 <L_echo>:

long unsigned int L_echo(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
    long unsigned int echo = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	607b      	str	r3, [r7, #4]

    while(HAL_GPIO_ReadPin(L_ECHO_GPIO_Port, L_ECHO_Pin) == LOW){}
 800053e:	bf00      	nop
 8000540:	2101      	movs	r1, #1
 8000542:	4815      	ldr	r0, [pc, #84]	@ (8000598 <L_echo+0x64>)
 8000544:	f000 fffe 	bl	8001544 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <L_echo+0x68>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	429a      	cmp	r2, r3
 8000552:	d0f5      	beq.n	8000540 <L_echo+0xc>
         __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <L_echo+0x6c>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	2200      	movs	r2, #0
 800055a:	625a      	str	r2, [r3, #36]	@ 0x24
         while(HAL_GPIO_ReadPin(L_ECHO_GPIO_Port, L_ECHO_Pin) == HIGH);
 800055c:	bf00      	nop
 800055e:	2101      	movs	r1, #1
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <L_echo+0x64>)
 8000562:	f000 ffef 	bl	8001544 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <L_echo+0x70>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	429a      	cmp	r2, r3
 8000570:	d0f5      	beq.n	800055e <L_echo+0x2a>
         echo = __HAL_TIM_GET_COUNTER(&htim1);
 8000572:	4b0b      	ldr	r3, [pc, #44]	@ (80005a0 <L_echo+0x6c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000578:	607b      	str	r3, [r7, #4]
    if( echo >= 240 && echo <= 23000 ) return echo;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2bef      	cmp	r3, #239	@ 0xef
 800057e:	d906      	bls.n	800058e <L_echo+0x5a>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 8000586:	4293      	cmp	r3, r2
 8000588:	d801      	bhi.n	800058e <L_echo+0x5a>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	e000      	b.n	8000590 <L_echo+0x5c>
    else return 0;
 800058e:	2300      	movs	r3, #0
}
 8000590:	4618      	mov	r0, r3
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40010c00 	.word	0x40010c00
 800059c:	2000022c 	.word	0x2000022c
 80005a0:	20000088 	.word	0x20000088
 80005a4:	20000000 	.word	0x20000000

080005a8 <R_trig>:

void R_trig(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(R_TRIG_GPIO_Port, R_TRIG_Pin, HIGH);
 80005ac:	4b0b      	ldr	r3, [pc, #44]	@ (80005dc <R_trig+0x34>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b8:	4809      	ldr	r0, [pc, #36]	@ (80005e0 <R_trig+0x38>)
 80005ba:	f000 ffda 	bl	8001572 <HAL_GPIO_WritePin>
   delay_us(10);
 80005be:	200a      	movs	r0, #10
 80005c0:	f7ff ff82 	bl	80004c8 <delay_us>
   HAL_GPIO_WritePin(R_TRIG_GPIO_Port, R_TRIG_Pin, LOW);
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <R_trig+0x3c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	461a      	mov	r2, r3
 80005cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d0:	4803      	ldr	r0, [pc, #12]	@ (80005e0 <R_trig+0x38>)
 80005d2:	f000 ffce 	bl	8001572 <HAL_GPIO_WritePin>
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000000 	.word	0x20000000
 80005e0:	40010800 	.word	0x40010800
 80005e4:	2000022c 	.word	0x2000022c

080005e8 <R_echo>:

long unsigned int R_echo(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
    long unsigned int echo = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]

    while(HAL_GPIO_ReadPin(R_ECHO_GPIO_Port, R_ECHO_Pin) == LOW){}
 80005f2:	bf00      	nop
 80005f4:	2110      	movs	r1, #16
 80005f6:	4815      	ldr	r0, [pc, #84]	@ (800064c <R_echo+0x64>)
 80005f8:	f000 ffa4 	bl	8001544 <HAL_GPIO_ReadPin>
 80005fc:	4603      	mov	r3, r0
 80005fe:	461a      	mov	r2, r3
 8000600:	4b13      	ldr	r3, [pc, #76]	@ (8000650 <R_echo+0x68>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d0f5      	beq.n	80005f4 <R_echo+0xc>
         __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <R_echo+0x6c>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	@ 0x24
         while(HAL_GPIO_ReadPin(R_ECHO_GPIO_Port, R_ECHO_Pin) == HIGH);
 8000610:	bf00      	nop
 8000612:	2110      	movs	r1, #16
 8000614:	480d      	ldr	r0, [pc, #52]	@ (800064c <R_echo+0x64>)
 8000616:	f000 ff95 	bl	8001544 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <R_echo+0x70>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d0f5      	beq.n	8000612 <R_echo+0x2a>
         echo = __HAL_TIM_GET_COUNTER(&htim1);
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <R_echo+0x6c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800062c:	607b      	str	r3, [r7, #4]
    if( echo >= 240 && echo <= 23000 ) return echo;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2bef      	cmp	r3, #239	@ 0xef
 8000632:	d906      	bls.n	8000642 <R_echo+0x5a>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 800063a:	4293      	cmp	r3, r2
 800063c:	d801      	bhi.n	8000642 <R_echo+0x5a>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	e000      	b.n	8000644 <R_echo+0x5c>
    else return 0;
 8000642:	2300      	movs	r3, #0
}
 8000644:	4618      	mov	r0, r3
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40010800 	.word	0x40010800
 8000650:	2000022c 	.word	0x2000022c
 8000654:	20000088 	.word	0x20000088
 8000658:	20000000 	.word	0x20000000

0800065c <L_ultrasonic>:

void L_ultrasonic(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
	L_trig();
 8000660:	f7ff ff4a 	bl	80004f8 <L_trig>
	L_echo_time = L_echo();
 8000664:	f7ff ff66 	bl	8000534 <L_echo>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <L_ultrasonic+0x50>)
 800066e:	601a      	str	r2, [r3, #0]
	if(L_echo_time != 0)
 8000670:	4b0e      	ldr	r3, [pc, #56]	@ (80006ac <L_ultrasonic+0x50>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d013      	beq.n	80006a0 <L_ultrasonic+0x44>
	{
		L_dist = (int)(17 * L_echo_time / 100);
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <L_ultrasonic+0x50>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4613      	mov	r3, r2
 800067e:	011b      	lsls	r3, r3, #4
 8000680:	4413      	add	r3, r2
 8000682:	4a0b      	ldr	r2, [pc, #44]	@ (80006b0 <L_ultrasonic+0x54>)
 8000684:	fb82 1203 	smull	r1, r2, r2, r3
 8000688:	1152      	asrs	r2, r2, #5
 800068a:	17db      	asrs	r3, r3, #31
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	4a09      	ldr	r2, [pc, #36]	@ (80006b4 <L_ultrasonic+0x58>)
 8000690:	6013      	str	r3, [r2, #0]
		printf("L_Distance = %d(mm)\n\r\n", L_dist);
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <L_ultrasonic+0x58>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4619      	mov	r1, r3
 8000698:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <L_ultrasonic+0x5c>)
 800069a:	f002 f9f7 	bl	8002a8c <iprintf>
	}
	else
		printf("Out of Range!\n\r\n");

}
 800069e:	e002      	b.n	80006a6 <L_ultrasonic+0x4a>
		printf("Out of Range!\n\r\n");
 80006a0:	4806      	ldr	r0, [pc, #24]	@ (80006bc <L_ultrasonic+0x60>)
 80006a2:	f002 fa5b 	bl	8002b5c <puts>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	2000021c 	.word	0x2000021c
 80006b0:	51eb851f 	.word	0x51eb851f
 80006b4:	20000224 	.word	0x20000224
 80006b8:	08003c18 	.word	0x08003c18
 80006bc:	08003c30 	.word	0x08003c30

080006c0 <R_ultrasonic>:

void R_ultrasonic(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	R_trig();
 80006c4:	f7ff ff70 	bl	80005a8 <R_trig>
	R_echo_time = R_echo();
 80006c8:	f7ff ff8e 	bl	80005e8 <R_echo>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461a      	mov	r2, r3
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <R_ultrasonic+0x50>)
 80006d2:	601a      	str	r2, [r3, #0]
	if(R_echo_time != 0)
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <R_ultrasonic+0x50>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d013      	beq.n	8000704 <R_ultrasonic+0x44>
	{
		R_dist = (int)(17 * R_echo_time / 100);
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <R_ultrasonic+0x50>)
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	4613      	mov	r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	4413      	add	r3, r2
 80006e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <R_ultrasonic+0x54>)
 80006e8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ec:	1152      	asrs	r2, r2, #5
 80006ee:	17db      	asrs	r3, r3, #31
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	4a09      	ldr	r2, [pc, #36]	@ (8000718 <R_ultrasonic+0x58>)
 80006f4:	6013      	str	r3, [r2, #0]
		printf("R_Distance = %d(mm)\n\r\n", R_dist);
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <R_ultrasonic+0x58>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4619      	mov	r1, r3
 80006fc:	4807      	ldr	r0, [pc, #28]	@ (800071c <R_ultrasonic+0x5c>)
 80006fe:	f002 f9c5 	bl	8002a8c <iprintf>
	}
	else
		printf("Out of Range!\n\r\n");

}
 8000702:	e002      	b.n	800070a <R_ultrasonic+0x4a>
		printf("Out of Range!\n\r\n");
 8000704:	4806      	ldr	r0, [pc, #24]	@ (8000720 <R_ultrasonic+0x60>)
 8000706:	f002 fa29 	bl	8002b5c <puts>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000220 	.word	0x20000220
 8000714:	51eb851f 	.word	0x51eb851f
 8000718:	20000228 	.word	0x20000228
 800071c:	08003c40 	.word	0x08003c40
 8000720:	08003c30 	.word	0x08003c30

08000724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000728:	f000 fbf4 	bl	8000f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800072c:	f000 f8f0 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000730:	f000 f9aa 	bl	8000a88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000734:	f000 f97e 	bl	8000a34 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000738:	f000 f92c 	bl	8000994 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  timer_start();
 800073c:	f7ff fea6 	bl	800048c <timer_start>
  printf("=== RC CAR Test ===\r\n");
 8000740:	4866      	ldr	r0, [pc, #408]	@ (80008dc <main+0x1b8>)
 8000742:	f002 fa0b 	bl	8002b5c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("=== Enter your word ===\r\n\r\n");
 8000746:	4866      	ldr	r0, [pc, #408]	@ (80008e0 <main+0x1bc>)
 8000748:	f002 fa08 	bl	8002b5c <puts>
	  HAL_UART_Receive(&huart2, &receive, 1, HAL_MAX_DELAY);
 800074c:	f04f 33ff 	mov.w	r3, #4294967295
 8000750:	2201      	movs	r2, #1
 8000752:	4964      	ldr	r1, [pc, #400]	@ (80008e4 <main+0x1c0>)
 8000754:	4864      	ldr	r0, [pc, #400]	@ (80008e8 <main+0x1c4>)
 8000756:	f001 fef6 	bl	8002546 <HAL_UART_Receive>
	  L_ultrasonic();
 800075a:	f7ff ff7f 	bl	800065c <L_ultrasonic>
	  R_ultrasonic();
 800075e:	f7ff ffaf 	bl	80006c0 <R_ultrasonic>

	  if(receive == 'W')
 8000762:	4b60      	ldr	r3, [pc, #384]	@ (80008e4 <main+0x1c0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b57      	cmp	r3, #87	@ 0x57
 8000768:	d11a      	bne.n	80007a0 <main+0x7c>
	  {
		  printf("\r\n");
 800076a:	4860      	ldr	r0, [pc, #384]	@ (80008ec <main+0x1c8>)
 800076c:	f002 f9f6 	bl	8002b5c <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	485e      	ldr	r0, [pc, #376]	@ (80008f0 <main+0x1cc>)
 8000776:	f000 fefc 	bl	8001572 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "GO\n\r\n");
 800077a:	495e      	ldr	r1, [pc, #376]	@ (80008f4 <main+0x1d0>)
 800077c:	485e      	ldr	r0, [pc, #376]	@ (80008f8 <main+0x1d4>)
 800077e:	f002 f9f5 	bl	8002b6c <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000782:	485d      	ldr	r0, [pc, #372]	@ (80008f8 <main+0x1d4>)
 8000784:	f7ff fce2 	bl	800014c <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	2364      	movs	r3, #100	@ 0x64
 800078e:	495a      	ldr	r1, [pc, #360]	@ (80008f8 <main+0x1d4>)
 8000790:	4855      	ldr	r0, [pc, #340]	@ (80008e8 <main+0x1c4>)
 8000792:	f001 fe4d 	bl	8002430 <HAL_UART_Transmit>
		  smartcar_F();
 8000796:	f7ff fcff 	bl	8000198 <smartcar_F>
		  HAL_Delay(10);
 800079a:	200a      	movs	r0, #10
 800079c:	f000 fc1c 	bl	8000fd8 <HAL_Delay>

	  }

	  if(receive == 'S')
 80007a0:	4b50      	ldr	r3, [pc, #320]	@ (80008e4 <main+0x1c0>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b53      	cmp	r3, #83	@ 0x53
 80007a6:	d11a      	bne.n	80007de <main+0xba>
	  {
		  printf("\r\n");
 80007a8:	4850      	ldr	r0, [pc, #320]	@ (80008ec <main+0x1c8>)
 80007aa:	f002 f9d7 	bl	8002b5c <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2120      	movs	r1, #32
 80007b2:	484f      	ldr	r0, [pc, #316]	@ (80008f0 <main+0x1cc>)
 80007b4:	f000 fedd 	bl	8001572 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "BACK\n\r\n");
 80007b8:	4950      	ldr	r1, [pc, #320]	@ (80008fc <main+0x1d8>)
 80007ba:	484f      	ldr	r0, [pc, #316]	@ (80008f8 <main+0x1d4>)
 80007bc:	f002 f9d6 	bl	8002b6c <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80007c0:	484d      	ldr	r0, [pc, #308]	@ (80008f8 <main+0x1d4>)
 80007c2:	f7ff fcc3 	bl	800014c <strlen>
 80007c6:	4603      	mov	r3, r0
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	2364      	movs	r3, #100	@ 0x64
 80007cc:	494a      	ldr	r1, [pc, #296]	@ (80008f8 <main+0x1d4>)
 80007ce:	4846      	ldr	r0, [pc, #280]	@ (80008e8 <main+0x1c4>)
 80007d0:	f001 fe2e 	bl	8002430 <HAL_UART_Transmit>
		  smartcar_B();
 80007d4:	f7ff fd16 	bl	8000204 <smartcar_B>
		  HAL_Delay(10);
 80007d8:	200a      	movs	r0, #10
 80007da:	f000 fbfd 	bl	8000fd8 <HAL_Delay>
	  }

	  if(receive == 'A')
 80007de:	4b41      	ldr	r3, [pc, #260]	@ (80008e4 <main+0x1c0>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b41      	cmp	r3, #65	@ 0x41
 80007e4:	d11a      	bne.n	800081c <main+0xf8>
	  {
		  printf("\r\n");
 80007e6:	4841      	ldr	r0, [pc, #260]	@ (80008ec <main+0x1c8>)
 80007e8:	f002 f9b8 	bl	8002b5c <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2120      	movs	r1, #32
 80007f0:	483f      	ldr	r0, [pc, #252]	@ (80008f0 <main+0x1cc>)
 80007f2:	f000 febe 	bl	8001572 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_LEFT\n\r\n");
 80007f6:	4942      	ldr	r1, [pc, #264]	@ (8000900 <main+0x1dc>)
 80007f8:	483f      	ldr	r0, [pc, #252]	@ (80008f8 <main+0x1d4>)
 80007fa:	f002 f9b7 	bl	8002b6c <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80007fe:	483e      	ldr	r0, [pc, #248]	@ (80008f8 <main+0x1d4>)
 8000800:	f7ff fca4 	bl	800014c <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	b29a      	uxth	r2, r3
 8000808:	2364      	movs	r3, #100	@ 0x64
 800080a:	493b      	ldr	r1, [pc, #236]	@ (80008f8 <main+0x1d4>)
 800080c:	4836      	ldr	r0, [pc, #216]	@ (80008e8 <main+0x1c4>)
 800080e:	f001 fe0f 	bl	8002430 <HAL_UART_Transmit>
		  smartcar_FL();
 8000812:	f7ff fd63 	bl	80002dc <smartcar_FL>
		  HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fbde 	bl	8000fd8 <HAL_Delay>
	  }

	  if(receive == 'D')
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <main+0x1c0>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b44      	cmp	r3, #68	@ 0x44
 8000822:	d11a      	bne.n	800085a <main+0x136>
	  {
		  printf("\r\n");
 8000824:	4831      	ldr	r0, [pc, #196]	@ (80008ec <main+0x1c8>)
 8000826:	f002 f999 	bl	8002b5c <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 800082a:	2201      	movs	r2, #1
 800082c:	2120      	movs	r1, #32
 800082e:	4830      	ldr	r0, [pc, #192]	@ (80008f0 <main+0x1cc>)
 8000830:	f000 fe9f 	bl	8001572 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_RIGHT\n\r\n");
 8000834:	4933      	ldr	r1, [pc, #204]	@ (8000904 <main+0x1e0>)
 8000836:	4830      	ldr	r0, [pc, #192]	@ (80008f8 <main+0x1d4>)
 8000838:	f002 f998 	bl	8002b6c <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800083c:	482e      	ldr	r0, [pc, #184]	@ (80008f8 <main+0x1d4>)
 800083e:	f7ff fc85 	bl	800014c <strlen>
 8000842:	4603      	mov	r3, r0
 8000844:	b29a      	uxth	r2, r3
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	492b      	ldr	r1, [pc, #172]	@ (80008f8 <main+0x1d4>)
 800084a:	4827      	ldr	r0, [pc, #156]	@ (80008e8 <main+0x1c4>)
 800084c:	f001 fdf0 	bl	8002430 <HAL_UART_Transmit>
		  smartcar_FR();
 8000850:	f7ff fd7a 	bl	8000348 <smartcar_FR>
		  HAL_Delay(10);
 8000854:	200a      	movs	r0, #10
 8000856:	f000 fbbf 	bl	8000fd8 <HAL_Delay>
	  }

	  if(receive == 'Z')
 800085a:	4b22      	ldr	r3, [pc, #136]	@ (80008e4 <main+0x1c0>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b5a      	cmp	r3, #90	@ 0x5a
 8000860:	d11a      	bne.n	8000898 <main+0x174>
	  {
		  printf("\r\n");
 8000862:	4822      	ldr	r0, [pc, #136]	@ (80008ec <main+0x1c8>)
 8000864:	f002 f97a 	bl	8002b5c <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000868:	2201      	movs	r2, #1
 800086a:	2120      	movs	r1, #32
 800086c:	4820      	ldr	r0, [pc, #128]	@ (80008f0 <main+0x1cc>)
 800086e:	f000 fe80 	bl	8001572 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "B_LEFT\n\r\n");
 8000872:	4925      	ldr	r1, [pc, #148]	@ (8000908 <main+0x1e4>)
 8000874:	4820      	ldr	r0, [pc, #128]	@ (80008f8 <main+0x1d4>)
 8000876:	f002 f979 	bl	8002b6c <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800087a:	481f      	ldr	r0, [pc, #124]	@ (80008f8 <main+0x1d4>)
 800087c:	f7ff fc66 	bl	800014c <strlen>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	2364      	movs	r3, #100	@ 0x64
 8000886:	491c      	ldr	r1, [pc, #112]	@ (80008f8 <main+0x1d4>)
 8000888:	4817      	ldr	r0, [pc, #92]	@ (80008e8 <main+0x1c4>)
 800088a:	f001 fdd1 	bl	8002430 <HAL_UART_Transmit>
		  smartcar_BL();
 800088e:	f7ff fd91 	bl	80003b4 <smartcar_BL>
		  HAL_Delay(10);
 8000892:	200a      	movs	r0, #10
 8000894:	f000 fba0 	bl	8000fd8 <HAL_Delay>
	  }

	  if(receive == 'C')
 8000898:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <main+0x1c0>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b43      	cmp	r3, #67	@ 0x43
 800089e:	d11a      	bne.n	80008d6 <main+0x1b2>
	  {
		  printf("\r\n");
 80008a0:	4812      	ldr	r0, [pc, #72]	@ (80008ec <main+0x1c8>)
 80008a2:	f002 f95b 	bl	8002b5c <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2120      	movs	r1, #32
 80008aa:	4811      	ldr	r0, [pc, #68]	@ (80008f0 <main+0x1cc>)
 80008ac:	f000 fe61 	bl	8001572 <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "B_RIGHT\n\r\n");
 80008b0:	4916      	ldr	r1, [pc, #88]	@ (800090c <main+0x1e8>)
 80008b2:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <main+0x1d4>)
 80008b4:	f002 f95a 	bl	8002b6c <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80008b8:	480f      	ldr	r0, [pc, #60]	@ (80008f8 <main+0x1d4>)
 80008ba:	f7ff fc47 	bl	800014c <strlen>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	2364      	movs	r3, #100	@ 0x64
 80008c4:	490c      	ldr	r1, [pc, #48]	@ (80008f8 <main+0x1d4>)
 80008c6:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <main+0x1c4>)
 80008c8:	f001 fdb2 	bl	8002430 <HAL_UART_Transmit>
		  smartcar_BR();
 80008cc:	f7ff fda8 	bl	8000420 <smartcar_BR>
		  HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f000 fb81 	bl	8000fd8 <HAL_Delay>
	  }

	  smartcar_S();
 80008d6:	f7ff fccb 	bl	8000270 <smartcar_S>
	  printf("=== Enter your word ===\r\n\r\n");
 80008da:	e734      	b.n	8000746 <main+0x22>
 80008dc:	08003c58 	.word	0x08003c58
 80008e0:	08003c70 	.word	0x08003c70
 80008e4:	20000218 	.word	0x20000218
 80008e8:	200000d0 	.word	0x200000d0
 80008ec:	08003bfc 	.word	0x08003bfc
 80008f0:	40010800 	.word	0x40010800
 80008f4:	08003c8c 	.word	0x08003c8c
 80008f8:	20000118 	.word	0x20000118
 80008fc:	08003c94 	.word	0x08003c94
 8000900:	08003c9c 	.word	0x08003c9c
 8000904:	08003ca8 	.word	0x08003ca8
 8000908:	08003cb4 	.word	0x08003cb4
 800090c:	08003cc0 	.word	0x08003cc0

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	@ 0x40
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2228      	movs	r2, #40	@ 0x28
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fa1e 	bl	8002d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000946:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fe49 	bl	80015e8 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800095c:	f000 f946 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f001 f8b6 	bl	8001aec <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000986:	f000 f931 	bl	8000bec <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3740      	adds	r7, #64	@ 0x40
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009b2:	4a1f      	ldr	r2, [pc, #124]	@ (8000a30 <MX_TIM1_Init+0x9c>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009b8:	223f      	movs	r2, #63	@ 0x3f
 80009ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d0:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009dc:	4813      	ldr	r0, [pc, #76]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009de:	f001 fa13 	bl	8001e08 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009e8:	f000 f900 	bl	8000bec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	@ (8000a2c <MX_TIM1_Init+0x98>)
 80009fa:	f001 fa9f 	bl	8001f3c <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a04:	f000 f8f2 	bl	8000bec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a10:	463b      	mov	r3, r7
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_TIM1_Init+0x98>)
 8000a16:	f001 fc5d 	bl	80022d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a20:	f000 f8e4 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000088 	.word	0x20000088
 8000a30:	40012c00 	.word	0x40012c00

08000a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_USART2_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f001 fc90 	bl	8002390 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a76:	f000 f8b9 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000d0 	.word	0x200000d0
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9c:	4b4e      	ldr	r3, [pc, #312]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b4b      	ldr	r3, [pc, #300]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0310 	and.w	r3, r3, #16
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab4:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a47      	ldr	r2, [pc, #284]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b42      	ldr	r3, [pc, #264]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a41      	ldr	r2, [pc, #260]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae4:	4b3c      	ldr	r3, [pc, #240]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000aea:	f043 0308 	orr.w	r3, r3, #8
 8000aee:	6193      	str	r3, [r2, #24]
 8000af0:	4b39      	ldr	r3, [pc, #228]	@ (8000bd8 <MX_GPIO_Init+0x150>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0308 	and.w	r3, r3, #8
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|R_TRIG_Pin|LBF_Pin
 8000afc:	2200      	movs	r2, #0
 8000afe:	f240 7121 	movw	r1, #1825	@ 0x721
 8000b02:	4836      	ldr	r0, [pc, #216]	@ (8000bdc <MX_GPIO_Init+0x154>)
 8000b04:	f000 fd35 	bl	8001572 <HAL_GPIO_WritePin>
                          |LFB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 8000b0e:	4834      	ldr	r0, [pc, #208]	@ (8000be0 <MX_GPIO_Init+0x158>)
 8000b10:	f000 fd2f 	bl	8001572 <HAL_GPIO_WritePin>
                          |RBF_Pin|RBB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_TRIG_GPIO_Port, L_TRIG_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2180      	movs	r1, #128	@ 0x80
 8000b18:	4832      	ldr	r0, [pc, #200]	@ (8000be4 <MX_GPIO_Init+0x15c>)
 8000b1a:	f000 fd2a 	bl	8001572 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b24:	4b30      	ldr	r3, [pc, #192]	@ (8000be8 <MX_GPIO_Init+0x160>)
 8000b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	482c      	ldr	r0, [pc, #176]	@ (8000be4 <MX_GPIO_Init+0x15c>)
 8000b34:	f000 fb82 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin R_TRIG_Pin LBF_Pin
                           LFB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|R_TRIG_Pin|LBF_Pin
 8000b38:	f240 7321 	movw	r3, #1825	@ 0x721
 8000b3c:	613b      	str	r3, [r7, #16]
                          |LFB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4822      	ldr	r0, [pc, #136]	@ (8000bdc <MX_GPIO_Init+0x154>)
 8000b52:	f000 fb73 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : R_ECHO_Pin */
  GPIO_InitStruct.Pin = R_ECHO_Pin;
 8000b56:	2310      	movs	r3, #16
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 0310 	add.w	r3, r7, #16
 8000b66:	4619      	mov	r1, r3
 8000b68:	481c      	ldr	r0, [pc, #112]	@ (8000bdc <MX_GPIO_Init+0x154>)
 8000b6a:	f000 fb67 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : L_ECHO_Pin */
  GPIO_InitStruct.Pin = L_ECHO_Pin;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <MX_GPIO_Init+0x158>)
 8000b82:	f000 fb5b 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pins : LBB_Pin LFF_Pin RFF_Pin RFB_Pin
                           RBF_Pin RBB_Pin */
  GPIO_InitStruct.Pin = LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 8000b86:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 8000b8a:	613b      	str	r3, [r7, #16]
                          |RBF_Pin|RBB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4810      	ldr	r0, [pc, #64]	@ (8000be0 <MX_GPIO_Init+0x158>)
 8000ba0:	f000 fb4c 	bl	800123c <HAL_GPIO_Init>

  /*Configure GPIO pin : L_TRIG_Pin */
  GPIO_InitStruct.Pin = L_TRIG_Pin;
 8000ba4:	2380      	movs	r3, #128	@ 0x80
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480a      	ldr	r0, [pc, #40]	@ (8000be4 <MX_GPIO_Init+0x15c>)
 8000bbc:	f000 fb3e 	bl	800123c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2028      	movs	r0, #40	@ 0x28
 8000bc6:	f000 fb02 	bl	80011ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bca:	2028      	movs	r0, #40	@ 0x28
 8000bcc:	f000 fb1b 	bl	8001206 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	40011000 	.word	0x40011000
 8000be8:	10110000 	.word	0x10110000

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfe:	4b15      	ldr	r3, [pc, #84]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	4a14      	ldr	r2, [pc, #80]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6193      	str	r3, [r2, #24]
 8000c0a:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c20:	61d3      	str	r3, [r2, #28]
 8000c22:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <HAL_MspInit+0x60>)
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_MspInit+0x60>)
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3714      	adds	r7, #20
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000

08000c5c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a09      	ldr	r2, [pc, #36]	@ (8000c90 <HAL_TIM_Base_MspInit+0x34>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10b      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	4a08      	ldr	r2, [pc, #32]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c74:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000c78:	6193      	str	r3, [r2, #24]
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_TIM_Base_MspInit+0x38>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40012c00 	.word	0x40012c00
 8000c94:	40021000 	.word	0x40021000

08000c98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a15      	ldr	r2, [pc, #84]	@ (8000d08 <HAL_UART_MspInit+0x70>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d123      	bne.n	8000d00 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_UART_MspInit+0x74>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a13      	ldr	r2, [pc, #76]	@ (8000d0c <HAL_UART_MspInit+0x74>)
 8000cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_MspInit+0x74>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_UART_MspInit+0x74>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <HAL_UART_MspInit+0x74>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000d0c <HAL_UART_MspInit+0x74>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cec:	2302      	movs	r3, #2
 8000cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_UART_MspInit+0x78>)
 8000cfc:	f000 fa9e 	bl	800123c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010800 	.word	0x40010800

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <NMI_Handler+0x4>

08000d1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <BusFault_Handler+0x4>

08000d34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <UsageFault_Handler+0x4>

08000d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr

08000d48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f91c 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d70:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d74:	f000 fc16 	bl	80015a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	e00a      	b.n	8000da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d8e:	f3af 8000 	nop.w
 8000d92:	4601      	mov	r1, r0
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	60ba      	str	r2, [r7, #8]
 8000d9a:	b2ca      	uxtb	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf0      	blt.n	8000d8e <_read+0x12>
  }

  return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	e009      	b.n	8000ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff f9c3 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf1      	blt.n	8000dc8 <_write+0x12>
  }
  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_close>:

int _close(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000df6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e14:	605a      	str	r2, [r3, #4]
  return 0;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <_isatty>:

int _isatty(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr

08000e36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e36:	b480      	push	{r7}
 8000e38:	b085      	sub	sp, #20
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	60f8      	str	r0, [r7, #12]
 8000e3e:	60b9      	str	r1, [r7, #8]
 8000e40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bc80      	pop	{r7}
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f001 ffbc 	bl	8002dfc <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20005000 	.word	0x20005000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	20000230 	.word	0x20000230
 8000eb8:	20000388 	.word	0x20000388

08000ebc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec8:	f7ff fff8 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480b      	ldr	r0, [pc, #44]	@ (8000efc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ece:	490c      	ldr	r1, [pc, #48]	@ (8000f00 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ed0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f04 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ee4:	4c09      	ldr	r4, [pc, #36]	@ (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f001 ff89 	bl	8002e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ef6:	f7ff fc15 	bl	8000724 <main>
  bx lr
 8000efa:	4770      	bx	lr
  ldr r0, =_sdata
 8000efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000f04:	08003d3c 	.word	0x08003d3c
  ldr r2, =_sbss
 8000f08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000f0c:	20000384 	.word	0x20000384

08000f10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC1_2_IRQHandler>
	...

08000f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <HAL_Init+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	@ (8000f3c <HAL_Init+0x28>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f000 f947 	bl	80011b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f7ff fe62 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40022000 	.word	0x40022000

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	@ (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f95f 	bl	8001222 <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f000 f927 	bl	80011ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	@ (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000004 	.word	0x20000004
 8000f98:	2000000c 	.word	0x2000000c
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <HAL_IncTick+0x1c>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a03      	ldr	r2, [pc, #12]	@ (8000fc0 <HAL_IncTick+0x20>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bc80      	pop	{r7}
 8000fba:	4770      	bx	lr
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	20000234 	.word	0x20000234

08000fc4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b02      	ldr	r3, [pc, #8]	@ (8000fd4 <HAL_GetTick+0x10>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	20000234 	.word	0x20000234

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff fff0 	bl	8000fc4 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffe0 	bl	8000fc4 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2000000c 	.word	0x2000000c

08001020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800103c:	4013      	ands	r3, r2
 800103e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800104c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001052:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <__NVIC_SetPriorityGrouping+0x44>)
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <__NVIC_GetPriorityGrouping+0x18>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	0a1b      	lsrs	r3, r3, #8
 8001072:	f003 0307 	and.w	r3, r3, #7
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db0b      	blt.n	80010ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	f003 021f 	and.w	r2, r3, #31
 800109c:	4906      	ldr	r1, [pc, #24]	@ (80010b8 <__NVIC_EnableIRQ+0x34>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	095b      	lsrs	r3, r3, #5
 80010a4:	2001      	movs	r0, #1
 80010a6:	fa00 f202 	lsl.w	r2, r0, r2
 80010aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	@ (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	@ (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	@ 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	@ 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3b01      	subs	r3, #1
 8001180:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001184:	d301      	bcc.n	800118a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001186:	2301      	movs	r3, #1
 8001188:	e00f      	b.n	80011aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <SysTick_Config+0x40>)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3b01      	subs	r3, #1
 8001190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001192:	210f      	movs	r1, #15
 8001194:	f04f 30ff 	mov.w	r0, #4294967295
 8001198:	f7ff ff90 	bl	80010bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <SysTick_Config+0x40>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a2:	4b04      	ldr	r3, [pc, #16]	@ (80011b4 <SysTick_Config+0x40>)
 80011a4:	2207      	movs	r2, #7
 80011a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ff2d 	bl	8001020 <__NVIC_SetPriorityGrouping>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff42 	bl	8001068 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff90 	bl	8001110 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff5f 	bl	80010bc <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	4603      	mov	r3, r0
 800120e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff35 	bl	8001084 <__NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ffa2 	bl	8001174 <SysTick_Config>
 8001230:	4603      	mov	r3, r0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800123c:	b480      	push	{r7}
 800123e:	b08b      	sub	sp, #44	@ 0x2c
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e169      	b.n	8001524 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001250:	2201      	movs	r2, #1
 8001252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	429a      	cmp	r2, r3
 800126a:	f040 8158 	bne.w	800151e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	4a9a      	ldr	r2, [pc, #616]	@ (80014dc <HAL_GPIO_Init+0x2a0>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d05e      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001278:	4a98      	ldr	r2, [pc, #608]	@ (80014dc <HAL_GPIO_Init+0x2a0>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d875      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 800127e:	4a98      	ldr	r2, [pc, #608]	@ (80014e0 <HAL_GPIO_Init+0x2a4>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d058      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001284:	4a96      	ldr	r2, [pc, #600]	@ (80014e0 <HAL_GPIO_Init+0x2a4>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d86f      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 800128a:	4a96      	ldr	r2, [pc, #600]	@ (80014e4 <HAL_GPIO_Init+0x2a8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d052      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 8001290:	4a94      	ldr	r2, [pc, #592]	@ (80014e4 <HAL_GPIO_Init+0x2a8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d869      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 8001296:	4a94      	ldr	r2, [pc, #592]	@ (80014e8 <HAL_GPIO_Init+0x2ac>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d04c      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 800129c:	4a92      	ldr	r2, [pc, #584]	@ (80014e8 <HAL_GPIO_Init+0x2ac>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d863      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012a2:	4a92      	ldr	r2, [pc, #584]	@ (80014ec <HAL_GPIO_Init+0x2b0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d046      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
 80012a8:	4a90      	ldr	r2, [pc, #576]	@ (80014ec <HAL_GPIO_Init+0x2b0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d85d      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d82a      	bhi.n	8001308 <HAL_GPIO_Init+0xcc>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d859      	bhi.n	800136a <HAL_GPIO_Init+0x12e>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <HAL_GPIO_Init+0x80>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	08001337 	.word	0x08001337
 80012c0:	08001311 	.word	0x08001311
 80012c4:	08001323 	.word	0x08001323
 80012c8:	08001365 	.word	0x08001365
 80012cc:	0800136b 	.word	0x0800136b
 80012d0:	0800136b 	.word	0x0800136b
 80012d4:	0800136b 	.word	0x0800136b
 80012d8:	0800136b 	.word	0x0800136b
 80012dc:	0800136b 	.word	0x0800136b
 80012e0:	0800136b 	.word	0x0800136b
 80012e4:	0800136b 	.word	0x0800136b
 80012e8:	0800136b 	.word	0x0800136b
 80012ec:	0800136b 	.word	0x0800136b
 80012f0:	0800136b 	.word	0x0800136b
 80012f4:	0800136b 	.word	0x0800136b
 80012f8:	0800136b 	.word	0x0800136b
 80012fc:	0800136b 	.word	0x0800136b
 8001300:	08001319 	.word	0x08001319
 8001304:	0800132d 	.word	0x0800132d
 8001308:	4a79      	ldr	r2, [pc, #484]	@ (80014f0 <HAL_GPIO_Init+0x2b4>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800130e:	e02c      	b.n	800136a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e029      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	3304      	adds	r3, #4
 800131e:	623b      	str	r3, [r7, #32]
          break;
 8001320:	e024      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	3308      	adds	r3, #8
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e01f      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	330c      	adds	r3, #12
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e01a      	b.n	800136c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800133e:	2304      	movs	r3, #4
 8001340:	623b      	str	r3, [r7, #32]
          break;
 8001342:	e013      	b.n	800136c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d105      	bne.n	8001358 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800134c:	2308      	movs	r3, #8
 800134e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69fa      	ldr	r2, [r7, #28]
 8001354:	611a      	str	r2, [r3, #16]
          break;
 8001356:	e009      	b.n	800136c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001358:	2308      	movs	r3, #8
 800135a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69fa      	ldr	r2, [r7, #28]
 8001360:	615a      	str	r2, [r3, #20]
          break;
 8001362:	e003      	b.n	800136c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001364:	2300      	movs	r3, #0
 8001366:	623b      	str	r3, [r7, #32]
          break;
 8001368:	e000      	b.n	800136c <HAL_GPIO_Init+0x130>
          break;
 800136a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2bff      	cmp	r3, #255	@ 0xff
 8001370:	d801      	bhi.n	8001376 <HAL_GPIO_Init+0x13a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	e001      	b.n	800137a <HAL_GPIO_Init+0x13e>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3304      	adds	r3, #4
 800137a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2bff      	cmp	r3, #255	@ 0xff
 8001380:	d802      	bhi.n	8001388 <HAL_GPIO_Init+0x14c>
 8001382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	e002      	b.n	800138e <HAL_GPIO_Init+0x152>
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	3b08      	subs	r3, #8
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	210f      	movs	r1, #15
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	6a39      	ldr	r1, [r7, #32]
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	fa01 f303 	lsl.w	r3, r1, r3
 80013a8:	431a      	orrs	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 80b1 	beq.w	800151e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013bc:	4b4d      	ldr	r3, [pc, #308]	@ (80014f4 <HAL_GPIO_Init+0x2b8>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a4c      	ldr	r2, [pc, #304]	@ (80014f4 <HAL_GPIO_Init+0x2b8>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b4a      	ldr	r3, [pc, #296]	@ (80014f4 <HAL_GPIO_Init+0x2b8>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013d4:	4a48      	ldr	r2, [pc, #288]	@ (80014f8 <HAL_GPIO_Init+0x2bc>)
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	089b      	lsrs	r3, r3, #2
 80013da:	3302      	adds	r3, #2
 80013dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	220f      	movs	r2, #15
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a40      	ldr	r2, [pc, #256]	@ (80014fc <HAL_GPIO_Init+0x2c0>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d013      	beq.n	8001428 <HAL_GPIO_Init+0x1ec>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a3f      	ldr	r2, [pc, #252]	@ (8001500 <HAL_GPIO_Init+0x2c4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d00d      	beq.n	8001424 <HAL_GPIO_Init+0x1e8>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3e      	ldr	r2, [pc, #248]	@ (8001504 <HAL_GPIO_Init+0x2c8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d007      	beq.n	8001420 <HAL_GPIO_Init+0x1e4>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3d      	ldr	r2, [pc, #244]	@ (8001508 <HAL_GPIO_Init+0x2cc>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_GPIO_Init+0x1e0>
 8001418:	2303      	movs	r3, #3
 800141a:	e006      	b.n	800142a <HAL_GPIO_Init+0x1ee>
 800141c:	2304      	movs	r3, #4
 800141e:	e004      	b.n	800142a <HAL_GPIO_Init+0x1ee>
 8001420:	2302      	movs	r3, #2
 8001422:	e002      	b.n	800142a <HAL_GPIO_Init+0x1ee>
 8001424:	2301      	movs	r3, #1
 8001426:	e000      	b.n	800142a <HAL_GPIO_Init+0x1ee>
 8001428:	2300      	movs	r3, #0
 800142a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800142c:	f002 0203 	and.w	r2, r2, #3
 8001430:	0092      	lsls	r2, r2, #2
 8001432:	4093      	lsls	r3, r2
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	4313      	orrs	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800143a:	492f      	ldr	r1, [pc, #188]	@ (80014f8 <HAL_GPIO_Init+0x2bc>)
 800143c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001454:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	492c      	ldr	r1, [pc, #176]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	43db      	mvns	r3, r3
 800146a:	4928      	ldr	r1, [pc, #160]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 800146c:	4013      	ands	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800147c:	4b23      	ldr	r3, [pc, #140]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	4922      	ldr	r1, [pc, #136]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	43db      	mvns	r3, r3
 8001492:	491e      	ldr	r1, [pc, #120]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 8001494:	4013      	ands	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d006      	beq.n	80014b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	4918      	ldr	r1, [pc, #96]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
 80014b0:	e006      	b.n	80014c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	4914      	ldr	r1, [pc, #80]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80014bc:	4013      	ands	r3, r2
 80014be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d021      	beq.n	8001510 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b0f      	ldr	r3, [pc, #60]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	490e      	ldr	r1, [pc, #56]	@ (800150c <HAL_GPIO_Init+0x2d0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e021      	b.n	800151e <HAL_GPIO_Init+0x2e2>
 80014da:	bf00      	nop
 80014dc:	10320000 	.word	0x10320000
 80014e0:	10310000 	.word	0x10310000
 80014e4:	10220000 	.word	0x10220000
 80014e8:	10210000 	.word	0x10210000
 80014ec:	10120000 	.word	0x10120000
 80014f0:	10110000 	.word	0x10110000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	40010800 	.word	0x40010800
 8001500:	40010c00 	.word	0x40010c00
 8001504:	40011000 	.word	0x40011000
 8001508:	40011400 	.word	0x40011400
 800150c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001510:	4b0b      	ldr	r3, [pc, #44]	@ (8001540 <HAL_GPIO_Init+0x304>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	43db      	mvns	r3, r3
 8001518:	4909      	ldr	r1, [pc, #36]	@ (8001540 <HAL_GPIO_Init+0x304>)
 800151a:	4013      	ands	r3, r2
 800151c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800151e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001520:	3301      	adds	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	f47f ae8e 	bne.w	8001250 <HAL_GPIO_Init+0x14>
  }
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	372c      	adds	r7, #44	@ 0x2c
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40010400 	.word	0x40010400

08001544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800155c:	2301      	movs	r3, #1
 800155e:	73fb      	strb	r3, [r7, #15]
 8001560:	e001      	b.n	8001566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3714      	adds	r7, #20
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	460b      	mov	r3, r1
 800157c:	807b      	strh	r3, [r7, #2]
 800157e:	4613      	mov	r3, r2
 8001580:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001582:	787b      	ldrb	r3, [r7, #1]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001588:	887a      	ldrh	r2, [r7, #2]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800158e:	e003      	b.n	8001598 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	041a      	lsls	r2, r3, #16
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	611a      	str	r2, [r3, #16]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ba:	4a05      	ldr	r2, [pc, #20]	@ (80015d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 f806 	bl	80015d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40010400 	.word	0x40010400

080015d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e272      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 8087 	beq.w	8001716 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001608:	4b92      	ldr	r3, [pc, #584]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 030c 	and.w	r3, r3, #12
 8001610:	2b04      	cmp	r3, #4
 8001612:	d00c      	beq.n	800162e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001614:	4b8f      	ldr	r3, [pc, #572]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b08      	cmp	r3, #8
 800161e:	d112      	bne.n	8001646 <HAL_RCC_OscConfig+0x5e>
 8001620:	4b8c      	ldr	r3, [pc, #560]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800162c:	d10b      	bne.n	8001646 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162e:	4b89      	ldr	r3, [pc, #548]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d06c      	beq.n	8001714 <HAL_RCC_OscConfig+0x12c>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d168      	bne.n	8001714 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e24c      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x76>
 8001650:	4b80      	ldr	r3, [pc, #512]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a7f      	ldr	r2, [pc, #508]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e02e      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0x98>
 8001666:	4b7b      	ldr	r3, [pc, #492]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a7a      	ldr	r2, [pc, #488]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b78      	ldr	r3, [pc, #480]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a77      	ldr	r2, [pc, #476]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e01d      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0xbc>
 800168a:	4b72      	ldr	r3, [pc, #456]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a71      	ldr	r2, [pc, #452]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	4b6f      	ldr	r3, [pc, #444]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6e      	ldr	r2, [pc, #440]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e00b      	b.n	80016bc <HAL_RCC_OscConfig+0xd4>
 80016a4:	4b6b      	ldr	r3, [pc, #428]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6a      	ldr	r2, [pc, #424]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a67      	ldr	r2, [pc, #412]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d013      	beq.n	80016ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc7e 	bl	8000fc4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016cc:	f7ff fc7a 	bl	8000fc4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b64      	cmp	r3, #100	@ 0x64
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e200      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b5d      	ldr	r3, [pc, #372]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d0f0      	beq.n	80016cc <HAL_RCC_OscConfig+0xe4>
 80016ea:	e014      	b.n	8001716 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc6a 	bl	8000fc4 <HAL_GetTick>
 80016f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc66 	bl	8000fc4 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e1ec      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001706:	4b53      	ldr	r3, [pc, #332]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f0      	bne.n	80016f4 <HAL_RCC_OscConfig+0x10c>
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001714:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d063      	beq.n	80017ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001722:	4b4c      	ldr	r3, [pc, #304]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 030c 	and.w	r3, r3, #12
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800172e:	4b49      	ldr	r3, [pc, #292]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 030c 	and.w	r3, r3, #12
 8001736:	2b08      	cmp	r3, #8
 8001738:	d11c      	bne.n	8001774 <HAL_RCC_OscConfig+0x18c>
 800173a:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d116      	bne.n	8001774 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001746:	4b43      	ldr	r3, [pc, #268]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d005      	beq.n	800175e <HAL_RCC_OscConfig+0x176>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d001      	beq.n	800175e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e1c0      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175e:	4b3d      	ldr	r3, [pc, #244]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	695b      	ldr	r3, [r3, #20]
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	4939      	ldr	r1, [pc, #228]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	e03a      	b.n	80017ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177c:	4b36      	ldr	r3, [pc, #216]	@ (8001858 <HAL_RCC_OscConfig+0x270>)
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fc1f 	bl	8000fc4 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800178a:	f7ff fc1b 	bl	8000fc4 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e1a1      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179c:	4b2d      	ldr	r3, [pc, #180]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4927      	ldr	r1, [pc, #156]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	600b      	str	r3, [r1, #0]
 80017bc:	e015      	b.n	80017ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <HAL_RCC_OscConfig+0x270>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fbfe 	bl	8000fc4 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017cc:	f7ff fbfa 	bl	8000fc4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e180      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d03a      	beq.n	800186c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d019      	beq.n	8001832 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001800:	2201      	movs	r2, #1
 8001802:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff fbde 	bl	8000fc4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800180c:	f7ff fbda 	bl	8000fc4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e160      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <HAL_RCC_OscConfig+0x26c>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0f0      	beq.n	800180c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 face 	bl	8001dcc <RCC_Delay>
 8001830:	e01c      	b.n	800186c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001832:	4b0a      	ldr	r3, [pc, #40]	@ (800185c <HAL_RCC_OscConfig+0x274>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fbc4 	bl	8000fc4 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183e:	e00f      	b.n	8001860 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fbc0 	bl	8000fc4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d908      	bls.n	8001860 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e146      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
 8001852:	bf00      	nop
 8001854:	40021000 	.word	0x40021000
 8001858:	42420000 	.word	0x42420000
 800185c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1e9      	bne.n	8001840 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a6 	beq.w	80019c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b8b      	ldr	r3, [pc, #556]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4b88      	ldr	r3, [pc, #544]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	4a87      	ldr	r2, [pc, #540]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b85      	ldr	r3, [pc, #532]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b82      	ldr	r3, [pc, #520]	@ (8001ab0 <HAL_RCC_OscConfig+0x4c8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ab0 <HAL_RCC_OscConfig+0x4c8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ab0 <HAL_RCC_OscConfig+0x4c8>)
 80018b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7ff fb81 	bl	8000fc4 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7ff fb7d 	bl	8000fc4 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	@ 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e103      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <HAL_RCC_OscConfig+0x4c8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x312>
 80018ec:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a6e      	ldr	r2, [pc, #440]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e02d      	b.n	8001956 <HAL_RCC_OscConfig+0x36e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x334>
 8001902:	4b6a      	ldr	r3, [pc, #424]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001904:	6a1b      	ldr	r3, [r3, #32]
 8001906:	4a69      	ldr	r2, [pc, #420]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4b67      	ldr	r3, [pc, #412]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	4a66      	ldr	r2, [pc, #408]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	e01c      	b.n	8001956 <HAL_RCC_OscConfig+0x36e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x356>
 8001924:	4b61      	ldr	r3, [pc, #388]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a60      	ldr	r2, [pc, #384]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4b5e      	ldr	r3, [pc, #376]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	4a5d      	ldr	r2, [pc, #372]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0x36e>
 800193e:	4b5b      	ldr	r3, [pc, #364]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	4a5a      	ldr	r2, [pc, #360]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4b58      	ldr	r3, [pc, #352]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 800194c:	6a1b      	ldr	r3, [r3, #32]
 800194e:	4a57      	ldr	r2, [pc, #348]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d015      	beq.n	800198a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7ff fb31 	bl	8000fc4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff fb2d 	bl	8000fc4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0b1      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ee      	beq.n	8001966 <HAL_RCC_OscConfig+0x37e>
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff fb1b 	bl	8000fc4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff fb17 	bl	8000fc4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e09b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	4b40      	ldr	r3, [pc, #256]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ba:	4b3c      	ldr	r3, [pc, #240]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	4a3b      	ldr	r2, [pc, #236]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d0:	4b36      	ldr	r3, [pc, #216]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d061      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d146      	bne.n	8001a72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e4:	4b33      	ldr	r3, [pc, #204]	@ (8001ab4 <HAL_RCC_OscConfig+0x4cc>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff faeb 	bl	8000fc4 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff fae7 	bl	8000fc4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e06d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a04:	4b29      	ldr	r3, [pc, #164]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a18:	d108      	bne.n	8001a2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4921      	ldr	r1, [pc, #132]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a19      	ldr	r1, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	491b      	ldr	r1, [pc, #108]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a44:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab4 <HAL_RCC_OscConfig+0x4cc>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fabb 	bl	8000fc4 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff fab7 	bl	8000fc4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e03d      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0f0      	beq.n	8001a52 <HAL_RCC_OscConfig+0x46a>
 8001a70:	e035      	b.n	8001ade <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_RCC_OscConfig+0x4cc>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff faa4 	bl	8000fc4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a80:	f7ff faa0 	bl	8000fc4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e026      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a92:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x498>
 8001a9e:	e01e      	b.n	8001ade <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d107      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e019      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_RCC_OscConfig+0x500>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d001      	beq.n	8001ade <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0d0      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b00:	4b6a      	ldr	r3, [pc, #424]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d910      	bls.n	8001b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b67      	ldr	r3, [pc, #412]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 0207 	bic.w	r2, r3, #7
 8001b16:	4965      	ldr	r1, [pc, #404]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b63      	ldr	r3, [pc, #396]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e0b8      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d020      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b48:	4b59      	ldr	r3, [pc, #356]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d005      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b60:	4b53      	ldr	r3, [pc, #332]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4a52      	ldr	r2, [pc, #328]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b6c:	4b50      	ldr	r3, [pc, #320]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	494d      	ldr	r1, [pc, #308]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d040      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d107      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b47      	ldr	r3, [pc, #284]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d115      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e07f      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d107      	bne.n	8001bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	4b41      	ldr	r3, [pc, #260]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e073      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bba:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e06b      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bca:	4b39      	ldr	r3, [pc, #228]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f023 0203 	bic.w	r2, r3, #3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4936      	ldr	r1, [pc, #216]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bdc:	f7ff f9f2 	bl	8000fc4 <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be4:	f7ff f9ee 	bl	8000fc4 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e053      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 020c 	and.w	r2, r3, #12
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d1eb      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b27      	ldr	r3, [pc, #156]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d210      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 0207 	bic.w	r2, r3, #7
 8001c22:	4922      	ldr	r1, [pc, #136]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2a:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <HAL_RCC_ClockConfig+0x1c0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d001      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e032      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d008      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c48:	4b19      	ldr	r3, [pc, #100]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4916      	ldr	r1, [pc, #88]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d009      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	490e      	ldr	r1, [pc, #56]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c7a:	f000 f821 	bl	8001cc0 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	091b      	lsrs	r3, r3, #4
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	490a      	ldr	r1, [pc, #40]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	5ccb      	ldrb	r3, [r1, r3]
 8001c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c92:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <HAL_RCC_ClockConfig+0x1d0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f950 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40022000 	.word	0x40022000
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08003ccc 	.word	0x08003ccc
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d002      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x30>
 8001cea:	2b08      	cmp	r3, #8
 8001cec:	d003      	beq.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x36>
 8001cee:	e027      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cf2:	613b      	str	r3, [r7, #16]
      break;
 8001cf4:	e027      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	0c9b      	lsrs	r3, r3, #18
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	4a17      	ldr	r2, [pc, #92]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0c5b      	lsrs	r3, r3, #17
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d22:	fb03 f202 	mul.w	r2, r3, r2
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	e004      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a0c      	ldr	r2, [pc, #48]	@ (8001d64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d34:	fb02 f303 	mul.w	r3, r2, r3
 8001d38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	613b      	str	r3, [r7, #16]
      break;
 8001d3e:	e002      	b.n	8001d46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d42:	613b      	str	r3, [r7, #16]
      break;
 8001d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d46:	693b      	ldr	r3, [r7, #16]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bc80      	pop	{r7}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	007a1200 	.word	0x007a1200
 8001d5c:	08003ce4 	.word	0x08003ce4
 8001d60:	08003cf4 	.word	0x08003cf4
 8001d64:	003d0900 	.word	0x003d0900

08001d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d6c:	4b02      	ldr	r3, [pc, #8]	@ (8001d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d80:	f7ff fff2 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4903      	ldr	r1, [pc, #12]	@ (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08003cdc 	.word	0x08003cdc

08001da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da8:	f7ff ffde 	bl	8001d68 <HAL_RCC_GetHCLKFreq>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b05      	ldr	r3, [pc, #20]	@ (8001dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	0adb      	lsrs	r3, r3, #11
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	4903      	ldr	r1, [pc, #12]	@ (8001dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dba:	5ccb      	ldrb	r3, [r1, r3]
 8001dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08003cdc 	.word	0x08003cdc

08001dcc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <RCC_Delay+0x34>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <RCC_Delay+0x38>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	0a5b      	lsrs	r3, r3, #9
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001de8:	bf00      	nop
  }
  while (Delay --);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1e5a      	subs	r2, r3, #1
 8001dee:	60fa      	str	r2, [r7, #12]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f9      	bne.n	8001de8 <RCC_Delay+0x1c>
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000004 	.word	0x20000004
 8001e04:	10624dd3 	.word	0x10624dd3

08001e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e041      	b.n	8001e9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d106      	bne.n	8001e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7fe ff14 	bl	8000c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	4619      	mov	r1, r3
 8001e46:	4610      	mov	r0, r2
 8001e48:	f000 f940 	bl	80020cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d001      	beq.n	8001ec0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e032      	b.n	8001f26 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <HAL_TIM_Base_Start+0x88>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_TIM_Base_Start+0x48>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eda:	d009      	beq.n	8001ef0 <HAL_TIM_Base_Start+0x48>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a14      	ldr	r2, [pc, #80]	@ (8001f34 <HAL_TIM_Base_Start+0x8c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_TIM_Base_Start+0x48>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a13      	ldr	r2, [pc, #76]	@ (8001f38 <HAL_TIM_Base_Start+0x90>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d111      	bne.n	8001f14 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d010      	beq.n	8001f24 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	e007      	b.n	8001f24 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr
 8001f30:	40012c00 	.word	0x40012c00
 8001f34:	40000400 	.word	0x40000400
 8001f38:	40000800 	.word	0x40000800

08001f3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_TIM_ConfigClockSource+0x1c>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e0b4      	b.n	80020c2 <HAL_TIM_ConfigClockSource+0x186>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f90:	d03e      	beq.n	8002010 <HAL_TIM_ConfigClockSource+0xd4>
 8001f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f96:	f200 8087 	bhi.w	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f9e:	f000 8086 	beq.w	80020ae <HAL_TIM_ConfigClockSource+0x172>
 8001fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fa6:	d87f      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa8:	2b70      	cmp	r3, #112	@ 0x70
 8001faa:	d01a      	beq.n	8001fe2 <HAL_TIM_ConfigClockSource+0xa6>
 8001fac:	2b70      	cmp	r3, #112	@ 0x70
 8001fae:	d87b      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb0:	2b60      	cmp	r3, #96	@ 0x60
 8001fb2:	d050      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0x11a>
 8001fb4:	2b60      	cmp	r3, #96	@ 0x60
 8001fb6:	d877      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb8:	2b50      	cmp	r3, #80	@ 0x50
 8001fba:	d03c      	beq.n	8002036 <HAL_TIM_ConfigClockSource+0xfa>
 8001fbc:	2b50      	cmp	r3, #80	@ 0x50
 8001fbe:	d873      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	2b40      	cmp	r3, #64	@ 0x40
 8001fc2:	d058      	beq.n	8002076 <HAL_TIM_ConfigClockSource+0x13a>
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	d86f      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc8:	2b30      	cmp	r3, #48	@ 0x30
 8001fca:	d064      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	2b30      	cmp	r3, #48	@ 0x30
 8001fce:	d86b      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	d060      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d867      	bhi.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d05c      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fdc:	2b10      	cmp	r3, #16
 8001fde:	d05a      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0x15a>
 8001fe0:	e062      	b.n	80020a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ff2:	f000 f950 	bl	8002296 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68ba      	ldr	r2, [r7, #8]
 800200c:	609a      	str	r2, [r3, #8]
      break;
 800200e:	e04f      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002020:	f000 f939 	bl	8002296 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002032:	609a      	str	r2, [r3, #8]
      break;
 8002034:	e03c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002042:	461a      	mov	r2, r3
 8002044:	f000 f8b0 	bl	80021a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2150      	movs	r1, #80	@ 0x50
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f907 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8002054:	e02c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002062:	461a      	mov	r2, r3
 8002064:	f000 f8ce 	bl	8002204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2160      	movs	r1, #96	@ 0x60
 800206e:	4618      	mov	r0, r3
 8002070:	f000 f8f7 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8002074:	e01c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002082:	461a      	mov	r2, r3
 8002084:	f000 f890 	bl	80021a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2140      	movs	r1, #64	@ 0x40
 800208e:	4618      	mov	r0, r3
 8002090:	f000 f8e7 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8002094:	e00c      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f000 f8de 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 80020a6:	e003      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
      break;
 80020ac:	e000      	b.n	80020b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80020ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a2f      	ldr	r2, [pc, #188]	@ (800219c <TIM_Base_SetConfig+0xd0>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d00b      	beq.n	80020fc <TIM_Base_SetConfig+0x30>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020ea:	d007      	beq.n	80020fc <TIM_Base_SetConfig+0x30>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a2c      	ldr	r2, [pc, #176]	@ (80021a0 <TIM_Base_SetConfig+0xd4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d003      	beq.n	80020fc <TIM_Base_SetConfig+0x30>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a2b      	ldr	r2, [pc, #172]	@ (80021a4 <TIM_Base_SetConfig+0xd8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d108      	bne.n	800210e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	4313      	orrs	r3, r2
 800210c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a22      	ldr	r2, [pc, #136]	@ (800219c <TIM_Base_SetConfig+0xd0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d00b      	beq.n	800212e <TIM_Base_SetConfig+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211c:	d007      	beq.n	800212e <TIM_Base_SetConfig+0x62>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a1f      	ldr	r2, [pc, #124]	@ (80021a0 <TIM_Base_SetConfig+0xd4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d003      	beq.n	800212e <TIM_Base_SetConfig+0x62>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a1e      	ldr	r2, [pc, #120]	@ (80021a4 <TIM_Base_SetConfig+0xd8>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d108      	bne.n	8002140 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4313      	orrs	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0d      	ldr	r2, [pc, #52]	@ (800219c <TIM_Base_SetConfig+0xd0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d103      	bne.n	8002174 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	691a      	ldr	r2, [r3, #16]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f023 0201 	bic.w	r2, r3, #1
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]
  }
}
 8002192:	bf00      	nop
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr
 800219c:	40012c00 	.word	0x40012c00
 80021a0:	40000400 	.word	0x40000400
 80021a4:	40000800 	.word	0x40000800

080021a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f023 030a 	bic.w	r3, r3, #10
 80021e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	621a      	str	r2, [r3, #32]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	f023 0210 	bic.w	r2, r3, #16
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800222e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	031b      	lsls	r3, r3, #12
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002240:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	621a      	str	r2, [r3, #32]
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	f043 0307 	orr.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002296:	b480      	push	{r7}
 8002298:	b087      	sub	sp, #28
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	021a      	lsls	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e046      	b.n	800237a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2202      	movs	r2, #2
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a16      	ldr	r2, [pc, #88]	@ (8002384 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00e      	beq.n	800234e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002338:	d009      	beq.n	800234e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a12      	ldr	r2, [pc, #72]	@ (8002388 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d004      	beq.n	800234e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a10      	ldr	r2, [pc, #64]	@ (800238c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d10c      	bne.n	8002368 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4313      	orrs	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012c00 	.word	0x40012c00
 8002388:	40000400 	.word	0x40000400
 800238c:	40000800 	.word	0x40000800

08002390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e042      	b.n	8002428 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fc6e 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	@ 0x24
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fa09 	bl	80027ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b08a      	sub	sp, #40	@ 0x28
 8002434:	af02      	add	r7, sp, #8
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	603b      	str	r3, [r7, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b20      	cmp	r3, #32
 800244e:	d175      	bne.n	800253c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <HAL_UART_Transmit+0x2c>
 8002456:	88fb      	ldrh	r3, [r7, #6]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e06e      	b.n	800253e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2221      	movs	r2, #33	@ 0x21
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800246e:	f7fe fda9 	bl	8000fc4 <HAL_GetTick>
 8002472:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	88fa      	ldrh	r2, [r7, #6]
 8002478:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	88fa      	ldrh	r2, [r7, #6]
 800247e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002488:	d108      	bne.n	800249c <HAL_UART_Transmit+0x6c>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	e003      	b.n	80024a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80024a4:	e02e      	b.n	8002504 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2200      	movs	r2, #0
 80024ae:	2180      	movs	r1, #128	@ 0x80
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f8df 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e03a      	b.n	800253e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10b      	bne.n	80024e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	3302      	adds	r3, #2
 80024e2:	61bb      	str	r3, [r7, #24]
 80024e4:	e007      	b.n	80024f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	781a      	ldrb	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	3301      	adds	r3, #1
 80024f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1cb      	bne.n	80024a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2200      	movs	r2, #0
 8002516:	2140      	movs	r1, #64	@ 0x40
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 f8ab 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d005      	beq.n	8002530 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e006      	b.n	800253e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002538:	2300      	movs	r3, #0
 800253a:	e000      	b.n	800253e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800253c:	2302      	movs	r3, #2
  }
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b08a      	sub	sp, #40	@ 0x28
 800254a:	af02      	add	r7, sp, #8
 800254c:	60f8      	str	r0, [r7, #12]
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	603b      	str	r3, [r7, #0]
 8002552:	4613      	mov	r3, r2
 8002554:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	f040 8081 	bne.w	800266a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d002      	beq.n	8002574 <HAL_UART_Receive+0x2e>
 800256e:	88fb      	ldrh	r3, [r7, #6]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e079      	b.n	800266c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2222      	movs	r2, #34	@ 0x22
 8002582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800258c:	f7fe fd1a 	bl	8000fc4 <HAL_GetTick>
 8002590:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	88fa      	ldrh	r2, [r7, #6]
 8002596:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	88fa      	ldrh	r2, [r7, #6]
 800259c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025a6:	d108      	bne.n	80025ba <HAL_UART_Receive+0x74>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e003      	b.n	80025c2 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025c2:	e047      	b.n	8002654 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2200      	movs	r2, #0
 80025cc:	2120      	movs	r1, #32
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f850 	bl	8002674 <UART_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e042      	b.n	800266c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d10c      	bne.n	8002606 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	3302      	adds	r3, #2
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	e01f      	b.n	8002646 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800260e:	d007      	beq.n	8002620 <HAL_UART_Receive+0xda>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <HAL_UART_Receive+0xe8>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d106      	bne.n	800262e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	701a      	strb	r2, [r3, #0]
 800262c:	e008      	b.n	8002640 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800263a:	b2da      	uxtb	r2, r3
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	3301      	adds	r3, #1
 8002644:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002658:	b29b      	uxth	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d1b2      	bne.n	80025c4 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	e000      	b.n	800266c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800266a:	2302      	movs	r3, #2
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002684:	e03b      	b.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d037      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7fe fc99 	bl	8000fc4 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	6a3a      	ldr	r2, [r7, #32]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d101      	bne.n	80026a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e03a      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d023      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b80      	cmp	r3, #128	@ 0x80
 80026ba:	d020      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b40      	cmp	r3, #64	@ 0x40
 80026c0:	d01d      	beq.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b08      	cmp	r3, #8
 80026ce:	d116      	bne.n	80026fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	617b      	str	r3, [r7, #20]
 80026e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f81d 	bl	8002726 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2208      	movs	r2, #8
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00f      	b.n	800271e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	4013      	ands	r3, r2
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	bf0c      	ite	eq
 800270e:	2301      	moveq	r3, #1
 8002710:	2300      	movne	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	461a      	mov	r2, r3
 8002716:	79fb      	ldrb	r3, [r7, #7]
 8002718:	429a      	cmp	r2, r3
 800271a:	d0b4      	beq.n	8002686 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002726:	b480      	push	{r7}
 8002728:	b095      	sub	sp, #84	@ 0x54
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	330c      	adds	r3, #12
 8002734:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002738:	e853 3f00 	ldrex	r3, [r3]
 800273c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800273e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002740:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002744:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	330c      	adds	r3, #12
 800274c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800274e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002752:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002754:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002756:	e841 2300 	strex	r3, r2, [r1]
 800275a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800275c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e5      	bne.n	800272e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3314      	adds	r3, #20
 8002768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	e853 3f00 	ldrex	r3, [r3]
 8002770:	61fb      	str	r3, [r7, #28]
   return(result);
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	f023 0301 	bic.w	r3, r3, #1
 8002778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3314      	adds	r3, #20
 8002780:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002782:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002784:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002786:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800278a:	e841 2300 	strex	r3, r2, [r1]
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1e5      	bne.n	8002762 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	2b01      	cmp	r3, #1
 800279c:	d119      	bne.n	80027d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	330c      	adds	r3, #12
 80027a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	e853 3f00 	ldrex	r3, [r3]
 80027ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f023 0310 	bic.w	r3, r3, #16
 80027b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	330c      	adds	r3, #12
 80027bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80027be:	61ba      	str	r2, [r7, #24]
 80027c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c2:	6979      	ldr	r1, [r7, #20]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	613b      	str	r3, [r7, #16]
   return(result);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e5      	bne.n	800279e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027e0:	bf00      	nop
 80027e2:	3754      	adds	r7, #84	@ 0x54
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr
	...

080027ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	430a      	orrs	r2, r1
 8002808:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002826:	f023 030c 	bic.w	r3, r3, #12
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	68b9      	ldr	r1, [r7, #8]
 8002830:	430b      	orrs	r3, r1
 8002832:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699a      	ldr	r2, [r3, #24]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2c      	ldr	r2, [pc, #176]	@ (8002900 <UART_SetConfig+0x114>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d103      	bne.n	800285c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002854:	f7ff faa6 	bl	8001da4 <HAL_RCC_GetPCLK2Freq>
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	e002      	b.n	8002862 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800285c:	f7ff fa8e 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002860:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	4a22      	ldr	r2, [pc, #136]	@ (8002904 <UART_SetConfig+0x118>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	0119      	lsls	r1, r3, #4
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	009a      	lsls	r2, r3, #2
 800288c:	441a      	add	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fbb2 f2f3 	udiv	r2, r2, r3
 8002898:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <UART_SetConfig+0x118>)
 800289a:	fba3 0302 	umull	r0, r3, r3, r2
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2064      	movs	r0, #100	@ 0x64
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	3332      	adds	r3, #50	@ 0x32
 80028ac:	4a15      	ldr	r2, [pc, #84]	@ (8002904 <UART_SetConfig+0x118>)
 80028ae:	fba2 2303 	umull	r2, r3, r2, r3
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028b8:	4419      	add	r1, r3
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	009a      	lsls	r2, r3, #2
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002904 <UART_SetConfig+0x118>)
 80028d2:	fba3 0302 	umull	r0, r3, r3, r2
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	2064      	movs	r0, #100	@ 0x64
 80028da:	fb00 f303 	mul.w	r3, r0, r3
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	3332      	adds	r3, #50	@ 0x32
 80028e4:	4a07      	ldr	r2, [pc, #28]	@ (8002904 <UART_SetConfig+0x118>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	f003 020f 	and.w	r2, r3, #15
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	440a      	add	r2, r1
 80028f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40013800 	.word	0x40013800
 8002904:	51eb851f 	.word	0x51eb851f

08002908 <std>:
 8002908:	2300      	movs	r3, #0
 800290a:	b510      	push	{r4, lr}
 800290c:	4604      	mov	r4, r0
 800290e:	e9c0 3300 	strd	r3, r3, [r0]
 8002912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002916:	6083      	str	r3, [r0, #8]
 8002918:	8181      	strh	r1, [r0, #12]
 800291a:	6643      	str	r3, [r0, #100]	@ 0x64
 800291c:	81c2      	strh	r2, [r0, #14]
 800291e:	6183      	str	r3, [r0, #24]
 8002920:	4619      	mov	r1, r3
 8002922:	2208      	movs	r2, #8
 8002924:	305c      	adds	r0, #92	@ 0x5c
 8002926:	f000 fa1b 	bl	8002d60 <memset>
 800292a:	4b0d      	ldr	r3, [pc, #52]	@ (8002960 <std+0x58>)
 800292c:	6224      	str	r4, [r4, #32]
 800292e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <std+0x5c>)
 8002932:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002934:	4b0c      	ldr	r3, [pc, #48]	@ (8002968 <std+0x60>)
 8002936:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002938:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <std+0x64>)
 800293a:	6323      	str	r3, [r4, #48]	@ 0x30
 800293c:	4b0c      	ldr	r3, [pc, #48]	@ (8002970 <std+0x68>)
 800293e:	429c      	cmp	r4, r3
 8002940:	d006      	beq.n	8002950 <std+0x48>
 8002942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002946:	4294      	cmp	r4, r2
 8002948:	d002      	beq.n	8002950 <std+0x48>
 800294a:	33d0      	adds	r3, #208	@ 0xd0
 800294c:	429c      	cmp	r4, r3
 800294e:	d105      	bne.n	800295c <std+0x54>
 8002950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002958:	f000 ba7a 	b.w	8002e50 <__retarget_lock_init_recursive>
 800295c:	bd10      	pop	{r4, pc}
 800295e:	bf00      	nop
 8002960:	08002bb1 	.word	0x08002bb1
 8002964:	08002bd3 	.word	0x08002bd3
 8002968:	08002c0b 	.word	0x08002c0b
 800296c:	08002c2f 	.word	0x08002c2f
 8002970:	20000238 	.word	0x20000238

08002974 <stdio_exit_handler>:
 8002974:	4a02      	ldr	r2, [pc, #8]	@ (8002980 <stdio_exit_handler+0xc>)
 8002976:	4903      	ldr	r1, [pc, #12]	@ (8002984 <stdio_exit_handler+0x10>)
 8002978:	4803      	ldr	r0, [pc, #12]	@ (8002988 <stdio_exit_handler+0x14>)
 800297a:	f000 b869 	b.w	8002a50 <_fwalk_sglue>
 800297e:	bf00      	nop
 8002980:	20000010 	.word	0x20000010
 8002984:	08003995 	.word	0x08003995
 8002988:	20000020 	.word	0x20000020

0800298c <cleanup_stdio>:
 800298c:	6841      	ldr	r1, [r0, #4]
 800298e:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <cleanup_stdio+0x34>)
 8002990:	b510      	push	{r4, lr}
 8002992:	4299      	cmp	r1, r3
 8002994:	4604      	mov	r4, r0
 8002996:	d001      	beq.n	800299c <cleanup_stdio+0x10>
 8002998:	f000 fffc 	bl	8003994 <_fflush_r>
 800299c:	68a1      	ldr	r1, [r4, #8]
 800299e:	4b09      	ldr	r3, [pc, #36]	@ (80029c4 <cleanup_stdio+0x38>)
 80029a0:	4299      	cmp	r1, r3
 80029a2:	d002      	beq.n	80029aa <cleanup_stdio+0x1e>
 80029a4:	4620      	mov	r0, r4
 80029a6:	f000 fff5 	bl	8003994 <_fflush_r>
 80029aa:	68e1      	ldr	r1, [r4, #12]
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <cleanup_stdio+0x3c>)
 80029ae:	4299      	cmp	r1, r3
 80029b0:	d004      	beq.n	80029bc <cleanup_stdio+0x30>
 80029b2:	4620      	mov	r0, r4
 80029b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029b8:	f000 bfec 	b.w	8003994 <_fflush_r>
 80029bc:	bd10      	pop	{r4, pc}
 80029be:	bf00      	nop
 80029c0:	20000238 	.word	0x20000238
 80029c4:	200002a0 	.word	0x200002a0
 80029c8:	20000308 	.word	0x20000308

080029cc <global_stdio_init.part.0>:
 80029cc:	b510      	push	{r4, lr}
 80029ce:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <global_stdio_init.part.0+0x30>)
 80029d0:	4c0b      	ldr	r4, [pc, #44]	@ (8002a00 <global_stdio_init.part.0+0x34>)
 80029d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <global_stdio_init.part.0+0x38>)
 80029d4:	4620      	mov	r0, r4
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	2104      	movs	r1, #4
 80029da:	2200      	movs	r2, #0
 80029dc:	f7ff ff94 	bl	8002908 <std>
 80029e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80029e4:	2201      	movs	r2, #1
 80029e6:	2109      	movs	r1, #9
 80029e8:	f7ff ff8e 	bl	8002908 <std>
 80029ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80029f0:	2202      	movs	r2, #2
 80029f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029f6:	2112      	movs	r1, #18
 80029f8:	f7ff bf86 	b.w	8002908 <std>
 80029fc:	20000370 	.word	0x20000370
 8002a00:	20000238 	.word	0x20000238
 8002a04:	08002975 	.word	0x08002975

08002a08 <__sfp_lock_acquire>:
 8002a08:	4801      	ldr	r0, [pc, #4]	@ (8002a10 <__sfp_lock_acquire+0x8>)
 8002a0a:	f000 ba22 	b.w	8002e52 <__retarget_lock_acquire_recursive>
 8002a0e:	bf00      	nop
 8002a10:	20000379 	.word	0x20000379

08002a14 <__sfp_lock_release>:
 8002a14:	4801      	ldr	r0, [pc, #4]	@ (8002a1c <__sfp_lock_release+0x8>)
 8002a16:	f000 ba1d 	b.w	8002e54 <__retarget_lock_release_recursive>
 8002a1a:	bf00      	nop
 8002a1c:	20000379 	.word	0x20000379

08002a20 <__sinit>:
 8002a20:	b510      	push	{r4, lr}
 8002a22:	4604      	mov	r4, r0
 8002a24:	f7ff fff0 	bl	8002a08 <__sfp_lock_acquire>
 8002a28:	6a23      	ldr	r3, [r4, #32]
 8002a2a:	b11b      	cbz	r3, 8002a34 <__sinit+0x14>
 8002a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a30:	f7ff bff0 	b.w	8002a14 <__sfp_lock_release>
 8002a34:	4b04      	ldr	r3, [pc, #16]	@ (8002a48 <__sinit+0x28>)
 8002a36:	6223      	str	r3, [r4, #32]
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <__sinit+0x2c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f5      	bne.n	8002a2c <__sinit+0xc>
 8002a40:	f7ff ffc4 	bl	80029cc <global_stdio_init.part.0>
 8002a44:	e7f2      	b.n	8002a2c <__sinit+0xc>
 8002a46:	bf00      	nop
 8002a48:	0800298d 	.word	0x0800298d
 8002a4c:	20000370 	.word	0x20000370

08002a50 <_fwalk_sglue>:
 8002a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a54:	4607      	mov	r7, r0
 8002a56:	4688      	mov	r8, r1
 8002a58:	4614      	mov	r4, r2
 8002a5a:	2600      	movs	r6, #0
 8002a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a60:	f1b9 0901 	subs.w	r9, r9, #1
 8002a64:	d505      	bpl.n	8002a72 <_fwalk_sglue+0x22>
 8002a66:	6824      	ldr	r4, [r4, #0]
 8002a68:	2c00      	cmp	r4, #0
 8002a6a:	d1f7      	bne.n	8002a5c <_fwalk_sglue+0xc>
 8002a6c:	4630      	mov	r0, r6
 8002a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a72:	89ab      	ldrh	r3, [r5, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d907      	bls.n	8002a88 <_fwalk_sglue+0x38>
 8002a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	d003      	beq.n	8002a88 <_fwalk_sglue+0x38>
 8002a80:	4629      	mov	r1, r5
 8002a82:	4638      	mov	r0, r7
 8002a84:	47c0      	blx	r8
 8002a86:	4306      	orrs	r6, r0
 8002a88:	3568      	adds	r5, #104	@ 0x68
 8002a8a:	e7e9      	b.n	8002a60 <_fwalk_sglue+0x10>

08002a8c <iprintf>:
 8002a8c:	b40f      	push	{r0, r1, r2, r3}
 8002a8e:	b507      	push	{r0, r1, r2, lr}
 8002a90:	4906      	ldr	r1, [pc, #24]	@ (8002aac <iprintf+0x20>)
 8002a92:	ab04      	add	r3, sp, #16
 8002a94:	6808      	ldr	r0, [r1, #0]
 8002a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a9a:	6881      	ldr	r1, [r0, #8]
 8002a9c:	9301      	str	r3, [sp, #4]
 8002a9e:	f000 fc51 	bl	8003344 <_vfiprintf_r>
 8002aa2:	b003      	add	sp, #12
 8002aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002aa8:	b004      	add	sp, #16
 8002aaa:	4770      	bx	lr
 8002aac:	2000001c 	.word	0x2000001c

08002ab0 <_puts_r>:
 8002ab0:	6a03      	ldr	r3, [r0, #32]
 8002ab2:	b570      	push	{r4, r5, r6, lr}
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	460e      	mov	r6, r1
 8002ab8:	6884      	ldr	r4, [r0, #8]
 8002aba:	b90b      	cbnz	r3, 8002ac0 <_puts_r+0x10>
 8002abc:	f7ff ffb0 	bl	8002a20 <__sinit>
 8002ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002ac2:	07db      	lsls	r3, r3, #31
 8002ac4:	d405      	bmi.n	8002ad2 <_puts_r+0x22>
 8002ac6:	89a3      	ldrh	r3, [r4, #12]
 8002ac8:	0598      	lsls	r0, r3, #22
 8002aca:	d402      	bmi.n	8002ad2 <_puts_r+0x22>
 8002acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ace:	f000 f9c0 	bl	8002e52 <__retarget_lock_acquire_recursive>
 8002ad2:	89a3      	ldrh	r3, [r4, #12]
 8002ad4:	0719      	lsls	r1, r3, #28
 8002ad6:	d502      	bpl.n	8002ade <_puts_r+0x2e>
 8002ad8:	6923      	ldr	r3, [r4, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d135      	bne.n	8002b4a <_puts_r+0x9a>
 8002ade:	4621      	mov	r1, r4
 8002ae0:	4628      	mov	r0, r5
 8002ae2:	f000 f8e7 	bl	8002cb4 <__swsetup_r>
 8002ae6:	b380      	cbz	r0, 8002b4a <_puts_r+0x9a>
 8002ae8:	f04f 35ff 	mov.w	r5, #4294967295
 8002aec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002aee:	07da      	lsls	r2, r3, #31
 8002af0:	d405      	bmi.n	8002afe <_puts_r+0x4e>
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	059b      	lsls	r3, r3, #22
 8002af6:	d402      	bmi.n	8002afe <_puts_r+0x4e>
 8002af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002afa:	f000 f9ab 	bl	8002e54 <__retarget_lock_release_recursive>
 8002afe:	4628      	mov	r0, r5
 8002b00:	bd70      	pop	{r4, r5, r6, pc}
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da04      	bge.n	8002b10 <_puts_r+0x60>
 8002b06:	69a2      	ldr	r2, [r4, #24]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	dc17      	bgt.n	8002b3c <_puts_r+0x8c>
 8002b0c:	290a      	cmp	r1, #10
 8002b0e:	d015      	beq.n	8002b3c <_puts_r+0x8c>
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	6022      	str	r2, [r4, #0]
 8002b16:	7019      	strb	r1, [r3, #0]
 8002b18:	68a3      	ldr	r3, [r4, #8]
 8002b1a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	60a3      	str	r3, [r4, #8]
 8002b22:	2900      	cmp	r1, #0
 8002b24:	d1ed      	bne.n	8002b02 <_puts_r+0x52>
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da11      	bge.n	8002b4e <_puts_r+0x9e>
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	210a      	movs	r1, #10
 8002b2e:	4628      	mov	r0, r5
 8002b30:	f000 f881 	bl	8002c36 <__swbuf_r>
 8002b34:	3001      	adds	r0, #1
 8002b36:	d0d7      	beq.n	8002ae8 <_puts_r+0x38>
 8002b38:	250a      	movs	r5, #10
 8002b3a:	e7d7      	b.n	8002aec <_puts_r+0x3c>
 8002b3c:	4622      	mov	r2, r4
 8002b3e:	4628      	mov	r0, r5
 8002b40:	f000 f879 	bl	8002c36 <__swbuf_r>
 8002b44:	3001      	adds	r0, #1
 8002b46:	d1e7      	bne.n	8002b18 <_puts_r+0x68>
 8002b48:	e7ce      	b.n	8002ae8 <_puts_r+0x38>
 8002b4a:	3e01      	subs	r6, #1
 8002b4c:	e7e4      	b.n	8002b18 <_puts_r+0x68>
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	220a      	movs	r2, #10
 8002b56:	701a      	strb	r2, [r3, #0]
 8002b58:	e7ee      	b.n	8002b38 <_puts_r+0x88>
	...

08002b5c <puts>:
 8002b5c:	4b02      	ldr	r3, [pc, #8]	@ (8002b68 <puts+0xc>)
 8002b5e:	4601      	mov	r1, r0
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	f7ff bfa5 	b.w	8002ab0 <_puts_r>
 8002b66:	bf00      	nop
 8002b68:	2000001c 	.word	0x2000001c

08002b6c <siprintf>:
 8002b6c:	b40e      	push	{r1, r2, r3}
 8002b6e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b72:	b510      	push	{r4, lr}
 8002b74:	2400      	movs	r4, #0
 8002b76:	b09d      	sub	sp, #116	@ 0x74
 8002b78:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002b7a:	9002      	str	r0, [sp, #8]
 8002b7c:	9006      	str	r0, [sp, #24]
 8002b7e:	9107      	str	r1, [sp, #28]
 8002b80:	9104      	str	r1, [sp, #16]
 8002b82:	4809      	ldr	r0, [pc, #36]	@ (8002ba8 <siprintf+0x3c>)
 8002b84:	4909      	ldr	r1, [pc, #36]	@ (8002bac <siprintf+0x40>)
 8002b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b8a:	9105      	str	r1, [sp, #20]
 8002b8c:	6800      	ldr	r0, [r0, #0]
 8002b8e:	a902      	add	r1, sp, #8
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002b94:	f000 fab2 	bl	80030fc <_svfiprintf_r>
 8002b98:	9b02      	ldr	r3, [sp, #8]
 8002b9a:	701c      	strb	r4, [r3, #0]
 8002b9c:	b01d      	add	sp, #116	@ 0x74
 8002b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ba2:	b003      	add	sp, #12
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	2000001c 	.word	0x2000001c
 8002bac:	ffff0208 	.word	0xffff0208

08002bb0 <__sread>:
 8002bb0:	b510      	push	{r4, lr}
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb8:	f000 f8fc 	bl	8002db4 <_read_r>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	bfab      	itete	ge
 8002bc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8002bc4:	181b      	addge	r3, r3, r0
 8002bc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002bca:	bfac      	ite	ge
 8002bcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002bce:	81a3      	strhlt	r3, [r4, #12]
 8002bd0:	bd10      	pop	{r4, pc}

08002bd2 <__swrite>:
 8002bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd6:	461f      	mov	r7, r3
 8002bd8:	898b      	ldrh	r3, [r1, #12]
 8002bda:	4605      	mov	r5, r0
 8002bdc:	05db      	lsls	r3, r3, #23
 8002bde:	460c      	mov	r4, r1
 8002be0:	4616      	mov	r6, r2
 8002be2:	d505      	bpl.n	8002bf0 <__swrite+0x1e>
 8002be4:	2302      	movs	r3, #2
 8002be6:	2200      	movs	r2, #0
 8002be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bec:	f000 f8d0 	bl	8002d90 <_lseek_r>
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bf8:	81a3      	strh	r3, [r4, #12]
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	463b      	mov	r3, r7
 8002bfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c06:	f000 b8e7 	b.w	8002dd8 <_write_r>

08002c0a <__sseek>:
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c12:	f000 f8bd 	bl	8002d90 <_lseek_r>
 8002c16:	1c43      	adds	r3, r0, #1
 8002c18:	89a3      	ldrh	r3, [r4, #12]
 8002c1a:	bf15      	itete	ne
 8002c1c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002c1e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002c22:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002c26:	81a3      	strheq	r3, [r4, #12]
 8002c28:	bf18      	it	ne
 8002c2a:	81a3      	strhne	r3, [r4, #12]
 8002c2c:	bd10      	pop	{r4, pc}

08002c2e <__sclose>:
 8002c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c32:	f000 b89d 	b.w	8002d70 <_close_r>

08002c36 <__swbuf_r>:
 8002c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c38:	460e      	mov	r6, r1
 8002c3a:	4614      	mov	r4, r2
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	b118      	cbz	r0, 8002c48 <__swbuf_r+0x12>
 8002c40:	6a03      	ldr	r3, [r0, #32]
 8002c42:	b90b      	cbnz	r3, 8002c48 <__swbuf_r+0x12>
 8002c44:	f7ff feec 	bl	8002a20 <__sinit>
 8002c48:	69a3      	ldr	r3, [r4, #24]
 8002c4a:	60a3      	str	r3, [r4, #8]
 8002c4c:	89a3      	ldrh	r3, [r4, #12]
 8002c4e:	071a      	lsls	r2, r3, #28
 8002c50:	d501      	bpl.n	8002c56 <__swbuf_r+0x20>
 8002c52:	6923      	ldr	r3, [r4, #16]
 8002c54:	b943      	cbnz	r3, 8002c68 <__swbuf_r+0x32>
 8002c56:	4621      	mov	r1, r4
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 f82b 	bl	8002cb4 <__swsetup_r>
 8002c5e:	b118      	cbz	r0, 8002c68 <__swbuf_r+0x32>
 8002c60:	f04f 37ff 	mov.w	r7, #4294967295
 8002c64:	4638      	mov	r0, r7
 8002c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	6922      	ldr	r2, [r4, #16]
 8002c6c:	b2f6      	uxtb	r6, r6
 8002c6e:	1a98      	subs	r0, r3, r2
 8002c70:	6963      	ldr	r3, [r4, #20]
 8002c72:	4637      	mov	r7, r6
 8002c74:	4283      	cmp	r3, r0
 8002c76:	dc05      	bgt.n	8002c84 <__swbuf_r+0x4e>
 8002c78:	4621      	mov	r1, r4
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f000 fe8a 	bl	8003994 <_fflush_r>
 8002c80:	2800      	cmp	r0, #0
 8002c82:	d1ed      	bne.n	8002c60 <__swbuf_r+0x2a>
 8002c84:	68a3      	ldr	r3, [r4, #8]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	60a3      	str	r3, [r4, #8]
 8002c8a:	6823      	ldr	r3, [r4, #0]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	6022      	str	r2, [r4, #0]
 8002c90:	701e      	strb	r6, [r3, #0]
 8002c92:	6962      	ldr	r2, [r4, #20]
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d004      	beq.n	8002ca4 <__swbuf_r+0x6e>
 8002c9a:	89a3      	ldrh	r3, [r4, #12]
 8002c9c:	07db      	lsls	r3, r3, #31
 8002c9e:	d5e1      	bpl.n	8002c64 <__swbuf_r+0x2e>
 8002ca0:	2e0a      	cmp	r6, #10
 8002ca2:	d1df      	bne.n	8002c64 <__swbuf_r+0x2e>
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 fe74 	bl	8003994 <_fflush_r>
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d0d9      	beq.n	8002c64 <__swbuf_r+0x2e>
 8002cb0:	e7d6      	b.n	8002c60 <__swbuf_r+0x2a>
	...

08002cb4 <__swsetup_r>:
 8002cb4:	b538      	push	{r3, r4, r5, lr}
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <__swsetup_r+0xa8>)
 8002cb8:	4605      	mov	r5, r0
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	460c      	mov	r4, r1
 8002cbe:	b118      	cbz	r0, 8002cc8 <__swsetup_r+0x14>
 8002cc0:	6a03      	ldr	r3, [r0, #32]
 8002cc2:	b90b      	cbnz	r3, 8002cc8 <__swsetup_r+0x14>
 8002cc4:	f7ff feac 	bl	8002a20 <__sinit>
 8002cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ccc:	0719      	lsls	r1, r3, #28
 8002cce:	d422      	bmi.n	8002d16 <__swsetup_r+0x62>
 8002cd0:	06da      	lsls	r2, r3, #27
 8002cd2:	d407      	bmi.n	8002ce4 <__swsetup_r+0x30>
 8002cd4:	2209      	movs	r2, #9
 8002cd6:	602a      	str	r2, [r5, #0]
 8002cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce0:	81a3      	strh	r3, [r4, #12]
 8002ce2:	e033      	b.n	8002d4c <__swsetup_r+0x98>
 8002ce4:	0758      	lsls	r0, r3, #29
 8002ce6:	d512      	bpl.n	8002d0e <__swsetup_r+0x5a>
 8002ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002cea:	b141      	cbz	r1, 8002cfe <__swsetup_r+0x4a>
 8002cec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cf0:	4299      	cmp	r1, r3
 8002cf2:	d002      	beq.n	8002cfa <__swsetup_r+0x46>
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	f000 f8af 	bl	8002e58 <_free_r>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cfe:	89a3      	ldrh	r3, [r4, #12]
 8002d00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002d04:	81a3      	strh	r3, [r4, #12]
 8002d06:	2300      	movs	r3, #0
 8002d08:	6063      	str	r3, [r4, #4]
 8002d0a:	6923      	ldr	r3, [r4, #16]
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	89a3      	ldrh	r3, [r4, #12]
 8002d10:	f043 0308 	orr.w	r3, r3, #8
 8002d14:	81a3      	strh	r3, [r4, #12]
 8002d16:	6923      	ldr	r3, [r4, #16]
 8002d18:	b94b      	cbnz	r3, 8002d2e <__swsetup_r+0x7a>
 8002d1a:	89a3      	ldrh	r3, [r4, #12]
 8002d1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002d20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d24:	d003      	beq.n	8002d2e <__swsetup_r+0x7a>
 8002d26:	4621      	mov	r1, r4
 8002d28:	4628      	mov	r0, r5
 8002d2a:	f000 fe80 	bl	8003a2e <__smakebuf_r>
 8002d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d32:	f013 0201 	ands.w	r2, r3, #1
 8002d36:	d00a      	beq.n	8002d4e <__swsetup_r+0x9a>
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60a2      	str	r2, [r4, #8]
 8002d3c:	6962      	ldr	r2, [r4, #20]
 8002d3e:	4252      	negs	r2, r2
 8002d40:	61a2      	str	r2, [r4, #24]
 8002d42:	6922      	ldr	r2, [r4, #16]
 8002d44:	b942      	cbnz	r2, 8002d58 <__swsetup_r+0xa4>
 8002d46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002d4a:	d1c5      	bne.n	8002cd8 <__swsetup_r+0x24>
 8002d4c:	bd38      	pop	{r3, r4, r5, pc}
 8002d4e:	0799      	lsls	r1, r3, #30
 8002d50:	bf58      	it	pl
 8002d52:	6962      	ldrpl	r2, [r4, #20]
 8002d54:	60a2      	str	r2, [r4, #8]
 8002d56:	e7f4      	b.n	8002d42 <__swsetup_r+0x8e>
 8002d58:	2000      	movs	r0, #0
 8002d5a:	e7f7      	b.n	8002d4c <__swsetup_r+0x98>
 8002d5c:	2000001c 	.word	0x2000001c

08002d60 <memset>:
 8002d60:	4603      	mov	r3, r0
 8002d62:	4402      	add	r2, r0
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d100      	bne.n	8002d6a <memset+0xa>
 8002d68:	4770      	bx	lr
 8002d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d6e:	e7f9      	b.n	8002d64 <memset+0x4>

08002d70 <_close_r>:
 8002d70:	b538      	push	{r3, r4, r5, lr}
 8002d72:	2300      	movs	r3, #0
 8002d74:	4d05      	ldr	r5, [pc, #20]	@ (8002d8c <_close_r+0x1c>)
 8002d76:	4604      	mov	r4, r0
 8002d78:	4608      	mov	r0, r1
 8002d7a:	602b      	str	r3, [r5, #0]
 8002d7c:	f7fe f837 	bl	8000dee <_close>
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	d102      	bne.n	8002d8a <_close_r+0x1a>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	b103      	cbz	r3, 8002d8a <_close_r+0x1a>
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000374 	.word	0x20000374

08002d90 <_lseek_r>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	4604      	mov	r4, r0
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4d05      	ldr	r5, [pc, #20]	@ (8002db0 <_lseek_r+0x20>)
 8002d9c:	602a      	str	r2, [r5, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	f7fe f849 	bl	8000e36 <_lseek>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d102      	bne.n	8002dae <_lseek_r+0x1e>
 8002da8:	682b      	ldr	r3, [r5, #0]
 8002daa:	b103      	cbz	r3, 8002dae <_lseek_r+0x1e>
 8002dac:	6023      	str	r3, [r4, #0]
 8002dae:	bd38      	pop	{r3, r4, r5, pc}
 8002db0:	20000374 	.word	0x20000374

08002db4 <_read_r>:
 8002db4:	b538      	push	{r3, r4, r5, lr}
 8002db6:	4604      	mov	r4, r0
 8002db8:	4608      	mov	r0, r1
 8002dba:	4611      	mov	r1, r2
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	4d05      	ldr	r5, [pc, #20]	@ (8002dd4 <_read_r+0x20>)
 8002dc0:	602a      	str	r2, [r5, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f7fd ffda 	bl	8000d7c <_read>
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	d102      	bne.n	8002dd2 <_read_r+0x1e>
 8002dcc:	682b      	ldr	r3, [r5, #0]
 8002dce:	b103      	cbz	r3, 8002dd2 <_read_r+0x1e>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd38      	pop	{r3, r4, r5, pc}
 8002dd4:	20000374 	.word	0x20000374

08002dd8 <_write_r>:
 8002dd8:	b538      	push	{r3, r4, r5, lr}
 8002dda:	4604      	mov	r4, r0
 8002ddc:	4608      	mov	r0, r1
 8002dde:	4611      	mov	r1, r2
 8002de0:	2200      	movs	r2, #0
 8002de2:	4d05      	ldr	r5, [pc, #20]	@ (8002df8 <_write_r+0x20>)
 8002de4:	602a      	str	r2, [r5, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	f7fd ffe5 	bl	8000db6 <_write>
 8002dec:	1c43      	adds	r3, r0, #1
 8002dee:	d102      	bne.n	8002df6 <_write_r+0x1e>
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	b103      	cbz	r3, 8002df6 <_write_r+0x1e>
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	bd38      	pop	{r3, r4, r5, pc}
 8002df8:	20000374 	.word	0x20000374

08002dfc <__errno>:
 8002dfc:	4b01      	ldr	r3, [pc, #4]	@ (8002e04 <__errno+0x8>)
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000001c 	.word	0x2000001c

08002e08 <__libc_init_array>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2600      	movs	r6, #0
 8002e0c:	4d0c      	ldr	r5, [pc, #48]	@ (8002e40 <__libc_init_array+0x38>)
 8002e0e:	4c0d      	ldr	r4, [pc, #52]	@ (8002e44 <__libc_init_array+0x3c>)
 8002e10:	1b64      	subs	r4, r4, r5
 8002e12:	10a4      	asrs	r4, r4, #2
 8002e14:	42a6      	cmp	r6, r4
 8002e16:	d109      	bne.n	8002e2c <__libc_init_array+0x24>
 8002e18:	f000 fee4 	bl	8003be4 <_init>
 8002e1c:	2600      	movs	r6, #0
 8002e1e:	4d0a      	ldr	r5, [pc, #40]	@ (8002e48 <__libc_init_array+0x40>)
 8002e20:	4c0a      	ldr	r4, [pc, #40]	@ (8002e4c <__libc_init_array+0x44>)
 8002e22:	1b64      	subs	r4, r4, r5
 8002e24:	10a4      	asrs	r4, r4, #2
 8002e26:	42a6      	cmp	r6, r4
 8002e28:	d105      	bne.n	8002e36 <__libc_init_array+0x2e>
 8002e2a:	bd70      	pop	{r4, r5, r6, pc}
 8002e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e30:	4798      	blx	r3
 8002e32:	3601      	adds	r6, #1
 8002e34:	e7ee      	b.n	8002e14 <__libc_init_array+0xc>
 8002e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e3a:	4798      	blx	r3
 8002e3c:	3601      	adds	r6, #1
 8002e3e:	e7f2      	b.n	8002e26 <__libc_init_array+0x1e>
 8002e40:	08003d34 	.word	0x08003d34
 8002e44:	08003d34 	.word	0x08003d34
 8002e48:	08003d34 	.word	0x08003d34
 8002e4c:	08003d38 	.word	0x08003d38

08002e50 <__retarget_lock_init_recursive>:
 8002e50:	4770      	bx	lr

08002e52 <__retarget_lock_acquire_recursive>:
 8002e52:	4770      	bx	lr

08002e54 <__retarget_lock_release_recursive>:
 8002e54:	4770      	bx	lr
	...

08002e58 <_free_r>:
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4605      	mov	r5, r0
 8002e5c:	2900      	cmp	r1, #0
 8002e5e:	d040      	beq.n	8002ee2 <_free_r+0x8a>
 8002e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e64:	1f0c      	subs	r4, r1, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bfb8      	it	lt
 8002e6a:	18e4      	addlt	r4, r4, r3
 8002e6c:	f000 f8de 	bl	800302c <__malloc_lock>
 8002e70:	4a1c      	ldr	r2, [pc, #112]	@ (8002ee4 <_free_r+0x8c>)
 8002e72:	6813      	ldr	r3, [r2, #0]
 8002e74:	b933      	cbnz	r3, 8002e84 <_free_r+0x2c>
 8002e76:	6063      	str	r3, [r4, #4]
 8002e78:	6014      	str	r4, [r2, #0]
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e80:	f000 b8da 	b.w	8003038 <__malloc_unlock>
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	d908      	bls.n	8002e9a <_free_r+0x42>
 8002e88:	6820      	ldr	r0, [r4, #0]
 8002e8a:	1821      	adds	r1, r4, r0
 8002e8c:	428b      	cmp	r3, r1
 8002e8e:	bf01      	itttt	eq
 8002e90:	6819      	ldreq	r1, [r3, #0]
 8002e92:	685b      	ldreq	r3, [r3, #4]
 8002e94:	1809      	addeq	r1, r1, r0
 8002e96:	6021      	streq	r1, [r4, #0]
 8002e98:	e7ed      	b.n	8002e76 <_free_r+0x1e>
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	b10b      	cbz	r3, 8002ea4 <_free_r+0x4c>
 8002ea0:	42a3      	cmp	r3, r4
 8002ea2:	d9fa      	bls.n	8002e9a <_free_r+0x42>
 8002ea4:	6811      	ldr	r1, [r2, #0]
 8002ea6:	1850      	adds	r0, r2, r1
 8002ea8:	42a0      	cmp	r0, r4
 8002eaa:	d10b      	bne.n	8002ec4 <_free_r+0x6c>
 8002eac:	6820      	ldr	r0, [r4, #0]
 8002eae:	4401      	add	r1, r0
 8002eb0:	1850      	adds	r0, r2, r1
 8002eb2:	4283      	cmp	r3, r0
 8002eb4:	6011      	str	r1, [r2, #0]
 8002eb6:	d1e0      	bne.n	8002e7a <_free_r+0x22>
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4408      	add	r0, r1
 8002ebe:	6010      	str	r0, [r2, #0]
 8002ec0:	6053      	str	r3, [r2, #4]
 8002ec2:	e7da      	b.n	8002e7a <_free_r+0x22>
 8002ec4:	d902      	bls.n	8002ecc <_free_r+0x74>
 8002ec6:	230c      	movs	r3, #12
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	e7d6      	b.n	8002e7a <_free_r+0x22>
 8002ecc:	6820      	ldr	r0, [r4, #0]
 8002ece:	1821      	adds	r1, r4, r0
 8002ed0:	428b      	cmp	r3, r1
 8002ed2:	bf01      	itttt	eq
 8002ed4:	6819      	ldreq	r1, [r3, #0]
 8002ed6:	685b      	ldreq	r3, [r3, #4]
 8002ed8:	1809      	addeq	r1, r1, r0
 8002eda:	6021      	streq	r1, [r4, #0]
 8002edc:	6063      	str	r3, [r4, #4]
 8002ede:	6054      	str	r4, [r2, #4]
 8002ee0:	e7cb      	b.n	8002e7a <_free_r+0x22>
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	20000380 	.word	0x20000380

08002ee8 <sbrk_aligned>:
 8002ee8:	b570      	push	{r4, r5, r6, lr}
 8002eea:	4e0f      	ldr	r6, [pc, #60]	@ (8002f28 <sbrk_aligned+0x40>)
 8002eec:	460c      	mov	r4, r1
 8002eee:	6831      	ldr	r1, [r6, #0]
 8002ef0:	4605      	mov	r5, r0
 8002ef2:	b911      	cbnz	r1, 8002efa <sbrk_aligned+0x12>
 8002ef4:	f000 fe14 	bl	8003b20 <_sbrk_r>
 8002ef8:	6030      	str	r0, [r6, #0]
 8002efa:	4621      	mov	r1, r4
 8002efc:	4628      	mov	r0, r5
 8002efe:	f000 fe0f 	bl	8003b20 <_sbrk_r>
 8002f02:	1c43      	adds	r3, r0, #1
 8002f04:	d103      	bne.n	8002f0e <sbrk_aligned+0x26>
 8002f06:	f04f 34ff 	mov.w	r4, #4294967295
 8002f0a:	4620      	mov	r0, r4
 8002f0c:	bd70      	pop	{r4, r5, r6, pc}
 8002f0e:	1cc4      	adds	r4, r0, #3
 8002f10:	f024 0403 	bic.w	r4, r4, #3
 8002f14:	42a0      	cmp	r0, r4
 8002f16:	d0f8      	beq.n	8002f0a <sbrk_aligned+0x22>
 8002f18:	1a21      	subs	r1, r4, r0
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	f000 fe00 	bl	8003b20 <_sbrk_r>
 8002f20:	3001      	adds	r0, #1
 8002f22:	d1f2      	bne.n	8002f0a <sbrk_aligned+0x22>
 8002f24:	e7ef      	b.n	8002f06 <sbrk_aligned+0x1e>
 8002f26:	bf00      	nop
 8002f28:	2000037c 	.word	0x2000037c

08002f2c <_malloc_r>:
 8002f2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f30:	1ccd      	adds	r5, r1, #3
 8002f32:	f025 0503 	bic.w	r5, r5, #3
 8002f36:	3508      	adds	r5, #8
 8002f38:	2d0c      	cmp	r5, #12
 8002f3a:	bf38      	it	cc
 8002f3c:	250c      	movcc	r5, #12
 8002f3e:	2d00      	cmp	r5, #0
 8002f40:	4606      	mov	r6, r0
 8002f42:	db01      	blt.n	8002f48 <_malloc_r+0x1c>
 8002f44:	42a9      	cmp	r1, r5
 8002f46:	d904      	bls.n	8002f52 <_malloc_r+0x26>
 8002f48:	230c      	movs	r3, #12
 8002f4a:	6033      	str	r3, [r6, #0]
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f52:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003028 <_malloc_r+0xfc>
 8002f56:	f000 f869 	bl	800302c <__malloc_lock>
 8002f5a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f5e:	461c      	mov	r4, r3
 8002f60:	bb44      	cbnz	r4, 8002fb4 <_malloc_r+0x88>
 8002f62:	4629      	mov	r1, r5
 8002f64:	4630      	mov	r0, r6
 8002f66:	f7ff ffbf 	bl	8002ee8 <sbrk_aligned>
 8002f6a:	1c43      	adds	r3, r0, #1
 8002f6c:	4604      	mov	r4, r0
 8002f6e:	d158      	bne.n	8003022 <_malloc_r+0xf6>
 8002f70:	f8d8 4000 	ldr.w	r4, [r8]
 8002f74:	4627      	mov	r7, r4
 8002f76:	2f00      	cmp	r7, #0
 8002f78:	d143      	bne.n	8003002 <_malloc_r+0xd6>
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	d04b      	beq.n	8003016 <_malloc_r+0xea>
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	4639      	mov	r1, r7
 8002f82:	4630      	mov	r0, r6
 8002f84:	eb04 0903 	add.w	r9, r4, r3
 8002f88:	f000 fdca 	bl	8003b20 <_sbrk_r>
 8002f8c:	4581      	cmp	r9, r0
 8002f8e:	d142      	bne.n	8003016 <_malloc_r+0xea>
 8002f90:	6821      	ldr	r1, [r4, #0]
 8002f92:	4630      	mov	r0, r6
 8002f94:	1a6d      	subs	r5, r5, r1
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7ff ffa6 	bl	8002ee8 <sbrk_aligned>
 8002f9c:	3001      	adds	r0, #1
 8002f9e:	d03a      	beq.n	8003016 <_malloc_r+0xea>
 8002fa0:	6823      	ldr	r3, [r4, #0]
 8002fa2:	442b      	add	r3, r5
 8002fa4:	6023      	str	r3, [r4, #0]
 8002fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	bb62      	cbnz	r2, 8003008 <_malloc_r+0xdc>
 8002fae:	f8c8 7000 	str.w	r7, [r8]
 8002fb2:	e00f      	b.n	8002fd4 <_malloc_r+0xa8>
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	1b52      	subs	r2, r2, r5
 8002fb8:	d420      	bmi.n	8002ffc <_malloc_r+0xd0>
 8002fba:	2a0b      	cmp	r2, #11
 8002fbc:	d917      	bls.n	8002fee <_malloc_r+0xc2>
 8002fbe:	1961      	adds	r1, r4, r5
 8002fc0:	42a3      	cmp	r3, r4
 8002fc2:	6025      	str	r5, [r4, #0]
 8002fc4:	bf18      	it	ne
 8002fc6:	6059      	strne	r1, [r3, #4]
 8002fc8:	6863      	ldr	r3, [r4, #4]
 8002fca:	bf08      	it	eq
 8002fcc:	f8c8 1000 	streq.w	r1, [r8]
 8002fd0:	5162      	str	r2, [r4, r5]
 8002fd2:	604b      	str	r3, [r1, #4]
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f000 f82f 	bl	8003038 <__malloc_unlock>
 8002fda:	f104 000b 	add.w	r0, r4, #11
 8002fde:	1d23      	adds	r3, r4, #4
 8002fe0:	f020 0007 	bic.w	r0, r0, #7
 8002fe4:	1ac2      	subs	r2, r0, r3
 8002fe6:	bf1c      	itt	ne
 8002fe8:	1a1b      	subne	r3, r3, r0
 8002fea:	50a3      	strne	r3, [r4, r2]
 8002fec:	e7af      	b.n	8002f4e <_malloc_r+0x22>
 8002fee:	6862      	ldr	r2, [r4, #4]
 8002ff0:	42a3      	cmp	r3, r4
 8002ff2:	bf0c      	ite	eq
 8002ff4:	f8c8 2000 	streq.w	r2, [r8]
 8002ff8:	605a      	strne	r2, [r3, #4]
 8002ffa:	e7eb      	b.n	8002fd4 <_malloc_r+0xa8>
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	6864      	ldr	r4, [r4, #4]
 8003000:	e7ae      	b.n	8002f60 <_malloc_r+0x34>
 8003002:	463c      	mov	r4, r7
 8003004:	687f      	ldr	r7, [r7, #4]
 8003006:	e7b6      	b.n	8002f76 <_malloc_r+0x4a>
 8003008:	461a      	mov	r2, r3
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	42a3      	cmp	r3, r4
 800300e:	d1fb      	bne.n	8003008 <_malloc_r+0xdc>
 8003010:	2300      	movs	r3, #0
 8003012:	6053      	str	r3, [r2, #4]
 8003014:	e7de      	b.n	8002fd4 <_malloc_r+0xa8>
 8003016:	230c      	movs	r3, #12
 8003018:	4630      	mov	r0, r6
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	f000 f80c 	bl	8003038 <__malloc_unlock>
 8003020:	e794      	b.n	8002f4c <_malloc_r+0x20>
 8003022:	6005      	str	r5, [r0, #0]
 8003024:	e7d6      	b.n	8002fd4 <_malloc_r+0xa8>
 8003026:	bf00      	nop
 8003028:	20000380 	.word	0x20000380

0800302c <__malloc_lock>:
 800302c:	4801      	ldr	r0, [pc, #4]	@ (8003034 <__malloc_lock+0x8>)
 800302e:	f7ff bf10 	b.w	8002e52 <__retarget_lock_acquire_recursive>
 8003032:	bf00      	nop
 8003034:	20000378 	.word	0x20000378

08003038 <__malloc_unlock>:
 8003038:	4801      	ldr	r0, [pc, #4]	@ (8003040 <__malloc_unlock+0x8>)
 800303a:	f7ff bf0b 	b.w	8002e54 <__retarget_lock_release_recursive>
 800303e:	bf00      	nop
 8003040:	20000378 	.word	0x20000378

08003044 <__ssputs_r>:
 8003044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003048:	461f      	mov	r7, r3
 800304a:	688e      	ldr	r6, [r1, #8]
 800304c:	4682      	mov	sl, r0
 800304e:	42be      	cmp	r6, r7
 8003050:	460c      	mov	r4, r1
 8003052:	4690      	mov	r8, r2
 8003054:	680b      	ldr	r3, [r1, #0]
 8003056:	d82d      	bhi.n	80030b4 <__ssputs_r+0x70>
 8003058:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800305c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003060:	d026      	beq.n	80030b0 <__ssputs_r+0x6c>
 8003062:	6965      	ldr	r5, [r4, #20]
 8003064:	6909      	ldr	r1, [r1, #16]
 8003066:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800306a:	eba3 0901 	sub.w	r9, r3, r1
 800306e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003072:	1c7b      	adds	r3, r7, #1
 8003074:	444b      	add	r3, r9
 8003076:	106d      	asrs	r5, r5, #1
 8003078:	429d      	cmp	r5, r3
 800307a:	bf38      	it	cc
 800307c:	461d      	movcc	r5, r3
 800307e:	0553      	lsls	r3, r2, #21
 8003080:	d527      	bpl.n	80030d2 <__ssputs_r+0x8e>
 8003082:	4629      	mov	r1, r5
 8003084:	f7ff ff52 	bl	8002f2c <_malloc_r>
 8003088:	4606      	mov	r6, r0
 800308a:	b360      	cbz	r0, 80030e6 <__ssputs_r+0xa2>
 800308c:	464a      	mov	r2, r9
 800308e:	6921      	ldr	r1, [r4, #16]
 8003090:	f000 fd64 	bl	8003b5c <memcpy>
 8003094:	89a3      	ldrh	r3, [r4, #12]
 8003096:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800309a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800309e:	81a3      	strh	r3, [r4, #12]
 80030a0:	6126      	str	r6, [r4, #16]
 80030a2:	444e      	add	r6, r9
 80030a4:	6026      	str	r6, [r4, #0]
 80030a6:	463e      	mov	r6, r7
 80030a8:	6165      	str	r5, [r4, #20]
 80030aa:	eba5 0509 	sub.w	r5, r5, r9
 80030ae:	60a5      	str	r5, [r4, #8]
 80030b0:	42be      	cmp	r6, r7
 80030b2:	d900      	bls.n	80030b6 <__ssputs_r+0x72>
 80030b4:	463e      	mov	r6, r7
 80030b6:	4632      	mov	r2, r6
 80030b8:	4641      	mov	r1, r8
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	f000 fcf3 	bl	8003aa6 <memmove>
 80030c0:	2000      	movs	r0, #0
 80030c2:	68a3      	ldr	r3, [r4, #8]
 80030c4:	1b9b      	subs	r3, r3, r6
 80030c6:	60a3      	str	r3, [r4, #8]
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	4433      	add	r3, r6
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030d2:	462a      	mov	r2, r5
 80030d4:	f000 fd50 	bl	8003b78 <_realloc_r>
 80030d8:	4606      	mov	r6, r0
 80030da:	2800      	cmp	r0, #0
 80030dc:	d1e0      	bne.n	80030a0 <__ssputs_r+0x5c>
 80030de:	4650      	mov	r0, sl
 80030e0:	6921      	ldr	r1, [r4, #16]
 80030e2:	f7ff feb9 	bl	8002e58 <_free_r>
 80030e6:	230c      	movs	r3, #12
 80030e8:	f8ca 3000 	str.w	r3, [sl]
 80030ec:	89a3      	ldrh	r3, [r4, #12]
 80030ee:	f04f 30ff 	mov.w	r0, #4294967295
 80030f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030f6:	81a3      	strh	r3, [r4, #12]
 80030f8:	e7e9      	b.n	80030ce <__ssputs_r+0x8a>
	...

080030fc <_svfiprintf_r>:
 80030fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003100:	4698      	mov	r8, r3
 8003102:	898b      	ldrh	r3, [r1, #12]
 8003104:	4607      	mov	r7, r0
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	460d      	mov	r5, r1
 800310a:	4614      	mov	r4, r2
 800310c:	b09d      	sub	sp, #116	@ 0x74
 800310e:	d510      	bpl.n	8003132 <_svfiprintf_r+0x36>
 8003110:	690b      	ldr	r3, [r1, #16]
 8003112:	b973      	cbnz	r3, 8003132 <_svfiprintf_r+0x36>
 8003114:	2140      	movs	r1, #64	@ 0x40
 8003116:	f7ff ff09 	bl	8002f2c <_malloc_r>
 800311a:	6028      	str	r0, [r5, #0]
 800311c:	6128      	str	r0, [r5, #16]
 800311e:	b930      	cbnz	r0, 800312e <_svfiprintf_r+0x32>
 8003120:	230c      	movs	r3, #12
 8003122:	603b      	str	r3, [r7, #0]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	b01d      	add	sp, #116	@ 0x74
 800312a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800312e:	2340      	movs	r3, #64	@ 0x40
 8003130:	616b      	str	r3, [r5, #20]
 8003132:	2300      	movs	r3, #0
 8003134:	9309      	str	r3, [sp, #36]	@ 0x24
 8003136:	2320      	movs	r3, #32
 8003138:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800313c:	2330      	movs	r3, #48	@ 0x30
 800313e:	f04f 0901 	mov.w	r9, #1
 8003142:	f8cd 800c 	str.w	r8, [sp, #12]
 8003146:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80032e0 <_svfiprintf_r+0x1e4>
 800314a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800314e:	4623      	mov	r3, r4
 8003150:	469a      	mov	sl, r3
 8003152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003156:	b10a      	cbz	r2, 800315c <_svfiprintf_r+0x60>
 8003158:	2a25      	cmp	r2, #37	@ 0x25
 800315a:	d1f9      	bne.n	8003150 <_svfiprintf_r+0x54>
 800315c:	ebba 0b04 	subs.w	fp, sl, r4
 8003160:	d00b      	beq.n	800317a <_svfiprintf_r+0x7e>
 8003162:	465b      	mov	r3, fp
 8003164:	4622      	mov	r2, r4
 8003166:	4629      	mov	r1, r5
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff ff6b 	bl	8003044 <__ssputs_r>
 800316e:	3001      	adds	r0, #1
 8003170:	f000 80a7 	beq.w	80032c2 <_svfiprintf_r+0x1c6>
 8003174:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003176:	445a      	add	r2, fp
 8003178:	9209      	str	r2, [sp, #36]	@ 0x24
 800317a:	f89a 3000 	ldrb.w	r3, [sl]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 809f 	beq.w	80032c2 <_svfiprintf_r+0x1c6>
 8003184:	2300      	movs	r3, #0
 8003186:	f04f 32ff 	mov.w	r2, #4294967295
 800318a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800318e:	f10a 0a01 	add.w	sl, sl, #1
 8003192:	9304      	str	r3, [sp, #16]
 8003194:	9307      	str	r3, [sp, #28]
 8003196:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800319a:	931a      	str	r3, [sp, #104]	@ 0x68
 800319c:	4654      	mov	r4, sl
 800319e:	2205      	movs	r2, #5
 80031a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031a4:	484e      	ldr	r0, [pc, #312]	@ (80032e0 <_svfiprintf_r+0x1e4>)
 80031a6:	f000 fccb 	bl	8003b40 <memchr>
 80031aa:	9a04      	ldr	r2, [sp, #16]
 80031ac:	b9d8      	cbnz	r0, 80031e6 <_svfiprintf_r+0xea>
 80031ae:	06d0      	lsls	r0, r2, #27
 80031b0:	bf44      	itt	mi
 80031b2:	2320      	movmi	r3, #32
 80031b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031b8:	0711      	lsls	r1, r2, #28
 80031ba:	bf44      	itt	mi
 80031bc:	232b      	movmi	r3, #43	@ 0x2b
 80031be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031c2:	f89a 3000 	ldrb.w	r3, [sl]
 80031c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80031c8:	d015      	beq.n	80031f6 <_svfiprintf_r+0xfa>
 80031ca:	4654      	mov	r4, sl
 80031cc:	2000      	movs	r0, #0
 80031ce:	f04f 0c0a 	mov.w	ip, #10
 80031d2:	9a07      	ldr	r2, [sp, #28]
 80031d4:	4621      	mov	r1, r4
 80031d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031da:	3b30      	subs	r3, #48	@ 0x30
 80031dc:	2b09      	cmp	r3, #9
 80031de:	d94b      	bls.n	8003278 <_svfiprintf_r+0x17c>
 80031e0:	b1b0      	cbz	r0, 8003210 <_svfiprintf_r+0x114>
 80031e2:	9207      	str	r2, [sp, #28]
 80031e4:	e014      	b.n	8003210 <_svfiprintf_r+0x114>
 80031e6:	eba0 0308 	sub.w	r3, r0, r8
 80031ea:	fa09 f303 	lsl.w	r3, r9, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	46a2      	mov	sl, r4
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	e7d2      	b.n	800319c <_svfiprintf_r+0xa0>
 80031f6:	9b03      	ldr	r3, [sp, #12]
 80031f8:	1d19      	adds	r1, r3, #4
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	9103      	str	r1, [sp, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	bfbb      	ittet	lt
 8003202:	425b      	neglt	r3, r3
 8003204:	f042 0202 	orrlt.w	r2, r2, #2
 8003208:	9307      	strge	r3, [sp, #28]
 800320a:	9307      	strlt	r3, [sp, #28]
 800320c:	bfb8      	it	lt
 800320e:	9204      	strlt	r2, [sp, #16]
 8003210:	7823      	ldrb	r3, [r4, #0]
 8003212:	2b2e      	cmp	r3, #46	@ 0x2e
 8003214:	d10a      	bne.n	800322c <_svfiprintf_r+0x130>
 8003216:	7863      	ldrb	r3, [r4, #1]
 8003218:	2b2a      	cmp	r3, #42	@ 0x2a
 800321a:	d132      	bne.n	8003282 <_svfiprintf_r+0x186>
 800321c:	9b03      	ldr	r3, [sp, #12]
 800321e:	3402      	adds	r4, #2
 8003220:	1d1a      	adds	r2, r3, #4
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	9203      	str	r2, [sp, #12]
 8003226:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800322a:	9305      	str	r3, [sp, #20]
 800322c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80032e4 <_svfiprintf_r+0x1e8>
 8003230:	2203      	movs	r2, #3
 8003232:	4650      	mov	r0, sl
 8003234:	7821      	ldrb	r1, [r4, #0]
 8003236:	f000 fc83 	bl	8003b40 <memchr>
 800323a:	b138      	cbz	r0, 800324c <_svfiprintf_r+0x150>
 800323c:	2240      	movs	r2, #64	@ 0x40
 800323e:	9b04      	ldr	r3, [sp, #16]
 8003240:	eba0 000a 	sub.w	r0, r0, sl
 8003244:	4082      	lsls	r2, r0
 8003246:	4313      	orrs	r3, r2
 8003248:	3401      	adds	r4, #1
 800324a:	9304      	str	r3, [sp, #16]
 800324c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003250:	2206      	movs	r2, #6
 8003252:	4825      	ldr	r0, [pc, #148]	@ (80032e8 <_svfiprintf_r+0x1ec>)
 8003254:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003258:	f000 fc72 	bl	8003b40 <memchr>
 800325c:	2800      	cmp	r0, #0
 800325e:	d036      	beq.n	80032ce <_svfiprintf_r+0x1d2>
 8003260:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <_svfiprintf_r+0x1f0>)
 8003262:	bb1b      	cbnz	r3, 80032ac <_svfiprintf_r+0x1b0>
 8003264:	9b03      	ldr	r3, [sp, #12]
 8003266:	3307      	adds	r3, #7
 8003268:	f023 0307 	bic.w	r3, r3, #7
 800326c:	3308      	adds	r3, #8
 800326e:	9303      	str	r3, [sp, #12]
 8003270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003272:	4433      	add	r3, r6
 8003274:	9309      	str	r3, [sp, #36]	@ 0x24
 8003276:	e76a      	b.n	800314e <_svfiprintf_r+0x52>
 8003278:	460c      	mov	r4, r1
 800327a:	2001      	movs	r0, #1
 800327c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003280:	e7a8      	b.n	80031d4 <_svfiprintf_r+0xd8>
 8003282:	2300      	movs	r3, #0
 8003284:	f04f 0c0a 	mov.w	ip, #10
 8003288:	4619      	mov	r1, r3
 800328a:	3401      	adds	r4, #1
 800328c:	9305      	str	r3, [sp, #20]
 800328e:	4620      	mov	r0, r4
 8003290:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003294:	3a30      	subs	r2, #48	@ 0x30
 8003296:	2a09      	cmp	r2, #9
 8003298:	d903      	bls.n	80032a2 <_svfiprintf_r+0x1a6>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0c6      	beq.n	800322c <_svfiprintf_r+0x130>
 800329e:	9105      	str	r1, [sp, #20]
 80032a0:	e7c4      	b.n	800322c <_svfiprintf_r+0x130>
 80032a2:	4604      	mov	r4, r0
 80032a4:	2301      	movs	r3, #1
 80032a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80032aa:	e7f0      	b.n	800328e <_svfiprintf_r+0x192>
 80032ac:	ab03      	add	r3, sp, #12
 80032ae:	9300      	str	r3, [sp, #0]
 80032b0:	462a      	mov	r2, r5
 80032b2:	4638      	mov	r0, r7
 80032b4:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <_svfiprintf_r+0x1f4>)
 80032b6:	a904      	add	r1, sp, #16
 80032b8:	f3af 8000 	nop.w
 80032bc:	1c42      	adds	r2, r0, #1
 80032be:	4606      	mov	r6, r0
 80032c0:	d1d6      	bne.n	8003270 <_svfiprintf_r+0x174>
 80032c2:	89ab      	ldrh	r3, [r5, #12]
 80032c4:	065b      	lsls	r3, r3, #25
 80032c6:	f53f af2d 	bmi.w	8003124 <_svfiprintf_r+0x28>
 80032ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032cc:	e72c      	b.n	8003128 <_svfiprintf_r+0x2c>
 80032ce:	ab03      	add	r3, sp, #12
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	462a      	mov	r2, r5
 80032d4:	4638      	mov	r0, r7
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <_svfiprintf_r+0x1f4>)
 80032d8:	a904      	add	r1, sp, #16
 80032da:	f000 f9bd 	bl	8003658 <_printf_i>
 80032de:	e7ed      	b.n	80032bc <_svfiprintf_r+0x1c0>
 80032e0:	08003cf6 	.word	0x08003cf6
 80032e4:	08003cfc 	.word	0x08003cfc
 80032e8:	08003d00 	.word	0x08003d00
 80032ec:	00000000 	.word	0x00000000
 80032f0:	08003045 	.word	0x08003045

080032f4 <__sfputc_r>:
 80032f4:	6893      	ldr	r3, [r2, #8]
 80032f6:	b410      	push	{r4}
 80032f8:	3b01      	subs	r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	6093      	str	r3, [r2, #8]
 80032fe:	da07      	bge.n	8003310 <__sfputc_r+0x1c>
 8003300:	6994      	ldr	r4, [r2, #24]
 8003302:	42a3      	cmp	r3, r4
 8003304:	db01      	blt.n	800330a <__sfputc_r+0x16>
 8003306:	290a      	cmp	r1, #10
 8003308:	d102      	bne.n	8003310 <__sfputc_r+0x1c>
 800330a:	bc10      	pop	{r4}
 800330c:	f7ff bc93 	b.w	8002c36 <__swbuf_r>
 8003310:	6813      	ldr	r3, [r2, #0]
 8003312:	1c58      	adds	r0, r3, #1
 8003314:	6010      	str	r0, [r2, #0]
 8003316:	7019      	strb	r1, [r3, #0]
 8003318:	4608      	mov	r0, r1
 800331a:	bc10      	pop	{r4}
 800331c:	4770      	bx	lr

0800331e <__sfputs_r>:
 800331e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003320:	4606      	mov	r6, r0
 8003322:	460f      	mov	r7, r1
 8003324:	4614      	mov	r4, r2
 8003326:	18d5      	adds	r5, r2, r3
 8003328:	42ac      	cmp	r4, r5
 800332a:	d101      	bne.n	8003330 <__sfputs_r+0x12>
 800332c:	2000      	movs	r0, #0
 800332e:	e007      	b.n	8003340 <__sfputs_r+0x22>
 8003330:	463a      	mov	r2, r7
 8003332:	4630      	mov	r0, r6
 8003334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003338:	f7ff ffdc 	bl	80032f4 <__sfputc_r>
 800333c:	1c43      	adds	r3, r0, #1
 800333e:	d1f3      	bne.n	8003328 <__sfputs_r+0xa>
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003344 <_vfiprintf_r>:
 8003344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003348:	460d      	mov	r5, r1
 800334a:	4614      	mov	r4, r2
 800334c:	4698      	mov	r8, r3
 800334e:	4606      	mov	r6, r0
 8003350:	b09d      	sub	sp, #116	@ 0x74
 8003352:	b118      	cbz	r0, 800335c <_vfiprintf_r+0x18>
 8003354:	6a03      	ldr	r3, [r0, #32]
 8003356:	b90b      	cbnz	r3, 800335c <_vfiprintf_r+0x18>
 8003358:	f7ff fb62 	bl	8002a20 <__sinit>
 800335c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800335e:	07d9      	lsls	r1, r3, #31
 8003360:	d405      	bmi.n	800336e <_vfiprintf_r+0x2a>
 8003362:	89ab      	ldrh	r3, [r5, #12]
 8003364:	059a      	lsls	r2, r3, #22
 8003366:	d402      	bmi.n	800336e <_vfiprintf_r+0x2a>
 8003368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800336a:	f7ff fd72 	bl	8002e52 <__retarget_lock_acquire_recursive>
 800336e:	89ab      	ldrh	r3, [r5, #12]
 8003370:	071b      	lsls	r3, r3, #28
 8003372:	d501      	bpl.n	8003378 <_vfiprintf_r+0x34>
 8003374:	692b      	ldr	r3, [r5, #16]
 8003376:	b99b      	cbnz	r3, 80033a0 <_vfiprintf_r+0x5c>
 8003378:	4629      	mov	r1, r5
 800337a:	4630      	mov	r0, r6
 800337c:	f7ff fc9a 	bl	8002cb4 <__swsetup_r>
 8003380:	b170      	cbz	r0, 80033a0 <_vfiprintf_r+0x5c>
 8003382:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003384:	07dc      	lsls	r4, r3, #31
 8003386:	d504      	bpl.n	8003392 <_vfiprintf_r+0x4e>
 8003388:	f04f 30ff 	mov.w	r0, #4294967295
 800338c:	b01d      	add	sp, #116	@ 0x74
 800338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003392:	89ab      	ldrh	r3, [r5, #12]
 8003394:	0598      	lsls	r0, r3, #22
 8003396:	d4f7      	bmi.n	8003388 <_vfiprintf_r+0x44>
 8003398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800339a:	f7ff fd5b 	bl	8002e54 <__retarget_lock_release_recursive>
 800339e:	e7f3      	b.n	8003388 <_vfiprintf_r+0x44>
 80033a0:	2300      	movs	r3, #0
 80033a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80033a4:	2320      	movs	r3, #32
 80033a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033aa:	2330      	movs	r3, #48	@ 0x30
 80033ac:	f04f 0901 	mov.w	r9, #1
 80033b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80033b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003560 <_vfiprintf_r+0x21c>
 80033b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033bc:	4623      	mov	r3, r4
 80033be:	469a      	mov	sl, r3
 80033c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033c4:	b10a      	cbz	r2, 80033ca <_vfiprintf_r+0x86>
 80033c6:	2a25      	cmp	r2, #37	@ 0x25
 80033c8:	d1f9      	bne.n	80033be <_vfiprintf_r+0x7a>
 80033ca:	ebba 0b04 	subs.w	fp, sl, r4
 80033ce:	d00b      	beq.n	80033e8 <_vfiprintf_r+0xa4>
 80033d0:	465b      	mov	r3, fp
 80033d2:	4622      	mov	r2, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	4630      	mov	r0, r6
 80033d8:	f7ff ffa1 	bl	800331e <__sfputs_r>
 80033dc:	3001      	adds	r0, #1
 80033de:	f000 80a7 	beq.w	8003530 <_vfiprintf_r+0x1ec>
 80033e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80033e4:	445a      	add	r2, fp
 80033e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80033e8:	f89a 3000 	ldrb.w	r3, [sl]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 809f 	beq.w	8003530 <_vfiprintf_r+0x1ec>
 80033f2:	2300      	movs	r3, #0
 80033f4:	f04f 32ff 	mov.w	r2, #4294967295
 80033f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033fc:	f10a 0a01 	add.w	sl, sl, #1
 8003400:	9304      	str	r3, [sp, #16]
 8003402:	9307      	str	r3, [sp, #28]
 8003404:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003408:	931a      	str	r3, [sp, #104]	@ 0x68
 800340a:	4654      	mov	r4, sl
 800340c:	2205      	movs	r2, #5
 800340e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003412:	4853      	ldr	r0, [pc, #332]	@ (8003560 <_vfiprintf_r+0x21c>)
 8003414:	f000 fb94 	bl	8003b40 <memchr>
 8003418:	9a04      	ldr	r2, [sp, #16]
 800341a:	b9d8      	cbnz	r0, 8003454 <_vfiprintf_r+0x110>
 800341c:	06d1      	lsls	r1, r2, #27
 800341e:	bf44      	itt	mi
 8003420:	2320      	movmi	r3, #32
 8003422:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003426:	0713      	lsls	r3, r2, #28
 8003428:	bf44      	itt	mi
 800342a:	232b      	movmi	r3, #43	@ 0x2b
 800342c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003430:	f89a 3000 	ldrb.w	r3, [sl]
 8003434:	2b2a      	cmp	r3, #42	@ 0x2a
 8003436:	d015      	beq.n	8003464 <_vfiprintf_r+0x120>
 8003438:	4654      	mov	r4, sl
 800343a:	2000      	movs	r0, #0
 800343c:	f04f 0c0a 	mov.w	ip, #10
 8003440:	9a07      	ldr	r2, [sp, #28]
 8003442:	4621      	mov	r1, r4
 8003444:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003448:	3b30      	subs	r3, #48	@ 0x30
 800344a:	2b09      	cmp	r3, #9
 800344c:	d94b      	bls.n	80034e6 <_vfiprintf_r+0x1a2>
 800344e:	b1b0      	cbz	r0, 800347e <_vfiprintf_r+0x13a>
 8003450:	9207      	str	r2, [sp, #28]
 8003452:	e014      	b.n	800347e <_vfiprintf_r+0x13a>
 8003454:	eba0 0308 	sub.w	r3, r0, r8
 8003458:	fa09 f303 	lsl.w	r3, r9, r3
 800345c:	4313      	orrs	r3, r2
 800345e:	46a2      	mov	sl, r4
 8003460:	9304      	str	r3, [sp, #16]
 8003462:	e7d2      	b.n	800340a <_vfiprintf_r+0xc6>
 8003464:	9b03      	ldr	r3, [sp, #12]
 8003466:	1d19      	adds	r1, r3, #4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	9103      	str	r1, [sp, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	bfbb      	ittet	lt
 8003470:	425b      	neglt	r3, r3
 8003472:	f042 0202 	orrlt.w	r2, r2, #2
 8003476:	9307      	strge	r3, [sp, #28]
 8003478:	9307      	strlt	r3, [sp, #28]
 800347a:	bfb8      	it	lt
 800347c:	9204      	strlt	r2, [sp, #16]
 800347e:	7823      	ldrb	r3, [r4, #0]
 8003480:	2b2e      	cmp	r3, #46	@ 0x2e
 8003482:	d10a      	bne.n	800349a <_vfiprintf_r+0x156>
 8003484:	7863      	ldrb	r3, [r4, #1]
 8003486:	2b2a      	cmp	r3, #42	@ 0x2a
 8003488:	d132      	bne.n	80034f0 <_vfiprintf_r+0x1ac>
 800348a:	9b03      	ldr	r3, [sp, #12]
 800348c:	3402      	adds	r4, #2
 800348e:	1d1a      	adds	r2, r3, #4
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	9203      	str	r2, [sp, #12]
 8003494:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003498:	9305      	str	r3, [sp, #20]
 800349a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003564 <_vfiprintf_r+0x220>
 800349e:	2203      	movs	r2, #3
 80034a0:	4650      	mov	r0, sl
 80034a2:	7821      	ldrb	r1, [r4, #0]
 80034a4:	f000 fb4c 	bl	8003b40 <memchr>
 80034a8:	b138      	cbz	r0, 80034ba <_vfiprintf_r+0x176>
 80034aa:	2240      	movs	r2, #64	@ 0x40
 80034ac:	9b04      	ldr	r3, [sp, #16]
 80034ae:	eba0 000a 	sub.w	r0, r0, sl
 80034b2:	4082      	lsls	r2, r0
 80034b4:	4313      	orrs	r3, r2
 80034b6:	3401      	adds	r4, #1
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034be:	2206      	movs	r2, #6
 80034c0:	4829      	ldr	r0, [pc, #164]	@ (8003568 <_vfiprintf_r+0x224>)
 80034c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034c6:	f000 fb3b 	bl	8003b40 <memchr>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d03f      	beq.n	800354e <_vfiprintf_r+0x20a>
 80034ce:	4b27      	ldr	r3, [pc, #156]	@ (800356c <_vfiprintf_r+0x228>)
 80034d0:	bb1b      	cbnz	r3, 800351a <_vfiprintf_r+0x1d6>
 80034d2:	9b03      	ldr	r3, [sp, #12]
 80034d4:	3307      	adds	r3, #7
 80034d6:	f023 0307 	bic.w	r3, r3, #7
 80034da:	3308      	adds	r3, #8
 80034dc:	9303      	str	r3, [sp, #12]
 80034de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034e0:	443b      	add	r3, r7
 80034e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80034e4:	e76a      	b.n	80033bc <_vfiprintf_r+0x78>
 80034e6:	460c      	mov	r4, r1
 80034e8:	2001      	movs	r0, #1
 80034ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ee:	e7a8      	b.n	8003442 <_vfiprintf_r+0xfe>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 0c0a 	mov.w	ip, #10
 80034f6:	4619      	mov	r1, r3
 80034f8:	3401      	adds	r4, #1
 80034fa:	9305      	str	r3, [sp, #20]
 80034fc:	4620      	mov	r0, r4
 80034fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003502:	3a30      	subs	r2, #48	@ 0x30
 8003504:	2a09      	cmp	r2, #9
 8003506:	d903      	bls.n	8003510 <_vfiprintf_r+0x1cc>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0c6      	beq.n	800349a <_vfiprintf_r+0x156>
 800350c:	9105      	str	r1, [sp, #20]
 800350e:	e7c4      	b.n	800349a <_vfiprintf_r+0x156>
 8003510:	4604      	mov	r4, r0
 8003512:	2301      	movs	r3, #1
 8003514:	fb0c 2101 	mla	r1, ip, r1, r2
 8003518:	e7f0      	b.n	80034fc <_vfiprintf_r+0x1b8>
 800351a:	ab03      	add	r3, sp, #12
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	462a      	mov	r2, r5
 8003520:	4630      	mov	r0, r6
 8003522:	4b13      	ldr	r3, [pc, #76]	@ (8003570 <_vfiprintf_r+0x22c>)
 8003524:	a904      	add	r1, sp, #16
 8003526:	f3af 8000 	nop.w
 800352a:	4607      	mov	r7, r0
 800352c:	1c78      	adds	r0, r7, #1
 800352e:	d1d6      	bne.n	80034de <_vfiprintf_r+0x19a>
 8003530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003532:	07d9      	lsls	r1, r3, #31
 8003534:	d405      	bmi.n	8003542 <_vfiprintf_r+0x1fe>
 8003536:	89ab      	ldrh	r3, [r5, #12]
 8003538:	059a      	lsls	r2, r3, #22
 800353a:	d402      	bmi.n	8003542 <_vfiprintf_r+0x1fe>
 800353c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800353e:	f7ff fc89 	bl	8002e54 <__retarget_lock_release_recursive>
 8003542:	89ab      	ldrh	r3, [r5, #12]
 8003544:	065b      	lsls	r3, r3, #25
 8003546:	f53f af1f 	bmi.w	8003388 <_vfiprintf_r+0x44>
 800354a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800354c:	e71e      	b.n	800338c <_vfiprintf_r+0x48>
 800354e:	ab03      	add	r3, sp, #12
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	462a      	mov	r2, r5
 8003554:	4630      	mov	r0, r6
 8003556:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <_vfiprintf_r+0x22c>)
 8003558:	a904      	add	r1, sp, #16
 800355a:	f000 f87d 	bl	8003658 <_printf_i>
 800355e:	e7e4      	b.n	800352a <_vfiprintf_r+0x1e6>
 8003560:	08003cf6 	.word	0x08003cf6
 8003564:	08003cfc 	.word	0x08003cfc
 8003568:	08003d00 	.word	0x08003d00
 800356c:	00000000 	.word	0x00000000
 8003570:	0800331f 	.word	0x0800331f

08003574 <_printf_common>:
 8003574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003578:	4616      	mov	r6, r2
 800357a:	4698      	mov	r8, r3
 800357c:	688a      	ldr	r2, [r1, #8]
 800357e:	690b      	ldr	r3, [r1, #16]
 8003580:	4607      	mov	r7, r0
 8003582:	4293      	cmp	r3, r2
 8003584:	bfb8      	it	lt
 8003586:	4613      	movlt	r3, r2
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800358e:	460c      	mov	r4, r1
 8003590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003594:	b10a      	cbz	r2, 800359a <_printf_common+0x26>
 8003596:	3301      	adds	r3, #1
 8003598:	6033      	str	r3, [r6, #0]
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	0699      	lsls	r1, r3, #26
 800359e:	bf42      	ittt	mi
 80035a0:	6833      	ldrmi	r3, [r6, #0]
 80035a2:	3302      	addmi	r3, #2
 80035a4:	6033      	strmi	r3, [r6, #0]
 80035a6:	6825      	ldr	r5, [r4, #0]
 80035a8:	f015 0506 	ands.w	r5, r5, #6
 80035ac:	d106      	bne.n	80035bc <_printf_common+0x48>
 80035ae:	f104 0a19 	add.w	sl, r4, #25
 80035b2:	68e3      	ldr	r3, [r4, #12]
 80035b4:	6832      	ldr	r2, [r6, #0]
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	42ab      	cmp	r3, r5
 80035ba:	dc2b      	bgt.n	8003614 <_printf_common+0xa0>
 80035bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	3b00      	subs	r3, #0
 80035c4:	bf18      	it	ne
 80035c6:	2301      	movne	r3, #1
 80035c8:	0692      	lsls	r2, r2, #26
 80035ca:	d430      	bmi.n	800362e <_printf_common+0xba>
 80035cc:	4641      	mov	r1, r8
 80035ce:	4638      	mov	r0, r7
 80035d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80035d4:	47c8      	blx	r9
 80035d6:	3001      	adds	r0, #1
 80035d8:	d023      	beq.n	8003622 <_printf_common+0xae>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	6922      	ldr	r2, [r4, #16]
 80035de:	f003 0306 	and.w	r3, r3, #6
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	bf14      	ite	ne
 80035e6:	2500      	movne	r5, #0
 80035e8:	6833      	ldreq	r3, [r6, #0]
 80035ea:	f04f 0600 	mov.w	r6, #0
 80035ee:	bf08      	it	eq
 80035f0:	68e5      	ldreq	r5, [r4, #12]
 80035f2:	f104 041a 	add.w	r4, r4, #26
 80035f6:	bf08      	it	eq
 80035f8:	1aed      	subeq	r5, r5, r3
 80035fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80035fe:	bf08      	it	eq
 8003600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003604:	4293      	cmp	r3, r2
 8003606:	bfc4      	itt	gt
 8003608:	1a9b      	subgt	r3, r3, r2
 800360a:	18ed      	addgt	r5, r5, r3
 800360c:	42b5      	cmp	r5, r6
 800360e:	d11a      	bne.n	8003646 <_printf_common+0xd2>
 8003610:	2000      	movs	r0, #0
 8003612:	e008      	b.n	8003626 <_printf_common+0xb2>
 8003614:	2301      	movs	r3, #1
 8003616:	4652      	mov	r2, sl
 8003618:	4641      	mov	r1, r8
 800361a:	4638      	mov	r0, r7
 800361c:	47c8      	blx	r9
 800361e:	3001      	adds	r0, #1
 8003620:	d103      	bne.n	800362a <_printf_common+0xb6>
 8003622:	f04f 30ff 	mov.w	r0, #4294967295
 8003626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800362a:	3501      	adds	r5, #1
 800362c:	e7c1      	b.n	80035b2 <_printf_common+0x3e>
 800362e:	2030      	movs	r0, #48	@ 0x30
 8003630:	18e1      	adds	r1, r4, r3
 8003632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800363c:	4422      	add	r2, r4
 800363e:	3302      	adds	r3, #2
 8003640:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003644:	e7c2      	b.n	80035cc <_printf_common+0x58>
 8003646:	2301      	movs	r3, #1
 8003648:	4622      	mov	r2, r4
 800364a:	4641      	mov	r1, r8
 800364c:	4638      	mov	r0, r7
 800364e:	47c8      	blx	r9
 8003650:	3001      	adds	r0, #1
 8003652:	d0e6      	beq.n	8003622 <_printf_common+0xae>
 8003654:	3601      	adds	r6, #1
 8003656:	e7d9      	b.n	800360c <_printf_common+0x98>

08003658 <_printf_i>:
 8003658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800365c:	7e0f      	ldrb	r7, [r1, #24]
 800365e:	4691      	mov	r9, r2
 8003660:	2f78      	cmp	r7, #120	@ 0x78
 8003662:	4680      	mov	r8, r0
 8003664:	460c      	mov	r4, r1
 8003666:	469a      	mov	sl, r3
 8003668:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800366a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800366e:	d807      	bhi.n	8003680 <_printf_i+0x28>
 8003670:	2f62      	cmp	r7, #98	@ 0x62
 8003672:	d80a      	bhi.n	800368a <_printf_i+0x32>
 8003674:	2f00      	cmp	r7, #0
 8003676:	f000 80d1 	beq.w	800381c <_printf_i+0x1c4>
 800367a:	2f58      	cmp	r7, #88	@ 0x58
 800367c:	f000 80b8 	beq.w	80037f0 <_printf_i+0x198>
 8003680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003688:	e03a      	b.n	8003700 <_printf_i+0xa8>
 800368a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800368e:	2b15      	cmp	r3, #21
 8003690:	d8f6      	bhi.n	8003680 <_printf_i+0x28>
 8003692:	a101      	add	r1, pc, #4	@ (adr r1, 8003698 <_printf_i+0x40>)
 8003694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003698:	080036f1 	.word	0x080036f1
 800369c:	08003705 	.word	0x08003705
 80036a0:	08003681 	.word	0x08003681
 80036a4:	08003681 	.word	0x08003681
 80036a8:	08003681 	.word	0x08003681
 80036ac:	08003681 	.word	0x08003681
 80036b0:	08003705 	.word	0x08003705
 80036b4:	08003681 	.word	0x08003681
 80036b8:	08003681 	.word	0x08003681
 80036bc:	08003681 	.word	0x08003681
 80036c0:	08003681 	.word	0x08003681
 80036c4:	08003803 	.word	0x08003803
 80036c8:	0800372f 	.word	0x0800372f
 80036cc:	080037bd 	.word	0x080037bd
 80036d0:	08003681 	.word	0x08003681
 80036d4:	08003681 	.word	0x08003681
 80036d8:	08003825 	.word	0x08003825
 80036dc:	08003681 	.word	0x08003681
 80036e0:	0800372f 	.word	0x0800372f
 80036e4:	08003681 	.word	0x08003681
 80036e8:	08003681 	.word	0x08003681
 80036ec:	080037c5 	.word	0x080037c5
 80036f0:	6833      	ldr	r3, [r6, #0]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6032      	str	r2, [r6, #0]
 80036f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003700:	2301      	movs	r3, #1
 8003702:	e09c      	b.n	800383e <_printf_i+0x1e6>
 8003704:	6833      	ldr	r3, [r6, #0]
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	1d19      	adds	r1, r3, #4
 800370a:	6031      	str	r1, [r6, #0]
 800370c:	0606      	lsls	r6, r0, #24
 800370e:	d501      	bpl.n	8003714 <_printf_i+0xbc>
 8003710:	681d      	ldr	r5, [r3, #0]
 8003712:	e003      	b.n	800371c <_printf_i+0xc4>
 8003714:	0645      	lsls	r5, r0, #25
 8003716:	d5fb      	bpl.n	8003710 <_printf_i+0xb8>
 8003718:	f9b3 5000 	ldrsh.w	r5, [r3]
 800371c:	2d00      	cmp	r5, #0
 800371e:	da03      	bge.n	8003728 <_printf_i+0xd0>
 8003720:	232d      	movs	r3, #45	@ 0x2d
 8003722:	426d      	negs	r5, r5
 8003724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003728:	230a      	movs	r3, #10
 800372a:	4858      	ldr	r0, [pc, #352]	@ (800388c <_printf_i+0x234>)
 800372c:	e011      	b.n	8003752 <_printf_i+0xfa>
 800372e:	6821      	ldr	r1, [r4, #0]
 8003730:	6833      	ldr	r3, [r6, #0]
 8003732:	0608      	lsls	r0, r1, #24
 8003734:	f853 5b04 	ldr.w	r5, [r3], #4
 8003738:	d402      	bmi.n	8003740 <_printf_i+0xe8>
 800373a:	0649      	lsls	r1, r1, #25
 800373c:	bf48      	it	mi
 800373e:	b2ad      	uxthmi	r5, r5
 8003740:	2f6f      	cmp	r7, #111	@ 0x6f
 8003742:	6033      	str	r3, [r6, #0]
 8003744:	bf14      	ite	ne
 8003746:	230a      	movne	r3, #10
 8003748:	2308      	moveq	r3, #8
 800374a:	4850      	ldr	r0, [pc, #320]	@ (800388c <_printf_i+0x234>)
 800374c:	2100      	movs	r1, #0
 800374e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003752:	6866      	ldr	r6, [r4, #4]
 8003754:	2e00      	cmp	r6, #0
 8003756:	60a6      	str	r6, [r4, #8]
 8003758:	db05      	blt.n	8003766 <_printf_i+0x10e>
 800375a:	6821      	ldr	r1, [r4, #0]
 800375c:	432e      	orrs	r6, r5
 800375e:	f021 0104 	bic.w	r1, r1, #4
 8003762:	6021      	str	r1, [r4, #0]
 8003764:	d04b      	beq.n	80037fe <_printf_i+0x1a6>
 8003766:	4616      	mov	r6, r2
 8003768:	fbb5 f1f3 	udiv	r1, r5, r3
 800376c:	fb03 5711 	mls	r7, r3, r1, r5
 8003770:	5dc7      	ldrb	r7, [r0, r7]
 8003772:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003776:	462f      	mov	r7, r5
 8003778:	42bb      	cmp	r3, r7
 800377a:	460d      	mov	r5, r1
 800377c:	d9f4      	bls.n	8003768 <_printf_i+0x110>
 800377e:	2b08      	cmp	r3, #8
 8003780:	d10b      	bne.n	800379a <_printf_i+0x142>
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	07df      	lsls	r7, r3, #31
 8003786:	d508      	bpl.n	800379a <_printf_i+0x142>
 8003788:	6923      	ldr	r3, [r4, #16]
 800378a:	6861      	ldr	r1, [r4, #4]
 800378c:	4299      	cmp	r1, r3
 800378e:	bfde      	ittt	le
 8003790:	2330      	movle	r3, #48	@ 0x30
 8003792:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003796:	f106 36ff 	addle.w	r6, r6, #4294967295
 800379a:	1b92      	subs	r2, r2, r6
 800379c:	6122      	str	r2, [r4, #16]
 800379e:	464b      	mov	r3, r9
 80037a0:	4621      	mov	r1, r4
 80037a2:	4640      	mov	r0, r8
 80037a4:	f8cd a000 	str.w	sl, [sp]
 80037a8:	aa03      	add	r2, sp, #12
 80037aa:	f7ff fee3 	bl	8003574 <_printf_common>
 80037ae:	3001      	adds	r0, #1
 80037b0:	d14a      	bne.n	8003848 <_printf_i+0x1f0>
 80037b2:	f04f 30ff 	mov.w	r0, #4294967295
 80037b6:	b004      	add	sp, #16
 80037b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	f043 0320 	orr.w	r3, r3, #32
 80037c2:	6023      	str	r3, [r4, #0]
 80037c4:	2778      	movs	r7, #120	@ 0x78
 80037c6:	4832      	ldr	r0, [pc, #200]	@ (8003890 <_printf_i+0x238>)
 80037c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	6831      	ldr	r1, [r6, #0]
 80037d0:	061f      	lsls	r7, r3, #24
 80037d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80037d6:	d402      	bmi.n	80037de <_printf_i+0x186>
 80037d8:	065f      	lsls	r7, r3, #25
 80037da:	bf48      	it	mi
 80037dc:	b2ad      	uxthmi	r5, r5
 80037de:	6031      	str	r1, [r6, #0]
 80037e0:	07d9      	lsls	r1, r3, #31
 80037e2:	bf44      	itt	mi
 80037e4:	f043 0320 	orrmi.w	r3, r3, #32
 80037e8:	6023      	strmi	r3, [r4, #0]
 80037ea:	b11d      	cbz	r5, 80037f4 <_printf_i+0x19c>
 80037ec:	2310      	movs	r3, #16
 80037ee:	e7ad      	b.n	800374c <_printf_i+0xf4>
 80037f0:	4826      	ldr	r0, [pc, #152]	@ (800388c <_printf_i+0x234>)
 80037f2:	e7e9      	b.n	80037c8 <_printf_i+0x170>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	f023 0320 	bic.w	r3, r3, #32
 80037fa:	6023      	str	r3, [r4, #0]
 80037fc:	e7f6      	b.n	80037ec <_printf_i+0x194>
 80037fe:	4616      	mov	r6, r2
 8003800:	e7bd      	b.n	800377e <_printf_i+0x126>
 8003802:	6833      	ldr	r3, [r6, #0]
 8003804:	6825      	ldr	r5, [r4, #0]
 8003806:	1d18      	adds	r0, r3, #4
 8003808:	6961      	ldr	r1, [r4, #20]
 800380a:	6030      	str	r0, [r6, #0]
 800380c:	062e      	lsls	r6, r5, #24
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	d501      	bpl.n	8003816 <_printf_i+0x1be>
 8003812:	6019      	str	r1, [r3, #0]
 8003814:	e002      	b.n	800381c <_printf_i+0x1c4>
 8003816:	0668      	lsls	r0, r5, #25
 8003818:	d5fb      	bpl.n	8003812 <_printf_i+0x1ba>
 800381a:	8019      	strh	r1, [r3, #0]
 800381c:	2300      	movs	r3, #0
 800381e:	4616      	mov	r6, r2
 8003820:	6123      	str	r3, [r4, #16]
 8003822:	e7bc      	b.n	800379e <_printf_i+0x146>
 8003824:	6833      	ldr	r3, [r6, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	1d1a      	adds	r2, r3, #4
 800382a:	6032      	str	r2, [r6, #0]
 800382c:	681e      	ldr	r6, [r3, #0]
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	4630      	mov	r0, r6
 8003832:	f000 f985 	bl	8003b40 <memchr>
 8003836:	b108      	cbz	r0, 800383c <_printf_i+0x1e4>
 8003838:	1b80      	subs	r0, r0, r6
 800383a:	6060      	str	r0, [r4, #4]
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	6123      	str	r3, [r4, #16]
 8003840:	2300      	movs	r3, #0
 8003842:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003846:	e7aa      	b.n	800379e <_printf_i+0x146>
 8003848:	4632      	mov	r2, r6
 800384a:	4649      	mov	r1, r9
 800384c:	4640      	mov	r0, r8
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	47d0      	blx	sl
 8003852:	3001      	adds	r0, #1
 8003854:	d0ad      	beq.n	80037b2 <_printf_i+0x15a>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	079b      	lsls	r3, r3, #30
 800385a:	d413      	bmi.n	8003884 <_printf_i+0x22c>
 800385c:	68e0      	ldr	r0, [r4, #12]
 800385e:	9b03      	ldr	r3, [sp, #12]
 8003860:	4298      	cmp	r0, r3
 8003862:	bfb8      	it	lt
 8003864:	4618      	movlt	r0, r3
 8003866:	e7a6      	b.n	80037b6 <_printf_i+0x15e>
 8003868:	2301      	movs	r3, #1
 800386a:	4632      	mov	r2, r6
 800386c:	4649      	mov	r1, r9
 800386e:	4640      	mov	r0, r8
 8003870:	47d0      	blx	sl
 8003872:	3001      	adds	r0, #1
 8003874:	d09d      	beq.n	80037b2 <_printf_i+0x15a>
 8003876:	3501      	adds	r5, #1
 8003878:	68e3      	ldr	r3, [r4, #12]
 800387a:	9903      	ldr	r1, [sp, #12]
 800387c:	1a5b      	subs	r3, r3, r1
 800387e:	42ab      	cmp	r3, r5
 8003880:	dcf2      	bgt.n	8003868 <_printf_i+0x210>
 8003882:	e7eb      	b.n	800385c <_printf_i+0x204>
 8003884:	2500      	movs	r5, #0
 8003886:	f104 0619 	add.w	r6, r4, #25
 800388a:	e7f5      	b.n	8003878 <_printf_i+0x220>
 800388c:	08003d07 	.word	0x08003d07
 8003890:	08003d18 	.word	0x08003d18

08003894 <__sflush_r>:
 8003894:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	0716      	lsls	r6, r2, #28
 800389c:	4605      	mov	r5, r0
 800389e:	460c      	mov	r4, r1
 80038a0:	d454      	bmi.n	800394c <__sflush_r+0xb8>
 80038a2:	684b      	ldr	r3, [r1, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	dc02      	bgt.n	80038ae <__sflush_r+0x1a>
 80038a8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	dd48      	ble.n	8003940 <__sflush_r+0xac>
 80038ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038b0:	2e00      	cmp	r6, #0
 80038b2:	d045      	beq.n	8003940 <__sflush_r+0xac>
 80038b4:	2300      	movs	r3, #0
 80038b6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80038ba:	682f      	ldr	r7, [r5, #0]
 80038bc:	6a21      	ldr	r1, [r4, #32]
 80038be:	602b      	str	r3, [r5, #0]
 80038c0:	d030      	beq.n	8003924 <__sflush_r+0x90>
 80038c2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	0759      	lsls	r1, r3, #29
 80038c8:	d505      	bpl.n	80038d6 <__sflush_r+0x42>
 80038ca:	6863      	ldr	r3, [r4, #4]
 80038cc:	1ad2      	subs	r2, r2, r3
 80038ce:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80038d0:	b10b      	cbz	r3, 80038d6 <__sflush_r+0x42>
 80038d2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038d4:	1ad2      	subs	r2, r2, r3
 80038d6:	2300      	movs	r3, #0
 80038d8:	4628      	mov	r0, r5
 80038da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038dc:	6a21      	ldr	r1, [r4, #32]
 80038de:	47b0      	blx	r6
 80038e0:	1c43      	adds	r3, r0, #1
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	d106      	bne.n	80038f4 <__sflush_r+0x60>
 80038e6:	6829      	ldr	r1, [r5, #0]
 80038e8:	291d      	cmp	r1, #29
 80038ea:	d82b      	bhi.n	8003944 <__sflush_r+0xb0>
 80038ec:	4a28      	ldr	r2, [pc, #160]	@ (8003990 <__sflush_r+0xfc>)
 80038ee:	40ca      	lsrs	r2, r1
 80038f0:	07d6      	lsls	r6, r2, #31
 80038f2:	d527      	bpl.n	8003944 <__sflush_r+0xb0>
 80038f4:	2200      	movs	r2, #0
 80038f6:	6062      	str	r2, [r4, #4]
 80038f8:	6922      	ldr	r2, [r4, #16]
 80038fa:	04d9      	lsls	r1, r3, #19
 80038fc:	6022      	str	r2, [r4, #0]
 80038fe:	d504      	bpl.n	800390a <__sflush_r+0x76>
 8003900:	1c42      	adds	r2, r0, #1
 8003902:	d101      	bne.n	8003908 <__sflush_r+0x74>
 8003904:	682b      	ldr	r3, [r5, #0]
 8003906:	b903      	cbnz	r3, 800390a <__sflush_r+0x76>
 8003908:	6560      	str	r0, [r4, #84]	@ 0x54
 800390a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800390c:	602f      	str	r7, [r5, #0]
 800390e:	b1b9      	cbz	r1, 8003940 <__sflush_r+0xac>
 8003910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003914:	4299      	cmp	r1, r3
 8003916:	d002      	beq.n	800391e <__sflush_r+0x8a>
 8003918:	4628      	mov	r0, r5
 800391a:	f7ff fa9d 	bl	8002e58 <_free_r>
 800391e:	2300      	movs	r3, #0
 8003920:	6363      	str	r3, [r4, #52]	@ 0x34
 8003922:	e00d      	b.n	8003940 <__sflush_r+0xac>
 8003924:	2301      	movs	r3, #1
 8003926:	4628      	mov	r0, r5
 8003928:	47b0      	blx	r6
 800392a:	4602      	mov	r2, r0
 800392c:	1c50      	adds	r0, r2, #1
 800392e:	d1c9      	bne.n	80038c4 <__sflush_r+0x30>
 8003930:	682b      	ldr	r3, [r5, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0c6      	beq.n	80038c4 <__sflush_r+0x30>
 8003936:	2b1d      	cmp	r3, #29
 8003938:	d001      	beq.n	800393e <__sflush_r+0xaa>
 800393a:	2b16      	cmp	r3, #22
 800393c:	d11d      	bne.n	800397a <__sflush_r+0xe6>
 800393e:	602f      	str	r7, [r5, #0]
 8003940:	2000      	movs	r0, #0
 8003942:	e021      	b.n	8003988 <__sflush_r+0xf4>
 8003944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003948:	b21b      	sxth	r3, r3
 800394a:	e01a      	b.n	8003982 <__sflush_r+0xee>
 800394c:	690f      	ldr	r7, [r1, #16]
 800394e:	2f00      	cmp	r7, #0
 8003950:	d0f6      	beq.n	8003940 <__sflush_r+0xac>
 8003952:	0793      	lsls	r3, r2, #30
 8003954:	bf18      	it	ne
 8003956:	2300      	movne	r3, #0
 8003958:	680e      	ldr	r6, [r1, #0]
 800395a:	bf08      	it	eq
 800395c:	694b      	ldreq	r3, [r1, #20]
 800395e:	1bf6      	subs	r6, r6, r7
 8003960:	600f      	str	r7, [r1, #0]
 8003962:	608b      	str	r3, [r1, #8]
 8003964:	2e00      	cmp	r6, #0
 8003966:	ddeb      	ble.n	8003940 <__sflush_r+0xac>
 8003968:	4633      	mov	r3, r6
 800396a:	463a      	mov	r2, r7
 800396c:	4628      	mov	r0, r5
 800396e:	6a21      	ldr	r1, [r4, #32]
 8003970:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003974:	47e0      	blx	ip
 8003976:	2800      	cmp	r0, #0
 8003978:	dc07      	bgt.n	800398a <__sflush_r+0xf6>
 800397a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800397e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003982:	f04f 30ff 	mov.w	r0, #4294967295
 8003986:	81a3      	strh	r3, [r4, #12]
 8003988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800398a:	4407      	add	r7, r0
 800398c:	1a36      	subs	r6, r6, r0
 800398e:	e7e9      	b.n	8003964 <__sflush_r+0xd0>
 8003990:	20400001 	.word	0x20400001

08003994 <_fflush_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	690b      	ldr	r3, [r1, #16]
 8003998:	4605      	mov	r5, r0
 800399a:	460c      	mov	r4, r1
 800399c:	b913      	cbnz	r3, 80039a4 <_fflush_r+0x10>
 800399e:	2500      	movs	r5, #0
 80039a0:	4628      	mov	r0, r5
 80039a2:	bd38      	pop	{r3, r4, r5, pc}
 80039a4:	b118      	cbz	r0, 80039ae <_fflush_r+0x1a>
 80039a6:	6a03      	ldr	r3, [r0, #32]
 80039a8:	b90b      	cbnz	r3, 80039ae <_fflush_r+0x1a>
 80039aa:	f7ff f839 	bl	8002a20 <__sinit>
 80039ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f3      	beq.n	800399e <_fflush_r+0xa>
 80039b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80039b8:	07d0      	lsls	r0, r2, #31
 80039ba:	d404      	bmi.n	80039c6 <_fflush_r+0x32>
 80039bc:	0599      	lsls	r1, r3, #22
 80039be:	d402      	bmi.n	80039c6 <_fflush_r+0x32>
 80039c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039c2:	f7ff fa46 	bl	8002e52 <__retarget_lock_acquire_recursive>
 80039c6:	4628      	mov	r0, r5
 80039c8:	4621      	mov	r1, r4
 80039ca:	f7ff ff63 	bl	8003894 <__sflush_r>
 80039ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039d0:	4605      	mov	r5, r0
 80039d2:	07da      	lsls	r2, r3, #31
 80039d4:	d4e4      	bmi.n	80039a0 <_fflush_r+0xc>
 80039d6:	89a3      	ldrh	r3, [r4, #12]
 80039d8:	059b      	lsls	r3, r3, #22
 80039da:	d4e1      	bmi.n	80039a0 <_fflush_r+0xc>
 80039dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039de:	f7ff fa39 	bl	8002e54 <__retarget_lock_release_recursive>
 80039e2:	e7dd      	b.n	80039a0 <_fflush_r+0xc>

080039e4 <__swhatbuf_r>:
 80039e4:	b570      	push	{r4, r5, r6, lr}
 80039e6:	460c      	mov	r4, r1
 80039e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039ec:	4615      	mov	r5, r2
 80039ee:	2900      	cmp	r1, #0
 80039f0:	461e      	mov	r6, r3
 80039f2:	b096      	sub	sp, #88	@ 0x58
 80039f4:	da0c      	bge.n	8003a10 <__swhatbuf_r+0x2c>
 80039f6:	89a3      	ldrh	r3, [r4, #12]
 80039f8:	2100      	movs	r1, #0
 80039fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80039fe:	bf14      	ite	ne
 8003a00:	2340      	movne	r3, #64	@ 0x40
 8003a02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a06:	2000      	movs	r0, #0
 8003a08:	6031      	str	r1, [r6, #0]
 8003a0a:	602b      	str	r3, [r5, #0]
 8003a0c:	b016      	add	sp, #88	@ 0x58
 8003a0e:	bd70      	pop	{r4, r5, r6, pc}
 8003a10:	466a      	mov	r2, sp
 8003a12:	f000 f863 	bl	8003adc <_fstat_r>
 8003a16:	2800      	cmp	r0, #0
 8003a18:	dbed      	blt.n	80039f6 <__swhatbuf_r+0x12>
 8003a1a:	9901      	ldr	r1, [sp, #4]
 8003a1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a24:	4259      	negs	r1, r3
 8003a26:	4159      	adcs	r1, r3
 8003a28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a2c:	e7eb      	b.n	8003a06 <__swhatbuf_r+0x22>

08003a2e <__smakebuf_r>:
 8003a2e:	898b      	ldrh	r3, [r1, #12]
 8003a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a32:	079d      	lsls	r5, r3, #30
 8003a34:	4606      	mov	r6, r0
 8003a36:	460c      	mov	r4, r1
 8003a38:	d507      	bpl.n	8003a4a <__smakebuf_r+0x1c>
 8003a3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	2301      	movs	r3, #1
 8003a44:	6163      	str	r3, [r4, #20]
 8003a46:	b003      	add	sp, #12
 8003a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a4a:	466a      	mov	r2, sp
 8003a4c:	ab01      	add	r3, sp, #4
 8003a4e:	f7ff ffc9 	bl	80039e4 <__swhatbuf_r>
 8003a52:	9f00      	ldr	r7, [sp, #0]
 8003a54:	4605      	mov	r5, r0
 8003a56:	4639      	mov	r1, r7
 8003a58:	4630      	mov	r0, r6
 8003a5a:	f7ff fa67 	bl	8002f2c <_malloc_r>
 8003a5e:	b948      	cbnz	r0, 8003a74 <__smakebuf_r+0x46>
 8003a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a64:	059a      	lsls	r2, r3, #22
 8003a66:	d4ee      	bmi.n	8003a46 <__smakebuf_r+0x18>
 8003a68:	f023 0303 	bic.w	r3, r3, #3
 8003a6c:	f043 0302 	orr.w	r3, r3, #2
 8003a70:	81a3      	strh	r3, [r4, #12]
 8003a72:	e7e2      	b.n	8003a3a <__smakebuf_r+0xc>
 8003a74:	89a3      	ldrh	r3, [r4, #12]
 8003a76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a7e:	81a3      	strh	r3, [r4, #12]
 8003a80:	9b01      	ldr	r3, [sp, #4]
 8003a82:	6020      	str	r0, [r4, #0]
 8003a84:	b15b      	cbz	r3, 8003a9e <__smakebuf_r+0x70>
 8003a86:	4630      	mov	r0, r6
 8003a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a8c:	f000 f838 	bl	8003b00 <_isatty_r>
 8003a90:	b128      	cbz	r0, 8003a9e <__smakebuf_r+0x70>
 8003a92:	89a3      	ldrh	r3, [r4, #12]
 8003a94:	f023 0303 	bic.w	r3, r3, #3
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	81a3      	strh	r3, [r4, #12]
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	431d      	orrs	r5, r3
 8003aa2:	81a5      	strh	r5, [r4, #12]
 8003aa4:	e7cf      	b.n	8003a46 <__smakebuf_r+0x18>

08003aa6 <memmove>:
 8003aa6:	4288      	cmp	r0, r1
 8003aa8:	b510      	push	{r4, lr}
 8003aaa:	eb01 0402 	add.w	r4, r1, r2
 8003aae:	d902      	bls.n	8003ab6 <memmove+0x10>
 8003ab0:	4284      	cmp	r4, r0
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	d807      	bhi.n	8003ac6 <memmove+0x20>
 8003ab6:	1e43      	subs	r3, r0, #1
 8003ab8:	42a1      	cmp	r1, r4
 8003aba:	d008      	beq.n	8003ace <memmove+0x28>
 8003abc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ac0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ac4:	e7f8      	b.n	8003ab8 <memmove+0x12>
 8003ac6:	4601      	mov	r1, r0
 8003ac8:	4402      	add	r2, r0
 8003aca:	428a      	cmp	r2, r1
 8003acc:	d100      	bne.n	8003ad0 <memmove+0x2a>
 8003ace:	bd10      	pop	{r4, pc}
 8003ad0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ad4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ad8:	e7f7      	b.n	8003aca <memmove+0x24>
	...

08003adc <_fstat_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4d06      	ldr	r5, [pc, #24]	@ (8003afc <_fstat_r+0x20>)
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	f7fd f98b 	bl	8000e04 <_fstat>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d102      	bne.n	8003af8 <_fstat_r+0x1c>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	b103      	cbz	r3, 8003af8 <_fstat_r+0x1c>
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	bf00      	nop
 8003afc:	20000374 	.word	0x20000374

08003b00 <_isatty_r>:
 8003b00:	b538      	push	{r3, r4, r5, lr}
 8003b02:	2300      	movs	r3, #0
 8003b04:	4d05      	ldr	r5, [pc, #20]	@ (8003b1c <_isatty_r+0x1c>)
 8003b06:	4604      	mov	r4, r0
 8003b08:	4608      	mov	r0, r1
 8003b0a:	602b      	str	r3, [r5, #0]
 8003b0c:	f7fd f989 	bl	8000e22 <_isatty>
 8003b10:	1c43      	adds	r3, r0, #1
 8003b12:	d102      	bne.n	8003b1a <_isatty_r+0x1a>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	b103      	cbz	r3, 8003b1a <_isatty_r+0x1a>
 8003b18:	6023      	str	r3, [r4, #0]
 8003b1a:	bd38      	pop	{r3, r4, r5, pc}
 8003b1c:	20000374 	.word	0x20000374

08003b20 <_sbrk_r>:
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	2300      	movs	r3, #0
 8003b24:	4d05      	ldr	r5, [pc, #20]	@ (8003b3c <_sbrk_r+0x1c>)
 8003b26:	4604      	mov	r4, r0
 8003b28:	4608      	mov	r0, r1
 8003b2a:	602b      	str	r3, [r5, #0]
 8003b2c:	f7fd f990 	bl	8000e50 <_sbrk>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	d102      	bne.n	8003b3a <_sbrk_r+0x1a>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	b103      	cbz	r3, 8003b3a <_sbrk_r+0x1a>
 8003b38:	6023      	str	r3, [r4, #0]
 8003b3a:	bd38      	pop	{r3, r4, r5, pc}
 8003b3c:	20000374 	.word	0x20000374

08003b40 <memchr>:
 8003b40:	4603      	mov	r3, r0
 8003b42:	b510      	push	{r4, lr}
 8003b44:	b2c9      	uxtb	r1, r1
 8003b46:	4402      	add	r2, r0
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	d101      	bne.n	8003b52 <memchr+0x12>
 8003b4e:	2000      	movs	r0, #0
 8003b50:	e003      	b.n	8003b5a <memchr+0x1a>
 8003b52:	7804      	ldrb	r4, [r0, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	428c      	cmp	r4, r1
 8003b58:	d1f6      	bne.n	8003b48 <memchr+0x8>
 8003b5a:	bd10      	pop	{r4, pc}

08003b5c <memcpy>:
 8003b5c:	440a      	add	r2, r1
 8003b5e:	4291      	cmp	r1, r2
 8003b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b64:	d100      	bne.n	8003b68 <memcpy+0xc>
 8003b66:	4770      	bx	lr
 8003b68:	b510      	push	{r4, lr}
 8003b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b6e:	4291      	cmp	r1, r2
 8003b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b74:	d1f9      	bne.n	8003b6a <memcpy+0xe>
 8003b76:	bd10      	pop	{r4, pc}

08003b78 <_realloc_r>:
 8003b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b7c:	4607      	mov	r7, r0
 8003b7e:	4614      	mov	r4, r2
 8003b80:	460d      	mov	r5, r1
 8003b82:	b921      	cbnz	r1, 8003b8e <_realloc_r+0x16>
 8003b84:	4611      	mov	r1, r2
 8003b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b8a:	f7ff b9cf 	b.w	8002f2c <_malloc_r>
 8003b8e:	b92a      	cbnz	r2, 8003b9c <_realloc_r+0x24>
 8003b90:	f7ff f962 	bl	8002e58 <_free_r>
 8003b94:	4625      	mov	r5, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9c:	f000 f81a 	bl	8003bd4 <_malloc_usable_size_r>
 8003ba0:	4284      	cmp	r4, r0
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	d802      	bhi.n	8003bac <_realloc_r+0x34>
 8003ba6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003baa:	d8f4      	bhi.n	8003b96 <_realloc_r+0x1e>
 8003bac:	4621      	mov	r1, r4
 8003bae:	4638      	mov	r0, r7
 8003bb0:	f7ff f9bc 	bl	8002f2c <_malloc_r>
 8003bb4:	4680      	mov	r8, r0
 8003bb6:	b908      	cbnz	r0, 8003bbc <_realloc_r+0x44>
 8003bb8:	4645      	mov	r5, r8
 8003bba:	e7ec      	b.n	8003b96 <_realloc_r+0x1e>
 8003bbc:	42b4      	cmp	r4, r6
 8003bbe:	4622      	mov	r2, r4
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	bf28      	it	cs
 8003bc4:	4632      	movcs	r2, r6
 8003bc6:	f7ff ffc9 	bl	8003b5c <memcpy>
 8003bca:	4629      	mov	r1, r5
 8003bcc:	4638      	mov	r0, r7
 8003bce:	f7ff f943 	bl	8002e58 <_free_r>
 8003bd2:	e7f1      	b.n	8003bb8 <_realloc_r+0x40>

08003bd4 <_malloc_usable_size_r>:
 8003bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bd8:	1f18      	subs	r0, r3, #4
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	bfbc      	itt	lt
 8003bde:	580b      	ldrlt	r3, [r1, r0]
 8003be0:	18c0      	addlt	r0, r0, r3
 8003be2:	4770      	bx	lr

08003be4 <_init>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr

08003bf0 <_fini>:
 8003bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bf2:	bf00      	nop
 8003bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf6:	bc08      	pop	{r3}
 8003bf8:	469e      	mov	lr, r3
 8003bfa:	4770      	bx	lr
