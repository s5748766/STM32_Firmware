
LED_CON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002f98  08002f98  00003f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003080  08003080  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003084  08003084  00004084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003088  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000068  080030f0  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  080030f0  00005324  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f8f  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001553  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000d578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054a  00000000  00000000  0000dc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017780  00000000  00000000  0000e1c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f68  00000000  00000000  00025942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ee4  00000000  00000000  0002d8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b178e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  000b17d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b3b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f80 	.word	0x08002f80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002f80 	.word	0x08002f80

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f001 fc7c 	bl	8001a70 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f001 fc75 	bl	8001a70 <HAL_UART_Transmit>

		return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08002f98 	.word	0x08002f98
 8000194:	20000084 	.word	0x20000084

08000198 <smartcar_F>:

void smartcar_F(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a2:	4816      	ldr	r0, [pc, #88]	@ (80001fc <smartcar_F+0x64>)
 80001a4:	f000 ffca 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ae:	4814      	ldr	r0, [pc, #80]	@ (8000200 <smartcar_F+0x68>)
 80001b0:	f000 ffc4 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <smartcar_F+0x68>)
 80001ba:	f000 ffbf 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001c4:	480e      	ldr	r0, [pc, #56]	@ (8000200 <smartcar_F+0x68>)
 80001c6:	f000 ffb9 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2108      	movs	r1, #8
 80001ce:	480c      	ldr	r0, [pc, #48]	@ (8000200 <smartcar_F+0x68>)
 80001d0:	f000 ffb4 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001da:	4808      	ldr	r0, [pc, #32]	@ (80001fc <smartcar_F+0x64>)
 80001dc:	f000 ffae 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2110      	movs	r1, #16
 80001e4:	4806      	ldr	r0, [pc, #24]	@ (8000200 <smartcar_F+0x68>)
 80001e6:	f000 ffa9 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <smartcar_F+0x68>)
 80001f2:	f000 ffa3 	bl	800113c <HAL_GPIO_WritePin>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <smartcar_B>:

void smartcar_B(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	4816      	ldr	r0, [pc, #88]	@ (8000268 <smartcar_B+0x64>)
 800020e:	f000 ff95 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000218:	4814      	ldr	r0, [pc, #80]	@ (800026c <smartcar_B+0x68>)
 800021a:	f000 ff8f 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	2110      	movs	r1, #16
 8000222:	4811      	ldr	r0, [pc, #68]	@ (8000268 <smartcar_B+0x64>)
 8000224:	f000 ff8a 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800022e:	480e      	ldr	r0, [pc, #56]	@ (8000268 <smartcar_B+0x64>)
 8000230:	f000 ff84 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800023a:	480c      	ldr	r0, [pc, #48]	@ (800026c <smartcar_B+0x68>)
 800023c:	f000 ff7e 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000246:	4808      	ldr	r0, [pc, #32]	@ (8000268 <smartcar_B+0x64>)
 8000248:	f000 ff78 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	2120      	movs	r1, #32
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <smartcar_B+0x64>)
 8000252:	f000 ff73 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <smartcar_B+0x64>)
 800025e:	f000 ff6d 	bl	800113c <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <smartcar_S>:

void smartcar_S(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027a:	4816      	ldr	r0, [pc, #88]	@ (80002d4 <smartcar_S+0x64>)
 800027c:	f000 ff5e 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000286:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <smartcar_S+0x68>)
 8000288:	f000 ff58 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	4811      	ldr	r0, [pc, #68]	@ (80002d8 <smartcar_S+0x68>)
 8000292:	f000 ff53 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800029c:	480e      	ldr	r0, [pc, #56]	@ (80002d8 <smartcar_S+0x68>)
 800029e:	f000 ff4d 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <smartcar_S+0x68>)
 80002a8:	f000 ff48 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b2:	4808      	ldr	r0, [pc, #32]	@ (80002d4 <smartcar_S+0x64>)
 80002b4:	f000 ff42 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	4806      	ldr	r0, [pc, #24]	@ (80002d8 <smartcar_S+0x68>)
 80002be:	f000 ff3d 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <smartcar_S+0x68>)
 80002ca:	f000 ff37 	bl	800113c <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40010c00 	.word	0x40010c00

080002dc <smartcar_FL>:

void smartcar_FL(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e6:	4816      	ldr	r0, [pc, #88]	@ (8000340 <smartcar_FL+0x64>)
 80002e8:	f000 ff28 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f2:	4814      	ldr	r0, [pc, #80]	@ (8000344 <smartcar_FL+0x68>)
 80002f4:	f000 ff22 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2120      	movs	r1, #32
 80002fc:	4811      	ldr	r0, [pc, #68]	@ (8000344 <smartcar_FL+0x68>)
 80002fe:	f000 ff1d 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <smartcar_FL+0x68>)
 800030a:	f000 ff17 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	2108      	movs	r1, #8
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <smartcar_FL+0x68>)
 8000314:	f000 ff12 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <smartcar_FL+0x64>)
 8000320:	f000 ff0c 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2110      	movs	r1, #16
 8000328:	4806      	ldr	r0, [pc, #24]	@ (8000344 <smartcar_FL+0x68>)
 800032a:	f000 ff07 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000334:	4803      	ldr	r0, [pc, #12]	@ (8000344 <smartcar_FL+0x68>)
 8000336:	f000 ff01 	bl	800113c <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800
 8000344:	40010c00 	.word	0x40010c00

08000348 <smartcar_FR>:


void smartcar_FR(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000352:	4816      	ldr	r0, [pc, #88]	@ (80003ac <smartcar_FR+0x64>)
 8000354:	f000 fef2 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800035e:	4814      	ldr	r0, [pc, #80]	@ (80003b0 <smartcar_FR+0x68>)
 8000360:	f000 feec 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	4811      	ldr	r0, [pc, #68]	@ (80003b0 <smartcar_FR+0x68>)
 800036a:	f000 fee7 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000374:	480e      	ldr	r0, [pc, #56]	@ (80003b0 <smartcar_FR+0x68>)
 8000376:	f000 fee1 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2108      	movs	r1, #8
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <smartcar_FR+0x68>)
 8000380:	f000 fedc 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800038a:	4808      	ldr	r0, [pc, #32]	@ (80003ac <smartcar_FR+0x64>)
 800038c:	f000 fed6 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4806      	ldr	r0, [pc, #24]	@ (80003b0 <smartcar_FR+0x68>)
 8000396:	f000 fed1 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a0:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <smartcar_FR+0x68>)
 80003a2:	f000 fecb 	bl	800113c <HAL_GPIO_WritePin>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <smartcar_BL>:

void smartcar_BL(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2108      	movs	r1, #8
 80003bc:	4816      	ldr	r0, [pc, #88]	@ (8000418 <smartcar_BL+0x64>)
 80003be:	f000 febd 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003c8:	4814      	ldr	r0, [pc, #80]	@ (800041c <smartcar_BL+0x68>)
 80003ca:	f000 feb7 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2110      	movs	r1, #16
 80003d2:	4811      	ldr	r0, [pc, #68]	@ (8000418 <smartcar_BL+0x64>)
 80003d4:	f000 feb2 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003de:	480e      	ldr	r0, [pc, #56]	@ (8000418 <smartcar_BL+0x64>)
 80003e0:	f000 feac 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003ea:	480c      	ldr	r0, [pc, #48]	@ (800041c <smartcar_BL+0x68>)
 80003ec:	f000 fea6 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80003f0:	2200      	movs	r2, #0
 80003f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003f6:	4808      	ldr	r0, [pc, #32]	@ (8000418 <smartcar_BL+0x64>)
 80003f8:	f000 fea0 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2120      	movs	r1, #32
 8000400:	4805      	ldr	r0, [pc, #20]	@ (8000418 <smartcar_BL+0x64>)
 8000402:	f000 fe9b 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <smartcar_BL+0x64>)
 800040e:	f000 fe95 	bl	800113c <HAL_GPIO_WritePin>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010c00 	.word	0x40010c00
 800041c:	40010800 	.word	0x40010800

08000420 <smartcar_BR>:


void smartcar_BR(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	4816      	ldr	r0, [pc, #88]	@ (8000484 <smartcar_BR+0x64>)
 800042a:	f000 fe87 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000434:	4814      	ldr	r0, [pc, #80]	@ (8000488 <smartcar_BR+0x68>)
 8000436:	f000 fe81 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800043a:	2200      	movs	r2, #0
 800043c:	2110      	movs	r1, #16
 800043e:	4811      	ldr	r0, [pc, #68]	@ (8000484 <smartcar_BR+0x64>)
 8000440:	f000 fe7c 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800044a:	480e      	ldr	r0, [pc, #56]	@ (8000484 <smartcar_BR+0x64>)
 800044c:	f000 fe76 	bl	800113c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000456:	480c      	ldr	r0, [pc, #48]	@ (8000488 <smartcar_BR+0x68>)
 8000458:	f000 fe70 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000462:	4808      	ldr	r0, [pc, #32]	@ (8000484 <smartcar_BR+0x64>)
 8000464:	f000 fe6a 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 8000468:	2200      	movs	r2, #0
 800046a:	2120      	movs	r1, #32
 800046c:	4805      	ldr	r0, [pc, #20]	@ (8000484 <smartcar_BR+0x64>)
 800046e:	f000 fe65 	bl	800113c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000472:	2200      	movs	r2, #0
 8000474:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000478:	4802      	ldr	r0, [pc, #8]	@ (8000484 <smartcar_BR+0x64>)
 800047a:	f000 fe5f 	bl	800113c <HAL_GPIO_WritePin>
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40010c00 	.word	0x40010c00
 8000488:	40010800 	.word	0x40010800

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000490:	f000 fb60 	bl	8000b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000494:	f000 f8f4 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000498:	f000 f95e 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800049c:	f000 f932 	bl	8000704 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("=== RC CAR Test ===\r\n");
 80004a0:	4869      	ldr	r0, [pc, #420]	@ (8000648 <main+0x1bc>)
 80004a2:	f001 fe69 	bl	8002178 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("=== Enter your word ===\r\n");
 80004a6:	4869      	ldr	r0, [pc, #420]	@ (800064c <main+0x1c0>)
 80004a8:	f001 fe66 	bl	8002178 <puts>
	  HAL_UART_Receive(&huart2, &receive, 1, HAL_MAX_DELAY);
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	2201      	movs	r2, #1
 80004b2:	4967      	ldr	r1, [pc, #412]	@ (8000650 <main+0x1c4>)
 80004b4:	4867      	ldr	r0, [pc, #412]	@ (8000654 <main+0x1c8>)
 80004b6:	f001 fb66 	bl	8001b86 <HAL_UART_Receive>

	  if(receive == 'W')
 80004ba:	4b65      	ldr	r3, [pc, #404]	@ (8000650 <main+0x1c4>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b57      	cmp	r3, #87	@ 0x57
 80004c0:	d117      	bne.n	80004f2 <main+0x66>
	  {
		  printf("\r\n");
 80004c2:	4865      	ldr	r0, [pc, #404]	@ (8000658 <main+0x1cc>)
 80004c4:	f001 fe58 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2120      	movs	r1, #32
 80004cc:	4863      	ldr	r0, [pc, #396]	@ (800065c <main+0x1d0>)
 80004ce:	f000 fe35 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "GO\n\r");
 80004d2:	4963      	ldr	r1, [pc, #396]	@ (8000660 <main+0x1d4>)
 80004d4:	4863      	ldr	r0, [pc, #396]	@ (8000664 <main+0x1d8>)
 80004d6:	f001 fe57 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80004da:	4862      	ldr	r0, [pc, #392]	@ (8000664 <main+0x1d8>)
 80004dc:	f7ff fe36 	bl	800014c <strlen>
 80004e0:	4603      	mov	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	2364      	movs	r3, #100	@ 0x64
 80004e6:	495f      	ldr	r1, [pc, #380]	@ (8000664 <main+0x1d8>)
 80004e8:	485a      	ldr	r0, [pc, #360]	@ (8000654 <main+0x1c8>)
 80004ea:	f001 fac1 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_F();
 80004ee:	f7ff fe53 	bl	8000198 <smartcar_F>
	  }

	  if(receive == 'S')
 80004f2:	4b57      	ldr	r3, [pc, #348]	@ (8000650 <main+0x1c4>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2b53      	cmp	r3, #83	@ 0x53
 80004f8:	d117      	bne.n	800052a <main+0x9e>
	  {
		  printf("\r\n");
 80004fa:	4857      	ldr	r0, [pc, #348]	@ (8000658 <main+0x1cc>)
 80004fc:	f001 fe3c 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000500:	2201      	movs	r2, #1
 8000502:	2120      	movs	r1, #32
 8000504:	4855      	ldr	r0, [pc, #340]	@ (800065c <main+0x1d0>)
 8000506:	f000 fe19 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "BACK\n\r");
 800050a:	4957      	ldr	r1, [pc, #348]	@ (8000668 <main+0x1dc>)
 800050c:	4855      	ldr	r0, [pc, #340]	@ (8000664 <main+0x1d8>)
 800050e:	f001 fe3b 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000512:	4854      	ldr	r0, [pc, #336]	@ (8000664 <main+0x1d8>)
 8000514:	f7ff fe1a 	bl	800014c <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	2364      	movs	r3, #100	@ 0x64
 800051e:	4951      	ldr	r1, [pc, #324]	@ (8000664 <main+0x1d8>)
 8000520:	484c      	ldr	r0, [pc, #304]	@ (8000654 <main+0x1c8>)
 8000522:	f001 faa5 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_B();
 8000526:	f7ff fe6d 	bl	8000204 <smartcar_B>
	  }

	  if(receive == 'A')
 800052a:	4b49      	ldr	r3, [pc, #292]	@ (8000650 <main+0x1c4>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b41      	cmp	r3, #65	@ 0x41
 8000530:	d117      	bne.n	8000562 <main+0xd6>
	  {
		  printf("\r\n");
 8000532:	4849      	ldr	r0, [pc, #292]	@ (8000658 <main+0x1cc>)
 8000534:	f001 fe20 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	2120      	movs	r1, #32
 800053c:	4847      	ldr	r0, [pc, #284]	@ (800065c <main+0x1d0>)
 800053e:	f000 fdfd 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_LEFT\n\r");
 8000542:	494a      	ldr	r1, [pc, #296]	@ (800066c <main+0x1e0>)
 8000544:	4847      	ldr	r0, [pc, #284]	@ (8000664 <main+0x1d8>)
 8000546:	f001 fe1f 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800054a:	4846      	ldr	r0, [pc, #280]	@ (8000664 <main+0x1d8>)
 800054c:	f7ff fdfe 	bl	800014c <strlen>
 8000550:	4603      	mov	r3, r0
 8000552:	b29a      	uxth	r2, r3
 8000554:	2364      	movs	r3, #100	@ 0x64
 8000556:	4943      	ldr	r1, [pc, #268]	@ (8000664 <main+0x1d8>)
 8000558:	483e      	ldr	r0, [pc, #248]	@ (8000654 <main+0x1c8>)
 800055a:	f001 fa89 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_FL();
 800055e:	f7ff febd 	bl	80002dc <smartcar_FL>
	  }

	  if(receive == 'D')
 8000562:	4b3b      	ldr	r3, [pc, #236]	@ (8000650 <main+0x1c4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b44      	cmp	r3, #68	@ 0x44
 8000568:	d117      	bne.n	800059a <main+0x10e>
	  {
		  printf("\r\n");
 800056a:	483b      	ldr	r0, [pc, #236]	@ (8000658 <main+0x1cc>)
 800056c:	f001 fe04 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	4839      	ldr	r0, [pc, #228]	@ (800065c <main+0x1d0>)
 8000576:	f000 fde1 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_RIGHT\n\r");
 800057a:	493d      	ldr	r1, [pc, #244]	@ (8000670 <main+0x1e4>)
 800057c:	4839      	ldr	r0, [pc, #228]	@ (8000664 <main+0x1d8>)
 800057e:	f001 fe03 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000582:	4838      	ldr	r0, [pc, #224]	@ (8000664 <main+0x1d8>)
 8000584:	f7ff fde2 	bl	800014c <strlen>
 8000588:	4603      	mov	r3, r0
 800058a:	b29a      	uxth	r2, r3
 800058c:	2364      	movs	r3, #100	@ 0x64
 800058e:	4935      	ldr	r1, [pc, #212]	@ (8000664 <main+0x1d8>)
 8000590:	4830      	ldr	r0, [pc, #192]	@ (8000654 <main+0x1c8>)
 8000592:	f001 fa6d 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_FR();
 8000596:	f7ff fed7 	bl	8000348 <smartcar_FR>
	  }

	  if(receive == 'Z')
 800059a:	4b2d      	ldr	r3, [pc, #180]	@ (8000650 <main+0x1c4>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b5a      	cmp	r3, #90	@ 0x5a
 80005a0:	d117      	bne.n	80005d2 <main+0x146>
	  {
		  printf("\r\n");
 80005a2:	482d      	ldr	r0, [pc, #180]	@ (8000658 <main+0x1cc>)
 80005a4:	f001 fde8 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2120      	movs	r1, #32
 80005ac:	482b      	ldr	r0, [pc, #172]	@ (800065c <main+0x1d0>)
 80005ae:	f000 fdc5 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "B_LEFT\n\r");
 80005b2:	4930      	ldr	r1, [pc, #192]	@ (8000674 <main+0x1e8>)
 80005b4:	482b      	ldr	r0, [pc, #172]	@ (8000664 <main+0x1d8>)
 80005b6:	f001 fde7 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80005ba:	482a      	ldr	r0, [pc, #168]	@ (8000664 <main+0x1d8>)
 80005bc:	f7ff fdc6 	bl	800014c <strlen>
 80005c0:	4603      	mov	r3, r0
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	2364      	movs	r3, #100	@ 0x64
 80005c6:	4927      	ldr	r1, [pc, #156]	@ (8000664 <main+0x1d8>)
 80005c8:	4822      	ldr	r0, [pc, #136]	@ (8000654 <main+0x1c8>)
 80005ca:	f001 fa51 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_BL();
 80005ce:	f7ff fef1 	bl	80003b4 <smartcar_BL>
	  }

	  if(receive == 'C')
 80005d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000650 <main+0x1c4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b43      	cmp	r3, #67	@ 0x43
 80005d8:	d117      	bne.n	800060a <main+0x17e>
	  {
		  printf("\r\n");
 80005da:	481f      	ldr	r0, [pc, #124]	@ (8000658 <main+0x1cc>)
 80005dc:	f001 fdcc 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2120      	movs	r1, #32
 80005e4:	481d      	ldr	r0, [pc, #116]	@ (800065c <main+0x1d0>)
 80005e6:	f000 fda9 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "B_RIGHT\n\r");
 80005ea:	4923      	ldr	r1, [pc, #140]	@ (8000678 <main+0x1ec>)
 80005ec:	481d      	ldr	r0, [pc, #116]	@ (8000664 <main+0x1d8>)
 80005ee:	f001 fdcb 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80005f2:	481c      	ldr	r0, [pc, #112]	@ (8000664 <main+0x1d8>)
 80005f4:	f7ff fdaa 	bl	800014c <strlen>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	2364      	movs	r3, #100	@ 0x64
 80005fe:	4919      	ldr	r1, [pc, #100]	@ (8000664 <main+0x1d8>)
 8000600:	4814      	ldr	r0, [pc, #80]	@ (8000654 <main+0x1c8>)
 8000602:	f001 fa35 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_BR();
 8000606:	f7ff ff0b 	bl	8000420 <smartcar_BR>
	  }

	  if(receive == 'P')
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <main+0x1c4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b50      	cmp	r3, #80	@ 0x50
 8000610:	f47f af49 	bne.w	80004a6 <main+0x1a>
	  {
		  printf("\r\n");
 8000614:	4810      	ldr	r0, [pc, #64]	@ (8000658 <main+0x1cc>)
 8000616:	f001 fdaf 	bl	8002178 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2120      	movs	r1, #32
 800061e:	480f      	ldr	r0, [pc, #60]	@ (800065c <main+0x1d0>)
 8000620:	f000 fd8c 	bl	800113c <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "OFF\n\r");
 8000624:	4915      	ldr	r1, [pc, #84]	@ (800067c <main+0x1f0>)
 8000626:	480f      	ldr	r0, [pc, #60]	@ (8000664 <main+0x1d8>)
 8000628:	f001 fdae 	bl	8002188 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 800062c:	480d      	ldr	r0, [pc, #52]	@ (8000664 <main+0x1d8>)
 800062e:	f7ff fd8d 	bl	800014c <strlen>
 8000632:	4603      	mov	r3, r0
 8000634:	b29a      	uxth	r2, r3
 8000636:	2364      	movs	r3, #100	@ 0x64
 8000638:	490a      	ldr	r1, [pc, #40]	@ (8000664 <main+0x1d8>)
 800063a:	4806      	ldr	r0, [pc, #24]	@ (8000654 <main+0x1c8>)
 800063c:	f001 fa18 	bl	8001a70 <HAL_UART_Transmit>
		  smartcar_S();
 8000640:	f7ff fe16 	bl	8000270 <smartcar_S>
	  printf("=== Enter your word ===\r\n");
 8000644:	e72f      	b.n	80004a6 <main+0x1a>
 8000646:	bf00      	nop
 8000648:	08002f9c 	.word	0x08002f9c
 800064c:	08002fb4 	.word	0x08002fb4
 8000650:	200001cc 	.word	0x200001cc
 8000654:	20000084 	.word	0x20000084
 8000658:	08002f98 	.word	0x08002f98
 800065c:	40010800 	.word	0x40010800
 8000660:	08002fd0 	.word	0x08002fd0
 8000664:	200000cc 	.word	0x200000cc
 8000668:	08002fd8 	.word	0x08002fd8
 800066c:	08002fe0 	.word	0x08002fe0
 8000670:	08002fec 	.word	0x08002fec
 8000674:	08002ff8 	.word	0x08002ff8
 8000678:	08003004 	.word	0x08003004
 800067c:	08003010 	.word	0x08003010

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b090      	sub	sp, #64	@ 0x40
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2228      	movs	r2, #40	@ 0x28
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fe74 	bl	800237c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a6:	2301      	movs	r3, #1
 80006a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006aa:	2310      	movs	r3, #16
 80006ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80006b6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80006ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0318 	add.w	r3, r7, #24
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fd75 	bl	80011b0 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80006cc:	f000 f8cc 	bl	8000868 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d0:	230f      	movs	r3, #15
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d4:	2302      	movs	r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f000 ffe2 	bl	80016b4 <HAL_RCC_ClockConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006f6:	f000 f8b7 	bl	8000868 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3740      	adds	r7, #64	@ 0x40
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000708:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_USART2_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	@ (8000750 <MX_USART2_UART_Init+0x4c>)
 800073c:	f001 f948 	bl	80019d0 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f88f 	bl	8000868 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000084 	.word	0x20000084
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4b39      	ldr	r3, [pc, #228]	@ (8000854 <MX_GPIO_Init+0xfc>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a38      	ldr	r2, [pc, #224]	@ (8000854 <MX_GPIO_Init+0xfc>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b36      	ldr	r3, [pc, #216]	@ (8000854 <MX_GPIO_Init+0xfc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0310 	and.w	r3, r3, #16
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	4b33      	ldr	r3, [pc, #204]	@ (8000854 <MX_GPIO_Init+0xfc>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a32      	ldr	r2, [pc, #200]	@ (8000854 <MX_GPIO_Init+0xfc>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b30      	ldr	r3, [pc, #192]	@ (8000854 <MX_GPIO_Init+0xfc>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0320 	and.w	r3, r3, #32
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <MX_GPIO_Init+0xfc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <MX_GPIO_Init+0xfc>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|LBF_Pin|LFB_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f240 6121 	movw	r1, #1569	@ 0x621
 80007d2:	4821      	ldr	r0, [pc, #132]	@ (8000858 <MX_GPIO_Init+0x100>)
 80007d4:	f000 fcb2 	bl	800113c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 80007de:	481f      	ldr	r0, [pc, #124]	@ (800085c <MX_GPIO_Init+0x104>)
 80007e0:	f000 fcac 	bl	800113c <HAL_GPIO_WritePin>
                          |RBF_Pin|RBB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <MX_GPIO_Init+0x108>)
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 0310 	add.w	r3, r7, #16
 80007f6:	4619      	mov	r1, r3
 80007f8:	481a      	ldr	r0, [pc, #104]	@ (8000864 <MX_GPIO_Init+0x10c>)
 80007fa:	f000 fb1b 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin LBF_Pin LFB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|LBF_Pin|LFB_Pin;
 80007fe:	f240 6321 	movw	r3, #1569	@ 0x621
 8000802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2302      	movs	r3, #2
 800080e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0310 	add.w	r3, r7, #16
 8000814:	4619      	mov	r1, r3
 8000816:	4810      	ldr	r0, [pc, #64]	@ (8000858 <MX_GPIO_Init+0x100>)
 8000818:	f000 fb0c 	bl	8000e34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LBB_Pin LFF_Pin RFF_Pin RFB_Pin
                           RBF_Pin RBB_Pin */
  GPIO_InitStruct.Pin = LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 800081c:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 8000820:	613b      	str	r3, [r7, #16]
                          |RBF_Pin|RBB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2302      	movs	r3, #2
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	4809      	ldr	r0, [pc, #36]	@ (800085c <MX_GPIO_Init+0x104>)
 8000836:	f000 fafd 	bl	8000e34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	2100      	movs	r1, #0
 800083e:	2028      	movs	r0, #40	@ 0x28
 8000840:	f000 fac1 	bl	8000dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000844:	2028      	movs	r0, #40	@ 0x28
 8000846:	f000 fada 	bl	8000dfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40021000 	.word	0x40021000
 8000858:	40010800 	.word	0x40010800
 800085c:	40010c00 	.word	0x40010c00
 8000860:	10110000 	.word	0x10110000
 8000864:	40011000 	.word	0x40011000

08000868 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800086c:	b672      	cpsid	i
}
 800086e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <Error_Handler+0x8>

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a14      	ldr	r2, [pc, #80]	@ (80008d0 <HAL_MspInit+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b12      	ldr	r3, [pc, #72]	@ (80008d0 <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	@ (80008d0 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_MspInit+0x5c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_MspInit+0x60>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	@ (80008d4 <HAL_MspInit+0x60>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a15      	ldr	r2, [pc, #84]	@ (8000948 <HAL_UART_MspInit+0x70>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d123      	bne.n	8000940 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f8:	4b14      	ldr	r3, [pc, #80]	@ (800094c <HAL_UART_MspInit+0x74>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	4a13      	ldr	r2, [pc, #76]	@ (800094c <HAL_UART_MspInit+0x74>)
 80008fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000902:	61d3      	str	r3, [r2, #28]
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <HAL_UART_MspInit+0x74>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <HAL_UART_MspInit+0x74>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <HAL_UART_MspInit+0x74>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b0b      	ldr	r3, [pc, #44]	@ (800094c <HAL_UART_MspInit+0x74>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000928:	230c      	movs	r3, #12
 800092a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2302      	movs	r3, #2
 8000932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4619      	mov	r1, r3
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <HAL_UART_MspInit+0x78>)
 800093c:	f000 fa7a 	bl	8000e34 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000940:	bf00      	nop
 8000942:	3720      	adds	r7, #32
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40004400 	.word	0x40004400
 800094c:	40021000 	.word	0x40021000
 8000950:	40010800 	.word	0x40010800

08000954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000958:	bf00      	nop
 800095a:	e7fd      	b.n	8000958 <NMI_Handler+0x4>

0800095c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000960:	bf00      	nop
 8000962:	e7fd      	b.n	8000960 <HardFault_Handler+0x4>

08000964 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <MemManage_Handler+0x4>

0800096c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000970:	bf00      	nop
 8000972:	e7fd      	b.n	8000970 <BusFault_Handler+0x4>

08000974 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <UsageFault_Handler+0x4>

0800097c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr

08000988 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr

080009a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a4:	f000 f91c 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}

080009ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009b4:	f000 fbda 	bl	800116c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e00a      	b.n	80009e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009ce:	f3af 8000 	nop.w
 80009d2:	4601      	mov	r1, r0
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	60ba      	str	r2, [r7, #8]
 80009da:	b2ca      	uxtb	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	dbf0      	blt.n	80009ce <_read+0x12>
  }

  return len;
 80009ec:	687b      	ldr	r3, [r7, #4]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	e009      	b.n	8000a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	60ba      	str	r2, [r7, #8]
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fba3 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697a      	ldr	r2, [r7, #20]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	429a      	cmp	r2, r3
 8000a22:	dbf1      	blt.n	8000a08 <_write+0x12>
  }
  return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <_close>:

int _close(int file)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	b083      	sub	sp, #12
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr

08000a44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a54:	605a      	str	r2, [r3, #4]
  return 0;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <_isatty>:

int _isatty(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a76:	b480      	push	{r7}
 8000a78:	b085      	sub	sp, #20
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	60f8      	str	r0, [r7, #12]
 8000a7e:	60b9      	str	r1, [r7, #8]
 8000a80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
	...

08000a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <_sbrk+0x5c>)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <_sbrk+0x60>)
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa4:	4b13      	ldr	r3, [pc, #76]	@ (8000af4 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d102      	bne.n	8000ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000aac:	4b11      	ldr	r3, [pc, #68]	@ (8000af4 <_sbrk+0x64>)
 8000aae:	4a12      	ldr	r2, [pc, #72]	@ (8000af8 <_sbrk+0x68>)
 8000ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab2:	4b10      	ldr	r3, [pc, #64]	@ (8000af4 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	693a      	ldr	r2, [r7, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d207      	bcs.n	8000ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ac0:	f001 fcaa 	bl	8002418 <__errno>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b07      	ldr	r3, [pc, #28]	@ (8000af4 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3718      	adds	r7, #24
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20005000 	.word	0x20005000
 8000af0:	00000400 	.word	0x00000400
 8000af4:	200001d0 	.word	0x200001d0
 8000af8:	20000328 	.word	0x20000328

08000afc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b08:	f7ff fff8 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b0c:	480b      	ldr	r0, [pc, #44]	@ (8000b3c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b0e:	490c      	ldr	r1, [pc, #48]	@ (8000b40 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b14:	e002      	b.n	8000b1c <LoopCopyDataInit>

08000b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1a:	3304      	adds	r3, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b20:	d3f9      	bcc.n	8000b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b22:	4a09      	ldr	r2, [pc, #36]	@ (8000b48 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b24:	4c09      	ldr	r4, [pc, #36]	@ (8000b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b28:	e001      	b.n	8000b2e <LoopFillZerobss>

08000b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2c:	3204      	adds	r2, #4

08000b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b30:	d3fb      	bcc.n	8000b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b32:	f001 fc77 	bl	8002424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b36:	f7ff fca9 	bl	800048c <main>
  bx lr
 8000b3a:	4770      	bx	lr
  ldr r0, =_sdata
 8000b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b44:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 8000b48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b4c:	20000324 	.word	0x20000324

08000b50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b50:	e7fe      	b.n	8000b50 <ADC1_2_IRQHandler>
	...

08000b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_Init+0x28>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_Init+0x28>)
 8000b5e:	f043 0310 	orr.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f923 	bl	8000db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe80 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40022000 	.word	0x40022000

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f93b 	bl	8000e1a <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f903 	bl	8000dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	200001d4 	.word	0x200001d4

08000c04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	200001d4 	.word	0x200001d4

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	@ (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	f003 021f 	and.w	r2, r3, #31
 8000c94:	4906      	ldr	r1, [pc, #24]	@ (8000cb0 <__NVIC_EnableIRQ+0x34>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	095b      	lsrs	r3, r3, #5
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d7c:	d301      	bcc.n	8000d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e00f      	b.n	8000da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d82:	4a0a      	ldr	r2, [pc, #40]	@ (8000dac <SysTick_Config+0x40>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f7ff ff90 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d94:	4b05      	ldr	r3, [pc, #20]	@ (8000dac <SysTick_Config+0x40>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9a:	4b04      	ldr	r3, [pc, #16]	@ (8000dac <SysTick_Config+0x40>)
 8000d9c:	2207      	movs	r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	e000e010 	.word	0xe000e010

08000db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f7ff ff2d 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b086      	sub	sp, #24
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	60b9      	str	r1, [r7, #8]
 8000dd0:	607a      	str	r2, [r7, #4]
 8000dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd8:	f7ff ff42 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	68b9      	ldr	r1, [r7, #8]
 8000de2:	6978      	ldr	r0, [r7, #20]
 8000de4:	f7ff ff90 	bl	8000d08 <NVIC_EncodePriority>
 8000de8:	4602      	mov	r2, r0
 8000dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff5f 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff35 	bl	8000c7c <__NVIC_EnableIRQ>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ffa2 	bl	8000d6c <SysTick_Config>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b08b      	sub	sp, #44	@ 0x2c
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e169      	b.n	800111c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	69fa      	ldr	r2, [r7, #28]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	f040 8158 	bne.w	8001116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a9a      	ldr	r2, [pc, #616]	@ (80010d4 <HAL_GPIO_Init+0x2a0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d05e      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e70:	4a98      	ldr	r2, [pc, #608]	@ (80010d4 <HAL_GPIO_Init+0x2a0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d875      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e76:	4a98      	ldr	r2, [pc, #608]	@ (80010d8 <HAL_GPIO_Init+0x2a4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d058      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e7c:	4a96      	ldr	r2, [pc, #600]	@ (80010d8 <HAL_GPIO_Init+0x2a4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d86f      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e82:	4a96      	ldr	r2, [pc, #600]	@ (80010dc <HAL_GPIO_Init+0x2a8>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d052      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e88:	4a94      	ldr	r2, [pc, #592]	@ (80010dc <HAL_GPIO_Init+0x2a8>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d869      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e8e:	4a94      	ldr	r2, [pc, #592]	@ (80010e0 <HAL_GPIO_Init+0x2ac>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d04c      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000e94:	4a92      	ldr	r2, [pc, #584]	@ (80010e0 <HAL_GPIO_Init+0x2ac>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d863      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000e9a:	4a92      	ldr	r2, [pc, #584]	@ (80010e4 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d046      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
 8000ea0:	4a90      	ldr	r2, [pc, #576]	@ (80010e4 <HAL_GPIO_Init+0x2b0>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d85d      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000ea6:	2b12      	cmp	r3, #18
 8000ea8:	d82a      	bhi.n	8000f00 <HAL_GPIO_Init+0xcc>
 8000eaa:	2b12      	cmp	r3, #18
 8000eac:	d859      	bhi.n	8000f62 <HAL_GPIO_Init+0x12e>
 8000eae:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb4 <HAL_GPIO_Init+0x80>)
 8000eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb4:	08000f2f 	.word	0x08000f2f
 8000eb8:	08000f09 	.word	0x08000f09
 8000ebc:	08000f1b 	.word	0x08000f1b
 8000ec0:	08000f5d 	.word	0x08000f5d
 8000ec4:	08000f63 	.word	0x08000f63
 8000ec8:	08000f63 	.word	0x08000f63
 8000ecc:	08000f63 	.word	0x08000f63
 8000ed0:	08000f63 	.word	0x08000f63
 8000ed4:	08000f63 	.word	0x08000f63
 8000ed8:	08000f63 	.word	0x08000f63
 8000edc:	08000f63 	.word	0x08000f63
 8000ee0:	08000f63 	.word	0x08000f63
 8000ee4:	08000f63 	.word	0x08000f63
 8000ee8:	08000f63 	.word	0x08000f63
 8000eec:	08000f63 	.word	0x08000f63
 8000ef0:	08000f63 	.word	0x08000f63
 8000ef4:	08000f63 	.word	0x08000f63
 8000ef8:	08000f11 	.word	0x08000f11
 8000efc:	08000f25 	.word	0x08000f25
 8000f00:	4a79      	ldr	r2, [pc, #484]	@ (80010e8 <HAL_GPIO_Init+0x2b4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d013      	beq.n	8000f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f06:	e02c      	b.n	8000f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	623b      	str	r3, [r7, #32]
          break;
 8000f0e:	e029      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	3304      	adds	r3, #4
 8000f16:	623b      	str	r3, [r7, #32]
          break;
 8000f18:	e024      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	3308      	adds	r3, #8
 8000f20:	623b      	str	r3, [r7, #32]
          break;
 8000f22:	e01f      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	330c      	adds	r3, #12
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	e01a      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d102      	bne.n	8000f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f36:	2304      	movs	r3, #4
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e013      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d105      	bne.n	8000f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	611a      	str	r2, [r3, #16]
          break;
 8000f4e:	e009      	b.n	8000f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f50:	2308      	movs	r3, #8
 8000f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	615a      	str	r2, [r3, #20]
          break;
 8000f5a:	e003      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x130>
          break;
 8000f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	2bff      	cmp	r3, #255	@ 0xff
 8000f68:	d801      	bhi.n	8000f6e <HAL_GPIO_Init+0x13a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	e001      	b.n	8000f72 <HAL_GPIO_Init+0x13e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	3304      	adds	r3, #4
 8000f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	2bff      	cmp	r3, #255	@ 0xff
 8000f78:	d802      	bhi.n	8000f80 <HAL_GPIO_Init+0x14c>
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	e002      	b.n	8000f86 <HAL_GPIO_Init+0x152>
 8000f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f82:	3b08      	subs	r3, #8
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	210f      	movs	r1, #15
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	401a      	ands	r2, r3
 8000f98:	6a39      	ldr	r1, [r7, #32]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa0:	431a      	orrs	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f000 80b1 	beq.w	8001116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fba:	f043 0301 	orr.w	r3, r3, #1
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80010ec <HAL_GPIO_Init+0x2b8>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fcc:	4a48      	ldr	r2, [pc, #288]	@ (80010f0 <HAL_GPIO_Init+0x2bc>)
 8000fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a40      	ldr	r2, [pc, #256]	@ (80010f4 <HAL_GPIO_Init+0x2c0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d013      	beq.n	8001020 <HAL_GPIO_Init+0x1ec>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80010f8 <HAL_GPIO_Init+0x2c4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1e8>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a3e      	ldr	r2, [pc, #248]	@ (80010fc <HAL_GPIO_Init+0x2c8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1e4>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a3d      	ldr	r2, [pc, #244]	@ (8001100 <HAL_GPIO_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1e0>
 8001010:	2303      	movs	r3, #3
 8001012:	e006      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001014:	2304      	movs	r3, #4
 8001016:	e004      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001018:	2302      	movs	r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <HAL_GPIO_Init+0x1ee>
 8001020:	2300      	movs	r3, #0
 8001022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001024:	f002 0203 	and.w	r2, r2, #3
 8001028:	0092      	lsls	r2, r2, #2
 800102a:	4093      	lsls	r3, r2
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001032:	492f      	ldr	r1, [pc, #188]	@ (80010f0 <HAL_GPIO_Init+0x2bc>)
 8001034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001036:	089b      	lsrs	r3, r3, #2
 8001038:	3302      	adds	r3, #2
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d006      	beq.n	800105a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800104c:	4b2d      	ldr	r3, [pc, #180]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	492c      	ldr	r1, [pc, #176]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	608b      	str	r3, [r1, #8]
 8001058:	e006      	b.n	8001068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800105a:	4b2a      	ldr	r3, [pc, #168]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	43db      	mvns	r3, r3
 8001062:	4928      	ldr	r1, [pc, #160]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001064:	4013      	ands	r3, r2
 8001066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	4922      	ldr	r1, [pc, #136]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	4313      	orrs	r3, r2
 800107e:	60cb      	str	r3, [r1, #12]
 8001080:	e006      	b.n	8001090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001082:	4b20      	ldr	r3, [pc, #128]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	43db      	mvns	r3, r3
 800108a:	491e      	ldr	r1, [pc, #120]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800108c:	4013      	ands	r3, r2
 800108e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800109c:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	4918      	ldr	r1, [pc, #96]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4914      	ldr	r1, [pc, #80]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d021      	beq.n	8001108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	490e      	ldr	r1, [pc, #56]	@ (8001104 <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
 80010d0:	e021      	b.n	8001116 <HAL_GPIO_Init+0x2e2>
 80010d2:	bf00      	nop
 80010d4:	10320000 	.word	0x10320000
 80010d8:	10310000 	.word	0x10310000
 80010dc:	10220000 	.word	0x10220000
 80010e0:	10210000 	.word	0x10210000
 80010e4:	10120000 	.word	0x10120000
 80010e8:	10110000 	.word	0x10110000
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010000 	.word	0x40010000
 80010f4:	40010800 	.word	0x40010800
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	40011000 	.word	0x40011000
 8001100:	40011400 	.word	0x40011400
 8001104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <HAL_GPIO_Init+0x304>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	43db      	mvns	r3, r3
 8001110:	4909      	ldr	r1, [pc, #36]	@ (8001138 <HAL_GPIO_Init+0x304>)
 8001112:	4013      	ands	r3, r2
 8001114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001118:	3301      	adds	r3, #1
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001122:	fa22 f303 	lsr.w	r3, r2, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	f47f ae8e 	bne.w	8000e48 <HAL_GPIO_Init+0x14>
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	372c      	adds	r7, #44	@ 0x2c
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	807b      	strh	r3, [r7, #2]
 8001148:	4613      	mov	r3, r2
 800114a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800114c:	787b      	ldrb	r3, [r7, #1]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001152:	887a      	ldrh	r2, [r7, #2]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001158:	e003      	b.n	8001162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	041a      	lsls	r2, r3, #16
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	611a      	str	r2, [r3, #16]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001178:	695a      	ldr	r2, [r3, #20]
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d006      	beq.n	8001190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001188:	88fb      	ldrh	r3, [r7, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f806 	bl	800119c <HAL_GPIO_EXTI_Callback>
  }
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40010400 	.word	0x40010400

0800119c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr

080011b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e272      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8087 	beq.w	80012de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d0:	4b92      	ldr	r3, [pc, #584]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d00c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011dc:	4b8f      	ldr	r3, [pc, #572]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d112      	bne.n	800120e <HAL_RCC_OscConfig+0x5e>
 80011e8:	4b8c      	ldr	r3, [pc, #560]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011f4:	d10b      	bne.n	800120e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	4b89      	ldr	r3, [pc, #548]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d06c      	beq.n	80012dc <HAL_RCC_OscConfig+0x12c>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d168      	bne.n	80012dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e24c      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x76>
 8001218:	4b80      	ldr	r3, [pc, #512]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a7f      	ldr	r2, [pc, #508]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e02e      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x98>
 800122e:	4b7b      	ldr	r3, [pc, #492]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7a      	ldr	r2, [pc, #488]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b78      	ldr	r3, [pc, #480]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a77      	ldr	r2, [pc, #476]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0xbc>
 8001252:	4b72      	ldr	r3, [pc, #456]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a71      	ldr	r2, [pc, #452]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b6f      	ldr	r3, [pc, #444]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a6e      	ldr	r2, [pc, #440]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xd4>
 800126c:	4b6b      	ldr	r3, [pc, #428]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a6a      	ldr	r2, [pc, #424]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b68      	ldr	r3, [pc, #416]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a67      	ldr	r2, [pc, #412]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001282:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff fcba 	bl	8000c04 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fcb6 	bl	8000c04 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	@ 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e200      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b5d      	ldr	r3, [pc, #372]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xe4>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b4:	f7ff fca6 	bl	8000c04 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fca2 	bl	8000c04 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	@ 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e1ec      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b53      	ldr	r3, [pc, #332]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x10c>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d063      	beq.n	80013b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ea:	4b4c      	ldr	r3, [pc, #304]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012f6:	4b49      	ldr	r3, [pc, #292]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x18c>
 8001302:	4b46      	ldr	r3, [pc, #280]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b43      	ldr	r3, [pc, #268]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x176>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1c0      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b3d      	ldr	r3, [pc, #244]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4939      	ldr	r1, [pc, #228]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e03a      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d020      	beq.n	8001386 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <HAL_RCC_OscConfig+0x270>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fc5b 	bl	8000c04 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fc57 	bl	8000c04 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1a1      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0302 	and.w	r3, r3, #2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	4927      	ldr	r1, [pc, #156]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 8001380:	4313      	orrs	r3, r2
 8001382:	600b      	str	r3, [r1, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b26      	ldr	r3, [pc, #152]	@ (8001420 <HAL_RCC_OscConfig+0x270>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fc3a 	bl	8000c04 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001394:	f7ff fc36 	bl	8000c04 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e180      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013a6:	4b1d      	ldr	r3, [pc, #116]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d03a      	beq.n	8001434 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d019      	beq.n	80013fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b17      	ldr	r3, [pc, #92]	@ (8001424 <HAL_RCC_OscConfig+0x274>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7ff fc1a 	bl	8000c04 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff fc16 	bl	8000c04 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e160      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	4b0d      	ldr	r3, [pc, #52]	@ (800141c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 face 	bl	8001994 <RCC_Delay>
 80013f8:	e01c      	b.n	8001434 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <HAL_RCC_OscConfig+0x274>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001400:	f7ff fc00 	bl	8000c04 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001406:	e00f      	b.n	8001428 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fbfc 	bl	8000c04 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d908      	bls.n	8001428 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e146      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	42420000 	.word	0x42420000
 8001424:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001428:	4b92      	ldr	r3, [pc, #584]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1e9      	bne.n	8001408 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80a6 	beq.w	800158e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001446:	4b8b      	ldr	r3, [pc, #556]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10d      	bne.n	800146e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b88      	ldr	r3, [pc, #544]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a87      	ldr	r2, [pc, #540]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146a:	2301      	movs	r3, #1
 800146c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b82      	ldr	r3, [pc, #520]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b7f      	ldr	r3, [pc, #508]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7e      	ldr	r2, [pc, #504]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001484:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff fbbd 	bl	8000c04 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800148e:	f7ff fbb9 	bl	8000c04 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b64      	cmp	r3, #100	@ 0x64
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e103      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a0:	4b75      	ldr	r3, [pc, #468]	@ (8001678 <HAL_RCC_OscConfig+0x4c8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d106      	bne.n	80014c2 <HAL_RCC_OscConfig+0x312>
 80014b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6213      	str	r3, [r2, #32]
 80014c0:	e02d      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10c      	bne.n	80014e4 <HAL_RCC_OscConfig+0x334>
 80014ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a69      	ldr	r2, [pc, #420]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	4b67      	ldr	r3, [pc, #412]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	4a66      	ldr	r2, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	f023 0304 	bic.w	r3, r3, #4
 80014e0:	6213      	str	r3, [r2, #32]
 80014e2:	e01c      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x356>
 80014ec:	4b61      	ldr	r3, [pc, #388]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a60      	ldr	r2, [pc, #384]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4b5e      	ldr	r3, [pc, #376]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4a5d      	ldr	r2, [pc, #372]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	e00b      	b.n	800151e <HAL_RCC_OscConfig+0x36e>
 8001506:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a5a      	ldr	r2, [pc, #360]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	4b58      	ldr	r3, [pc, #352]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a57      	ldr	r2, [pc, #348]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d015      	beq.n	8001552 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fb6d 	bl	8000c04 <HAL_GetTick>
 800152a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152c:	e00a      	b.n	8001544 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152e:	f7ff fb69 	bl	8000c04 <HAL_GetTick>
 8001532:	4602      	mov	r2, r0
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800153c:	4293      	cmp	r3, r2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0b1      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	4b4b      	ldr	r3, [pc, #300]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ee      	beq.n	800152e <HAL_RCC_OscConfig+0x37e>
 8001550:	e014      	b.n	800157c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001552:	f7ff fb57 	bl	8000c04 <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fb53 	bl	8000c04 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e09b      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	4b40      	ldr	r3, [pc, #256]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1ee      	bne.n	800155a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d105      	bne.n	800158e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001582:	4b3c      	ldr	r3, [pc, #240]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a3b      	ldr	r2, [pc, #236]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f000 8087 	beq.w	80016a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001598:	4b36      	ldr	r3, [pc, #216]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d061      	beq.n	8001668 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d146      	bne.n	800163a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ac:	4b33      	ldr	r3, [pc, #204]	@ (800167c <HAL_RCC_OscConfig+0x4cc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b2:	f7ff fb27 	bl	8000c04 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ba:	f7ff fb23 	bl	8000c04 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e06d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015cc:	4b29      	ldr	r3, [pc, #164]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d1f0      	bne.n	80015ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015e0:	d108      	bne.n	80015f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015e2:	4b24      	ldr	r3, [pc, #144]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	4921      	ldr	r1, [pc, #132]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	4313      	orrs	r3, r2
 80015f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a19      	ldr	r1, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	430b      	orrs	r3, r1
 8001606:	491b      	ldr	r1, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160c:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <HAL_RCC_OscConfig+0x4cc>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff faf7 	bl	8000c04 <HAL_GetTick>
 8001616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001618:	e008      	b.n	800162c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161a:	f7ff faf3 	bl	8000c04 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e03d      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0f0      	beq.n	800161a <HAL_RCC_OscConfig+0x46a>
 8001638:	e035      	b.n	80016a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <HAL_RCC_OscConfig+0x4cc>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fae0 	bl	8000c04 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fadc 	bl	8000c04 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e026      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x498>
 8001666:	e01e      	b.n	80016a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d107      	bne.n	8001680 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e019      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
 8001674:	40021000 	.word	0x40021000
 8001678:	40007000 	.word	0x40007000
 800167c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <HAL_RCC_OscConfig+0x500>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	429a      	cmp	r2, r3
 8001692:	d106      	bne.n	80016a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	429a      	cmp	r2, r3
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e000      	b.n	80016a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40021000 	.word	0x40021000

080016b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e0d0      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d910      	bls.n	80016f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	4b67      	ldr	r3, [pc, #412]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 0207 	bic.w	r2, r3, #7
 80016de:	4965      	ldr	r1, [pc, #404]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e6:	4b63      	ldr	r3, [pc, #396]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0b8      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d020      	beq.n	8001746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d005      	beq.n	800171c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001710:	4b59      	ldr	r3, [pc, #356]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4a58      	ldr	r2, [pc, #352]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800171a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0308 	and.w	r3, r3, #8
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001728:	4b53      	ldr	r3, [pc, #332]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001734:	4b50      	ldr	r3, [pc, #320]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	494d      	ldr	r1, [pc, #308]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d040      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175a:	4b47      	ldr	r3, [pc, #284]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d115      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e07f      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001772:	4b41      	ldr	r3, [pc, #260]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e073      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	4b3d      	ldr	r3, [pc, #244]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e06b      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001792:	4b39      	ldr	r3, [pc, #228]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f023 0203 	bic.w	r2, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4936      	ldr	r1, [pc, #216]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a4:	f7ff fa2e 	bl	8000c04 <HAL_GetTick>
 80017a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	e00a      	b.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ac:	f7ff fa2a 	bl	8000c04 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e053      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 020c 	and.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d1eb      	bne.n	80017ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d210      	bcs.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	4922      	ldr	r1, [pc, #136]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e032      	b.n	800186a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0304 	and.w	r3, r3, #4
 800180c:	2b00      	cmp	r3, #0
 800180e:	d008      	beq.n	8001822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4916      	ldr	r1, [pc, #88]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	4313      	orrs	r3, r2
 8001820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800182e:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	490e      	ldr	r1, [pc, #56]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	4313      	orrs	r3, r2
 8001840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001842:	f000 f821 	bl	8001888 <HAL_RCC_GetSysClockFreq>
 8001846:	4602      	mov	r2, r0
 8001848:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	091b      	lsrs	r3, r3, #4
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	490a      	ldr	r1, [pc, #40]	@ (800187c <HAL_RCC_ClockConfig+0x1c8>)
 8001854:	5ccb      	ldrb	r3, [r1, r3]
 8001856:	fa22 f303 	lsr.w	r3, r2, r3
 800185a:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <HAL_RCC_ClockConfig+0x1cc>)
 800185c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1d0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff f98c 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40022000 	.word	0x40022000
 8001878:	40021000 	.word	0x40021000
 800187c:	08003018 	.word	0x08003018
 8001880:	20000000 	.word	0x20000000
 8001884:	20000004 	.word	0x20000004

08001888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b087      	sub	sp, #28
 800188c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <HAL_RCC_GetSysClockFreq+0x94>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x30>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x36>
 80018b6:	e027      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b19      	ldr	r3, [pc, #100]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	e027      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d010      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018d6:	4b11      	ldr	r3, [pc, #68]	@ (800191c <HAL_RCC_GetSysClockFreq+0x94>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	0c5b      	lsrs	r3, r3, #17
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	4a11      	ldr	r2, [pc, #68]	@ (8001928 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 80018ea:	fb03 f202 	mul.w	r2, r3, r2
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e004      	b.n	8001902 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a0c      	ldr	r2, [pc, #48]	@ (800192c <HAL_RCC_GetSysClockFreq+0xa4>)
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	613b      	str	r3, [r7, #16]
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_RCC_GetSysClockFreq+0x98>)
 800190a:	613b      	str	r3, [r7, #16]
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	693b      	ldr	r3, [r7, #16]
}
 8001910:	4618      	mov	r0, r3
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	08003030 	.word	0x08003030
 8001928:	08003040 	.word	0x08003040
 800192c:	003d0900 	.word	0x003d0900

08001930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001934:	4b02      	ldr	r3, [pc, #8]	@ (8001940 <HAL_RCC_GetHCLKFreq+0x10>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001948:	f7ff fff2 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 800194c:	4602      	mov	r2, r0
 800194e:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0a1b      	lsrs	r3, r3, #8
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	4903      	ldr	r1, [pc, #12]	@ (8001968 <HAL_RCC_GetPCLK1Freq+0x24>)
 800195a:	5ccb      	ldrb	r3, [r1, r3]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001960:	4618      	mov	r0, r3
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	08003028 	.word	0x08003028

0800196c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001970:	f7ff ffde 	bl	8001930 <HAL_RCC_GetHCLKFreq>
 8001974:	4602      	mov	r2, r0
 8001976:	4b05      	ldr	r3, [pc, #20]	@ (800198c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	0adb      	lsrs	r3, r3, #11
 800197c:	f003 0307 	and.w	r3, r3, #7
 8001980:	4903      	ldr	r1, [pc, #12]	@ (8001990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001982:	5ccb      	ldrb	r3, [r1, r3]
 8001984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001988:	4618      	mov	r0, r3
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000
 8001990:	08003028 	.word	0x08003028

08001994 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <RCC_Delay+0x34>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <RCC_Delay+0x38>)
 80019a2:	fba2 2303 	umull	r2, r3, r2, r3
 80019a6:	0a5b      	lsrs	r3, r3, #9
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b0:	bf00      	nop
  }
  while (Delay --);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1e5a      	subs	r2, r3, #1
 80019b6:	60fa      	str	r2, [r7, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1f9      	bne.n	80019b0 <RCC_Delay+0x1c>
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	20000000 	.word	0x20000000
 80019cc:	10624dd3 	.word	0x10624dd3

080019d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e042      	b.n	8001a68 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d106      	bne.n	80019fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe ff6e 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2224      	movs	r2, #36	@ 0x24
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 fa09 	bl	8001e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	691a      	ldr	r2, [r3, #16]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	695a      	ldr	r2, [r3, #20]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2220      	movs	r2, #32
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	@ 0x28
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d175      	bne.n	8001b7c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_UART_Transmit+0x2c>
 8001a96:	88fb      	ldrh	r3, [r7, #6]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e06e      	b.n	8001b7e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2221      	movs	r2, #33	@ 0x21
 8001aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001aae:	f7ff f8a9 	bl	8000c04 <HAL_GetTick>
 8001ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	88fa      	ldrh	r2, [r7, #6]
 8001ab8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	88fa      	ldrh	r2, [r7, #6]
 8001abe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ac8:	d108      	bne.n	8001adc <HAL_UART_Transmit+0x6c>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d104      	bne.n	8001adc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	61bb      	str	r3, [r7, #24]
 8001ada:	e003      	b.n	8001ae4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ae4:	e02e      	b.n	8001b44 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2200      	movs	r2, #0
 8001aee:	2180      	movs	r1, #128	@ 0x80
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f8df 	bl	8001cb4 <UART_WaitOnFlagUntilTimeout>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d005      	beq.n	8001b08 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e03a      	b.n	8001b7e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10b      	bne.n	8001b26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	3302      	adds	r3, #2
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	e007      	b.n	8001b36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	3301      	adds	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1cb      	bne.n	8001ae6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2200      	movs	r2, #0
 8001b56:	2140      	movs	r1, #64	@ 0x40
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 f8ab 	bl	8001cb4 <UART_WaitOnFlagUntilTimeout>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e006      	b.n	8001b7e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e000      	b.n	8001b7e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b7c:	2302      	movs	r3, #2
  }
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3720      	adds	r7, #32
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b08a      	sub	sp, #40	@ 0x28
 8001b8a:	af02      	add	r7, sp, #8
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	4613      	mov	r3, r2
 8001b94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	f040 8081 	bne.w	8001caa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_UART_Receive+0x2e>
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e079      	b.n	8001cac <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2222      	movs	r2, #34	@ 0x22
 8001bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f81a 	bl	8000c04 <HAL_GetTick>
 8001bd0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001be6:	d108      	bne.n	8001bfa <HAL_UART_Receive+0x74>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
 8001bf8:	e003      	b.n	8001c02 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001c02:	e047      	b.n	8001c94 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2120      	movs	r1, #32
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f850 	bl	8001cb4 <UART_WaitOnFlagUntilTimeout>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e042      	b.n	8001cac <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10c      	bne.n	8001c46 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	3302      	adds	r3, #2
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	e01f      	b.n	8001c86 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c4e:	d007      	beq.n	8001c60 <HAL_UART_Receive+0xda>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10a      	bne.n	8001c6e <HAL_UART_Receive+0xe8>
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d106      	bne.n	8001c6e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e008      	b.n	8001c80 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c7a:	b2da      	uxtb	r2, r3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1b2      	bne.n	8001c04 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001caa:	2302      	movs	r3, #2
  }
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	603b      	str	r3, [r7, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cc4:	e03b      	b.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d037      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cce:	f7fe ff99 	bl	8000c04 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	6a3a      	ldr	r2, [r7, #32]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d302      	bcc.n	8001ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e03a      	b.n	8001d5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d023      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b80      	cmp	r3, #128	@ 0x80
 8001cfa:	d020      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b40      	cmp	r3, #64	@ 0x40
 8001d00:	d01d      	beq.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d116      	bne.n	8001d3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	617b      	str	r3, [r7, #20]
 8001d24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f81d 	bl	8001d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e00f      	b.n	8001d5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4013      	ands	r3, r2
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d0b4      	beq.n	8001cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b095      	sub	sp, #84	@ 0x54
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	330c      	adds	r3, #12
 8001d74:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d78:	e853 3f00 	ldrex	r3, [r3]
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	330c      	adds	r3, #12
 8001d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8001d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d96:	e841 2300 	strex	r3, r2, [r1]
 8001d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1e5      	bne.n	8001d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	3314      	adds	r3, #20
 8001da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001daa:	6a3b      	ldr	r3, [r7, #32]
 8001dac:	e853 3f00 	ldrex	r3, [r3]
 8001db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3314      	adds	r3, #20
 8001dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dca:	e841 2300 	strex	r3, r2, [r1]
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1e5      	bne.n	8001da2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d119      	bne.n	8001e12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	330c      	adds	r3, #12
 8001de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	e853 3f00 	ldrex	r3, [r3]
 8001dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f023 0310 	bic.w	r3, r3, #16
 8001df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	330c      	adds	r3, #12
 8001dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001dfe:	61ba      	str	r2, [r7, #24]
 8001e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	e841 2300 	strex	r3, r2, [r1]
 8001e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e5      	bne.n	8001dde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2220      	movs	r2, #32
 8001e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e20:	bf00      	nop
 8001e22:	3754      	adds	r7, #84	@ 0x54
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
	...

08001e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001e66:	f023 030c 	bic.w	r3, r3, #12
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	699a      	ldr	r2, [r3, #24]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8001f40 <UART_SetConfig+0x114>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d103      	bne.n	8001e9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e94:	f7ff fd6a 	bl	800196c <HAL_RCC_GetPCLK2Freq>
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	e002      	b.n	8001ea2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e9c:	f7ff fd52 	bl	8001944 <HAL_RCC_GetPCLK1Freq>
 8001ea0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009a      	lsls	r2, r3, #2
 8001eac:	441a      	add	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	4a22      	ldr	r2, [pc, #136]	@ (8001f44 <UART_SetConfig+0x118>)
 8001eba:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	0119      	lsls	r1, r3, #4
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	009a      	lsls	r2, r3, #2
 8001ecc:	441a      	add	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f44 <UART_SetConfig+0x118>)
 8001eda:	fba3 0302 	umull	r0, r3, r3, r2
 8001ede:	095b      	lsrs	r3, r3, #5
 8001ee0:	2064      	movs	r0, #100	@ 0x64
 8001ee2:	fb00 f303 	mul.w	r3, r0, r3
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	3332      	adds	r3, #50	@ 0x32
 8001eec:	4a15      	ldr	r2, [pc, #84]	@ (8001f44 <UART_SetConfig+0x118>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	095b      	lsrs	r3, r3, #5
 8001ef4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef8:	4419      	add	r1, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	009a      	lsls	r2, r3, #2
 8001f04:	441a      	add	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <UART_SetConfig+0x118>)
 8001f12:	fba3 0302 	umull	r0, r3, r3, r2
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2064      	movs	r0, #100	@ 0x64
 8001f1a:	fb00 f303 	mul.w	r3, r0, r3
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	011b      	lsls	r3, r3, #4
 8001f22:	3332      	adds	r3, #50	@ 0x32
 8001f24:	4a07      	ldr	r2, [pc, #28]	@ (8001f44 <UART_SetConfig+0x118>)
 8001f26:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	f003 020f 	and.w	r2, r3, #15
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	440a      	add	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001f38:	bf00      	nop
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013800 	.word	0x40013800
 8001f44:	51eb851f 	.word	0x51eb851f

08001f48 <std>:
 8001f48:	2300      	movs	r3, #0
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8001f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f56:	6083      	str	r3, [r0, #8]
 8001f58:	8181      	strh	r1, [r0, #12]
 8001f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f5c:	81c2      	strh	r2, [r0, #14]
 8001f5e:	6183      	str	r3, [r0, #24]
 8001f60:	4619      	mov	r1, r3
 8001f62:	2208      	movs	r2, #8
 8001f64:	305c      	adds	r0, #92	@ 0x5c
 8001f66:	f000 fa09 	bl	800237c <memset>
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa0 <std+0x58>)
 8001f6c:	6224      	str	r4, [r4, #32]
 8001f6e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <std+0x5c>)
 8001f72:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f74:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa8 <std+0x60>)
 8001f76:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <std+0x64>)
 8001f7a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <std+0x68>)
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	d006      	beq.n	8001f90 <std+0x48>
 8001f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f86:	4294      	cmp	r4, r2
 8001f88:	d002      	beq.n	8001f90 <std+0x48>
 8001f8a:	33d0      	adds	r3, #208	@ 0xd0
 8001f8c:	429c      	cmp	r4, r3
 8001f8e:	d105      	bne.n	8001f9c <std+0x54>
 8001f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f98:	f000 ba68 	b.w	800246c <__retarget_lock_init_recursive>
 8001f9c:	bd10      	pop	{r4, pc}
 8001f9e:	bf00      	nop
 8001fa0:	080021cd 	.word	0x080021cd
 8001fa4:	080021ef 	.word	0x080021ef
 8001fa8:	08002227 	.word	0x08002227
 8001fac:	0800224b 	.word	0x0800224b
 8001fb0:	200001d8 	.word	0x200001d8

08001fb4 <stdio_exit_handler>:
 8001fb4:	4a02      	ldr	r2, [pc, #8]	@ (8001fc0 <stdio_exit_handler+0xc>)
 8001fb6:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <stdio_exit_handler+0x10>)
 8001fb8:	4803      	ldr	r0, [pc, #12]	@ (8001fc8 <stdio_exit_handler+0x14>)
 8001fba:	f000 b869 	b.w	8002090 <_fwalk_sglue>
 8001fbe:	bf00      	nop
 8001fc0:	2000000c 	.word	0x2000000c
 8001fc4:	08002d31 	.word	0x08002d31
 8001fc8:	2000001c 	.word	0x2000001c

08001fcc <cleanup_stdio>:
 8001fcc:	6841      	ldr	r1, [r0, #4]
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <cleanup_stdio+0x34>)
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	4299      	cmp	r1, r3
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	d001      	beq.n	8001fdc <cleanup_stdio+0x10>
 8001fd8:	f000 feaa 	bl	8002d30 <_fflush_r>
 8001fdc:	68a1      	ldr	r1, [r4, #8]
 8001fde:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <cleanup_stdio+0x38>)
 8001fe0:	4299      	cmp	r1, r3
 8001fe2:	d002      	beq.n	8001fea <cleanup_stdio+0x1e>
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	f000 fea3 	bl	8002d30 <_fflush_r>
 8001fea:	68e1      	ldr	r1, [r4, #12]
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <cleanup_stdio+0x3c>)
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d004      	beq.n	8001ffc <cleanup_stdio+0x30>
 8001ff2:	4620      	mov	r0, r4
 8001ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff8:	f000 be9a 	b.w	8002d30 <_fflush_r>
 8001ffc:	bd10      	pop	{r4, pc}
 8001ffe:	bf00      	nop
 8002000:	200001d8 	.word	0x200001d8
 8002004:	20000240 	.word	0x20000240
 8002008:	200002a8 	.word	0x200002a8

0800200c <global_stdio_init.part.0>:
 800200c:	b510      	push	{r4, lr}
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <global_stdio_init.part.0+0x30>)
 8002010:	4c0b      	ldr	r4, [pc, #44]	@ (8002040 <global_stdio_init.part.0+0x34>)
 8002012:	4a0c      	ldr	r2, [pc, #48]	@ (8002044 <global_stdio_init.part.0+0x38>)
 8002014:	4620      	mov	r0, r4
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	2104      	movs	r1, #4
 800201a:	2200      	movs	r2, #0
 800201c:	f7ff ff94 	bl	8001f48 <std>
 8002020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002024:	2201      	movs	r2, #1
 8002026:	2109      	movs	r1, #9
 8002028:	f7ff ff8e 	bl	8001f48 <std>
 800202c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002030:	2202      	movs	r2, #2
 8002032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002036:	2112      	movs	r1, #18
 8002038:	f7ff bf86 	b.w	8001f48 <std>
 800203c:	20000310 	.word	0x20000310
 8002040:	200001d8 	.word	0x200001d8
 8002044:	08001fb5 	.word	0x08001fb5

08002048 <__sfp_lock_acquire>:
 8002048:	4801      	ldr	r0, [pc, #4]	@ (8002050 <__sfp_lock_acquire+0x8>)
 800204a:	f000 ba10 	b.w	800246e <__retarget_lock_acquire_recursive>
 800204e:	bf00      	nop
 8002050:	20000319 	.word	0x20000319

08002054 <__sfp_lock_release>:
 8002054:	4801      	ldr	r0, [pc, #4]	@ (800205c <__sfp_lock_release+0x8>)
 8002056:	f000 ba0b 	b.w	8002470 <__retarget_lock_release_recursive>
 800205a:	bf00      	nop
 800205c:	20000319 	.word	0x20000319

08002060 <__sinit>:
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0
 8002064:	f7ff fff0 	bl	8002048 <__sfp_lock_acquire>
 8002068:	6a23      	ldr	r3, [r4, #32]
 800206a:	b11b      	cbz	r3, 8002074 <__sinit+0x14>
 800206c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002070:	f7ff bff0 	b.w	8002054 <__sfp_lock_release>
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__sinit+0x28>)
 8002076:	6223      	str	r3, [r4, #32]
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <__sinit+0x2c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f5      	bne.n	800206c <__sinit+0xc>
 8002080:	f7ff ffc4 	bl	800200c <global_stdio_init.part.0>
 8002084:	e7f2      	b.n	800206c <__sinit+0xc>
 8002086:	bf00      	nop
 8002088:	08001fcd 	.word	0x08001fcd
 800208c:	20000310 	.word	0x20000310

08002090 <_fwalk_sglue>:
 8002090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002094:	4607      	mov	r7, r0
 8002096:	4688      	mov	r8, r1
 8002098:	4614      	mov	r4, r2
 800209a:	2600      	movs	r6, #0
 800209c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020a0:	f1b9 0901 	subs.w	r9, r9, #1
 80020a4:	d505      	bpl.n	80020b2 <_fwalk_sglue+0x22>
 80020a6:	6824      	ldr	r4, [r4, #0]
 80020a8:	2c00      	cmp	r4, #0
 80020aa:	d1f7      	bne.n	800209c <_fwalk_sglue+0xc>
 80020ac:	4630      	mov	r0, r6
 80020ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020b2:	89ab      	ldrh	r3, [r5, #12]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d907      	bls.n	80020c8 <_fwalk_sglue+0x38>
 80020b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020bc:	3301      	adds	r3, #1
 80020be:	d003      	beq.n	80020c8 <_fwalk_sglue+0x38>
 80020c0:	4629      	mov	r1, r5
 80020c2:	4638      	mov	r0, r7
 80020c4:	47c0      	blx	r8
 80020c6:	4306      	orrs	r6, r0
 80020c8:	3568      	adds	r5, #104	@ 0x68
 80020ca:	e7e9      	b.n	80020a0 <_fwalk_sglue+0x10>

080020cc <_puts_r>:
 80020cc:	6a03      	ldr	r3, [r0, #32]
 80020ce:	b570      	push	{r4, r5, r6, lr}
 80020d0:	4605      	mov	r5, r0
 80020d2:	460e      	mov	r6, r1
 80020d4:	6884      	ldr	r4, [r0, #8]
 80020d6:	b90b      	cbnz	r3, 80020dc <_puts_r+0x10>
 80020d8:	f7ff ffc2 	bl	8002060 <__sinit>
 80020dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80020de:	07db      	lsls	r3, r3, #31
 80020e0:	d405      	bmi.n	80020ee <_puts_r+0x22>
 80020e2:	89a3      	ldrh	r3, [r4, #12]
 80020e4:	0598      	lsls	r0, r3, #22
 80020e6:	d402      	bmi.n	80020ee <_puts_r+0x22>
 80020e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80020ea:	f000 f9c0 	bl	800246e <__retarget_lock_acquire_recursive>
 80020ee:	89a3      	ldrh	r3, [r4, #12]
 80020f0:	0719      	lsls	r1, r3, #28
 80020f2:	d502      	bpl.n	80020fa <_puts_r+0x2e>
 80020f4:	6923      	ldr	r3, [r4, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d135      	bne.n	8002166 <_puts_r+0x9a>
 80020fa:	4621      	mov	r1, r4
 80020fc:	4628      	mov	r0, r5
 80020fe:	f000 f8e7 	bl	80022d0 <__swsetup_r>
 8002102:	b380      	cbz	r0, 8002166 <_puts_r+0x9a>
 8002104:	f04f 35ff 	mov.w	r5, #4294967295
 8002108:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800210a:	07da      	lsls	r2, r3, #31
 800210c:	d405      	bmi.n	800211a <_puts_r+0x4e>
 800210e:	89a3      	ldrh	r3, [r4, #12]
 8002110:	059b      	lsls	r3, r3, #22
 8002112:	d402      	bmi.n	800211a <_puts_r+0x4e>
 8002114:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002116:	f000 f9ab 	bl	8002470 <__retarget_lock_release_recursive>
 800211a:	4628      	mov	r0, r5
 800211c:	bd70      	pop	{r4, r5, r6, pc}
 800211e:	2b00      	cmp	r3, #0
 8002120:	da04      	bge.n	800212c <_puts_r+0x60>
 8002122:	69a2      	ldr	r2, [r4, #24]
 8002124:	429a      	cmp	r2, r3
 8002126:	dc17      	bgt.n	8002158 <_puts_r+0x8c>
 8002128:	290a      	cmp	r1, #10
 800212a:	d015      	beq.n	8002158 <_puts_r+0x8c>
 800212c:	6823      	ldr	r3, [r4, #0]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	6022      	str	r2, [r4, #0]
 8002132:	7019      	strb	r1, [r3, #0]
 8002134:	68a3      	ldr	r3, [r4, #8]
 8002136:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800213a:	3b01      	subs	r3, #1
 800213c:	60a3      	str	r3, [r4, #8]
 800213e:	2900      	cmp	r1, #0
 8002140:	d1ed      	bne.n	800211e <_puts_r+0x52>
 8002142:	2b00      	cmp	r3, #0
 8002144:	da11      	bge.n	800216a <_puts_r+0x9e>
 8002146:	4622      	mov	r2, r4
 8002148:	210a      	movs	r1, #10
 800214a:	4628      	mov	r0, r5
 800214c:	f000 f881 	bl	8002252 <__swbuf_r>
 8002150:	3001      	adds	r0, #1
 8002152:	d0d7      	beq.n	8002104 <_puts_r+0x38>
 8002154:	250a      	movs	r5, #10
 8002156:	e7d7      	b.n	8002108 <_puts_r+0x3c>
 8002158:	4622      	mov	r2, r4
 800215a:	4628      	mov	r0, r5
 800215c:	f000 f879 	bl	8002252 <__swbuf_r>
 8002160:	3001      	adds	r0, #1
 8002162:	d1e7      	bne.n	8002134 <_puts_r+0x68>
 8002164:	e7ce      	b.n	8002104 <_puts_r+0x38>
 8002166:	3e01      	subs	r6, #1
 8002168:	e7e4      	b.n	8002134 <_puts_r+0x68>
 800216a:	6823      	ldr	r3, [r4, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	6022      	str	r2, [r4, #0]
 8002170:	220a      	movs	r2, #10
 8002172:	701a      	strb	r2, [r3, #0]
 8002174:	e7ee      	b.n	8002154 <_puts_r+0x88>
	...

08002178 <puts>:
 8002178:	4b02      	ldr	r3, [pc, #8]	@ (8002184 <puts+0xc>)
 800217a:	4601      	mov	r1, r0
 800217c:	6818      	ldr	r0, [r3, #0]
 800217e:	f7ff bfa5 	b.w	80020cc <_puts_r>
 8002182:	bf00      	nop
 8002184:	20000018 	.word	0x20000018

08002188 <siprintf>:
 8002188:	b40e      	push	{r1, r2, r3}
 800218a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800218e:	b510      	push	{r4, lr}
 8002190:	2400      	movs	r4, #0
 8002192:	b09d      	sub	sp, #116	@ 0x74
 8002194:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002196:	9002      	str	r0, [sp, #8]
 8002198:	9006      	str	r0, [sp, #24]
 800219a:	9107      	str	r1, [sp, #28]
 800219c:	9104      	str	r1, [sp, #16]
 800219e:	4809      	ldr	r0, [pc, #36]	@ (80021c4 <siprintf+0x3c>)
 80021a0:	4909      	ldr	r1, [pc, #36]	@ (80021c8 <siprintf+0x40>)
 80021a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80021a6:	9105      	str	r1, [sp, #20]
 80021a8:	6800      	ldr	r0, [r0, #0]
 80021aa:	a902      	add	r1, sp, #8
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	941b      	str	r4, [sp, #108]	@ 0x6c
 80021b0:	f000 fab2 	bl	8002718 <_svfiprintf_r>
 80021b4:	9b02      	ldr	r3, [sp, #8]
 80021b6:	701c      	strb	r4, [r3, #0]
 80021b8:	b01d      	add	sp, #116	@ 0x74
 80021ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021be:	b003      	add	sp, #12
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000018 	.word	0x20000018
 80021c8:	ffff0208 	.word	0xffff0208

080021cc <__sread>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	460c      	mov	r4, r1
 80021d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021d4:	f000 f8fc 	bl	80023d0 <_read_r>
 80021d8:	2800      	cmp	r0, #0
 80021da:	bfab      	itete	ge
 80021dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80021de:	89a3      	ldrhlt	r3, [r4, #12]
 80021e0:	181b      	addge	r3, r3, r0
 80021e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80021e6:	bfac      	ite	ge
 80021e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80021ea:	81a3      	strhlt	r3, [r4, #12]
 80021ec:	bd10      	pop	{r4, pc}

080021ee <__swrite>:
 80021ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021f2:	461f      	mov	r7, r3
 80021f4:	898b      	ldrh	r3, [r1, #12]
 80021f6:	4605      	mov	r5, r0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	460c      	mov	r4, r1
 80021fc:	4616      	mov	r6, r2
 80021fe:	d505      	bpl.n	800220c <__swrite+0x1e>
 8002200:	2302      	movs	r3, #2
 8002202:	2200      	movs	r2, #0
 8002204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002208:	f000 f8d0 	bl	80023ac <_lseek_r>
 800220c:	89a3      	ldrh	r3, [r4, #12]
 800220e:	4632      	mov	r2, r6
 8002210:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002214:	81a3      	strh	r3, [r4, #12]
 8002216:	4628      	mov	r0, r5
 8002218:	463b      	mov	r3, r7
 800221a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800221e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002222:	f000 b8e7 	b.w	80023f4 <_write_r>

08002226 <__sseek>:
 8002226:	b510      	push	{r4, lr}
 8002228:	460c      	mov	r4, r1
 800222a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800222e:	f000 f8bd 	bl	80023ac <_lseek_r>
 8002232:	1c43      	adds	r3, r0, #1
 8002234:	89a3      	ldrh	r3, [r4, #12]
 8002236:	bf15      	itete	ne
 8002238:	6560      	strne	r0, [r4, #84]	@ 0x54
 800223a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800223e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002242:	81a3      	strheq	r3, [r4, #12]
 8002244:	bf18      	it	ne
 8002246:	81a3      	strhne	r3, [r4, #12]
 8002248:	bd10      	pop	{r4, pc}

0800224a <__sclose>:
 800224a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800224e:	f000 b89d 	b.w	800238c <_close_r>

08002252 <__swbuf_r>:
 8002252:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002254:	460e      	mov	r6, r1
 8002256:	4614      	mov	r4, r2
 8002258:	4605      	mov	r5, r0
 800225a:	b118      	cbz	r0, 8002264 <__swbuf_r+0x12>
 800225c:	6a03      	ldr	r3, [r0, #32]
 800225e:	b90b      	cbnz	r3, 8002264 <__swbuf_r+0x12>
 8002260:	f7ff fefe 	bl	8002060 <__sinit>
 8002264:	69a3      	ldr	r3, [r4, #24]
 8002266:	60a3      	str	r3, [r4, #8]
 8002268:	89a3      	ldrh	r3, [r4, #12]
 800226a:	071a      	lsls	r2, r3, #28
 800226c:	d501      	bpl.n	8002272 <__swbuf_r+0x20>
 800226e:	6923      	ldr	r3, [r4, #16]
 8002270:	b943      	cbnz	r3, 8002284 <__swbuf_r+0x32>
 8002272:	4621      	mov	r1, r4
 8002274:	4628      	mov	r0, r5
 8002276:	f000 f82b 	bl	80022d0 <__swsetup_r>
 800227a:	b118      	cbz	r0, 8002284 <__swbuf_r+0x32>
 800227c:	f04f 37ff 	mov.w	r7, #4294967295
 8002280:	4638      	mov	r0, r7
 8002282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	6922      	ldr	r2, [r4, #16]
 8002288:	b2f6      	uxtb	r6, r6
 800228a:	1a98      	subs	r0, r3, r2
 800228c:	6963      	ldr	r3, [r4, #20]
 800228e:	4637      	mov	r7, r6
 8002290:	4283      	cmp	r3, r0
 8002292:	dc05      	bgt.n	80022a0 <__swbuf_r+0x4e>
 8002294:	4621      	mov	r1, r4
 8002296:	4628      	mov	r0, r5
 8002298:	f000 fd4a 	bl	8002d30 <_fflush_r>
 800229c:	2800      	cmp	r0, #0
 800229e:	d1ed      	bne.n	800227c <__swbuf_r+0x2a>
 80022a0:	68a3      	ldr	r3, [r4, #8]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	60a3      	str	r3, [r4, #8]
 80022a6:	6823      	ldr	r3, [r4, #0]
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	6022      	str	r2, [r4, #0]
 80022ac:	701e      	strb	r6, [r3, #0]
 80022ae:	6962      	ldr	r2, [r4, #20]
 80022b0:	1c43      	adds	r3, r0, #1
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d004      	beq.n	80022c0 <__swbuf_r+0x6e>
 80022b6:	89a3      	ldrh	r3, [r4, #12]
 80022b8:	07db      	lsls	r3, r3, #31
 80022ba:	d5e1      	bpl.n	8002280 <__swbuf_r+0x2e>
 80022bc:	2e0a      	cmp	r6, #10
 80022be:	d1df      	bne.n	8002280 <__swbuf_r+0x2e>
 80022c0:	4621      	mov	r1, r4
 80022c2:	4628      	mov	r0, r5
 80022c4:	f000 fd34 	bl	8002d30 <_fflush_r>
 80022c8:	2800      	cmp	r0, #0
 80022ca:	d0d9      	beq.n	8002280 <__swbuf_r+0x2e>
 80022cc:	e7d6      	b.n	800227c <__swbuf_r+0x2a>
	...

080022d0 <__swsetup_r>:
 80022d0:	b538      	push	{r3, r4, r5, lr}
 80022d2:	4b29      	ldr	r3, [pc, #164]	@ (8002378 <__swsetup_r+0xa8>)
 80022d4:	4605      	mov	r5, r0
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	460c      	mov	r4, r1
 80022da:	b118      	cbz	r0, 80022e4 <__swsetup_r+0x14>
 80022dc:	6a03      	ldr	r3, [r0, #32]
 80022de:	b90b      	cbnz	r3, 80022e4 <__swsetup_r+0x14>
 80022e0:	f7ff febe 	bl	8002060 <__sinit>
 80022e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022e8:	0719      	lsls	r1, r3, #28
 80022ea:	d422      	bmi.n	8002332 <__swsetup_r+0x62>
 80022ec:	06da      	lsls	r2, r3, #27
 80022ee:	d407      	bmi.n	8002300 <__swsetup_r+0x30>
 80022f0:	2209      	movs	r2, #9
 80022f2:	602a      	str	r2, [r5, #0]
 80022f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	81a3      	strh	r3, [r4, #12]
 80022fe:	e033      	b.n	8002368 <__swsetup_r+0x98>
 8002300:	0758      	lsls	r0, r3, #29
 8002302:	d512      	bpl.n	800232a <__swsetup_r+0x5a>
 8002304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002306:	b141      	cbz	r1, 800231a <__swsetup_r+0x4a>
 8002308:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800230c:	4299      	cmp	r1, r3
 800230e:	d002      	beq.n	8002316 <__swsetup_r+0x46>
 8002310:	4628      	mov	r0, r5
 8002312:	f000 f8af 	bl	8002474 <_free_r>
 8002316:	2300      	movs	r3, #0
 8002318:	6363      	str	r3, [r4, #52]	@ 0x34
 800231a:	89a3      	ldrh	r3, [r4, #12]
 800231c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002320:	81a3      	strh	r3, [r4, #12]
 8002322:	2300      	movs	r3, #0
 8002324:	6063      	str	r3, [r4, #4]
 8002326:	6923      	ldr	r3, [r4, #16]
 8002328:	6023      	str	r3, [r4, #0]
 800232a:	89a3      	ldrh	r3, [r4, #12]
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	81a3      	strh	r3, [r4, #12]
 8002332:	6923      	ldr	r3, [r4, #16]
 8002334:	b94b      	cbnz	r3, 800234a <__swsetup_r+0x7a>
 8002336:	89a3      	ldrh	r3, [r4, #12]
 8002338:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800233c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002340:	d003      	beq.n	800234a <__swsetup_r+0x7a>
 8002342:	4621      	mov	r1, r4
 8002344:	4628      	mov	r0, r5
 8002346:	f000 fd40 	bl	8002dca <__smakebuf_r>
 800234a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800234e:	f013 0201 	ands.w	r2, r3, #1
 8002352:	d00a      	beq.n	800236a <__swsetup_r+0x9a>
 8002354:	2200      	movs	r2, #0
 8002356:	60a2      	str	r2, [r4, #8]
 8002358:	6962      	ldr	r2, [r4, #20]
 800235a:	4252      	negs	r2, r2
 800235c:	61a2      	str	r2, [r4, #24]
 800235e:	6922      	ldr	r2, [r4, #16]
 8002360:	b942      	cbnz	r2, 8002374 <__swsetup_r+0xa4>
 8002362:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002366:	d1c5      	bne.n	80022f4 <__swsetup_r+0x24>
 8002368:	bd38      	pop	{r3, r4, r5, pc}
 800236a:	0799      	lsls	r1, r3, #30
 800236c:	bf58      	it	pl
 800236e:	6962      	ldrpl	r2, [r4, #20]
 8002370:	60a2      	str	r2, [r4, #8]
 8002372:	e7f4      	b.n	800235e <__swsetup_r+0x8e>
 8002374:	2000      	movs	r0, #0
 8002376:	e7f7      	b.n	8002368 <__swsetup_r+0x98>
 8002378:	20000018 	.word	0x20000018

0800237c <memset>:
 800237c:	4603      	mov	r3, r0
 800237e:	4402      	add	r2, r0
 8002380:	4293      	cmp	r3, r2
 8002382:	d100      	bne.n	8002386 <memset+0xa>
 8002384:	4770      	bx	lr
 8002386:	f803 1b01 	strb.w	r1, [r3], #1
 800238a:	e7f9      	b.n	8002380 <memset+0x4>

0800238c <_close_r>:
 800238c:	b538      	push	{r3, r4, r5, lr}
 800238e:	2300      	movs	r3, #0
 8002390:	4d05      	ldr	r5, [pc, #20]	@ (80023a8 <_close_r+0x1c>)
 8002392:	4604      	mov	r4, r0
 8002394:	4608      	mov	r0, r1
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	f7fe fb49 	bl	8000a2e <_close>
 800239c:	1c43      	adds	r3, r0, #1
 800239e:	d102      	bne.n	80023a6 <_close_r+0x1a>
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	b103      	cbz	r3, 80023a6 <_close_r+0x1a>
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	bd38      	pop	{r3, r4, r5, pc}
 80023a8:	20000314 	.word	0x20000314

080023ac <_lseek_r>:
 80023ac:	b538      	push	{r3, r4, r5, lr}
 80023ae:	4604      	mov	r4, r0
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	2200      	movs	r2, #0
 80023b6:	4d05      	ldr	r5, [pc, #20]	@ (80023cc <_lseek_r+0x20>)
 80023b8:	602a      	str	r2, [r5, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	f7fe fb5b 	bl	8000a76 <_lseek>
 80023c0:	1c43      	adds	r3, r0, #1
 80023c2:	d102      	bne.n	80023ca <_lseek_r+0x1e>
 80023c4:	682b      	ldr	r3, [r5, #0]
 80023c6:	b103      	cbz	r3, 80023ca <_lseek_r+0x1e>
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}
 80023cc:	20000314 	.word	0x20000314

080023d0 <_read_r>:
 80023d0:	b538      	push	{r3, r4, r5, lr}
 80023d2:	4604      	mov	r4, r0
 80023d4:	4608      	mov	r0, r1
 80023d6:	4611      	mov	r1, r2
 80023d8:	2200      	movs	r2, #0
 80023da:	4d05      	ldr	r5, [pc, #20]	@ (80023f0 <_read_r+0x20>)
 80023dc:	602a      	str	r2, [r5, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	f7fe faec 	bl	80009bc <_read>
 80023e4:	1c43      	adds	r3, r0, #1
 80023e6:	d102      	bne.n	80023ee <_read_r+0x1e>
 80023e8:	682b      	ldr	r3, [r5, #0]
 80023ea:	b103      	cbz	r3, 80023ee <_read_r+0x1e>
 80023ec:	6023      	str	r3, [r4, #0]
 80023ee:	bd38      	pop	{r3, r4, r5, pc}
 80023f0:	20000314 	.word	0x20000314

080023f4 <_write_r>:
 80023f4:	b538      	push	{r3, r4, r5, lr}
 80023f6:	4604      	mov	r4, r0
 80023f8:	4608      	mov	r0, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	2200      	movs	r2, #0
 80023fe:	4d05      	ldr	r5, [pc, #20]	@ (8002414 <_write_r+0x20>)
 8002400:	602a      	str	r2, [r5, #0]
 8002402:	461a      	mov	r2, r3
 8002404:	f7fe faf7 	bl	80009f6 <_write>
 8002408:	1c43      	adds	r3, r0, #1
 800240a:	d102      	bne.n	8002412 <_write_r+0x1e>
 800240c:	682b      	ldr	r3, [r5, #0]
 800240e:	b103      	cbz	r3, 8002412 <_write_r+0x1e>
 8002410:	6023      	str	r3, [r4, #0]
 8002412:	bd38      	pop	{r3, r4, r5, pc}
 8002414:	20000314 	.word	0x20000314

08002418 <__errno>:
 8002418:	4b01      	ldr	r3, [pc, #4]	@ (8002420 <__errno+0x8>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000018 	.word	0x20000018

08002424 <__libc_init_array>:
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	2600      	movs	r6, #0
 8002428:	4d0c      	ldr	r5, [pc, #48]	@ (800245c <__libc_init_array+0x38>)
 800242a:	4c0d      	ldr	r4, [pc, #52]	@ (8002460 <__libc_init_array+0x3c>)
 800242c:	1b64      	subs	r4, r4, r5
 800242e:	10a4      	asrs	r4, r4, #2
 8002430:	42a6      	cmp	r6, r4
 8002432:	d109      	bne.n	8002448 <__libc_init_array+0x24>
 8002434:	f000 fda4 	bl	8002f80 <_init>
 8002438:	2600      	movs	r6, #0
 800243a:	4d0a      	ldr	r5, [pc, #40]	@ (8002464 <__libc_init_array+0x40>)
 800243c:	4c0a      	ldr	r4, [pc, #40]	@ (8002468 <__libc_init_array+0x44>)
 800243e:	1b64      	subs	r4, r4, r5
 8002440:	10a4      	asrs	r4, r4, #2
 8002442:	42a6      	cmp	r6, r4
 8002444:	d105      	bne.n	8002452 <__libc_init_array+0x2e>
 8002446:	bd70      	pop	{r4, r5, r6, pc}
 8002448:	f855 3b04 	ldr.w	r3, [r5], #4
 800244c:	4798      	blx	r3
 800244e:	3601      	adds	r6, #1
 8002450:	e7ee      	b.n	8002430 <__libc_init_array+0xc>
 8002452:	f855 3b04 	ldr.w	r3, [r5], #4
 8002456:	4798      	blx	r3
 8002458:	3601      	adds	r6, #1
 800245a:	e7f2      	b.n	8002442 <__libc_init_array+0x1e>
 800245c:	08003080 	.word	0x08003080
 8002460:	08003080 	.word	0x08003080
 8002464:	08003080 	.word	0x08003080
 8002468:	08003084 	.word	0x08003084

0800246c <__retarget_lock_init_recursive>:
 800246c:	4770      	bx	lr

0800246e <__retarget_lock_acquire_recursive>:
 800246e:	4770      	bx	lr

08002470 <__retarget_lock_release_recursive>:
 8002470:	4770      	bx	lr
	...

08002474 <_free_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	4605      	mov	r5, r0
 8002478:	2900      	cmp	r1, #0
 800247a:	d040      	beq.n	80024fe <_free_r+0x8a>
 800247c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002480:	1f0c      	subs	r4, r1, #4
 8002482:	2b00      	cmp	r3, #0
 8002484:	bfb8      	it	lt
 8002486:	18e4      	addlt	r4, r4, r3
 8002488:	f000 f8de 	bl	8002648 <__malloc_lock>
 800248c:	4a1c      	ldr	r2, [pc, #112]	@ (8002500 <_free_r+0x8c>)
 800248e:	6813      	ldr	r3, [r2, #0]
 8002490:	b933      	cbnz	r3, 80024a0 <_free_r+0x2c>
 8002492:	6063      	str	r3, [r4, #4]
 8002494:	6014      	str	r4, [r2, #0]
 8002496:	4628      	mov	r0, r5
 8002498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800249c:	f000 b8da 	b.w	8002654 <__malloc_unlock>
 80024a0:	42a3      	cmp	r3, r4
 80024a2:	d908      	bls.n	80024b6 <_free_r+0x42>
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	1821      	adds	r1, r4, r0
 80024a8:	428b      	cmp	r3, r1
 80024aa:	bf01      	itttt	eq
 80024ac:	6819      	ldreq	r1, [r3, #0]
 80024ae:	685b      	ldreq	r3, [r3, #4]
 80024b0:	1809      	addeq	r1, r1, r0
 80024b2:	6021      	streq	r1, [r4, #0]
 80024b4:	e7ed      	b.n	8002492 <_free_r+0x1e>
 80024b6:	461a      	mov	r2, r3
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	b10b      	cbz	r3, 80024c0 <_free_r+0x4c>
 80024bc:	42a3      	cmp	r3, r4
 80024be:	d9fa      	bls.n	80024b6 <_free_r+0x42>
 80024c0:	6811      	ldr	r1, [r2, #0]
 80024c2:	1850      	adds	r0, r2, r1
 80024c4:	42a0      	cmp	r0, r4
 80024c6:	d10b      	bne.n	80024e0 <_free_r+0x6c>
 80024c8:	6820      	ldr	r0, [r4, #0]
 80024ca:	4401      	add	r1, r0
 80024cc:	1850      	adds	r0, r2, r1
 80024ce:	4283      	cmp	r3, r0
 80024d0:	6011      	str	r1, [r2, #0]
 80024d2:	d1e0      	bne.n	8002496 <_free_r+0x22>
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4408      	add	r0, r1
 80024da:	6010      	str	r0, [r2, #0]
 80024dc:	6053      	str	r3, [r2, #4]
 80024de:	e7da      	b.n	8002496 <_free_r+0x22>
 80024e0:	d902      	bls.n	80024e8 <_free_r+0x74>
 80024e2:	230c      	movs	r3, #12
 80024e4:	602b      	str	r3, [r5, #0]
 80024e6:	e7d6      	b.n	8002496 <_free_r+0x22>
 80024e8:	6820      	ldr	r0, [r4, #0]
 80024ea:	1821      	adds	r1, r4, r0
 80024ec:	428b      	cmp	r3, r1
 80024ee:	bf01      	itttt	eq
 80024f0:	6819      	ldreq	r1, [r3, #0]
 80024f2:	685b      	ldreq	r3, [r3, #4]
 80024f4:	1809      	addeq	r1, r1, r0
 80024f6:	6021      	streq	r1, [r4, #0]
 80024f8:	6063      	str	r3, [r4, #4]
 80024fa:	6054      	str	r4, [r2, #4]
 80024fc:	e7cb      	b.n	8002496 <_free_r+0x22>
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
 8002500:	20000320 	.word	0x20000320

08002504 <sbrk_aligned>:
 8002504:	b570      	push	{r4, r5, r6, lr}
 8002506:	4e0f      	ldr	r6, [pc, #60]	@ (8002544 <sbrk_aligned+0x40>)
 8002508:	460c      	mov	r4, r1
 800250a:	6831      	ldr	r1, [r6, #0]
 800250c:	4605      	mov	r5, r0
 800250e:	b911      	cbnz	r1, 8002516 <sbrk_aligned+0x12>
 8002510:	f000 fcd4 	bl	8002ebc <_sbrk_r>
 8002514:	6030      	str	r0, [r6, #0]
 8002516:	4621      	mov	r1, r4
 8002518:	4628      	mov	r0, r5
 800251a:	f000 fccf 	bl	8002ebc <_sbrk_r>
 800251e:	1c43      	adds	r3, r0, #1
 8002520:	d103      	bne.n	800252a <sbrk_aligned+0x26>
 8002522:	f04f 34ff 	mov.w	r4, #4294967295
 8002526:	4620      	mov	r0, r4
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	1cc4      	adds	r4, r0, #3
 800252c:	f024 0403 	bic.w	r4, r4, #3
 8002530:	42a0      	cmp	r0, r4
 8002532:	d0f8      	beq.n	8002526 <sbrk_aligned+0x22>
 8002534:	1a21      	subs	r1, r4, r0
 8002536:	4628      	mov	r0, r5
 8002538:	f000 fcc0 	bl	8002ebc <_sbrk_r>
 800253c:	3001      	adds	r0, #1
 800253e:	d1f2      	bne.n	8002526 <sbrk_aligned+0x22>
 8002540:	e7ef      	b.n	8002522 <sbrk_aligned+0x1e>
 8002542:	bf00      	nop
 8002544:	2000031c 	.word	0x2000031c

08002548 <_malloc_r>:
 8002548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800254c:	1ccd      	adds	r5, r1, #3
 800254e:	f025 0503 	bic.w	r5, r5, #3
 8002552:	3508      	adds	r5, #8
 8002554:	2d0c      	cmp	r5, #12
 8002556:	bf38      	it	cc
 8002558:	250c      	movcc	r5, #12
 800255a:	2d00      	cmp	r5, #0
 800255c:	4606      	mov	r6, r0
 800255e:	db01      	blt.n	8002564 <_malloc_r+0x1c>
 8002560:	42a9      	cmp	r1, r5
 8002562:	d904      	bls.n	800256e <_malloc_r+0x26>
 8002564:	230c      	movs	r3, #12
 8002566:	6033      	str	r3, [r6, #0]
 8002568:	2000      	movs	r0, #0
 800256a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800256e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002644 <_malloc_r+0xfc>
 8002572:	f000 f869 	bl	8002648 <__malloc_lock>
 8002576:	f8d8 3000 	ldr.w	r3, [r8]
 800257a:	461c      	mov	r4, r3
 800257c:	bb44      	cbnz	r4, 80025d0 <_malloc_r+0x88>
 800257e:	4629      	mov	r1, r5
 8002580:	4630      	mov	r0, r6
 8002582:	f7ff ffbf 	bl	8002504 <sbrk_aligned>
 8002586:	1c43      	adds	r3, r0, #1
 8002588:	4604      	mov	r4, r0
 800258a:	d158      	bne.n	800263e <_malloc_r+0xf6>
 800258c:	f8d8 4000 	ldr.w	r4, [r8]
 8002590:	4627      	mov	r7, r4
 8002592:	2f00      	cmp	r7, #0
 8002594:	d143      	bne.n	800261e <_malloc_r+0xd6>
 8002596:	2c00      	cmp	r4, #0
 8002598:	d04b      	beq.n	8002632 <_malloc_r+0xea>
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	4639      	mov	r1, r7
 800259e:	4630      	mov	r0, r6
 80025a0:	eb04 0903 	add.w	r9, r4, r3
 80025a4:	f000 fc8a 	bl	8002ebc <_sbrk_r>
 80025a8:	4581      	cmp	r9, r0
 80025aa:	d142      	bne.n	8002632 <_malloc_r+0xea>
 80025ac:	6821      	ldr	r1, [r4, #0]
 80025ae:	4630      	mov	r0, r6
 80025b0:	1a6d      	subs	r5, r5, r1
 80025b2:	4629      	mov	r1, r5
 80025b4:	f7ff ffa6 	bl	8002504 <sbrk_aligned>
 80025b8:	3001      	adds	r0, #1
 80025ba:	d03a      	beq.n	8002632 <_malloc_r+0xea>
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	442b      	add	r3, r5
 80025c0:	6023      	str	r3, [r4, #0]
 80025c2:	f8d8 3000 	ldr.w	r3, [r8]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	bb62      	cbnz	r2, 8002624 <_malloc_r+0xdc>
 80025ca:	f8c8 7000 	str.w	r7, [r8]
 80025ce:	e00f      	b.n	80025f0 <_malloc_r+0xa8>
 80025d0:	6822      	ldr	r2, [r4, #0]
 80025d2:	1b52      	subs	r2, r2, r5
 80025d4:	d420      	bmi.n	8002618 <_malloc_r+0xd0>
 80025d6:	2a0b      	cmp	r2, #11
 80025d8:	d917      	bls.n	800260a <_malloc_r+0xc2>
 80025da:	1961      	adds	r1, r4, r5
 80025dc:	42a3      	cmp	r3, r4
 80025de:	6025      	str	r5, [r4, #0]
 80025e0:	bf18      	it	ne
 80025e2:	6059      	strne	r1, [r3, #4]
 80025e4:	6863      	ldr	r3, [r4, #4]
 80025e6:	bf08      	it	eq
 80025e8:	f8c8 1000 	streq.w	r1, [r8]
 80025ec:	5162      	str	r2, [r4, r5]
 80025ee:	604b      	str	r3, [r1, #4]
 80025f0:	4630      	mov	r0, r6
 80025f2:	f000 f82f 	bl	8002654 <__malloc_unlock>
 80025f6:	f104 000b 	add.w	r0, r4, #11
 80025fa:	1d23      	adds	r3, r4, #4
 80025fc:	f020 0007 	bic.w	r0, r0, #7
 8002600:	1ac2      	subs	r2, r0, r3
 8002602:	bf1c      	itt	ne
 8002604:	1a1b      	subne	r3, r3, r0
 8002606:	50a3      	strne	r3, [r4, r2]
 8002608:	e7af      	b.n	800256a <_malloc_r+0x22>
 800260a:	6862      	ldr	r2, [r4, #4]
 800260c:	42a3      	cmp	r3, r4
 800260e:	bf0c      	ite	eq
 8002610:	f8c8 2000 	streq.w	r2, [r8]
 8002614:	605a      	strne	r2, [r3, #4]
 8002616:	e7eb      	b.n	80025f0 <_malloc_r+0xa8>
 8002618:	4623      	mov	r3, r4
 800261a:	6864      	ldr	r4, [r4, #4]
 800261c:	e7ae      	b.n	800257c <_malloc_r+0x34>
 800261e:	463c      	mov	r4, r7
 8002620:	687f      	ldr	r7, [r7, #4]
 8002622:	e7b6      	b.n	8002592 <_malloc_r+0x4a>
 8002624:	461a      	mov	r2, r3
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	42a3      	cmp	r3, r4
 800262a:	d1fb      	bne.n	8002624 <_malloc_r+0xdc>
 800262c:	2300      	movs	r3, #0
 800262e:	6053      	str	r3, [r2, #4]
 8002630:	e7de      	b.n	80025f0 <_malloc_r+0xa8>
 8002632:	230c      	movs	r3, #12
 8002634:	4630      	mov	r0, r6
 8002636:	6033      	str	r3, [r6, #0]
 8002638:	f000 f80c 	bl	8002654 <__malloc_unlock>
 800263c:	e794      	b.n	8002568 <_malloc_r+0x20>
 800263e:	6005      	str	r5, [r0, #0]
 8002640:	e7d6      	b.n	80025f0 <_malloc_r+0xa8>
 8002642:	bf00      	nop
 8002644:	20000320 	.word	0x20000320

08002648 <__malloc_lock>:
 8002648:	4801      	ldr	r0, [pc, #4]	@ (8002650 <__malloc_lock+0x8>)
 800264a:	f7ff bf10 	b.w	800246e <__retarget_lock_acquire_recursive>
 800264e:	bf00      	nop
 8002650:	20000318 	.word	0x20000318

08002654 <__malloc_unlock>:
 8002654:	4801      	ldr	r0, [pc, #4]	@ (800265c <__malloc_unlock+0x8>)
 8002656:	f7ff bf0b 	b.w	8002470 <__retarget_lock_release_recursive>
 800265a:	bf00      	nop
 800265c:	20000318 	.word	0x20000318

08002660 <__ssputs_r>:
 8002660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002664:	461f      	mov	r7, r3
 8002666:	688e      	ldr	r6, [r1, #8]
 8002668:	4682      	mov	sl, r0
 800266a:	42be      	cmp	r6, r7
 800266c:	460c      	mov	r4, r1
 800266e:	4690      	mov	r8, r2
 8002670:	680b      	ldr	r3, [r1, #0]
 8002672:	d82d      	bhi.n	80026d0 <__ssputs_r+0x70>
 8002674:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002678:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800267c:	d026      	beq.n	80026cc <__ssputs_r+0x6c>
 800267e:	6965      	ldr	r5, [r4, #20]
 8002680:	6909      	ldr	r1, [r1, #16]
 8002682:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002686:	eba3 0901 	sub.w	r9, r3, r1
 800268a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800268e:	1c7b      	adds	r3, r7, #1
 8002690:	444b      	add	r3, r9
 8002692:	106d      	asrs	r5, r5, #1
 8002694:	429d      	cmp	r5, r3
 8002696:	bf38      	it	cc
 8002698:	461d      	movcc	r5, r3
 800269a:	0553      	lsls	r3, r2, #21
 800269c:	d527      	bpl.n	80026ee <__ssputs_r+0x8e>
 800269e:	4629      	mov	r1, r5
 80026a0:	f7ff ff52 	bl	8002548 <_malloc_r>
 80026a4:	4606      	mov	r6, r0
 80026a6:	b360      	cbz	r0, 8002702 <__ssputs_r+0xa2>
 80026a8:	464a      	mov	r2, r9
 80026aa:	6921      	ldr	r1, [r4, #16]
 80026ac:	f000 fc24 	bl	8002ef8 <memcpy>
 80026b0:	89a3      	ldrh	r3, [r4, #12]
 80026b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80026b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ba:	81a3      	strh	r3, [r4, #12]
 80026bc:	6126      	str	r6, [r4, #16]
 80026be:	444e      	add	r6, r9
 80026c0:	6026      	str	r6, [r4, #0]
 80026c2:	463e      	mov	r6, r7
 80026c4:	6165      	str	r5, [r4, #20]
 80026c6:	eba5 0509 	sub.w	r5, r5, r9
 80026ca:	60a5      	str	r5, [r4, #8]
 80026cc:	42be      	cmp	r6, r7
 80026ce:	d900      	bls.n	80026d2 <__ssputs_r+0x72>
 80026d0:	463e      	mov	r6, r7
 80026d2:	4632      	mov	r2, r6
 80026d4:	4641      	mov	r1, r8
 80026d6:	6820      	ldr	r0, [r4, #0]
 80026d8:	f000 fbb3 	bl	8002e42 <memmove>
 80026dc:	2000      	movs	r0, #0
 80026de:	68a3      	ldr	r3, [r4, #8]
 80026e0:	1b9b      	subs	r3, r3, r6
 80026e2:	60a3      	str	r3, [r4, #8]
 80026e4:	6823      	ldr	r3, [r4, #0]
 80026e6:	4433      	add	r3, r6
 80026e8:	6023      	str	r3, [r4, #0]
 80026ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ee:	462a      	mov	r2, r5
 80026f0:	f000 fc10 	bl	8002f14 <_realloc_r>
 80026f4:	4606      	mov	r6, r0
 80026f6:	2800      	cmp	r0, #0
 80026f8:	d1e0      	bne.n	80026bc <__ssputs_r+0x5c>
 80026fa:	4650      	mov	r0, sl
 80026fc:	6921      	ldr	r1, [r4, #16]
 80026fe:	f7ff feb9 	bl	8002474 <_free_r>
 8002702:	230c      	movs	r3, #12
 8002704:	f8ca 3000 	str.w	r3, [sl]
 8002708:	89a3      	ldrh	r3, [r4, #12]
 800270a:	f04f 30ff 	mov.w	r0, #4294967295
 800270e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	e7e9      	b.n	80026ea <__ssputs_r+0x8a>
	...

08002718 <_svfiprintf_r>:
 8002718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800271c:	4698      	mov	r8, r3
 800271e:	898b      	ldrh	r3, [r1, #12]
 8002720:	4607      	mov	r7, r0
 8002722:	061b      	lsls	r3, r3, #24
 8002724:	460d      	mov	r5, r1
 8002726:	4614      	mov	r4, r2
 8002728:	b09d      	sub	sp, #116	@ 0x74
 800272a:	d510      	bpl.n	800274e <_svfiprintf_r+0x36>
 800272c:	690b      	ldr	r3, [r1, #16]
 800272e:	b973      	cbnz	r3, 800274e <_svfiprintf_r+0x36>
 8002730:	2140      	movs	r1, #64	@ 0x40
 8002732:	f7ff ff09 	bl	8002548 <_malloc_r>
 8002736:	6028      	str	r0, [r5, #0]
 8002738:	6128      	str	r0, [r5, #16]
 800273a:	b930      	cbnz	r0, 800274a <_svfiprintf_r+0x32>
 800273c:	230c      	movs	r3, #12
 800273e:	603b      	str	r3, [r7, #0]
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	b01d      	add	sp, #116	@ 0x74
 8002746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800274a:	2340      	movs	r3, #64	@ 0x40
 800274c:	616b      	str	r3, [r5, #20]
 800274e:	2300      	movs	r3, #0
 8002750:	9309      	str	r3, [sp, #36]	@ 0x24
 8002752:	2320      	movs	r3, #32
 8002754:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002758:	2330      	movs	r3, #48	@ 0x30
 800275a:	f04f 0901 	mov.w	r9, #1
 800275e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002762:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80028fc <_svfiprintf_r+0x1e4>
 8002766:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800276a:	4623      	mov	r3, r4
 800276c:	469a      	mov	sl, r3
 800276e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002772:	b10a      	cbz	r2, 8002778 <_svfiprintf_r+0x60>
 8002774:	2a25      	cmp	r2, #37	@ 0x25
 8002776:	d1f9      	bne.n	800276c <_svfiprintf_r+0x54>
 8002778:	ebba 0b04 	subs.w	fp, sl, r4
 800277c:	d00b      	beq.n	8002796 <_svfiprintf_r+0x7e>
 800277e:	465b      	mov	r3, fp
 8002780:	4622      	mov	r2, r4
 8002782:	4629      	mov	r1, r5
 8002784:	4638      	mov	r0, r7
 8002786:	f7ff ff6b 	bl	8002660 <__ssputs_r>
 800278a:	3001      	adds	r0, #1
 800278c:	f000 80a7 	beq.w	80028de <_svfiprintf_r+0x1c6>
 8002790:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002792:	445a      	add	r2, fp
 8002794:	9209      	str	r2, [sp, #36]	@ 0x24
 8002796:	f89a 3000 	ldrb.w	r3, [sl]
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 809f 	beq.w	80028de <_svfiprintf_r+0x1c6>
 80027a0:	2300      	movs	r3, #0
 80027a2:	f04f 32ff 	mov.w	r2, #4294967295
 80027a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027aa:	f10a 0a01 	add.w	sl, sl, #1
 80027ae:	9304      	str	r3, [sp, #16]
 80027b0:	9307      	str	r3, [sp, #28]
 80027b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027b6:	931a      	str	r3, [sp, #104]	@ 0x68
 80027b8:	4654      	mov	r4, sl
 80027ba:	2205      	movs	r2, #5
 80027bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80027c0:	484e      	ldr	r0, [pc, #312]	@ (80028fc <_svfiprintf_r+0x1e4>)
 80027c2:	f000 fb8b 	bl	8002edc <memchr>
 80027c6:	9a04      	ldr	r2, [sp, #16]
 80027c8:	b9d8      	cbnz	r0, 8002802 <_svfiprintf_r+0xea>
 80027ca:	06d0      	lsls	r0, r2, #27
 80027cc:	bf44      	itt	mi
 80027ce:	2320      	movmi	r3, #32
 80027d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027d4:	0711      	lsls	r1, r2, #28
 80027d6:	bf44      	itt	mi
 80027d8:	232b      	movmi	r3, #43	@ 0x2b
 80027da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80027de:	f89a 3000 	ldrb.w	r3, [sl]
 80027e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80027e4:	d015      	beq.n	8002812 <_svfiprintf_r+0xfa>
 80027e6:	4654      	mov	r4, sl
 80027e8:	2000      	movs	r0, #0
 80027ea:	f04f 0c0a 	mov.w	ip, #10
 80027ee:	9a07      	ldr	r2, [sp, #28]
 80027f0:	4621      	mov	r1, r4
 80027f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027f6:	3b30      	subs	r3, #48	@ 0x30
 80027f8:	2b09      	cmp	r3, #9
 80027fa:	d94b      	bls.n	8002894 <_svfiprintf_r+0x17c>
 80027fc:	b1b0      	cbz	r0, 800282c <_svfiprintf_r+0x114>
 80027fe:	9207      	str	r2, [sp, #28]
 8002800:	e014      	b.n	800282c <_svfiprintf_r+0x114>
 8002802:	eba0 0308 	sub.w	r3, r0, r8
 8002806:	fa09 f303 	lsl.w	r3, r9, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	46a2      	mov	sl, r4
 800280e:	9304      	str	r3, [sp, #16]
 8002810:	e7d2      	b.n	80027b8 <_svfiprintf_r+0xa0>
 8002812:	9b03      	ldr	r3, [sp, #12]
 8002814:	1d19      	adds	r1, r3, #4
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	9103      	str	r1, [sp, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	bfbb      	ittet	lt
 800281e:	425b      	neglt	r3, r3
 8002820:	f042 0202 	orrlt.w	r2, r2, #2
 8002824:	9307      	strge	r3, [sp, #28]
 8002826:	9307      	strlt	r3, [sp, #28]
 8002828:	bfb8      	it	lt
 800282a:	9204      	strlt	r2, [sp, #16]
 800282c:	7823      	ldrb	r3, [r4, #0]
 800282e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002830:	d10a      	bne.n	8002848 <_svfiprintf_r+0x130>
 8002832:	7863      	ldrb	r3, [r4, #1]
 8002834:	2b2a      	cmp	r3, #42	@ 0x2a
 8002836:	d132      	bne.n	800289e <_svfiprintf_r+0x186>
 8002838:	9b03      	ldr	r3, [sp, #12]
 800283a:	3402      	adds	r4, #2
 800283c:	1d1a      	adds	r2, r3, #4
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	9203      	str	r2, [sp, #12]
 8002842:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002846:	9305      	str	r3, [sp, #20]
 8002848:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002900 <_svfiprintf_r+0x1e8>
 800284c:	2203      	movs	r2, #3
 800284e:	4650      	mov	r0, sl
 8002850:	7821      	ldrb	r1, [r4, #0]
 8002852:	f000 fb43 	bl	8002edc <memchr>
 8002856:	b138      	cbz	r0, 8002868 <_svfiprintf_r+0x150>
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	9b04      	ldr	r3, [sp, #16]
 800285c:	eba0 000a 	sub.w	r0, r0, sl
 8002860:	4082      	lsls	r2, r0
 8002862:	4313      	orrs	r3, r2
 8002864:	3401      	adds	r4, #1
 8002866:	9304      	str	r3, [sp, #16]
 8002868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800286c:	2206      	movs	r2, #6
 800286e:	4825      	ldr	r0, [pc, #148]	@ (8002904 <_svfiprintf_r+0x1ec>)
 8002870:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002874:	f000 fb32 	bl	8002edc <memchr>
 8002878:	2800      	cmp	r0, #0
 800287a:	d036      	beq.n	80028ea <_svfiprintf_r+0x1d2>
 800287c:	4b22      	ldr	r3, [pc, #136]	@ (8002908 <_svfiprintf_r+0x1f0>)
 800287e:	bb1b      	cbnz	r3, 80028c8 <_svfiprintf_r+0x1b0>
 8002880:	9b03      	ldr	r3, [sp, #12]
 8002882:	3307      	adds	r3, #7
 8002884:	f023 0307 	bic.w	r3, r3, #7
 8002888:	3308      	adds	r3, #8
 800288a:	9303      	str	r3, [sp, #12]
 800288c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800288e:	4433      	add	r3, r6
 8002890:	9309      	str	r3, [sp, #36]	@ 0x24
 8002892:	e76a      	b.n	800276a <_svfiprintf_r+0x52>
 8002894:	460c      	mov	r4, r1
 8002896:	2001      	movs	r0, #1
 8002898:	fb0c 3202 	mla	r2, ip, r2, r3
 800289c:	e7a8      	b.n	80027f0 <_svfiprintf_r+0xd8>
 800289e:	2300      	movs	r3, #0
 80028a0:	f04f 0c0a 	mov.w	ip, #10
 80028a4:	4619      	mov	r1, r3
 80028a6:	3401      	adds	r4, #1
 80028a8:	9305      	str	r3, [sp, #20]
 80028aa:	4620      	mov	r0, r4
 80028ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028b0:	3a30      	subs	r2, #48	@ 0x30
 80028b2:	2a09      	cmp	r2, #9
 80028b4:	d903      	bls.n	80028be <_svfiprintf_r+0x1a6>
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0c6      	beq.n	8002848 <_svfiprintf_r+0x130>
 80028ba:	9105      	str	r1, [sp, #20]
 80028bc:	e7c4      	b.n	8002848 <_svfiprintf_r+0x130>
 80028be:	4604      	mov	r4, r0
 80028c0:	2301      	movs	r3, #1
 80028c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80028c6:	e7f0      	b.n	80028aa <_svfiprintf_r+0x192>
 80028c8:	ab03      	add	r3, sp, #12
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	462a      	mov	r2, r5
 80028ce:	4638      	mov	r0, r7
 80028d0:	4b0e      	ldr	r3, [pc, #56]	@ (800290c <_svfiprintf_r+0x1f4>)
 80028d2:	a904      	add	r1, sp, #16
 80028d4:	f3af 8000 	nop.w
 80028d8:	1c42      	adds	r2, r0, #1
 80028da:	4606      	mov	r6, r0
 80028dc:	d1d6      	bne.n	800288c <_svfiprintf_r+0x174>
 80028de:	89ab      	ldrh	r3, [r5, #12]
 80028e0:	065b      	lsls	r3, r3, #25
 80028e2:	f53f af2d 	bmi.w	8002740 <_svfiprintf_r+0x28>
 80028e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80028e8:	e72c      	b.n	8002744 <_svfiprintf_r+0x2c>
 80028ea:	ab03      	add	r3, sp, #12
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	462a      	mov	r2, r5
 80028f0:	4638      	mov	r0, r7
 80028f2:	4b06      	ldr	r3, [pc, #24]	@ (800290c <_svfiprintf_r+0x1f4>)
 80028f4:	a904      	add	r1, sp, #16
 80028f6:	f000 f87d 	bl	80029f4 <_printf_i>
 80028fa:	e7ed      	b.n	80028d8 <_svfiprintf_r+0x1c0>
 80028fc:	08003042 	.word	0x08003042
 8002900:	08003048 	.word	0x08003048
 8002904:	0800304c 	.word	0x0800304c
 8002908:	00000000 	.word	0x00000000
 800290c:	08002661 	.word	0x08002661

08002910 <_printf_common>:
 8002910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002914:	4616      	mov	r6, r2
 8002916:	4698      	mov	r8, r3
 8002918:	688a      	ldr	r2, [r1, #8]
 800291a:	690b      	ldr	r3, [r1, #16]
 800291c:	4607      	mov	r7, r0
 800291e:	4293      	cmp	r3, r2
 8002920:	bfb8      	it	lt
 8002922:	4613      	movlt	r3, r2
 8002924:	6033      	str	r3, [r6, #0]
 8002926:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800292a:	460c      	mov	r4, r1
 800292c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002930:	b10a      	cbz	r2, 8002936 <_printf_common+0x26>
 8002932:	3301      	adds	r3, #1
 8002934:	6033      	str	r3, [r6, #0]
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	0699      	lsls	r1, r3, #26
 800293a:	bf42      	ittt	mi
 800293c:	6833      	ldrmi	r3, [r6, #0]
 800293e:	3302      	addmi	r3, #2
 8002940:	6033      	strmi	r3, [r6, #0]
 8002942:	6825      	ldr	r5, [r4, #0]
 8002944:	f015 0506 	ands.w	r5, r5, #6
 8002948:	d106      	bne.n	8002958 <_printf_common+0x48>
 800294a:	f104 0a19 	add.w	sl, r4, #25
 800294e:	68e3      	ldr	r3, [r4, #12]
 8002950:	6832      	ldr	r2, [r6, #0]
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	42ab      	cmp	r3, r5
 8002956:	dc2b      	bgt.n	80029b0 <_printf_common+0xa0>
 8002958:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800295c:	6822      	ldr	r2, [r4, #0]
 800295e:	3b00      	subs	r3, #0
 8002960:	bf18      	it	ne
 8002962:	2301      	movne	r3, #1
 8002964:	0692      	lsls	r2, r2, #26
 8002966:	d430      	bmi.n	80029ca <_printf_common+0xba>
 8002968:	4641      	mov	r1, r8
 800296a:	4638      	mov	r0, r7
 800296c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002970:	47c8      	blx	r9
 8002972:	3001      	adds	r0, #1
 8002974:	d023      	beq.n	80029be <_printf_common+0xae>
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	6922      	ldr	r2, [r4, #16]
 800297a:	f003 0306 	and.w	r3, r3, #6
 800297e:	2b04      	cmp	r3, #4
 8002980:	bf14      	ite	ne
 8002982:	2500      	movne	r5, #0
 8002984:	6833      	ldreq	r3, [r6, #0]
 8002986:	f04f 0600 	mov.w	r6, #0
 800298a:	bf08      	it	eq
 800298c:	68e5      	ldreq	r5, [r4, #12]
 800298e:	f104 041a 	add.w	r4, r4, #26
 8002992:	bf08      	it	eq
 8002994:	1aed      	subeq	r5, r5, r3
 8002996:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800299a:	bf08      	it	eq
 800299c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029a0:	4293      	cmp	r3, r2
 80029a2:	bfc4      	itt	gt
 80029a4:	1a9b      	subgt	r3, r3, r2
 80029a6:	18ed      	addgt	r5, r5, r3
 80029a8:	42b5      	cmp	r5, r6
 80029aa:	d11a      	bne.n	80029e2 <_printf_common+0xd2>
 80029ac:	2000      	movs	r0, #0
 80029ae:	e008      	b.n	80029c2 <_printf_common+0xb2>
 80029b0:	2301      	movs	r3, #1
 80029b2:	4652      	mov	r2, sl
 80029b4:	4641      	mov	r1, r8
 80029b6:	4638      	mov	r0, r7
 80029b8:	47c8      	blx	r9
 80029ba:	3001      	adds	r0, #1
 80029bc:	d103      	bne.n	80029c6 <_printf_common+0xb6>
 80029be:	f04f 30ff 	mov.w	r0, #4294967295
 80029c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c6:	3501      	adds	r5, #1
 80029c8:	e7c1      	b.n	800294e <_printf_common+0x3e>
 80029ca:	2030      	movs	r0, #48	@ 0x30
 80029cc:	18e1      	adds	r1, r4, r3
 80029ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80029d8:	4422      	add	r2, r4
 80029da:	3302      	adds	r3, #2
 80029dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80029e0:	e7c2      	b.n	8002968 <_printf_common+0x58>
 80029e2:	2301      	movs	r3, #1
 80029e4:	4622      	mov	r2, r4
 80029e6:	4641      	mov	r1, r8
 80029e8:	4638      	mov	r0, r7
 80029ea:	47c8      	blx	r9
 80029ec:	3001      	adds	r0, #1
 80029ee:	d0e6      	beq.n	80029be <_printf_common+0xae>
 80029f0:	3601      	adds	r6, #1
 80029f2:	e7d9      	b.n	80029a8 <_printf_common+0x98>

080029f4 <_printf_i>:
 80029f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029f8:	7e0f      	ldrb	r7, [r1, #24]
 80029fa:	4691      	mov	r9, r2
 80029fc:	2f78      	cmp	r7, #120	@ 0x78
 80029fe:	4680      	mov	r8, r0
 8002a00:	460c      	mov	r4, r1
 8002a02:	469a      	mov	sl, r3
 8002a04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a0a:	d807      	bhi.n	8002a1c <_printf_i+0x28>
 8002a0c:	2f62      	cmp	r7, #98	@ 0x62
 8002a0e:	d80a      	bhi.n	8002a26 <_printf_i+0x32>
 8002a10:	2f00      	cmp	r7, #0
 8002a12:	f000 80d1 	beq.w	8002bb8 <_printf_i+0x1c4>
 8002a16:	2f58      	cmp	r7, #88	@ 0x58
 8002a18:	f000 80b8 	beq.w	8002b8c <_printf_i+0x198>
 8002a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a24:	e03a      	b.n	8002a9c <_printf_i+0xa8>
 8002a26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a2a:	2b15      	cmp	r3, #21
 8002a2c:	d8f6      	bhi.n	8002a1c <_printf_i+0x28>
 8002a2e:	a101      	add	r1, pc, #4	@ (adr r1, 8002a34 <_printf_i+0x40>)
 8002a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002a34:	08002a8d 	.word	0x08002a8d
 8002a38:	08002aa1 	.word	0x08002aa1
 8002a3c:	08002a1d 	.word	0x08002a1d
 8002a40:	08002a1d 	.word	0x08002a1d
 8002a44:	08002a1d 	.word	0x08002a1d
 8002a48:	08002a1d 	.word	0x08002a1d
 8002a4c:	08002aa1 	.word	0x08002aa1
 8002a50:	08002a1d 	.word	0x08002a1d
 8002a54:	08002a1d 	.word	0x08002a1d
 8002a58:	08002a1d 	.word	0x08002a1d
 8002a5c:	08002a1d 	.word	0x08002a1d
 8002a60:	08002b9f 	.word	0x08002b9f
 8002a64:	08002acb 	.word	0x08002acb
 8002a68:	08002b59 	.word	0x08002b59
 8002a6c:	08002a1d 	.word	0x08002a1d
 8002a70:	08002a1d 	.word	0x08002a1d
 8002a74:	08002bc1 	.word	0x08002bc1
 8002a78:	08002a1d 	.word	0x08002a1d
 8002a7c:	08002acb 	.word	0x08002acb
 8002a80:	08002a1d 	.word	0x08002a1d
 8002a84:	08002a1d 	.word	0x08002a1d
 8002a88:	08002b61 	.word	0x08002b61
 8002a8c:	6833      	ldr	r3, [r6, #0]
 8002a8e:	1d1a      	adds	r2, r3, #4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6032      	str	r2, [r6, #0]
 8002a94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e09c      	b.n	8002bda <_printf_i+0x1e6>
 8002aa0:	6833      	ldr	r3, [r6, #0]
 8002aa2:	6820      	ldr	r0, [r4, #0]
 8002aa4:	1d19      	adds	r1, r3, #4
 8002aa6:	6031      	str	r1, [r6, #0]
 8002aa8:	0606      	lsls	r6, r0, #24
 8002aaa:	d501      	bpl.n	8002ab0 <_printf_i+0xbc>
 8002aac:	681d      	ldr	r5, [r3, #0]
 8002aae:	e003      	b.n	8002ab8 <_printf_i+0xc4>
 8002ab0:	0645      	lsls	r5, r0, #25
 8002ab2:	d5fb      	bpl.n	8002aac <_printf_i+0xb8>
 8002ab4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ab8:	2d00      	cmp	r5, #0
 8002aba:	da03      	bge.n	8002ac4 <_printf_i+0xd0>
 8002abc:	232d      	movs	r3, #45	@ 0x2d
 8002abe:	426d      	negs	r5, r5
 8002ac0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ac4:	230a      	movs	r3, #10
 8002ac6:	4858      	ldr	r0, [pc, #352]	@ (8002c28 <_printf_i+0x234>)
 8002ac8:	e011      	b.n	8002aee <_printf_i+0xfa>
 8002aca:	6821      	ldr	r1, [r4, #0]
 8002acc:	6833      	ldr	r3, [r6, #0]
 8002ace:	0608      	lsls	r0, r1, #24
 8002ad0:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ad4:	d402      	bmi.n	8002adc <_printf_i+0xe8>
 8002ad6:	0649      	lsls	r1, r1, #25
 8002ad8:	bf48      	it	mi
 8002ada:	b2ad      	uxthmi	r5, r5
 8002adc:	2f6f      	cmp	r7, #111	@ 0x6f
 8002ade:	6033      	str	r3, [r6, #0]
 8002ae0:	bf14      	ite	ne
 8002ae2:	230a      	movne	r3, #10
 8002ae4:	2308      	moveq	r3, #8
 8002ae6:	4850      	ldr	r0, [pc, #320]	@ (8002c28 <_printf_i+0x234>)
 8002ae8:	2100      	movs	r1, #0
 8002aea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002aee:	6866      	ldr	r6, [r4, #4]
 8002af0:	2e00      	cmp	r6, #0
 8002af2:	60a6      	str	r6, [r4, #8]
 8002af4:	db05      	blt.n	8002b02 <_printf_i+0x10e>
 8002af6:	6821      	ldr	r1, [r4, #0]
 8002af8:	432e      	orrs	r6, r5
 8002afa:	f021 0104 	bic.w	r1, r1, #4
 8002afe:	6021      	str	r1, [r4, #0]
 8002b00:	d04b      	beq.n	8002b9a <_printf_i+0x1a6>
 8002b02:	4616      	mov	r6, r2
 8002b04:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b08:	fb03 5711 	mls	r7, r3, r1, r5
 8002b0c:	5dc7      	ldrb	r7, [r0, r7]
 8002b0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b12:	462f      	mov	r7, r5
 8002b14:	42bb      	cmp	r3, r7
 8002b16:	460d      	mov	r5, r1
 8002b18:	d9f4      	bls.n	8002b04 <_printf_i+0x110>
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d10b      	bne.n	8002b36 <_printf_i+0x142>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	07df      	lsls	r7, r3, #31
 8002b22:	d508      	bpl.n	8002b36 <_printf_i+0x142>
 8002b24:	6923      	ldr	r3, [r4, #16]
 8002b26:	6861      	ldr	r1, [r4, #4]
 8002b28:	4299      	cmp	r1, r3
 8002b2a:	bfde      	ittt	le
 8002b2c:	2330      	movle	r3, #48	@ 0x30
 8002b2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002b32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002b36:	1b92      	subs	r2, r2, r6
 8002b38:	6122      	str	r2, [r4, #16]
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	4640      	mov	r0, r8
 8002b40:	f8cd a000 	str.w	sl, [sp]
 8002b44:	aa03      	add	r2, sp, #12
 8002b46:	f7ff fee3 	bl	8002910 <_printf_common>
 8002b4a:	3001      	adds	r0, #1
 8002b4c:	d14a      	bne.n	8002be4 <_printf_i+0x1f0>
 8002b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b52:	b004      	add	sp, #16
 8002b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b58:	6823      	ldr	r3, [r4, #0]
 8002b5a:	f043 0320 	orr.w	r3, r3, #32
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	2778      	movs	r7, #120	@ 0x78
 8002b62:	4832      	ldr	r0, [pc, #200]	@ (8002c2c <_printf_i+0x238>)
 8002b64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b68:	6823      	ldr	r3, [r4, #0]
 8002b6a:	6831      	ldr	r1, [r6, #0]
 8002b6c:	061f      	lsls	r7, r3, #24
 8002b6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b72:	d402      	bmi.n	8002b7a <_printf_i+0x186>
 8002b74:	065f      	lsls	r7, r3, #25
 8002b76:	bf48      	it	mi
 8002b78:	b2ad      	uxthmi	r5, r5
 8002b7a:	6031      	str	r1, [r6, #0]
 8002b7c:	07d9      	lsls	r1, r3, #31
 8002b7e:	bf44      	itt	mi
 8002b80:	f043 0320 	orrmi.w	r3, r3, #32
 8002b84:	6023      	strmi	r3, [r4, #0]
 8002b86:	b11d      	cbz	r5, 8002b90 <_printf_i+0x19c>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	e7ad      	b.n	8002ae8 <_printf_i+0xf4>
 8002b8c:	4826      	ldr	r0, [pc, #152]	@ (8002c28 <_printf_i+0x234>)
 8002b8e:	e7e9      	b.n	8002b64 <_printf_i+0x170>
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f023 0320 	bic.w	r3, r3, #32
 8002b96:	6023      	str	r3, [r4, #0]
 8002b98:	e7f6      	b.n	8002b88 <_printf_i+0x194>
 8002b9a:	4616      	mov	r6, r2
 8002b9c:	e7bd      	b.n	8002b1a <_printf_i+0x126>
 8002b9e:	6833      	ldr	r3, [r6, #0]
 8002ba0:	6825      	ldr	r5, [r4, #0]
 8002ba2:	1d18      	adds	r0, r3, #4
 8002ba4:	6961      	ldr	r1, [r4, #20]
 8002ba6:	6030      	str	r0, [r6, #0]
 8002ba8:	062e      	lsls	r6, r5, #24
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	d501      	bpl.n	8002bb2 <_printf_i+0x1be>
 8002bae:	6019      	str	r1, [r3, #0]
 8002bb0:	e002      	b.n	8002bb8 <_printf_i+0x1c4>
 8002bb2:	0668      	lsls	r0, r5, #25
 8002bb4:	d5fb      	bpl.n	8002bae <_printf_i+0x1ba>
 8002bb6:	8019      	strh	r1, [r3, #0]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4616      	mov	r6, r2
 8002bbc:	6123      	str	r3, [r4, #16]
 8002bbe:	e7bc      	b.n	8002b3a <_printf_i+0x146>
 8002bc0:	6833      	ldr	r3, [r6, #0]
 8002bc2:	2100      	movs	r1, #0
 8002bc4:	1d1a      	adds	r2, r3, #4
 8002bc6:	6032      	str	r2, [r6, #0]
 8002bc8:	681e      	ldr	r6, [r3, #0]
 8002bca:	6862      	ldr	r2, [r4, #4]
 8002bcc:	4630      	mov	r0, r6
 8002bce:	f000 f985 	bl	8002edc <memchr>
 8002bd2:	b108      	cbz	r0, 8002bd8 <_printf_i+0x1e4>
 8002bd4:	1b80      	subs	r0, r0, r6
 8002bd6:	6060      	str	r0, [r4, #4]
 8002bd8:	6863      	ldr	r3, [r4, #4]
 8002bda:	6123      	str	r3, [r4, #16]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002be2:	e7aa      	b.n	8002b3a <_printf_i+0x146>
 8002be4:	4632      	mov	r2, r6
 8002be6:	4649      	mov	r1, r9
 8002be8:	4640      	mov	r0, r8
 8002bea:	6923      	ldr	r3, [r4, #16]
 8002bec:	47d0      	blx	sl
 8002bee:	3001      	adds	r0, #1
 8002bf0:	d0ad      	beq.n	8002b4e <_printf_i+0x15a>
 8002bf2:	6823      	ldr	r3, [r4, #0]
 8002bf4:	079b      	lsls	r3, r3, #30
 8002bf6:	d413      	bmi.n	8002c20 <_printf_i+0x22c>
 8002bf8:	68e0      	ldr	r0, [r4, #12]
 8002bfa:	9b03      	ldr	r3, [sp, #12]
 8002bfc:	4298      	cmp	r0, r3
 8002bfe:	bfb8      	it	lt
 8002c00:	4618      	movlt	r0, r3
 8002c02:	e7a6      	b.n	8002b52 <_printf_i+0x15e>
 8002c04:	2301      	movs	r3, #1
 8002c06:	4632      	mov	r2, r6
 8002c08:	4649      	mov	r1, r9
 8002c0a:	4640      	mov	r0, r8
 8002c0c:	47d0      	blx	sl
 8002c0e:	3001      	adds	r0, #1
 8002c10:	d09d      	beq.n	8002b4e <_printf_i+0x15a>
 8002c12:	3501      	adds	r5, #1
 8002c14:	68e3      	ldr	r3, [r4, #12]
 8002c16:	9903      	ldr	r1, [sp, #12]
 8002c18:	1a5b      	subs	r3, r3, r1
 8002c1a:	42ab      	cmp	r3, r5
 8002c1c:	dcf2      	bgt.n	8002c04 <_printf_i+0x210>
 8002c1e:	e7eb      	b.n	8002bf8 <_printf_i+0x204>
 8002c20:	2500      	movs	r5, #0
 8002c22:	f104 0619 	add.w	r6, r4, #25
 8002c26:	e7f5      	b.n	8002c14 <_printf_i+0x220>
 8002c28:	08003053 	.word	0x08003053
 8002c2c:	08003064 	.word	0x08003064

08002c30 <__sflush_r>:
 8002c30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c36:	0716      	lsls	r6, r2, #28
 8002c38:	4605      	mov	r5, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	d454      	bmi.n	8002ce8 <__sflush_r+0xb8>
 8002c3e:	684b      	ldr	r3, [r1, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	dc02      	bgt.n	8002c4a <__sflush_r+0x1a>
 8002c44:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	dd48      	ble.n	8002cdc <__sflush_r+0xac>
 8002c4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c4c:	2e00      	cmp	r6, #0
 8002c4e:	d045      	beq.n	8002cdc <__sflush_r+0xac>
 8002c50:	2300      	movs	r3, #0
 8002c52:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002c56:	682f      	ldr	r7, [r5, #0]
 8002c58:	6a21      	ldr	r1, [r4, #32]
 8002c5a:	602b      	str	r3, [r5, #0]
 8002c5c:	d030      	beq.n	8002cc0 <__sflush_r+0x90>
 8002c5e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002c60:	89a3      	ldrh	r3, [r4, #12]
 8002c62:	0759      	lsls	r1, r3, #29
 8002c64:	d505      	bpl.n	8002c72 <__sflush_r+0x42>
 8002c66:	6863      	ldr	r3, [r4, #4]
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002c6c:	b10b      	cbz	r3, 8002c72 <__sflush_r+0x42>
 8002c6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002c70:	1ad2      	subs	r2, r2, r3
 8002c72:	2300      	movs	r3, #0
 8002c74:	4628      	mov	r0, r5
 8002c76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002c78:	6a21      	ldr	r1, [r4, #32]
 8002c7a:	47b0      	blx	r6
 8002c7c:	1c43      	adds	r3, r0, #1
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	d106      	bne.n	8002c90 <__sflush_r+0x60>
 8002c82:	6829      	ldr	r1, [r5, #0]
 8002c84:	291d      	cmp	r1, #29
 8002c86:	d82b      	bhi.n	8002ce0 <__sflush_r+0xb0>
 8002c88:	4a28      	ldr	r2, [pc, #160]	@ (8002d2c <__sflush_r+0xfc>)
 8002c8a:	40ca      	lsrs	r2, r1
 8002c8c:	07d6      	lsls	r6, r2, #31
 8002c8e:	d527      	bpl.n	8002ce0 <__sflush_r+0xb0>
 8002c90:	2200      	movs	r2, #0
 8002c92:	6062      	str	r2, [r4, #4]
 8002c94:	6922      	ldr	r2, [r4, #16]
 8002c96:	04d9      	lsls	r1, r3, #19
 8002c98:	6022      	str	r2, [r4, #0]
 8002c9a:	d504      	bpl.n	8002ca6 <__sflush_r+0x76>
 8002c9c:	1c42      	adds	r2, r0, #1
 8002c9e:	d101      	bne.n	8002ca4 <__sflush_r+0x74>
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	b903      	cbnz	r3, 8002ca6 <__sflush_r+0x76>
 8002ca4:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ca6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ca8:	602f      	str	r7, [r5, #0]
 8002caa:	b1b9      	cbz	r1, 8002cdc <__sflush_r+0xac>
 8002cac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002cb0:	4299      	cmp	r1, r3
 8002cb2:	d002      	beq.n	8002cba <__sflush_r+0x8a>
 8002cb4:	4628      	mov	r0, r5
 8002cb6:	f7ff fbdd 	bl	8002474 <_free_r>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002cbe:	e00d      	b.n	8002cdc <__sflush_r+0xac>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	47b0      	blx	r6
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	1c50      	adds	r0, r2, #1
 8002cca:	d1c9      	bne.n	8002c60 <__sflush_r+0x30>
 8002ccc:	682b      	ldr	r3, [r5, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0c6      	beq.n	8002c60 <__sflush_r+0x30>
 8002cd2:	2b1d      	cmp	r3, #29
 8002cd4:	d001      	beq.n	8002cda <__sflush_r+0xaa>
 8002cd6:	2b16      	cmp	r3, #22
 8002cd8:	d11d      	bne.n	8002d16 <__sflush_r+0xe6>
 8002cda:	602f      	str	r7, [r5, #0]
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e021      	b.n	8002d24 <__sflush_r+0xf4>
 8002ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	e01a      	b.n	8002d1e <__sflush_r+0xee>
 8002ce8:	690f      	ldr	r7, [r1, #16]
 8002cea:	2f00      	cmp	r7, #0
 8002cec:	d0f6      	beq.n	8002cdc <__sflush_r+0xac>
 8002cee:	0793      	lsls	r3, r2, #30
 8002cf0:	bf18      	it	ne
 8002cf2:	2300      	movne	r3, #0
 8002cf4:	680e      	ldr	r6, [r1, #0]
 8002cf6:	bf08      	it	eq
 8002cf8:	694b      	ldreq	r3, [r1, #20]
 8002cfa:	1bf6      	subs	r6, r6, r7
 8002cfc:	600f      	str	r7, [r1, #0]
 8002cfe:	608b      	str	r3, [r1, #8]
 8002d00:	2e00      	cmp	r6, #0
 8002d02:	ddeb      	ble.n	8002cdc <__sflush_r+0xac>
 8002d04:	4633      	mov	r3, r6
 8002d06:	463a      	mov	r2, r7
 8002d08:	4628      	mov	r0, r5
 8002d0a:	6a21      	ldr	r1, [r4, #32]
 8002d0c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002d10:	47e0      	blx	ip
 8002d12:	2800      	cmp	r0, #0
 8002d14:	dc07      	bgt.n	8002d26 <__sflush_r+0xf6>
 8002d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d22:	81a3      	strh	r3, [r4, #12]
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d26:	4407      	add	r7, r0
 8002d28:	1a36      	subs	r6, r6, r0
 8002d2a:	e7e9      	b.n	8002d00 <__sflush_r+0xd0>
 8002d2c:	20400001 	.word	0x20400001

08002d30 <_fflush_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	690b      	ldr	r3, [r1, #16]
 8002d34:	4605      	mov	r5, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	b913      	cbnz	r3, 8002d40 <_fflush_r+0x10>
 8002d3a:	2500      	movs	r5, #0
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	bd38      	pop	{r3, r4, r5, pc}
 8002d40:	b118      	cbz	r0, 8002d4a <_fflush_r+0x1a>
 8002d42:	6a03      	ldr	r3, [r0, #32]
 8002d44:	b90b      	cbnz	r3, 8002d4a <_fflush_r+0x1a>
 8002d46:	f7ff f98b 	bl	8002060 <__sinit>
 8002d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f3      	beq.n	8002d3a <_fflush_r+0xa>
 8002d52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002d54:	07d0      	lsls	r0, r2, #31
 8002d56:	d404      	bmi.n	8002d62 <_fflush_r+0x32>
 8002d58:	0599      	lsls	r1, r3, #22
 8002d5a:	d402      	bmi.n	8002d62 <_fflush_r+0x32>
 8002d5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d5e:	f7ff fb86 	bl	800246e <__retarget_lock_acquire_recursive>
 8002d62:	4628      	mov	r0, r5
 8002d64:	4621      	mov	r1, r4
 8002d66:	f7ff ff63 	bl	8002c30 <__sflush_r>
 8002d6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002d6c:	4605      	mov	r5, r0
 8002d6e:	07da      	lsls	r2, r3, #31
 8002d70:	d4e4      	bmi.n	8002d3c <_fflush_r+0xc>
 8002d72:	89a3      	ldrh	r3, [r4, #12]
 8002d74:	059b      	lsls	r3, r3, #22
 8002d76:	d4e1      	bmi.n	8002d3c <_fflush_r+0xc>
 8002d78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002d7a:	f7ff fb79 	bl	8002470 <__retarget_lock_release_recursive>
 8002d7e:	e7dd      	b.n	8002d3c <_fflush_r+0xc>

08002d80 <__swhatbuf_r>:
 8002d80:	b570      	push	{r4, r5, r6, lr}
 8002d82:	460c      	mov	r4, r1
 8002d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d88:	4615      	mov	r5, r2
 8002d8a:	2900      	cmp	r1, #0
 8002d8c:	461e      	mov	r6, r3
 8002d8e:	b096      	sub	sp, #88	@ 0x58
 8002d90:	da0c      	bge.n	8002dac <__swhatbuf_r+0x2c>
 8002d92:	89a3      	ldrh	r3, [r4, #12]
 8002d94:	2100      	movs	r1, #0
 8002d96:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d9a:	bf14      	ite	ne
 8002d9c:	2340      	movne	r3, #64	@ 0x40
 8002d9e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002da2:	2000      	movs	r0, #0
 8002da4:	6031      	str	r1, [r6, #0]
 8002da6:	602b      	str	r3, [r5, #0]
 8002da8:	b016      	add	sp, #88	@ 0x58
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	466a      	mov	r2, sp
 8002dae:	f000 f863 	bl	8002e78 <_fstat_r>
 8002db2:	2800      	cmp	r0, #0
 8002db4:	dbed      	blt.n	8002d92 <__swhatbuf_r+0x12>
 8002db6:	9901      	ldr	r1, [sp, #4]
 8002db8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002dbc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002dc0:	4259      	negs	r1, r3
 8002dc2:	4159      	adcs	r1, r3
 8002dc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dc8:	e7eb      	b.n	8002da2 <__swhatbuf_r+0x22>

08002dca <__smakebuf_r>:
 8002dca:	898b      	ldrh	r3, [r1, #12]
 8002dcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002dce:	079d      	lsls	r5, r3, #30
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	d507      	bpl.n	8002de6 <__smakebuf_r+0x1c>
 8002dd6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	2301      	movs	r3, #1
 8002de0:	6163      	str	r3, [r4, #20]
 8002de2:	b003      	add	sp, #12
 8002de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de6:	466a      	mov	r2, sp
 8002de8:	ab01      	add	r3, sp, #4
 8002dea:	f7ff ffc9 	bl	8002d80 <__swhatbuf_r>
 8002dee:	9f00      	ldr	r7, [sp, #0]
 8002df0:	4605      	mov	r5, r0
 8002df2:	4639      	mov	r1, r7
 8002df4:	4630      	mov	r0, r6
 8002df6:	f7ff fba7 	bl	8002548 <_malloc_r>
 8002dfa:	b948      	cbnz	r0, 8002e10 <__smakebuf_r+0x46>
 8002dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e00:	059a      	lsls	r2, r3, #22
 8002e02:	d4ee      	bmi.n	8002de2 <__smakebuf_r+0x18>
 8002e04:	f023 0303 	bic.w	r3, r3, #3
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	81a3      	strh	r3, [r4, #12]
 8002e0e:	e7e2      	b.n	8002dd6 <__smakebuf_r+0xc>
 8002e10:	89a3      	ldrh	r3, [r4, #12]
 8002e12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e1a:	81a3      	strh	r3, [r4, #12]
 8002e1c:	9b01      	ldr	r3, [sp, #4]
 8002e1e:	6020      	str	r0, [r4, #0]
 8002e20:	b15b      	cbz	r3, 8002e3a <__smakebuf_r+0x70>
 8002e22:	4630      	mov	r0, r6
 8002e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e28:	f000 f838 	bl	8002e9c <_isatty_r>
 8002e2c:	b128      	cbz	r0, 8002e3a <__smakebuf_r+0x70>
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	f023 0303 	bic.w	r3, r3, #3
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	89a3      	ldrh	r3, [r4, #12]
 8002e3c:	431d      	orrs	r5, r3
 8002e3e:	81a5      	strh	r5, [r4, #12]
 8002e40:	e7cf      	b.n	8002de2 <__smakebuf_r+0x18>

08002e42 <memmove>:
 8002e42:	4288      	cmp	r0, r1
 8002e44:	b510      	push	{r4, lr}
 8002e46:	eb01 0402 	add.w	r4, r1, r2
 8002e4a:	d902      	bls.n	8002e52 <memmove+0x10>
 8002e4c:	4284      	cmp	r4, r0
 8002e4e:	4623      	mov	r3, r4
 8002e50:	d807      	bhi.n	8002e62 <memmove+0x20>
 8002e52:	1e43      	subs	r3, r0, #1
 8002e54:	42a1      	cmp	r1, r4
 8002e56:	d008      	beq.n	8002e6a <memmove+0x28>
 8002e58:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002e60:	e7f8      	b.n	8002e54 <memmove+0x12>
 8002e62:	4601      	mov	r1, r0
 8002e64:	4402      	add	r2, r0
 8002e66:	428a      	cmp	r2, r1
 8002e68:	d100      	bne.n	8002e6c <memmove+0x2a>
 8002e6a:	bd10      	pop	{r4, pc}
 8002e6c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e70:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002e74:	e7f7      	b.n	8002e66 <memmove+0x24>
	...

08002e78 <_fstat_r>:
 8002e78:	b538      	push	{r3, r4, r5, lr}
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	4d06      	ldr	r5, [pc, #24]	@ (8002e98 <_fstat_r+0x20>)
 8002e7e:	4604      	mov	r4, r0
 8002e80:	4608      	mov	r0, r1
 8002e82:	4611      	mov	r1, r2
 8002e84:	602b      	str	r3, [r5, #0]
 8002e86:	f7fd fddd 	bl	8000a44 <_fstat>
 8002e8a:	1c43      	adds	r3, r0, #1
 8002e8c:	d102      	bne.n	8002e94 <_fstat_r+0x1c>
 8002e8e:	682b      	ldr	r3, [r5, #0]
 8002e90:	b103      	cbz	r3, 8002e94 <_fstat_r+0x1c>
 8002e92:	6023      	str	r3, [r4, #0]
 8002e94:	bd38      	pop	{r3, r4, r5, pc}
 8002e96:	bf00      	nop
 8002e98:	20000314 	.word	0x20000314

08002e9c <_isatty_r>:
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	4d05      	ldr	r5, [pc, #20]	@ (8002eb8 <_isatty_r+0x1c>)
 8002ea2:	4604      	mov	r4, r0
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	602b      	str	r3, [r5, #0]
 8002ea8:	f7fd fddb 	bl	8000a62 <_isatty>
 8002eac:	1c43      	adds	r3, r0, #1
 8002eae:	d102      	bne.n	8002eb6 <_isatty_r+0x1a>
 8002eb0:	682b      	ldr	r3, [r5, #0]
 8002eb2:	b103      	cbz	r3, 8002eb6 <_isatty_r+0x1a>
 8002eb4:	6023      	str	r3, [r4, #0]
 8002eb6:	bd38      	pop	{r3, r4, r5, pc}
 8002eb8:	20000314 	.word	0x20000314

08002ebc <_sbrk_r>:
 8002ebc:	b538      	push	{r3, r4, r5, lr}
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4d05      	ldr	r5, [pc, #20]	@ (8002ed8 <_sbrk_r+0x1c>)
 8002ec2:	4604      	mov	r4, r0
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	602b      	str	r3, [r5, #0]
 8002ec8:	f7fd fde2 	bl	8000a90 <_sbrk>
 8002ecc:	1c43      	adds	r3, r0, #1
 8002ece:	d102      	bne.n	8002ed6 <_sbrk_r+0x1a>
 8002ed0:	682b      	ldr	r3, [r5, #0]
 8002ed2:	b103      	cbz	r3, 8002ed6 <_sbrk_r+0x1a>
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	20000314 	.word	0x20000314

08002edc <memchr>:
 8002edc:	4603      	mov	r3, r0
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	b2c9      	uxtb	r1, r1
 8002ee2:	4402      	add	r2, r0
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	d101      	bne.n	8002eee <memchr+0x12>
 8002eea:	2000      	movs	r0, #0
 8002eec:	e003      	b.n	8002ef6 <memchr+0x1a>
 8002eee:	7804      	ldrb	r4, [r0, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	428c      	cmp	r4, r1
 8002ef4:	d1f6      	bne.n	8002ee4 <memchr+0x8>
 8002ef6:	bd10      	pop	{r4, pc}

08002ef8 <memcpy>:
 8002ef8:	440a      	add	r2, r1
 8002efa:	4291      	cmp	r1, r2
 8002efc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f00:	d100      	bne.n	8002f04 <memcpy+0xc>
 8002f02:	4770      	bx	lr
 8002f04:	b510      	push	{r4, lr}
 8002f06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f0a:	4291      	cmp	r1, r2
 8002f0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f10:	d1f9      	bne.n	8002f06 <memcpy+0xe>
 8002f12:	bd10      	pop	{r4, pc}

08002f14 <_realloc_r>:
 8002f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f18:	4607      	mov	r7, r0
 8002f1a:	4614      	mov	r4, r2
 8002f1c:	460d      	mov	r5, r1
 8002f1e:	b921      	cbnz	r1, 8002f2a <_realloc_r+0x16>
 8002f20:	4611      	mov	r1, r2
 8002f22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f26:	f7ff bb0f 	b.w	8002548 <_malloc_r>
 8002f2a:	b92a      	cbnz	r2, 8002f38 <_realloc_r+0x24>
 8002f2c:	f7ff faa2 	bl	8002474 <_free_r>
 8002f30:	4625      	mov	r5, r4
 8002f32:	4628      	mov	r0, r5
 8002f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f38:	f000 f81a 	bl	8002f70 <_malloc_usable_size_r>
 8002f3c:	4284      	cmp	r4, r0
 8002f3e:	4606      	mov	r6, r0
 8002f40:	d802      	bhi.n	8002f48 <_realloc_r+0x34>
 8002f42:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002f46:	d8f4      	bhi.n	8002f32 <_realloc_r+0x1e>
 8002f48:	4621      	mov	r1, r4
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	f7ff fafc 	bl	8002548 <_malloc_r>
 8002f50:	4680      	mov	r8, r0
 8002f52:	b908      	cbnz	r0, 8002f58 <_realloc_r+0x44>
 8002f54:	4645      	mov	r5, r8
 8002f56:	e7ec      	b.n	8002f32 <_realloc_r+0x1e>
 8002f58:	42b4      	cmp	r4, r6
 8002f5a:	4622      	mov	r2, r4
 8002f5c:	4629      	mov	r1, r5
 8002f5e:	bf28      	it	cs
 8002f60:	4632      	movcs	r2, r6
 8002f62:	f7ff ffc9 	bl	8002ef8 <memcpy>
 8002f66:	4629      	mov	r1, r5
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f7ff fa83 	bl	8002474 <_free_r>
 8002f6e:	e7f1      	b.n	8002f54 <_realloc_r+0x40>

08002f70 <_malloc_usable_size_r>:
 8002f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f74:	1f18      	subs	r0, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bfbc      	itt	lt
 8002f7a:	580b      	ldrlt	r3, [r1, r0]
 8002f7c:	18c0      	addlt	r0, r0, r3
 8002f7e:	4770      	bx	lr

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
