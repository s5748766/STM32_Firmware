
LED_CON.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003998  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08003aa4  08003aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bc4  08003bc4  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003bc4  08003bc4  00004bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bcc  08003bcc  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bcc  08003bcc  00004bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bd0  08003bd0  00004bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003bd4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  2000006c  08003c40  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08003c40  00005384  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b70e  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b07  00000000  00000000  000107a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000122b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c6  00000000  00000000  00012f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a7  00000000  00000000  000138fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d056  00000000  00000000  0002bda5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c375  00000000  00000000  00038dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c5170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d98  00000000  00000000  000c51b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c8f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a8c 	.word	0x08003a8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08003a8c 	.word	0x08003a8c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(ch == '\n')
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b0a      	cmp	r3, #10
 8000168:	d106      	bne.n	8000178 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t *)"\r", 1, 0xFFFF);
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4907      	ldr	r1, [pc, #28]	@ (8000190 <__io_putchar+0x34>)
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <__io_putchar+0x38>)
 8000174:	f002 f8b0 	bl	80022d8 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000178:	1d39      	adds	r1, r7, #4
 800017a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800017e:	2201      	movs	r2, #1
 8000180:	4804      	ldr	r0, [pc, #16]	@ (8000194 <__io_putchar+0x38>)
 8000182:	f002 f8a9 	bl	80022d8 <HAL_UART_Transmit>

		return ch;
 8000186:	687b      	ldr	r3, [r7, #4]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3708      	adds	r7, #8
 800018c:	46bd      	mov	sp, r7
 800018e:	bd80      	pop	{r7, pc}
 8000190:	08003aa4 	.word	0x08003aa4
 8000194:	200000d0 	.word	0x200000d0

08000198 <smartcar_F>:

void smartcar_F(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001a2:	4816      	ldr	r0, [pc, #88]	@ (80001fc <smartcar_F+0x64>)
 80001a4:	f001 f939 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ae:	4814      	ldr	r0, [pc, #80]	@ (8000200 <smartcar_F+0x68>)
 80001b0:	f001 f933 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	4811      	ldr	r0, [pc, #68]	@ (8000200 <smartcar_F+0x68>)
 80001ba:	f001 f92e 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 80001be:	2200      	movs	r2, #0
 80001c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001c4:	480e      	ldr	r0, [pc, #56]	@ (8000200 <smartcar_F+0x68>)
 80001c6:	f001 f928 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2108      	movs	r1, #8
 80001ce:	480c      	ldr	r0, [pc, #48]	@ (8000200 <smartcar_F+0x68>)
 80001d0:	f001 f923 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001da:	4808      	ldr	r0, [pc, #32]	@ (80001fc <smartcar_F+0x64>)
 80001dc:	f001 f91d 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2110      	movs	r1, #16
 80001e4:	4806      	ldr	r0, [pc, #24]	@ (8000200 <smartcar_F+0x68>)
 80001e6:	f001 f918 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 80001ea:	2201      	movs	r2, #1
 80001ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <smartcar_F+0x68>)
 80001f2:	f001 f912 	bl	800141a <HAL_GPIO_WritePin>
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40010800 	.word	0x40010800
 8000200:	40010c00 	.word	0x40010c00

08000204 <smartcar_B>:

void smartcar_B(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 8000208:	2200      	movs	r2, #0
 800020a:	2108      	movs	r1, #8
 800020c:	4816      	ldr	r0, [pc, #88]	@ (8000268 <smartcar_B+0x64>)
 800020e:	f001 f904 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000212:	2200      	movs	r2, #0
 8000214:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000218:	4814      	ldr	r0, [pc, #80]	@ (800026c <smartcar_B+0x68>)
 800021a:	f001 f8fe 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 800021e:	2200      	movs	r2, #0
 8000220:	2110      	movs	r1, #16
 8000222:	4811      	ldr	r0, [pc, #68]	@ (8000268 <smartcar_B+0x64>)
 8000224:	f001 f8f9 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 8000228:	2200      	movs	r2, #0
 800022a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800022e:	480e      	ldr	r0, [pc, #56]	@ (8000268 <smartcar_B+0x64>)
 8000230:	f001 f8f3 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800023a:	480c      	ldr	r0, [pc, #48]	@ (800026c <smartcar_B+0x68>)
 800023c:	f001 f8ed 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000246:	4808      	ldr	r0, [pc, #32]	@ (8000268 <smartcar_B+0x64>)
 8000248:	f001 f8e7 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 800024c:	2201      	movs	r2, #1
 800024e:	2120      	movs	r1, #32
 8000250:	4805      	ldr	r0, [pc, #20]	@ (8000268 <smartcar_B+0x64>)
 8000252:	f001 f8e2 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <smartcar_B+0x64>)
 800025e:	f001 f8dc 	bl	800141a <HAL_GPIO_WritePin>
}
 8000262:	bf00      	nop
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010c00 	.word	0x40010c00
 800026c:	40010800 	.word	0x40010800

08000270 <smartcar_S>:

void smartcar_S(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 8000274:	2200      	movs	r2, #0
 8000276:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800027a:	4816      	ldr	r0, [pc, #88]	@ (80002d4 <smartcar_S+0x64>)
 800027c:	f001 f8cd 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000286:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <smartcar_S+0x68>)
 8000288:	f001 f8c7 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 800028c:	2200      	movs	r2, #0
 800028e:	2120      	movs	r1, #32
 8000290:	4811      	ldr	r0, [pc, #68]	@ (80002d8 <smartcar_S+0x68>)
 8000292:	f001 f8c2 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000296:	2200      	movs	r2, #0
 8000298:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800029c:	480e      	ldr	r0, [pc, #56]	@ (80002d8 <smartcar_S+0x68>)
 800029e:	f001 f8bc 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <smartcar_S+0x68>)
 80002a8:	f001 f8b7 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002b2:	4808      	ldr	r0, [pc, #32]	@ (80002d4 <smartcar_S+0x64>)
 80002b4:	f001 f8b1 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	4806      	ldr	r0, [pc, #24]	@ (80002d8 <smartcar_S+0x68>)
 80002be:	f001 f8ac 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002c8:	4803      	ldr	r0, [pc, #12]	@ (80002d8 <smartcar_S+0x68>)
 80002ca:	f001 f8a6 	bl	800141a <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40010c00 	.word	0x40010c00

080002dc <smartcar_FL>:

void smartcar_FL(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 1);
 80002e0:	2201      	movs	r2, #1
 80002e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002e6:	4816      	ldr	r0, [pc, #88]	@ (8000340 <smartcar_FL+0x64>)
 80002e8:	f001 f897 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 1);
 80002ec:	2201      	movs	r2, #1
 80002ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f2:	4814      	ldr	r0, [pc, #80]	@ (8000344 <smartcar_FL+0x68>)
 80002f4:	f001 f891 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 0);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2120      	movs	r1, #32
 80002fc:	4811      	ldr	r0, [pc, #68]	@ (8000344 <smartcar_FL+0x68>)
 80002fe:	f001 f88c 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 0);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000308:	480e      	ldr	r0, [pc, #56]	@ (8000344 <smartcar_FL+0x68>)
 800030a:	f001 f886 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 0);
 800030e:	2200      	movs	r2, #0
 8000310:	2108      	movs	r1, #8
 8000312:	480c      	ldr	r0, [pc, #48]	@ (8000344 <smartcar_FL+0x68>)
 8000314:	f001 f881 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 0);
 8000318:	2200      	movs	r2, #0
 800031a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800031e:	4808      	ldr	r0, [pc, #32]	@ (8000340 <smartcar_FL+0x64>)
 8000320:	f001 f87b 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2110      	movs	r1, #16
 8000328:	4806      	ldr	r0, [pc, #24]	@ (8000344 <smartcar_FL+0x68>)
 800032a:	f001 f876 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 1);
 800032e:	2201      	movs	r2, #1
 8000330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000334:	4803      	ldr	r0, [pc, #12]	@ (8000344 <smartcar_FL+0x68>)
 8000336:	f001 f870 	bl	800141a <HAL_GPIO_WritePin>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40010800 	.word	0x40010800
 8000344:	40010c00 	.word	0x40010c00

08000348 <smartcar_FR>:


void smartcar_FR(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFB_GPIO_Port, LFB_Pin, 0);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000352:	4816      	ldr	r0, [pc, #88]	@ (80003ac <smartcar_FR+0x64>)
 8000354:	f001 f861 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBB_GPIO_Port, LBB_Pin, 0);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800035e:	4814      	ldr	r0, [pc, #80]	@ (80003b0 <smartcar_FR+0x68>)
 8000360:	f001 f85b 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFB_GPIO_Port, RFB_Pin, 1);
 8000364:	2201      	movs	r2, #1
 8000366:	2120      	movs	r1, #32
 8000368:	4811      	ldr	r0, [pc, #68]	@ (80003b0 <smartcar_FR+0x68>)
 800036a:	f001 f856 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBB_GPIO_Port, RBB_Pin, 1);
 800036e:	2201      	movs	r2, #1
 8000370:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000374:	480e      	ldr	r0, [pc, #56]	@ (80003b0 <smartcar_FR+0x68>)
 8000376:	f001 f850 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFF_GPIO_Port, LFF_Pin, 1);
 800037a:	2201      	movs	r2, #1
 800037c:	2108      	movs	r1, #8
 800037e:	480c      	ldr	r0, [pc, #48]	@ (80003b0 <smartcar_FR+0x68>)
 8000380:	f001 f84b 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LBF_GPIO_Port, LBF_Pin, 1);
 8000384:	2201      	movs	r2, #1
 8000386:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800038a:	4808      	ldr	r0, [pc, #32]	@ (80003ac <smartcar_FR+0x64>)
 800038c:	f001 f845 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RFF_GPIO_Port, RFF_Pin, 0);
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4806      	ldr	r0, [pc, #24]	@ (80003b0 <smartcar_FR+0x68>)
 8000396:	f001 f840 	bl	800141a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RBF_GPIO_Port, RBF_Pin, 0);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a0:	4803      	ldr	r0, [pc, #12]	@ (80003b0 <smartcar_FR+0x68>)
 80003a2:	f001 f83a 	bl	800141a <HAL_GPIO_WritePin>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40010800 	.word	0x40010800
 80003b0:	40010c00 	.word	0x40010c00

080003b4 <timer_start>:


void timer_start(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
   HAL_TIM_Base_Start(&htim1);
 80003b8:	4809      	ldr	r0, [pc, #36]	@ (80003e0 <timer_start+0x2c>)
 80003ba:	f001 fcc9 	bl	8001d50 <HAL_TIM_Base_Start>
   sprintf((char*)transmit, "=== HC-SR04 TEST===\r\n");
 80003be:	4909      	ldr	r1, [pc, #36]	@ (80003e4 <timer_start+0x30>)
 80003c0:	4809      	ldr	r0, [pc, #36]	@ (80003e8 <timer_start+0x34>)
 80003c2:	f002 fb27 	bl	8002a14 <siprintf>
   HAL_UART_Transmit(&huart2, transmit, strlen((char *)transmit), 1000);
 80003c6:	4808      	ldr	r0, [pc, #32]	@ (80003e8 <timer_start+0x34>)
 80003c8:	f7ff fec0 	bl	800014c <strlen>
 80003cc:	4603      	mov	r3, r0
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003d4:	4904      	ldr	r1, [pc, #16]	@ (80003e8 <timer_start+0x34>)
 80003d6:	4805      	ldr	r0, [pc, #20]	@ (80003ec <timer_start+0x38>)
 80003d8:	f001 ff7e 	bl	80022d8 <HAL_UART_Transmit>
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000088 	.word	0x20000088
 80003e4:	08003aa8 	.word	0x08003aa8
 80003e8:	20000118 	.word	0x20000118
 80003ec:	200000d0 	.word	0x200000d0

080003f0 <delay_us>:

void delay_us(uint16_t us)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	80fb      	strh	r3, [r7, #6]
   __HAL_TIM_SET_COUNTER(&htim1, 0); // initislize counter to start from 0
 80003fa:	4b08      	ldr	r3, [pc, #32]	@ (800041c <delay_us+0x2c>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24
   while((__HAL_TIM_GET_COUNTER(&htim1))<us); // wait count until us
 8000402:	bf00      	nop
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <delay_us+0x2c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800040a:	88fb      	ldrh	r3, [r7, #6]
 800040c:	429a      	cmp	r2, r3
 800040e:	d3f9      	bcc.n	8000404 <delay_us+0x14>
}
 8000410:	bf00      	nop
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	20000088 	.word	0x20000088

08000420 <L_trig>:

void L_trig(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(L_TRIG_GPIO_Port, L_TRIG_Pin, HIGH);
 8000424:	4b0a      	ldr	r3, [pc, #40]	@ (8000450 <L_trig+0x30>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	2180      	movs	r1, #128	@ 0x80
 800042e:	4809      	ldr	r0, [pc, #36]	@ (8000454 <L_trig+0x34>)
 8000430:	f000 fff3 	bl	800141a <HAL_GPIO_WritePin>
   delay_us(10);
 8000434:	200a      	movs	r0, #10
 8000436:	f7ff ffdb 	bl	80003f0 <delay_us>
   HAL_GPIO_WritePin(L_TRIG_GPIO_Port, L_TRIG_Pin, LOW);
 800043a:	4b07      	ldr	r3, [pc, #28]	@ (8000458 <L_trig+0x38>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2180      	movs	r1, #128	@ 0x80
 8000444:	4803      	ldr	r0, [pc, #12]	@ (8000454 <L_trig+0x34>)
 8000446:	f000 ffe8 	bl	800141a <HAL_GPIO_WritePin>
}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000000 	.word	0x20000000
 8000454:	40011000 	.word	0x40011000
 8000458:	2000022c 	.word	0x2000022c

0800045c <L_echo>:

long unsigned int L_echo(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
    long unsigned int echo = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]

    while(HAL_GPIO_ReadPin(L_ECHO_GPIO_Port, L_ECHO_Pin) == LOW){}
 8000466:	bf00      	nop
 8000468:	2101      	movs	r1, #1
 800046a:	4815      	ldr	r0, [pc, #84]	@ (80004c0 <L_echo+0x64>)
 800046c:	f000 ffbe 	bl	80013ec <HAL_GPIO_ReadPin>
 8000470:	4603      	mov	r3, r0
 8000472:	461a      	mov	r2, r3
 8000474:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <L_echo+0x68>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	429a      	cmp	r2, r3
 800047a:	d0f5      	beq.n	8000468 <L_echo+0xc>
         __HAL_TIM_SET_COUNTER(&htim1, 0);
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <L_echo+0x6c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	625a      	str	r2, [r3, #36]	@ 0x24
         while(HAL_GPIO_ReadPin(L_ECHO_GPIO_Port, L_ECHO_Pin) == HIGH);
 8000484:	bf00      	nop
 8000486:	2101      	movs	r1, #1
 8000488:	480d      	ldr	r0, [pc, #52]	@ (80004c0 <L_echo+0x64>)
 800048a:	f000 ffaf 	bl	80013ec <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	461a      	mov	r2, r3
 8000492:	4b0e      	ldr	r3, [pc, #56]	@ (80004cc <L_echo+0x70>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	429a      	cmp	r2, r3
 8000498:	d0f5      	beq.n	8000486 <L_echo+0x2a>
         echo = __HAL_TIM_GET_COUNTER(&htim1);
 800049a:	4b0b      	ldr	r3, [pc, #44]	@ (80004c8 <L_echo+0x6c>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004a0:	607b      	str	r3, [r7, #4]
    if( echo >= 240 && echo <= 23000 ) return echo;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2bef      	cmp	r3, #239	@ 0xef
 80004a6:	d906      	bls.n	80004b6 <L_echo+0x5a>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d801      	bhi.n	80004b6 <L_echo+0x5a>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	e000      	b.n	80004b8 <L_echo+0x5c>
    else return 0;
 80004b6:	2300      	movs	r3, #0
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	2000022c 	.word	0x2000022c
 80004c8:	20000088 	.word	0x20000088
 80004cc:	20000000 	.word	0x20000000

080004d0 <R_trig>:

void R_trig(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(R_TRIG_GPIO_Port, R_TRIG_Pin, HIGH);
 80004d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <R_trig+0x34>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e0:	4809      	ldr	r0, [pc, #36]	@ (8000508 <R_trig+0x38>)
 80004e2:	f000 ff9a 	bl	800141a <HAL_GPIO_WritePin>
   delay_us(10);
 80004e6:	200a      	movs	r0, #10
 80004e8:	f7ff ff82 	bl	80003f0 <delay_us>
   HAL_GPIO_WritePin(R_TRIG_GPIO_Port, R_TRIG_Pin, LOW);
 80004ec:	4b07      	ldr	r3, [pc, #28]	@ (800050c <R_trig+0x3c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	461a      	mov	r2, r3
 80004f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004f8:	4803      	ldr	r0, [pc, #12]	@ (8000508 <R_trig+0x38>)
 80004fa:	f000 ff8e 	bl	800141a <HAL_GPIO_WritePin>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000000 	.word	0x20000000
 8000508:	40010800 	.word	0x40010800
 800050c:	2000022c 	.word	0x2000022c

08000510 <R_echo>:

long unsigned int R_echo(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
    long unsigned int echo = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]

    while(HAL_GPIO_ReadPin(R_ECHO_GPIO_Port, R_ECHO_Pin) == LOW){}
 800051a:	bf00      	nop
 800051c:	2110      	movs	r1, #16
 800051e:	4815      	ldr	r0, [pc, #84]	@ (8000574 <R_echo+0x64>)
 8000520:	f000 ff64 	bl	80013ec <HAL_GPIO_ReadPin>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <R_echo+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	429a      	cmp	r2, r3
 800052e:	d0f5      	beq.n	800051c <R_echo+0xc>
         __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000530:	4b12      	ldr	r3, [pc, #72]	@ (800057c <R_echo+0x6c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2200      	movs	r2, #0
 8000536:	625a      	str	r2, [r3, #36]	@ 0x24
         while(HAL_GPIO_ReadPin(R_ECHO_GPIO_Port, R_ECHO_Pin) == HIGH);
 8000538:	bf00      	nop
 800053a:	2110      	movs	r1, #16
 800053c:	480d      	ldr	r0, [pc, #52]	@ (8000574 <R_echo+0x64>)
 800053e:	f000 ff55 	bl	80013ec <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	461a      	mov	r2, r3
 8000546:	4b0e      	ldr	r3, [pc, #56]	@ (8000580 <R_echo+0x70>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	429a      	cmp	r2, r3
 800054c:	d0f5      	beq.n	800053a <R_echo+0x2a>
         echo = __HAL_TIM_GET_COUNTER(&htim1);
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <R_echo+0x6c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000554:	607b      	str	r3, [r7, #4]
    if( echo >= 240 && echo <= 23000 ) return echo;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2bef      	cmp	r3, #239	@ 0xef
 800055a:	d906      	bls.n	800056a <R_echo+0x5a>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f645 12d8 	movw	r2, #23000	@ 0x59d8
 8000562:	4293      	cmp	r3, r2
 8000564:	d801      	bhi.n	800056a <R_echo+0x5a>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	e000      	b.n	800056c <R_echo+0x5c>
    else return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010800 	.word	0x40010800
 8000578:	2000022c 	.word	0x2000022c
 800057c:	20000088 	.word	0x20000088
 8000580:	20000000 	.word	0x20000000

08000584 <L_ultrasonic>:

void L_ultrasonic(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	L_trig();
 8000588:	f7ff ff4a 	bl	8000420 <L_trig>
	L_echo_time = L_echo();
 800058c:	f7ff ff66 	bl	800045c <L_echo>
 8000590:	4603      	mov	r3, r0
 8000592:	461a      	mov	r2, r3
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <L_ultrasonic+0x50>)
 8000596:	601a      	str	r2, [r3, #0]
	if(L_echo_time != 0)
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <L_ultrasonic+0x50>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d013      	beq.n	80005c8 <L_ultrasonic+0x44>
	{
		L_dist = (int)(17 * L_echo_time / 100);
 80005a0:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <L_ultrasonic+0x50>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	4613      	mov	r3, r2
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	4413      	add	r3, r2
 80005aa:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <L_ultrasonic+0x54>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1152      	asrs	r2, r2, #5
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <L_ultrasonic+0x58>)
 80005b8:	6013      	str	r3, [r2, #0]
		printf("L_Distance = %d(mm)\n\r\n", L_dist);
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <L_ultrasonic+0x58>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	4807      	ldr	r0, [pc, #28]	@ (80005e0 <L_ultrasonic+0x5c>)
 80005c2:	f002 f9b7 	bl	8002934 <iprintf>
	}
	else
		printf("Out of Range!\n\r\n");

}
 80005c6:	e002      	b.n	80005ce <L_ultrasonic+0x4a>
		printf("Out of Range!\n\r\n");
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <L_ultrasonic+0x60>)
 80005ca:	f002 fa1b 	bl	8002a04 <puts>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000021c 	.word	0x2000021c
 80005d8:	51eb851f 	.word	0x51eb851f
 80005dc:	20000224 	.word	0x20000224
 80005e0:	08003ac0 	.word	0x08003ac0
 80005e4:	08003ad8 	.word	0x08003ad8

080005e8 <R_ultrasonic>:

void R_ultrasonic(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	R_trig();
 80005ec:	f7ff ff70 	bl	80004d0 <R_trig>
	R_echo_time = R_echo();
 80005f0:	f7ff ff8e 	bl	8000510 <R_echo>
 80005f4:	4603      	mov	r3, r0
 80005f6:	461a      	mov	r2, r3
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <R_ultrasonic+0x50>)
 80005fa:	601a      	str	r2, [r3, #0]
	if(R_echo_time != 0)
 80005fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000638 <R_ultrasonic+0x50>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d013      	beq.n	800062c <R_ultrasonic+0x44>
	{
		R_dist = (int)(17 * R_echo_time / 100);
 8000604:	4b0c      	ldr	r3, [pc, #48]	@ (8000638 <R_ultrasonic+0x50>)
 8000606:	681a      	ldr	r2, [r3, #0]
 8000608:	4613      	mov	r3, r2
 800060a:	011b      	lsls	r3, r3, #4
 800060c:	4413      	add	r3, r2
 800060e:	4a0b      	ldr	r2, [pc, #44]	@ (800063c <R_ultrasonic+0x54>)
 8000610:	fb82 1203 	smull	r1, r2, r2, r3
 8000614:	1152      	asrs	r2, r2, #5
 8000616:	17db      	asrs	r3, r3, #31
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <R_ultrasonic+0x58>)
 800061c:	6013      	str	r3, [r2, #0]
		printf("R_Distance = %d(mm)\n\r\n", R_dist);
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <R_ultrasonic+0x58>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4619      	mov	r1, r3
 8000624:	4807      	ldr	r0, [pc, #28]	@ (8000644 <R_ultrasonic+0x5c>)
 8000626:	f002 f985 	bl	8002934 <iprintf>
	}
	else
		printf("Out of Range!\n\r\n");

}
 800062a:	e002      	b.n	8000632 <R_ultrasonic+0x4a>
		printf("Out of Range!\n\r\n");
 800062c:	4806      	ldr	r0, [pc, #24]	@ (8000648 <R_ultrasonic+0x60>)
 800062e:	f002 f9e9 	bl	8002a04 <puts>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000220 	.word	0x20000220
 800063c:	51eb851f 	.word	0x51eb851f
 8000640:	20000228 	.word	0x20000228
 8000644:	08003ae8 	.word	0x08003ae8
 8000648:	08003ad8 	.word	0x08003ad8

0800064c <emergent_stop>:

void emergent_stop(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	if(L_dist <= 150)
 8000650:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <emergent_stop+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b96      	cmp	r3, #150	@ 0x96
 8000656:	dc01      	bgt.n	800065c <emergent_stop+0x10>
	{
		smartcar_S();
 8000658:	f7ff fe0a 	bl	8000270 <smartcar_S>
	}
}
 800065c:	bf00      	nop
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000224 	.word	0x20000224

08000664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fbcc 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f8c8 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f000 f982 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f956 	bl	8000924 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000678:	f000 f904 	bl	8000884 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  timer_start();
 800067c:	f7ff fe9a 	bl	80003b4 <timer_start>
  printf("=== RC CAR Test ===\r\n");
 8000680:	4853      	ldr	r0, [pc, #332]	@ (80007d0 <main+0x16c>)
 8000682:	f002 f9bf 	bl	8002a04 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("=== Enter your word ===\r\n\r\n");
 8000686:	4853      	ldr	r0, [pc, #332]	@ (80007d4 <main+0x170>)
 8000688:	f002 f9bc 	bl	8002a04 <puts>
	  HAL_UART_Receive(&huart2, &receive, 1, 0);
 800068c:	2300      	movs	r3, #0
 800068e:	2201      	movs	r2, #1
 8000690:	4951      	ldr	r1, [pc, #324]	@ (80007d8 <main+0x174>)
 8000692:	4852      	ldr	r0, [pc, #328]	@ (80007dc <main+0x178>)
 8000694:	f001 feab 	bl	80023ee <HAL_UART_Receive>
	  L_ultrasonic();
 8000698:	f7ff ff74 	bl	8000584 <L_ultrasonic>
	  R_ultrasonic();
 800069c:	f7ff ffa4 	bl	80005e8 <R_ultrasonic>


	  if(receive == 'W')
 80006a0:	4b4d      	ldr	r3, [pc, #308]	@ (80007d8 <main+0x174>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b57      	cmp	r3, #87	@ 0x57
 80006a6:	d119      	bne.n	80006dc <main+0x78>
	  {
		  printf("\r\n");
 80006a8:	484d      	ldr	r0, [pc, #308]	@ (80007e0 <main+0x17c>)
 80006aa:	f002 f9ab 	bl	8002a04 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2120      	movs	r1, #32
 80006b2:	484c      	ldr	r0, [pc, #304]	@ (80007e4 <main+0x180>)
 80006b4:	f000 feb1 	bl	800141a <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "GO\n\r\n");
 80006b8:	494b      	ldr	r1, [pc, #300]	@ (80007e8 <main+0x184>)
 80006ba:	484c      	ldr	r0, [pc, #304]	@ (80007ec <main+0x188>)
 80006bc:	f002 f9aa 	bl	8002a14 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80006c0:	484a      	ldr	r0, [pc, #296]	@ (80007ec <main+0x188>)
 80006c2:	f7ff fd43 	bl	800014c <strlen>
 80006c6:	4603      	mov	r3, r0
 80006c8:	b29a      	uxth	r2, r3
 80006ca:	2364      	movs	r3, #100	@ 0x64
 80006cc:	4947      	ldr	r1, [pc, #284]	@ (80007ec <main+0x188>)
 80006ce:	4843      	ldr	r0, [pc, #268]	@ (80007dc <main+0x178>)
 80006d0:	f001 fe02 	bl	80022d8 <HAL_UART_Transmit>
		  smartcar_F();
 80006d4:	f7ff fd60 	bl	8000198 <smartcar_F>
		  emergent_stop();
 80006d8:	f7ff ffb8 	bl	800064c <emergent_stop>

	  }

	  if(receive == 'S')
 80006dc:	4b3e      	ldr	r3, [pc, #248]	@ (80007d8 <main+0x174>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b53      	cmp	r3, #83	@ 0x53
 80006e2:	d119      	bne.n	8000718 <main+0xb4>
	  {
		  printf("\r\n");
 80006e4:	483e      	ldr	r0, [pc, #248]	@ (80007e0 <main+0x17c>)
 80006e6:	f002 f98d 	bl	8002a04 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	2120      	movs	r1, #32
 80006ee:	483d      	ldr	r0, [pc, #244]	@ (80007e4 <main+0x180>)
 80006f0:	f000 fe93 	bl	800141a <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "BACK\n\r\n");
 80006f4:	493e      	ldr	r1, [pc, #248]	@ (80007f0 <main+0x18c>)
 80006f6:	483d      	ldr	r0, [pc, #244]	@ (80007ec <main+0x188>)
 80006f8:	f002 f98c 	bl	8002a14 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80006fc:	483b      	ldr	r0, [pc, #236]	@ (80007ec <main+0x188>)
 80006fe:	f7ff fd25 	bl	800014c <strlen>
 8000702:	4603      	mov	r3, r0
 8000704:	b29a      	uxth	r2, r3
 8000706:	2364      	movs	r3, #100	@ 0x64
 8000708:	4938      	ldr	r1, [pc, #224]	@ (80007ec <main+0x188>)
 800070a:	4834      	ldr	r0, [pc, #208]	@ (80007dc <main+0x178>)
 800070c:	f001 fde4 	bl	80022d8 <HAL_UART_Transmit>
		  smartcar_B();
 8000710:	f7ff fd78 	bl	8000204 <smartcar_B>
		  emergent_stop();
 8000714:	f7ff ff9a 	bl	800064c <emergent_stop>
	  }

	  if(receive == 'A')
 8000718:	4b2f      	ldr	r3, [pc, #188]	@ (80007d8 <main+0x174>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b41      	cmp	r3, #65	@ 0x41
 800071e:	d119      	bne.n	8000754 <main+0xf0>
	  {
		  printf("\r\n");
 8000720:	482f      	ldr	r0, [pc, #188]	@ (80007e0 <main+0x17c>)
 8000722:	f002 f96f 	bl	8002a04 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	482e      	ldr	r0, [pc, #184]	@ (80007e4 <main+0x180>)
 800072c:	f000 fe75 	bl	800141a <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_LEFT\n\r\n");
 8000730:	4930      	ldr	r1, [pc, #192]	@ (80007f4 <main+0x190>)
 8000732:	482e      	ldr	r0, [pc, #184]	@ (80007ec <main+0x188>)
 8000734:	f002 f96e 	bl	8002a14 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000738:	482c      	ldr	r0, [pc, #176]	@ (80007ec <main+0x188>)
 800073a:	f7ff fd07 	bl	800014c <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	2364      	movs	r3, #100	@ 0x64
 8000744:	4929      	ldr	r1, [pc, #164]	@ (80007ec <main+0x188>)
 8000746:	4825      	ldr	r0, [pc, #148]	@ (80007dc <main+0x178>)
 8000748:	f001 fdc6 	bl	80022d8 <HAL_UART_Transmit>
		  smartcar_FL();
 800074c:	f7ff fdc6 	bl	80002dc <smartcar_FL>
		  emergent_stop();
 8000750:	f7ff ff7c 	bl	800064c <emergent_stop>
	  }

	  if(receive == 'D')
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <main+0x174>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b44      	cmp	r3, #68	@ 0x44
 800075a:	d119      	bne.n	8000790 <main+0x12c>
	  {
		  printf("\r\n");
 800075c:	4820      	ldr	r0, [pc, #128]	@ (80007e0 <main+0x17c>)
 800075e:	f002 f951 	bl	8002a04 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000762:	2201      	movs	r2, #1
 8000764:	2120      	movs	r1, #32
 8000766:	481f      	ldr	r0, [pc, #124]	@ (80007e4 <main+0x180>)
 8000768:	f000 fe57 	bl	800141a <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "F_RIGHT\n\r\n");
 800076c:	4922      	ldr	r1, [pc, #136]	@ (80007f8 <main+0x194>)
 800076e:	481f      	ldr	r0, [pc, #124]	@ (80007ec <main+0x188>)
 8000770:	f002 f950 	bl	8002a14 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 8000774:	481d      	ldr	r0, [pc, #116]	@ (80007ec <main+0x188>)
 8000776:	f7ff fce9 	bl	800014c <strlen>
 800077a:	4603      	mov	r3, r0
 800077c:	b29a      	uxth	r2, r3
 800077e:	2364      	movs	r3, #100	@ 0x64
 8000780:	491a      	ldr	r1, [pc, #104]	@ (80007ec <main+0x188>)
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <main+0x178>)
 8000784:	f001 fda8 	bl	80022d8 <HAL_UART_Transmit>
		  smartcar_FR();
 8000788:	f7ff fdde 	bl	8000348 <smartcar_FR>
		  emergent_stop();
 800078c:	f7ff ff5e 	bl	800064c <emergent_stop>
	  }

	  if(receive == 'P')
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <main+0x174>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b50      	cmp	r3, #80	@ 0x50
 8000796:	f47f af76 	bne.w	8000686 <main+0x22>
	  {
		  printf("\r\n");
 800079a:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <main+0x17c>)
 800079c:	f002 f932 	bl	8002a04 <puts>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2120      	movs	r1, #32
 80007a4:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <main+0x180>)
 80007a6:	f000 fe38 	bl	800141a <HAL_GPIO_WritePin>
		  sprintf((char *)transmit, "OFF\n\r\n");
 80007aa:	4914      	ldr	r1, [pc, #80]	@ (80007fc <main+0x198>)
 80007ac:	480f      	ldr	r0, [pc, #60]	@ (80007ec <main+0x188>)
 80007ae:	f002 f931 	bl	8002a14 <siprintf>
		  HAL_UART_Transmit(&huart2, &transmit, strlen((char *)transmit), 100);
 80007b2:	480e      	ldr	r0, [pc, #56]	@ (80007ec <main+0x188>)
 80007b4:	f7ff fcca 	bl	800014c <strlen>
 80007b8:	4603      	mov	r3, r0
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	2364      	movs	r3, #100	@ 0x64
 80007be:	490b      	ldr	r1, [pc, #44]	@ (80007ec <main+0x188>)
 80007c0:	4806      	ldr	r0, [pc, #24]	@ (80007dc <main+0x178>)
 80007c2:	f001 fd89 	bl	80022d8 <HAL_UART_Transmit>
		  smartcar_S();
 80007c6:	f7ff fd53 	bl	8000270 <smartcar_S>
		  emergent_stop();
 80007ca:	f7ff ff3f 	bl	800064c <emergent_stop>
	  printf("=== Enter your word ===\r\n\r\n");
 80007ce:	e75a      	b.n	8000686 <main+0x22>
 80007d0:	08003b00 	.word	0x08003b00
 80007d4:	08003b18 	.word	0x08003b18
 80007d8:	20000218 	.word	0x20000218
 80007dc:	200000d0 	.word	0x200000d0
 80007e0:	08003aa4 	.word	0x08003aa4
 80007e4:	40010800 	.word	0x40010800
 80007e8:	08003b34 	.word	0x08003b34
 80007ec:	20000118 	.word	0x20000118
 80007f0:	08003b3c 	.word	0x08003b3c
 80007f4:	08003b44 	.word	0x08003b44
 80007f8:	08003b50 	.word	0x08003b50
 80007fc:	08003b5c 	.word	0x08003b5c

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b090      	sub	sp, #64	@ 0x40
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	2228      	movs	r2, #40	@ 0x28
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f002 f9fa 	bl	8002c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000822:	2302      	movs	r3, #2
 8000824:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000826:	2301      	movs	r3, #1
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	2310      	movs	r3, #16
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082e:	2302      	movs	r3, #2
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000832:	2300      	movs	r3, #0
 8000834:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000836:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800083a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0318 	add.w	r3, r7, #24
 8000840:	4618      	mov	r0, r3
 8000842:	f000 fe25 	bl	8001490 <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800084c:	f000 f946 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000850:	230f      	movs	r3, #15
 8000852:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000854:	2302      	movs	r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800085c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2102      	movs	r1, #2
 800086a:	4618      	mov	r0, r3
 800086c:	f001 f892 	bl	8001994 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000876:	f000 f931 	bl	8000adc <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3740      	adds	r7, #64	@ 0x40
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088a:	f107 0308 	add.w	r3, r7, #8
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000898:	463b      	mov	r3, r7
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <MX_TIM1_Init+0x98>)
 80008a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000920 <MX_TIM1_Init+0x9c>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80008a6:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_TIM1_Init+0x98>)
 80008a8:	223f      	movs	r2, #63	@ 0x3f
 80008aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_TIM1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_TIM1_Init+0x98>)
 80008b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_TIM1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <MX_TIM1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_TIM1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_TIM1_Init+0x98>)
 80008ce:	f001 f9ef 	bl	8001cb0 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80008d8:	f000 f900 	bl	8000adc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <MX_TIM1_Init+0x98>)
 80008ea:	f001 fa7b 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80008f4:	f000 f8f2 	bl	8000adc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f8:	2300      	movs	r3, #0
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_TIM1_Init+0x98>)
 8000906:	f001 fc39 	bl	800217c <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000910:	f000 f8e4 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000088 	.word	0x20000088
 8000920:	40012c00 	.word	0x40012c00

08000924 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800092a:	4a12      	ldr	r2, [pc, #72]	@ (8000974 <MX_USART2_UART_Init+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800092e:	4b10      	ldr	r3, [pc, #64]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000930:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000934:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800093c:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800093e:	2200      	movs	r2, #0
 8000940:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000948:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800094a:	220c      	movs	r2, #12
 800094c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 8000956:	2200      	movs	r2, #0
 8000958:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	@ (8000970 <MX_USART2_UART_Init+0x4c>)
 800095c:	f001 fc6c 	bl	8002238 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000966:	f000 f8b9 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200000d0 	.word	0x200000d0
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a4d      	ldr	r2, [pc, #308]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0310 	and.w	r3, r3, #16
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a4:	4b48      	ldr	r3, [pc, #288]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a47      	ldr	r2, [pc, #284]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009aa:	f043 0320 	orr.w	r3, r3, #32
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b45      	ldr	r3, [pc, #276]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0320 	and.w	r3, r3, #32
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b42      	ldr	r3, [pc, #264]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a41      	ldr	r2, [pc, #260]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0304 	and.w	r3, r3, #4
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009da:	f043 0308 	orr.w	r3, r3, #8
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b39      	ldr	r3, [pc, #228]	@ (8000ac8 <MX_GPIO_Init+0x150>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0308 	and.w	r3, r3, #8
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LD2_Pin|R_TRIG_Pin|LBF_Pin
 80009ec:	2200      	movs	r2, #0
 80009ee:	f240 7121 	movw	r1, #1825	@ 0x721
 80009f2:	4836      	ldr	r0, [pc, #216]	@ (8000acc <MX_GPIO_Init+0x154>)
 80009f4:	f000 fd11 	bl	800141a <HAL_GPIO_WritePin>
                          |LFB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 80009f8:	2200      	movs	r2, #0
 80009fa:	f44f 61e7 	mov.w	r1, #1848	@ 0x738
 80009fe:	4834      	ldr	r0, [pc, #208]	@ (8000ad0 <MX_GPIO_Init+0x158>)
 8000a00:	f000 fd0b 	bl	800141a <HAL_GPIO_WritePin>
                          |RBF_Pin|RBB_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L_TRIG_GPIO_Port, L_TRIG_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2180      	movs	r1, #128	@ 0x80
 8000a08:	4832      	ldr	r0, [pc, #200]	@ (8000ad4 <MX_GPIO_Init+0x15c>)
 8000a0a:	f000 fd06 	bl	800141a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a14:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <MX_GPIO_Init+0x160>)
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a1c:	f107 0310 	add.w	r3, r7, #16
 8000a20:	4619      	mov	r1, r3
 8000a22:	482c      	ldr	r0, [pc, #176]	@ (8000ad4 <MX_GPIO_Init+0x15c>)
 8000a24:	f000 fb5e 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LD2_Pin R_TRIG_Pin LBF_Pin
                           LFB_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LD2_Pin|R_TRIG_Pin|LBF_Pin
 8000a28:	f240 7321 	movw	r3, #1825	@ 0x721
 8000a2c:	613b      	str	r3, [r7, #16]
                          |LFB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2302      	movs	r3, #2
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4822      	ldr	r0, [pc, #136]	@ (8000acc <MX_GPIO_Init+0x154>)
 8000a42:	f000 fb4f 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : R_ECHO_Pin */
  GPIO_InitStruct.Pin = R_ECHO_Pin;
 8000a46:	2310      	movs	r3, #16
 8000a48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(R_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	4619      	mov	r1, r3
 8000a58:	481c      	ldr	r0, [pc, #112]	@ (8000acc <MX_GPIO_Init+0x154>)
 8000a5a:	f000 fb43 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_ECHO_Pin */
  GPIO_InitStruct.Pin = L_ECHO_Pin;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(L_ECHO_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <MX_GPIO_Init+0x158>)
 8000a72:	f000 fb37 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LBB_Pin LFF_Pin RFF_Pin RFB_Pin
                           RBF_Pin RBB_Pin */
  GPIO_InitStruct.Pin = LBB_Pin|LFF_Pin|RFF_Pin|RFB_Pin
 8000a76:	f44f 63e7 	mov.w	r3, #1848	@ 0x738
 8000a7a:	613b      	str	r3, [r7, #16]
                          |RBF_Pin|RBB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2302      	movs	r3, #2
 8000a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4810      	ldr	r0, [pc, #64]	@ (8000ad0 <MX_GPIO_Init+0x158>)
 8000a90:	f000 fb28 	bl	80010e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : L_TRIG_Pin */
  GPIO_InitStruct.Pin = L_TRIG_Pin;
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L_TRIG_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <MX_GPIO_Init+0x15c>)
 8000aac:	f000 fb1a 	bl	80010e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	2028      	movs	r0, #40	@ 0x28
 8000ab6:	f000 fade 	bl	8001076 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aba:	2028      	movs	r0, #40	@ 0x28
 8000abc:	f000 faf7 	bl	80010ae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	40010800 	.word	0x40010800
 8000ad0:	40010c00 	.word	0x40010c00
 8000ad4:	40011000 	.word	0x40011000
 8000ad8:	10110000 	.word	0x10110000

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b12      	ldr	r3, [pc, #72]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b48 <HAL_MspInit+0x60>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4a04      	ldr	r2, [pc, #16]	@ (8000b48 <HAL_MspInit+0x60>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000

08000b4c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a09      	ldr	r2, [pc, #36]	@ (8000b80 <HAL_TIM_Base_MspInit+0x34>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d10b      	bne.n	8000b76 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <HAL_TIM_Base_MspInit+0x38>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a08      	ldr	r2, [pc, #32]	@ (8000b84 <HAL_TIM_Base_MspInit+0x38>)
 8000b64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_TIM_Base_MspInit+0x38>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	40021000 	.word	0x40021000

08000b88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b088      	sub	sp, #32
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a15      	ldr	r2, [pc, #84]	@ (8000bf8 <HAL_UART_MspInit+0x70>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d123      	bne.n	8000bf0 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <HAL_UART_MspInit+0x74>)
 8000baa:	69db      	ldr	r3, [r3, #28]
 8000bac:	4a13      	ldr	r2, [pc, #76]	@ (8000bfc <HAL_UART_MspInit+0x74>)
 8000bae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb2:	61d3      	str	r3, [r2, #28]
 8000bb4:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <HAL_UART_MspInit+0x74>)
 8000bb6:	69db      	ldr	r3, [r3, #28]
 8000bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bfc <HAL_UART_MspInit+0x74>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bfc <HAL_UART_MspInit+0x74>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <HAL_UART_MspInit+0x74>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0304 	and.w	r3, r3, #4
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2302      	movs	r3, #2
 8000be2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	4619      	mov	r1, r3
 8000bea:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <HAL_UART_MspInit+0x78>)
 8000bec:	f000 fa7a 	bl	80010e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bf0:	bf00      	nop
 8000bf2:	3720      	adds	r7, #32
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40004400 	.word	0x40004400
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40010800 	.word	0x40010800

08000c04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <NMI_Handler+0x4>

08000c0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <HardFault_Handler+0x4>

08000c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c18:	bf00      	nop
 8000c1a:	e7fd      	b.n	8000c18 <MemManage_Handler+0x4>

08000c1c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <BusFault_Handler+0x4>

08000c24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <UsageFault_Handler+0x4>

08000c2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f91c 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c64:	f000 fbf2 	bl	800144c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	e00a      	b.n	8000c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7e:	f3af 8000 	nop.w
 8000c82:	4601      	mov	r1, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	60ba      	str	r2, [r7, #8]
 8000c8a:	b2ca      	uxtb	r2, r1
 8000c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3301      	adds	r3, #1
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	dbf0      	blt.n	8000c7e <_read+0x12>
  }

  return len;
 8000c9c:	687b      	ldr	r3, [r7, #4]
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	e009      	b.n	8000ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	1c5a      	adds	r2, r3, #1
 8000cbc:	60ba      	str	r2, [r7, #8]
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fa4b 	bl	800015c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbf1      	blt.n	8000cb8 <_write+0x12>
  }
  return len;
 8000cd4:	687b      	ldr	r3, [r7, #4]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <_close>:

int _close(int file)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d04:	605a      	str	r2, [r3, #4]
  return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <_isatty>:

int _isatty(int file)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3714      	adds	r7, #20
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	@ (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4413      	add	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f001 ff98 	bl	8002ca4 <__errno>
 8000d74:	4603      	mov	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	@ (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <_sbrk+0x64>)
 8000d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20005000 	.word	0x20005000
 8000da0:	00000400 	.word	0x00000400
 8000da4:	20000230 	.word	0x20000230
 8000da8:	20000388 	.word	0x20000388

08000dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr

08000db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db8:	f7ff fff8 	bl	8000dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480b      	ldr	r0, [pc, #44]	@ (8000dec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dbe:	490c      	ldr	r1, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000df4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a09      	ldr	r2, [pc, #36]	@ (8000df8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dd4:	4c09      	ldr	r4, [pc, #36]	@ (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000de2:	f001 ff65 	bl	8002cb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de6:	f7ff fc3d 	bl	8000664 <main>
  bx lr
 8000dea:	4770      	bx	lr
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000df4:	08003bd4 	.word	0x08003bd4
  ldr r2, =_sbss
 8000df8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000dfc:	20000384 	.word	0x20000384

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <HAL_Init+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	@ (8000e2c <HAL_Init+0x28>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f923 	bl	8001060 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe62 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 f93b 	bl	80010ca <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f903 	bl	8001076 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000004 	.word	0x20000004
 8000e88:	2000000c 	.word	0x2000000c
 8000e8c:	20000008 	.word	0x20000008

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_IncTick+0x1c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b05      	ldr	r3, [pc, #20]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a03      	ldr	r2, [pc, #12]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000234 	.word	0x20000234

08000eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	@ (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	20000234 	.word	0x20000234

08000ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efa:	4a04      	ldr	r2, [pc, #16]	@ (8000f0c <__NVIC_SetPriorityGrouping+0x44>)
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	60d3      	str	r3, [r2, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000ed00 	.word	0xe000ed00

08000f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <__NVIC_GetPriorityGrouping+0x18>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	f003 0307 	and.w	r3, r3, #7
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	db0b      	blt.n	8000f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	f003 021f 	and.w	r2, r3, #31
 8000f44:	4906      	ldr	r1, [pc, #24]	@ (8000f60 <__NVIC_EnableIRQ+0x34>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800102c:	d301      	bcc.n	8001032 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102e:	2301      	movs	r3, #1
 8001030:	e00f      	b.n	8001052 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001032:	4a0a      	ldr	r2, [pc, #40]	@ (800105c <SysTick_Config+0x40>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103a:	210f      	movs	r1, #15
 800103c:	f04f 30ff 	mov.w	r0, #4294967295
 8001040:	f7ff ff90 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <SysTick_Config+0x40>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104a:	4b04      	ldr	r3, [pc, #16]	@ (800105c <SysTick_Config+0x40>)
 800104c:	2207      	movs	r2, #7
 800104e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	e000e010 	.word	0xe000e010

08001060 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff2d 	bl	8000ec8 <__NVIC_SetPriorityGrouping>
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001076:	b580      	push	{r7, lr}
 8001078:	b086      	sub	sp, #24
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
 8001082:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff42 	bl	8000f10 <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff90 	bl	8000fb8 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5f 	bl	8000f64 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff35 	bl	8000f2c <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa2 	bl	800101c <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b08b      	sub	sp, #44	@ 0x2c
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f6:	e169      	b.n	80013cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f8:	2201      	movs	r2, #1
 80010fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	69fa      	ldr	r2, [r7, #28]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	429a      	cmp	r2, r3
 8001112:	f040 8158 	bne.w	80013c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4a9a      	ldr	r2, [pc, #616]	@ (8001384 <HAL_GPIO_Init+0x2a0>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d05e      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001120:	4a98      	ldr	r2, [pc, #608]	@ (8001384 <HAL_GPIO_Init+0x2a0>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d875      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001126:	4a98      	ldr	r2, [pc, #608]	@ (8001388 <HAL_GPIO_Init+0x2a4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d058      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 800112c:	4a96      	ldr	r2, [pc, #600]	@ (8001388 <HAL_GPIO_Init+0x2a4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d86f      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001132:	4a96      	ldr	r2, [pc, #600]	@ (800138c <HAL_GPIO_Init+0x2a8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d052      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001138:	4a94      	ldr	r2, [pc, #592]	@ (800138c <HAL_GPIO_Init+0x2a8>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d869      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800113e:	4a94      	ldr	r2, [pc, #592]	@ (8001390 <HAL_GPIO_Init+0x2ac>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d04c      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001144:	4a92      	ldr	r2, [pc, #584]	@ (8001390 <HAL_GPIO_Init+0x2ac>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d863      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800114a:	4a92      	ldr	r2, [pc, #584]	@ (8001394 <HAL_GPIO_Init+0x2b0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d046      	beq.n	80011de <HAL_GPIO_Init+0xfa>
 8001150:	4a90      	ldr	r2, [pc, #576]	@ (8001394 <HAL_GPIO_Init+0x2b0>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d85d      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d82a      	bhi.n	80011b0 <HAL_GPIO_Init+0xcc>
 800115a:	2b12      	cmp	r3, #18
 800115c:	d859      	bhi.n	8001212 <HAL_GPIO_Init+0x12e>
 800115e:	a201      	add	r2, pc, #4	@ (adr r2, 8001164 <HAL_GPIO_Init+0x80>)
 8001160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001164:	080011df 	.word	0x080011df
 8001168:	080011b9 	.word	0x080011b9
 800116c:	080011cb 	.word	0x080011cb
 8001170:	0800120d 	.word	0x0800120d
 8001174:	08001213 	.word	0x08001213
 8001178:	08001213 	.word	0x08001213
 800117c:	08001213 	.word	0x08001213
 8001180:	08001213 	.word	0x08001213
 8001184:	08001213 	.word	0x08001213
 8001188:	08001213 	.word	0x08001213
 800118c:	08001213 	.word	0x08001213
 8001190:	08001213 	.word	0x08001213
 8001194:	08001213 	.word	0x08001213
 8001198:	08001213 	.word	0x08001213
 800119c:	08001213 	.word	0x08001213
 80011a0:	08001213 	.word	0x08001213
 80011a4:	08001213 	.word	0x08001213
 80011a8:	080011c1 	.word	0x080011c1
 80011ac:	080011d5 	.word	0x080011d5
 80011b0:	4a79      	ldr	r2, [pc, #484]	@ (8001398 <HAL_GPIO_Init+0x2b4>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d013      	beq.n	80011de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b6:	e02c      	b.n	8001212 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e029      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	3304      	adds	r3, #4
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e024      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	3308      	adds	r3, #8
 80011d0:	623b      	str	r3, [r7, #32]
          break;
 80011d2:	e01f      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	330c      	adds	r3, #12
 80011da:	623b      	str	r3, [r7, #32]
          break;
 80011dc:	e01a      	b.n	8001214 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e6:	2304      	movs	r3, #4
 80011e8:	623b      	str	r3, [r7, #32]
          break;
 80011ea:	e013      	b.n	8001214 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d105      	bne.n	8001200 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	611a      	str	r2, [r3, #16]
          break;
 80011fe:	e009      	b.n	8001214 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001200:	2308      	movs	r3, #8
 8001202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	615a      	str	r2, [r3, #20]
          break;
 800120a:	e003      	b.n	8001214 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
          break;
 8001210:	e000      	b.n	8001214 <HAL_GPIO_Init+0x130>
          break;
 8001212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2bff      	cmp	r3, #255	@ 0xff
 8001218:	d801      	bhi.n	800121e <HAL_GPIO_Init+0x13a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	e001      	b.n	8001222 <HAL_GPIO_Init+0x13e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3304      	adds	r3, #4
 8001222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	2bff      	cmp	r3, #255	@ 0xff
 8001228:	d802      	bhi.n	8001230 <HAL_GPIO_Init+0x14c>
 800122a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x152>
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	3b08      	subs	r3, #8
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	210f      	movs	r1, #15
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	6a39      	ldr	r1, [r7, #32]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	431a      	orrs	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 80b1 	beq.w	80013c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001264:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a4c      	ldr	r2, [pc, #304]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b4a      	ldr	r3, [pc, #296]	@ (800139c <HAL_GPIO_Init+0x2b8>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800127c:	4a48      	ldr	r2, [pc, #288]	@ (80013a0 <HAL_GPIO_Init+0x2bc>)
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	220f      	movs	r2, #15
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a40      	ldr	r2, [pc, #256]	@ (80013a4 <HAL_GPIO_Init+0x2c0>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d013      	beq.n	80012d0 <HAL_GPIO_Init+0x1ec>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a3f      	ldr	r2, [pc, #252]	@ (80013a8 <HAL_GPIO_Init+0x2c4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d00d      	beq.n	80012cc <HAL_GPIO_Init+0x1e8>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a3e      	ldr	r2, [pc, #248]	@ (80013ac <HAL_GPIO_Init+0x2c8>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d007      	beq.n	80012c8 <HAL_GPIO_Init+0x1e4>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a3d      	ldr	r2, [pc, #244]	@ (80013b0 <HAL_GPIO_Init+0x2cc>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d101      	bne.n	80012c4 <HAL_GPIO_Init+0x1e0>
 80012c0:	2303      	movs	r3, #3
 80012c2:	e006      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c4:	2304      	movs	r3, #4
 80012c6:	e004      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012cc:	2301      	movs	r3, #1
 80012ce:	e000      	b.n	80012d2 <HAL_GPIO_Init+0x1ee>
 80012d0:	2300      	movs	r3, #0
 80012d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	68fa      	ldr	r2, [r7, #12]
 80012de:	4313      	orrs	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012e2:	492f      	ldr	r1, [pc, #188]	@ (80013a0 <HAL_GPIO_Init+0x2bc>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012fc:	4b2d      	ldr	r3, [pc, #180]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	492c      	ldr	r1, [pc, #176]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	608b      	str	r3, [r1, #8]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800130a:	4b2a      	ldr	r3, [pc, #168]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4928      	ldr	r1, [pc, #160]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001314:	4013      	ands	r3, r2
 8001316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d006      	beq.n	8001332 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001324:	4b23      	ldr	r3, [pc, #140]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4922      	ldr	r1, [pc, #136]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	60cb      	str	r3, [r1, #12]
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001334:	68da      	ldr	r2, [r3, #12]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	43db      	mvns	r3, r3
 800133a:	491e      	ldr	r1, [pc, #120]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800133c:	4013      	ands	r3, r2
 800133e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800134c:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4918      	ldr	r1, [pc, #96]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	43db      	mvns	r3, r3
 8001362:	4914      	ldr	r1, [pc, #80]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001364:	4013      	ands	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d021      	beq.n	80013b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001374:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	490e      	ldr	r1, [pc, #56]	@ (80013b4 <HAL_GPIO_Init+0x2d0>)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	4313      	orrs	r3, r2
 800137e:	600b      	str	r3, [r1, #0]
 8001380:	e021      	b.n	80013c6 <HAL_GPIO_Init+0x2e2>
 8001382:	bf00      	nop
 8001384:	10320000 	.word	0x10320000
 8001388:	10310000 	.word	0x10310000
 800138c:	10220000 	.word	0x10220000
 8001390:	10210000 	.word	0x10210000
 8001394:	10120000 	.word	0x10120000
 8001398:	10110000 	.word	0x10110000
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	40010800 	.word	0x40010800
 80013a8:	40010c00 	.word	0x40010c00
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400
 80013b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013b8:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	43db      	mvns	r3, r3
 80013c0:	4909      	ldr	r1, [pc, #36]	@ (80013e8 <HAL_GPIO_Init+0x304>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	3301      	adds	r3, #1
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d2:	fa22 f303 	lsr.w	r3, r2, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f47f ae8e 	bne.w	80010f8 <HAL_GPIO_Init+0x14>
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	372c      	adds	r7, #44	@ 0x2c
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	40010400 	.word	0x40010400

080013ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	887b      	ldrh	r3, [r7, #2]
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d002      	beq.n	800140a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001404:	2301      	movs	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e001      	b.n	800140e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800140e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	460b      	mov	r3, r1
 8001424:	807b      	strh	r3, [r7, #2]
 8001426:	4613      	mov	r3, r2
 8001428:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800142a:	787b      	ldrb	r3, [r7, #1]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001430:	887a      	ldrh	r2, [r7, #2]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001436:	e003      	b.n	8001440 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	041a      	lsls	r2, r3, #16
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	611a      	str	r2, [r3, #16]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
	...

0800144c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001458:	695a      	ldr	r2, [r3, #20]
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001462:	4a05      	ldr	r2, [pc, #20]	@ (8001478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	88fb      	ldrh	r3, [r7, #6]
 8001466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f806 	bl	800147c <HAL_GPIO_EXTI_Callback>
  }
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40010400 	.word	0x40010400

0800147c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e272      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	f000 8087 	beq.w	80015be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014b0:	4b92      	ldr	r3, [pc, #584]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b04      	cmp	r3, #4
 80014ba:	d00c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 030c 	and.w	r3, r3, #12
 80014c4:	2b08      	cmp	r3, #8
 80014c6:	d112      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
 80014c8:	4b8c      	ldr	r3, [pc, #560]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d4:	d10b      	bne.n	80014ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d6:	4b89      	ldr	r3, [pc, #548]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d06c      	beq.n	80015bc <HAL_RCC_OscConfig+0x12c>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d168      	bne.n	80015bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e24c      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x76>
 80014f8:	4b80      	ldr	r3, [pc, #512]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a7f      	ldr	r2, [pc, #508]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	e02e      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b7b      	ldr	r3, [pc, #492]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a7a      	ldr	r2, [pc, #488]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b78      	ldr	r3, [pc, #480]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a77      	ldr	r2, [pc, #476]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001520:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e01d      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0xbc>
 8001532:	4b72      	ldr	r3, [pc, #456]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a71      	ldr	r2, [pc, #452]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b6f      	ldr	r3, [pc, #444]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a6e      	ldr	r2, [pc, #440]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0xd4>
 800154c:	4b6b      	ldr	r3, [pc, #428]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a6a      	ldr	r2, [pc, #424]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	4b68      	ldr	r3, [pc, #416]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a67      	ldr	r2, [pc, #412]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 800155e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001562:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d013      	beq.n	8001594 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fca2 	bl	8000eb4 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fc9e 	bl	8000eb4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e200      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	4b5d      	ldr	r3, [pc, #372]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f0      	beq.n	8001574 <HAL_RCC_OscConfig+0xe4>
 8001592:	e014      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fc8e 	bl	8000eb4 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800159c:	f7ff fc8a 	bl	8000eb4 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b64      	cmp	r3, #100	@ 0x64
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e1ec      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x10c>
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d063      	beq.n	8001692 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ca:	4b4c      	ldr	r3, [pc, #304]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d00b      	beq.n	80015ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015d6:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d11c      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
 80015e2:	4b46      	ldr	r3, [pc, #280]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d116      	bne.n	800161c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d005      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d001      	beq.n	8001606 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e1c0      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4939      	ldr	r1, [pc, #228]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800161a:	e03a      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001624:	4b36      	ldr	r3, [pc, #216]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fc43 	bl	8000eb4 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001632:	f7ff fc3f 	bl	8000eb4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e1a1      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	4b2d      	ldr	r3, [pc, #180]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4927      	ldr	r1, [pc, #156]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001660:	4313      	orrs	r3, r2
 8001662:	600b      	str	r3, [r1, #0]
 8001664:	e015      	b.n	8001692 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <HAL_RCC_OscConfig+0x270>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166c:	f7ff fc22 	bl	8000eb4 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff fc1e 	bl	8000eb4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e180      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d03a      	beq.n	8001714 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d019      	beq.n	80016da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016a6:	4b17      	ldr	r3, [pc, #92]	@ (8001704 <HAL_RCC_OscConfig+0x274>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fc02 	bl	8000eb4 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fbfe 	bl	8000eb4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e160      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_RCC_OscConfig+0x26c>)
 80016c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016d2:	2001      	movs	r0, #1
 80016d4:	f000 face 	bl	8001c74 <RCC_Delay>
 80016d8:	e01c      	b.n	8001714 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_RCC_OscConfig+0x274>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fbe8 	bl	8000eb4 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e6:	e00f      	b.n	8001708 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e8:	f7ff fbe4 	bl	8000eb4 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d908      	bls.n	8001708 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e146      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
 80016fa:	bf00      	nop
 80016fc:	40021000 	.word	0x40021000
 8001700:	42420000 	.word	0x42420000
 8001704:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	4b92      	ldr	r3, [pc, #584]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1e9      	bne.n	80016e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 80a6 	beq.w	800186e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001726:	4b8b      	ldr	r3, [pc, #556]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10d      	bne.n	800174e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b88      	ldr	r3, [pc, #544]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a87      	ldr	r2, [pc, #540]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b85      	ldr	r3, [pc, #532]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800174a:	2301      	movs	r3, #1
 800174c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174e:	4b82      	ldr	r3, [pc, #520]	@ (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d118      	bne.n	800178c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800175a:	4b7f      	ldr	r3, [pc, #508]	@ (8001958 <HAL_RCC_OscConfig+0x4c8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a7e      	ldr	r2, [pc, #504]	@ (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001766:	f7ff fba5 	bl	8000eb4 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800176e:	f7ff fba1 	bl	8000eb4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b64      	cmp	r3, #100	@ 0x64
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e103      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001780:	4b75      	ldr	r3, [pc, #468]	@ (8001958 <HAL_RCC_OscConfig+0x4c8>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x312>
 8001794:	4b6f      	ldr	r3, [pc, #444]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a6e      	ldr	r2, [pc, #440]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e02d      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d10c      	bne.n	80017c4 <HAL_RCC_OscConfig+0x334>
 80017aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	6a1b      	ldr	r3, [r3, #32]
 80017ae:	4a69      	ldr	r2, [pc, #420]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	6213      	str	r3, [r2, #32]
 80017b6:	4b67      	ldr	r3, [pc, #412]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a66      	ldr	r2, [pc, #408]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017bc:	f023 0304 	bic.w	r3, r3, #4
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	e01c      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	d10c      	bne.n	80017e6 <HAL_RCC_OscConfig+0x356>
 80017cc:	4b61      	ldr	r3, [pc, #388]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a60      	ldr	r2, [pc, #384]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	6213      	str	r3, [r2, #32]
 80017d8:	4b5e      	ldr	r3, [pc, #376]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e00b      	b.n	80017fe <HAL_RCC_OscConfig+0x36e>
 80017e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4a5a      	ldr	r2, [pc, #360]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017ec:	f023 0301 	bic.w	r3, r3, #1
 80017f0:	6213      	str	r3, [r2, #32]
 80017f2:	4b58      	ldr	r3, [pc, #352]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	6a1b      	ldr	r3, [r3, #32]
 80017f6:	4a57      	ldr	r2, [pc, #348]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80017f8:	f023 0304 	bic.w	r3, r3, #4
 80017fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d015      	beq.n	8001832 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fb55 	bl	8000eb4 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fb51 	bl	8000eb4 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e0b1      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	4b4b      	ldr	r3, [pc, #300]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0ee      	beq.n	800180e <HAL_RCC_OscConfig+0x37e>
 8001830:	e014      	b.n	800185c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fb3f 	bl	8000eb4 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001838:	e00a      	b.n	8001850 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7ff fb3b 	bl	8000eb4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001848:	4293      	cmp	r3, r2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e09b      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	4b40      	ldr	r3, [pc, #256]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1ee      	bne.n	800183a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800185c:	7dfb      	ldrb	r3, [r7, #23]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b3c      	ldr	r3, [pc, #240]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	4a3b      	ldr	r2, [pc, #236]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8087 	beq.w	8001986 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b36      	ldr	r3, [pc, #216]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d061      	beq.n	8001948 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d146      	bne.n	800191a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b33      	ldr	r3, [pc, #204]	@ (800195c <HAL_RCC_OscConfig+0x4cc>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff fb0f 	bl	8000eb4 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff fb0b 	bl	8000eb4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e06d      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ac:	4b29      	ldr	r3, [pc, #164]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018c0:	d108      	bne.n	80018d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	4921      	ldr	r1, [pc, #132]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6a19      	ldr	r1, [r3, #32]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e4:	430b      	orrs	r3, r1
 80018e6:	491b      	ldr	r1, [pc, #108]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	@ (800195c <HAL_RCC_OscConfig+0x4cc>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fadf 	bl	8000eb4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fadb 	bl	8000eb4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x46a>
 8001918:	e035      	b.n	8001986 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b10      	ldr	r3, [pc, #64]	@ (800195c <HAL_RCC_OscConfig+0x4cc>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff fac8 	bl	8000eb4 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fac4 	bl	8000eb4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e026      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193a:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x498>
 8001946:	e01e      	b.n	8001986 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e019      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_OscConfig+0x500>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000

08001994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d101      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0d0      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019a8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d910      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b6:	4b67      	ldr	r3, [pc, #412]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 0207 	bic.w	r2, r3, #7
 80019be:	4965      	ldr	r1, [pc, #404]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c6:	4b63      	ldr	r3, [pc, #396]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e0b8      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d020      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d005      	beq.n	80019fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019f0:	4b59      	ldr	r3, [pc, #356]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	4a58      	ldr	r2, [pc, #352]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a08:	4b53      	ldr	r3, [pc, #332]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	4a52      	ldr	r2, [pc, #328]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a12:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b50      	ldr	r3, [pc, #320]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	494d      	ldr	r1, [pc, #308]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d040      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b47      	ldr	r3, [pc, #284]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d115      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07f      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b41      	ldr	r3, [pc, #260]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d109      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e073      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a62:	4b3d      	ldr	r3, [pc, #244]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e06b      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	4b39      	ldr	r3, [pc, #228]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f023 0203 	bic.w	r2, r3, #3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4936      	ldr	r1, [pc, #216]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a84:	f7ff fa16 	bl	8000eb4 <HAL_GetTick>
 8001a88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8c:	f7ff fa12 	bl	8000eb4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e053      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 020c 	and.w	r2, r3, #12
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d1eb      	bne.n	8001a8c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d210      	bcs.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b24      	ldr	r3, [pc, #144]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 0207 	bic.w	r2, r3, #7
 8001aca:	4922      	ldr	r1, [pc, #136]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad2:	4b20      	ldr	r3, [pc, #128]	@ (8001b54 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d001      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e032      	b.n	8001b4a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4916      	ldr	r1, [pc, #88]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d009      	beq.n	8001b22 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	490e      	ldr	r1, [pc, #56]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b22:	f000 f821 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b26:	4602      	mov	r2, r0
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	490a      	ldr	r1, [pc, #40]	@ (8001b5c <HAL_RCC_ClockConfig+0x1c8>)
 8001b34:	5ccb      	ldrb	r3, [r1, r3]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_RCC_ClockConfig+0x1cc>)
 8001b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <HAL_RCC_ClockConfig+0x1d0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff f974 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40022000 	.word	0x40022000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	08003b64 	.word	0x08003b64
 8001b60:	20000004 	.word	0x20000004
 8001b64:	20000008 	.word	0x20000008

08001b68 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d002      	beq.n	8001b98 <HAL_RCC_GetSysClockFreq+0x30>
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d003      	beq.n	8001b9e <HAL_RCC_GetSysClockFreq+0x36>
 8001b96:	e027      	b.n	8001be8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9a:	613b      	str	r3, [r7, #16]
      break;
 8001b9c:	e027      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0c9b      	lsrs	r3, r3, #18
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	4a17      	ldr	r2, [pc, #92]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ba8:	5cd3      	ldrb	r3, [r2, r3]
 8001baa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d010      	beq.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bb6:	4b11      	ldr	r3, [pc, #68]	@ (8001bfc <HAL_RCC_GetSysClockFreq+0x94>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	0c5b      	lsrs	r3, r3, #17
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	4a11      	ldr	r2, [pc, #68]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001bc2:	5cd3      	ldrb	r3, [r2, r3]
 8001bc4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bca:	fb03 f202 	mul.w	r2, r3, r2
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	e004      	b.n	8001be2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a0c      	ldr	r2, [pc, #48]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	613b      	str	r3, [r7, #16]
      break;
 8001be6:	e002      	b.n	8001bee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be8:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bea:	613b      	str	r3, [r7, #16]
      break;
 8001bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bee:	693b      	ldr	r3, [r7, #16]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bc80      	pop	{r7}
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	08003b7c 	.word	0x08003b7c
 8001c08:	08003b8c 	.word	0x08003b8c
 8001c0c:	003d0900 	.word	0x003d0900

08001c10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c14:	4b02      	ldr	r3, [pc, #8]	@ (8001c20 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c16:	681b      	ldr	r3, [r3, #0]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c28:	f7ff fff2 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	4903      	ldr	r1, [pc, #12]	@ (8001c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08003b74 	.word	0x08003b74

08001c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c50:	f7ff ffde 	bl	8001c10 <HAL_RCC_GetHCLKFreq>
 8001c54:	4602      	mov	r2, r0
 8001c56:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	0adb      	lsrs	r3, r3, #11
 8001c5c:	f003 0307 	and.w	r3, r3, #7
 8001c60:	4903      	ldr	r1, [pc, #12]	@ (8001c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c62:	5ccb      	ldrb	r3, [r1, r3]
 8001c64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	08003b74 	.word	0x08003b74

08001c74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <RCC_Delay+0x34>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0a      	ldr	r2, [pc, #40]	@ (8001cac <RCC_Delay+0x38>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0a5b      	lsrs	r3, r3, #9
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	fb02 f303 	mul.w	r3, r2, r3
 8001c8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c90:	bf00      	nop
  }
  while (Delay --);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	60fa      	str	r2, [r7, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1f9      	bne.n	8001c90 <RCC_Delay+0x1c>
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000004 	.word	0x20000004
 8001cac:	10624dd3 	.word	0x10624dd3

08001cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e041      	b.n	8001d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d106      	bne.n	8001cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7fe ff38 	bl	8000b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3304      	adds	r3, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f000 f940 	bl	8001f74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d001      	beq.n	8001d68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e032      	b.n	8001dce <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a18      	ldr	r2, [pc, #96]	@ (8001dd8 <HAL_TIM_Base_Start+0x88>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00e      	beq.n	8001d98 <HAL_TIM_Base_Start+0x48>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d82:	d009      	beq.n	8001d98 <HAL_TIM_Base_Start+0x48>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a14      	ldr	r2, [pc, #80]	@ (8001ddc <HAL_TIM_Base_Start+0x8c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_TIM_Base_Start+0x48>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a13      	ldr	r2, [pc, #76]	@ (8001de0 <HAL_TIM_Base_Start+0x90>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d111      	bne.n	8001dbc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d010      	beq.n	8001dcc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	e007      	b.n	8001dcc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800

08001de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_TIM_ConfigClockSource+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e0b4      	b.n	8001f6a <HAL_TIM_ConfigClockSource+0x186>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68ba      	ldr	r2, [r7, #8]
 8001e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e38:	d03e      	beq.n	8001eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8001e3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e3e:	f200 8087 	bhi.w	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e46:	f000 8086 	beq.w	8001f56 <HAL_TIM_ConfigClockSource+0x172>
 8001e4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e4e:	d87f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b70      	cmp	r3, #112	@ 0x70
 8001e52:	d01a      	beq.n	8001e8a <HAL_TIM_ConfigClockSource+0xa6>
 8001e54:	2b70      	cmp	r3, #112	@ 0x70
 8001e56:	d87b      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b60      	cmp	r3, #96	@ 0x60
 8001e5a:	d050      	beq.n	8001efe <HAL_TIM_ConfigClockSource+0x11a>
 8001e5c:	2b60      	cmp	r3, #96	@ 0x60
 8001e5e:	d877      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b50      	cmp	r3, #80	@ 0x50
 8001e62:	d03c      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0xfa>
 8001e64:	2b50      	cmp	r3, #80	@ 0x50
 8001e66:	d873      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b40      	cmp	r3, #64	@ 0x40
 8001e6a:	d058      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0x13a>
 8001e6c:	2b40      	cmp	r3, #64	@ 0x40
 8001e6e:	d86f      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b30      	cmp	r3, #48	@ 0x30
 8001e72:	d064      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	2b30      	cmp	r3, #48	@ 0x30
 8001e76:	d86b      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d060      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d867      	bhi.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d05c      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e84:	2b10      	cmp	r3, #16
 8001e86:	d05a      	beq.n	8001f3e <HAL_TIM_ConfigClockSource+0x15a>
 8001e88:	e062      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001e9a:	f000 f950 	bl	800213e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	609a      	str	r2, [r3, #8]
      break;
 8001eb6:	e04f      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001ec8:	f000 f939 	bl	800213e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001eda:	609a      	str	r2, [r3, #8]
      break;
 8001edc:	e03c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eea:	461a      	mov	r2, r3
 8001eec:	f000 f8b0 	bl	8002050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2150      	movs	r1, #80	@ 0x50
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f907 	bl	800210a <TIM_ITRx_SetConfig>
      break;
 8001efc:	e02c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f000 f8ce 	bl	80020ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2160      	movs	r1, #96	@ 0x60
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 f8f7 	bl	800210a <TIM_ITRx_SetConfig>
      break;
 8001f1c:	e01c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f000 f890 	bl	8002050 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2140      	movs	r1, #64	@ 0x40
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f8e7 	bl	800210a <TIM_ITRx_SetConfig>
      break;
 8001f3c:	e00c      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4619      	mov	r1, r3
 8001f48:	4610      	mov	r0, r2
 8001f4a:	f000 f8de 	bl	800210a <TIM_ITRx_SetConfig>
      break;
 8001f4e:	e003      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      break;
 8001f54:	e000      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a2f      	ldr	r2, [pc, #188]	@ (8002044 <TIM_Base_SetConfig+0xd0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00b      	beq.n	8001fa4 <TIM_Base_SetConfig+0x30>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f92:	d007      	beq.n	8001fa4 <TIM_Base_SetConfig+0x30>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a2c      	ldr	r2, [pc, #176]	@ (8002048 <TIM_Base_SetConfig+0xd4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d003      	beq.n	8001fa4 <TIM_Base_SetConfig+0x30>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a2b      	ldr	r2, [pc, #172]	@ (800204c <TIM_Base_SetConfig+0xd8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d108      	bne.n	8001fb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <TIM_Base_SetConfig+0xd0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00b      	beq.n	8001fd6 <TIM_Base_SetConfig+0x62>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fc4:	d007      	beq.n	8001fd6 <TIM_Base_SetConfig+0x62>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8002048 <TIM_Base_SetConfig+0xd4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d003      	beq.n	8001fd6 <TIM_Base_SetConfig+0x62>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a1e      	ldr	r2, [pc, #120]	@ (800204c <TIM_Base_SetConfig+0xd8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d108      	bne.n	8001fe8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a0d      	ldr	r2, [pc, #52]	@ (8002044 <TIM_Base_SetConfig+0xd0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
  }
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40012c00 	.word	0x40012c00
 8002048:	40000400 	.word	0x40000400
 800204c:	40000800 	.word	0x40000800

08002050 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002050:	b480      	push	{r7}
 8002052:	b087      	sub	sp, #28
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	f023 0201 	bic.w	r2, r3, #1
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800207a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f023 030a 	bic.w	r3, r3, #10
 800208c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800208e:	697a      	ldr	r2, [r7, #20]
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	621a      	str	r2, [r3, #32]
}
 80020a2:	bf00      	nop
 80020a4:	371c      	adds	r7, #28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	f023 0210 	bic.w	r2, r3, #16
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	031b      	lsls	r3, r3, #12
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80020e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	621a      	str	r2, [r3, #32]
}
 8002100:	bf00      	nop
 8002102:	371c      	adds	r7, #28
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800210a:	b480      	push	{r7}
 800210c:	b085      	sub	sp, #20
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
 8002112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	f043 0307 	orr.w	r3, r3, #7
 800212c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	bc80      	pop	{r7}
 800213c:	4770      	bx	lr

0800213e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800213e:	b480      	push	{r7}
 8002140:	b087      	sub	sp, #28
 8002142:	af00      	add	r7, sp, #0
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002158:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	021a      	lsls	r2, r3, #8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	431a      	orrs	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4313      	orrs	r3, r2
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	609a      	str	r2, [r3, #8]
}
 8002172:	bf00      	nop
 8002174:	371c      	adds	r7, #28
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002190:	2302      	movs	r3, #2
 8002192:	e046      	b.n	8002222 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a16      	ldr	r2, [pc, #88]	@ (800222c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00e      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021e0:	d009      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d004      	beq.n	80021f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10c      	bne.n	8002210 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	4313      	orrs	r3, r2
 8002206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	40012c00 	.word	0x40012c00
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e042      	b.n	80022d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fc92 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	@ 0x24
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fa09 	bl	8002694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d175      	bne.n	80023e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_UART_Transmit+0x2c>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e06e      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	@ 0x21
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fdcd 	bl	8000eb4 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800234c:	e02e      	b.n	80023ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8df 	bl	800251c <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e03a      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e007      	b.n	800239e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cb      	bne.n	800234e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	@ 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8ab 	bl	800251c <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b08a      	sub	sp, #40	@ 0x28
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b20      	cmp	r3, #32
 800240c:	f040 8081 	bne.w	8002512 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <HAL_UART_Receive+0x2e>
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e079      	b.n	8002514 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2222      	movs	r2, #34	@ 0x22
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002434:	f7fe fd3e 	bl	8000eb4 <HAL_GetTick>
 8002438:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	88fa      	ldrh	r2, [r7, #6]
 800243e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	88fa      	ldrh	r2, [r7, #6]
 8002444:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800244e:	d108      	bne.n	8002462 <HAL_UART_Receive+0x74>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	61bb      	str	r3, [r7, #24]
 8002460:	e003      	b.n	800246a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800246a:	e047      	b.n	80024fc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2200      	movs	r2, #0
 8002474:	2120      	movs	r1, #32
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f850 	bl	800251c <UART_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d005      	beq.n	800248e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e042      	b.n	8002514 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10c      	bne.n	80024ae <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b29b      	uxth	r3, r3
 800249c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	3302      	adds	r3, #2
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e01f      	b.n	80024ee <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024b6:	d007      	beq.n	80024c8 <HAL_UART_Receive+0xda>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10a      	bne.n	80024d6 <HAL_UART_Receive+0xe8>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e008      	b.n	80024e8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	3301      	adds	r3, #1
 80024ec:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1b2      	bne.n	800246c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e000      	b.n	8002514 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002512:	2302      	movs	r3, #2
  }
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800252c:	e03b      	b.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252e:	6a3b      	ldr	r3, [r7, #32]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d037      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7fe fcbd 	bl	8000eb4 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	6a3a      	ldr	r2, [r7, #32]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <UART_WaitOnFlagUntilTimeout+0x30>
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e03a      	b.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d023      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	2b80      	cmp	r3, #128	@ 0x80
 8002562:	d020      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	2b40      	cmp	r3, #64	@ 0x40
 8002568:	d01d      	beq.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b08      	cmp	r3, #8
 8002576:	d116      	bne.n	80025a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 f81d 	bl	80025ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2208      	movs	r2, #8
 8002598:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e00f      	b.n	80025c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	4013      	ands	r3, r2
 80025b0:	68ba      	ldr	r2, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	bf0c      	ite	eq
 80025b6:	2301      	moveq	r3, #1
 80025b8:	2300      	movne	r3, #0
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	461a      	mov	r2, r3
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d0b4      	beq.n	800252e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b095      	sub	sp, #84	@ 0x54
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	330c      	adds	r3, #12
 80025dc:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e0:	e853 3f00 	ldrex	r3, [r3]
 80025e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	330c      	adds	r3, #12
 80025f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80025f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025fe:	e841 2300 	strex	r3, r2, [r1]
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e5      	bne.n	80025d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3314      	adds	r3, #20
 8002610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	e853 3f00 	ldrex	r3, [r3]
 8002618:	61fb      	str	r3, [r7, #28]
   return(result);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	3314      	adds	r3, #20
 8002628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800262a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800262c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002632:	e841 2300 	strex	r3, r2, [r1]
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e5      	bne.n	800260a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	2b01      	cmp	r3, #1
 8002644:	d119      	bne.n	800267a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	60bb      	str	r3, [r7, #8]
   return(result);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f023 0310 	bic.w	r3, r3, #16
 800265c:	647b      	str	r3, [r7, #68]	@ 0x44
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	330c      	adds	r3, #12
 8002664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002666:	61ba      	str	r2, [r7, #24]
 8002668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6979      	ldr	r1, [r7, #20]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	613b      	str	r3, [r7, #16]
   return(result);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e5      	bne.n	8002646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002688:	bf00      	nop
 800268a:	3754      	adds	r7, #84	@ 0x54
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
	...

08002694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80026ce:	f023 030c 	bic.w	r3, r3, #12
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6812      	ldr	r2, [r2, #0]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	430b      	orrs	r3, r1
 80026da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <UART_SetConfig+0x114>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d103      	bne.n	8002704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7ff faa6 	bl	8001c4c <HAL_RCC_GetPCLK2Freq>
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	e002      	b.n	800270a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002704:	f7ff fa8e 	bl	8001c24 <HAL_RCC_GetPCLK1Freq>
 8002708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	4613      	mov	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	009a      	lsls	r2, r3, #2
 8002714:	441a      	add	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002720:	4a22      	ldr	r2, [pc, #136]	@ (80027ac <UART_SetConfig+0x118>)
 8002722:	fba2 2303 	umull	r2, r3, r2, r3
 8002726:	095b      	lsrs	r3, r3, #5
 8002728:	0119      	lsls	r1, r3, #4
 800272a:	68fa      	ldr	r2, [r7, #12]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009a      	lsls	r2, r3, #2
 8002734:	441a      	add	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002740:	4b1a      	ldr	r3, [pc, #104]	@ (80027ac <UART_SetConfig+0x118>)
 8002742:	fba3 0302 	umull	r0, r3, r3, r2
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	2064      	movs	r0, #100	@ 0x64
 800274a:	fb00 f303 	mul.w	r3, r0, r3
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	3332      	adds	r3, #50	@ 0x32
 8002754:	4a15      	ldr	r2, [pc, #84]	@ (80027ac <UART_SetConfig+0x118>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	095b      	lsrs	r3, r3, #5
 800275c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002760:	4419      	add	r1, r3
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	009a      	lsls	r2, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	fbb2 f2f3 	udiv	r2, r2, r3
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <UART_SetConfig+0x118>)
 800277a:	fba3 0302 	umull	r0, r3, r3, r2
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2064      	movs	r0, #100	@ 0x64
 8002782:	fb00 f303 	mul.w	r3, r0, r3
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	3332      	adds	r3, #50	@ 0x32
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <UART_SetConfig+0x118>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	f003 020f 	and.w	r2, r3, #15
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	440a      	add	r2, r1
 800279e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40013800 	.word	0x40013800
 80027ac:	51eb851f 	.word	0x51eb851f

080027b0 <std>:
 80027b0:	2300      	movs	r3, #0
 80027b2:	b510      	push	{r4, lr}
 80027b4:	4604      	mov	r4, r0
 80027b6:	e9c0 3300 	strd	r3, r3, [r0]
 80027ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027be:	6083      	str	r3, [r0, #8]
 80027c0:	8181      	strh	r1, [r0, #12]
 80027c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80027c4:	81c2      	strh	r2, [r0, #14]
 80027c6:	6183      	str	r3, [r0, #24]
 80027c8:	4619      	mov	r1, r3
 80027ca:	2208      	movs	r2, #8
 80027cc:	305c      	adds	r0, #92	@ 0x5c
 80027ce:	f000 fa1b 	bl	8002c08 <memset>
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <std+0x58>)
 80027d4:	6224      	str	r4, [r4, #32]
 80027d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80027d8:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <std+0x5c>)
 80027da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <std+0x60>)
 80027de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80027e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002814 <std+0x64>)
 80027e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80027e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002818 <std+0x68>)
 80027e6:	429c      	cmp	r4, r3
 80027e8:	d006      	beq.n	80027f8 <std+0x48>
 80027ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80027ee:	4294      	cmp	r4, r2
 80027f0:	d002      	beq.n	80027f8 <std+0x48>
 80027f2:	33d0      	adds	r3, #208	@ 0xd0
 80027f4:	429c      	cmp	r4, r3
 80027f6:	d105      	bne.n	8002804 <std+0x54>
 80027f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80027fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002800:	f000 ba7a 	b.w	8002cf8 <__retarget_lock_init_recursive>
 8002804:	bd10      	pop	{r4, pc}
 8002806:	bf00      	nop
 8002808:	08002a59 	.word	0x08002a59
 800280c:	08002a7b 	.word	0x08002a7b
 8002810:	08002ab3 	.word	0x08002ab3
 8002814:	08002ad7 	.word	0x08002ad7
 8002818:	20000238 	.word	0x20000238

0800281c <stdio_exit_handler>:
 800281c:	4a02      	ldr	r2, [pc, #8]	@ (8002828 <stdio_exit_handler+0xc>)
 800281e:	4903      	ldr	r1, [pc, #12]	@ (800282c <stdio_exit_handler+0x10>)
 8002820:	4803      	ldr	r0, [pc, #12]	@ (8002830 <stdio_exit_handler+0x14>)
 8002822:	f000 b869 	b.w	80028f8 <_fwalk_sglue>
 8002826:	bf00      	nop
 8002828:	20000010 	.word	0x20000010
 800282c:	0800383d 	.word	0x0800383d
 8002830:	20000020 	.word	0x20000020

08002834 <cleanup_stdio>:
 8002834:	6841      	ldr	r1, [r0, #4]
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <cleanup_stdio+0x34>)
 8002838:	b510      	push	{r4, lr}
 800283a:	4299      	cmp	r1, r3
 800283c:	4604      	mov	r4, r0
 800283e:	d001      	beq.n	8002844 <cleanup_stdio+0x10>
 8002840:	f000 fffc 	bl	800383c <_fflush_r>
 8002844:	68a1      	ldr	r1, [r4, #8]
 8002846:	4b09      	ldr	r3, [pc, #36]	@ (800286c <cleanup_stdio+0x38>)
 8002848:	4299      	cmp	r1, r3
 800284a:	d002      	beq.n	8002852 <cleanup_stdio+0x1e>
 800284c:	4620      	mov	r0, r4
 800284e:	f000 fff5 	bl	800383c <_fflush_r>
 8002852:	68e1      	ldr	r1, [r4, #12]
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <cleanup_stdio+0x3c>)
 8002856:	4299      	cmp	r1, r3
 8002858:	d004      	beq.n	8002864 <cleanup_stdio+0x30>
 800285a:	4620      	mov	r0, r4
 800285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002860:	f000 bfec 	b.w	800383c <_fflush_r>
 8002864:	bd10      	pop	{r4, pc}
 8002866:	bf00      	nop
 8002868:	20000238 	.word	0x20000238
 800286c:	200002a0 	.word	0x200002a0
 8002870:	20000308 	.word	0x20000308

08002874 <global_stdio_init.part.0>:
 8002874:	b510      	push	{r4, lr}
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <global_stdio_init.part.0+0x30>)
 8002878:	4c0b      	ldr	r4, [pc, #44]	@ (80028a8 <global_stdio_init.part.0+0x34>)
 800287a:	4a0c      	ldr	r2, [pc, #48]	@ (80028ac <global_stdio_init.part.0+0x38>)
 800287c:	4620      	mov	r0, r4
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	2104      	movs	r1, #4
 8002882:	2200      	movs	r2, #0
 8002884:	f7ff ff94 	bl	80027b0 <std>
 8002888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800288c:	2201      	movs	r2, #1
 800288e:	2109      	movs	r1, #9
 8002890:	f7ff ff8e 	bl	80027b0 <std>
 8002894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002898:	2202      	movs	r2, #2
 800289a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800289e:	2112      	movs	r1, #18
 80028a0:	f7ff bf86 	b.w	80027b0 <std>
 80028a4:	20000370 	.word	0x20000370
 80028a8:	20000238 	.word	0x20000238
 80028ac:	0800281d 	.word	0x0800281d

080028b0 <__sfp_lock_acquire>:
 80028b0:	4801      	ldr	r0, [pc, #4]	@ (80028b8 <__sfp_lock_acquire+0x8>)
 80028b2:	f000 ba22 	b.w	8002cfa <__retarget_lock_acquire_recursive>
 80028b6:	bf00      	nop
 80028b8:	20000379 	.word	0x20000379

080028bc <__sfp_lock_release>:
 80028bc:	4801      	ldr	r0, [pc, #4]	@ (80028c4 <__sfp_lock_release+0x8>)
 80028be:	f000 ba1d 	b.w	8002cfc <__retarget_lock_release_recursive>
 80028c2:	bf00      	nop
 80028c4:	20000379 	.word	0x20000379

080028c8 <__sinit>:
 80028c8:	b510      	push	{r4, lr}
 80028ca:	4604      	mov	r4, r0
 80028cc:	f7ff fff0 	bl	80028b0 <__sfp_lock_acquire>
 80028d0:	6a23      	ldr	r3, [r4, #32]
 80028d2:	b11b      	cbz	r3, 80028dc <__sinit+0x14>
 80028d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028d8:	f7ff bff0 	b.w	80028bc <__sfp_lock_release>
 80028dc:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <__sinit+0x28>)
 80028de:	6223      	str	r3, [r4, #32]
 80028e0:	4b04      	ldr	r3, [pc, #16]	@ (80028f4 <__sinit+0x2c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1f5      	bne.n	80028d4 <__sinit+0xc>
 80028e8:	f7ff ffc4 	bl	8002874 <global_stdio_init.part.0>
 80028ec:	e7f2      	b.n	80028d4 <__sinit+0xc>
 80028ee:	bf00      	nop
 80028f0:	08002835 	.word	0x08002835
 80028f4:	20000370 	.word	0x20000370

080028f8 <_fwalk_sglue>:
 80028f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028fc:	4607      	mov	r7, r0
 80028fe:	4688      	mov	r8, r1
 8002900:	4614      	mov	r4, r2
 8002902:	2600      	movs	r6, #0
 8002904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002908:	f1b9 0901 	subs.w	r9, r9, #1
 800290c:	d505      	bpl.n	800291a <_fwalk_sglue+0x22>
 800290e:	6824      	ldr	r4, [r4, #0]
 8002910:	2c00      	cmp	r4, #0
 8002912:	d1f7      	bne.n	8002904 <_fwalk_sglue+0xc>
 8002914:	4630      	mov	r0, r6
 8002916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800291a:	89ab      	ldrh	r3, [r5, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d907      	bls.n	8002930 <_fwalk_sglue+0x38>
 8002920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002924:	3301      	adds	r3, #1
 8002926:	d003      	beq.n	8002930 <_fwalk_sglue+0x38>
 8002928:	4629      	mov	r1, r5
 800292a:	4638      	mov	r0, r7
 800292c:	47c0      	blx	r8
 800292e:	4306      	orrs	r6, r0
 8002930:	3568      	adds	r5, #104	@ 0x68
 8002932:	e7e9      	b.n	8002908 <_fwalk_sglue+0x10>

08002934 <iprintf>:
 8002934:	b40f      	push	{r0, r1, r2, r3}
 8002936:	b507      	push	{r0, r1, r2, lr}
 8002938:	4906      	ldr	r1, [pc, #24]	@ (8002954 <iprintf+0x20>)
 800293a:	ab04      	add	r3, sp, #16
 800293c:	6808      	ldr	r0, [r1, #0]
 800293e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002942:	6881      	ldr	r1, [r0, #8]
 8002944:	9301      	str	r3, [sp, #4]
 8002946:	f000 fc51 	bl	80031ec <_vfiprintf_r>
 800294a:	b003      	add	sp, #12
 800294c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002950:	b004      	add	sp, #16
 8002952:	4770      	bx	lr
 8002954:	2000001c 	.word	0x2000001c

08002958 <_puts_r>:
 8002958:	6a03      	ldr	r3, [r0, #32]
 800295a:	b570      	push	{r4, r5, r6, lr}
 800295c:	4605      	mov	r5, r0
 800295e:	460e      	mov	r6, r1
 8002960:	6884      	ldr	r4, [r0, #8]
 8002962:	b90b      	cbnz	r3, 8002968 <_puts_r+0x10>
 8002964:	f7ff ffb0 	bl	80028c8 <__sinit>
 8002968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800296a:	07db      	lsls	r3, r3, #31
 800296c:	d405      	bmi.n	800297a <_puts_r+0x22>
 800296e:	89a3      	ldrh	r3, [r4, #12]
 8002970:	0598      	lsls	r0, r3, #22
 8002972:	d402      	bmi.n	800297a <_puts_r+0x22>
 8002974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002976:	f000 f9c0 	bl	8002cfa <__retarget_lock_acquire_recursive>
 800297a:	89a3      	ldrh	r3, [r4, #12]
 800297c:	0719      	lsls	r1, r3, #28
 800297e:	d502      	bpl.n	8002986 <_puts_r+0x2e>
 8002980:	6923      	ldr	r3, [r4, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d135      	bne.n	80029f2 <_puts_r+0x9a>
 8002986:	4621      	mov	r1, r4
 8002988:	4628      	mov	r0, r5
 800298a:	f000 f8e7 	bl	8002b5c <__swsetup_r>
 800298e:	b380      	cbz	r0, 80029f2 <_puts_r+0x9a>
 8002990:	f04f 35ff 	mov.w	r5, #4294967295
 8002994:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002996:	07da      	lsls	r2, r3, #31
 8002998:	d405      	bmi.n	80029a6 <_puts_r+0x4e>
 800299a:	89a3      	ldrh	r3, [r4, #12]
 800299c:	059b      	lsls	r3, r3, #22
 800299e:	d402      	bmi.n	80029a6 <_puts_r+0x4e>
 80029a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80029a2:	f000 f9ab 	bl	8002cfc <__retarget_lock_release_recursive>
 80029a6:	4628      	mov	r0, r5
 80029a8:	bd70      	pop	{r4, r5, r6, pc}
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da04      	bge.n	80029b8 <_puts_r+0x60>
 80029ae:	69a2      	ldr	r2, [r4, #24]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	dc17      	bgt.n	80029e4 <_puts_r+0x8c>
 80029b4:	290a      	cmp	r1, #10
 80029b6:	d015      	beq.n	80029e4 <_puts_r+0x8c>
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	6022      	str	r2, [r4, #0]
 80029be:	7019      	strb	r1, [r3, #0]
 80029c0:	68a3      	ldr	r3, [r4, #8]
 80029c2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80029c6:	3b01      	subs	r3, #1
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	2900      	cmp	r1, #0
 80029cc:	d1ed      	bne.n	80029aa <_puts_r+0x52>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da11      	bge.n	80029f6 <_puts_r+0x9e>
 80029d2:	4622      	mov	r2, r4
 80029d4:	210a      	movs	r1, #10
 80029d6:	4628      	mov	r0, r5
 80029d8:	f000 f881 	bl	8002ade <__swbuf_r>
 80029dc:	3001      	adds	r0, #1
 80029de:	d0d7      	beq.n	8002990 <_puts_r+0x38>
 80029e0:	250a      	movs	r5, #10
 80029e2:	e7d7      	b.n	8002994 <_puts_r+0x3c>
 80029e4:	4622      	mov	r2, r4
 80029e6:	4628      	mov	r0, r5
 80029e8:	f000 f879 	bl	8002ade <__swbuf_r>
 80029ec:	3001      	adds	r0, #1
 80029ee:	d1e7      	bne.n	80029c0 <_puts_r+0x68>
 80029f0:	e7ce      	b.n	8002990 <_puts_r+0x38>
 80029f2:	3e01      	subs	r6, #1
 80029f4:	e7e4      	b.n	80029c0 <_puts_r+0x68>
 80029f6:	6823      	ldr	r3, [r4, #0]
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	6022      	str	r2, [r4, #0]
 80029fc:	220a      	movs	r2, #10
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e7ee      	b.n	80029e0 <_puts_r+0x88>
	...

08002a04 <puts>:
 8002a04:	4b02      	ldr	r3, [pc, #8]	@ (8002a10 <puts+0xc>)
 8002a06:	4601      	mov	r1, r0
 8002a08:	6818      	ldr	r0, [r3, #0]
 8002a0a:	f7ff bfa5 	b.w	8002958 <_puts_r>
 8002a0e:	bf00      	nop
 8002a10:	2000001c 	.word	0x2000001c

08002a14 <siprintf>:
 8002a14:	b40e      	push	{r1, r2, r3}
 8002a16:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a1a:	b510      	push	{r4, lr}
 8002a1c:	2400      	movs	r4, #0
 8002a1e:	b09d      	sub	sp, #116	@ 0x74
 8002a20:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002a22:	9002      	str	r0, [sp, #8]
 8002a24:	9006      	str	r0, [sp, #24]
 8002a26:	9107      	str	r1, [sp, #28]
 8002a28:	9104      	str	r1, [sp, #16]
 8002a2a:	4809      	ldr	r0, [pc, #36]	@ (8002a50 <siprintf+0x3c>)
 8002a2c:	4909      	ldr	r1, [pc, #36]	@ (8002a54 <siprintf+0x40>)
 8002a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a32:	9105      	str	r1, [sp, #20]
 8002a34:	6800      	ldr	r0, [r0, #0]
 8002a36:	a902      	add	r1, sp, #8
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002a3c:	f000 fab2 	bl	8002fa4 <_svfiprintf_r>
 8002a40:	9b02      	ldr	r3, [sp, #8]
 8002a42:	701c      	strb	r4, [r3, #0]
 8002a44:	b01d      	add	sp, #116	@ 0x74
 8002a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a4a:	b003      	add	sp, #12
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	2000001c 	.word	0x2000001c
 8002a54:	ffff0208 	.word	0xffff0208

08002a58 <__sread>:
 8002a58:	b510      	push	{r4, lr}
 8002a5a:	460c      	mov	r4, r1
 8002a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a60:	f000 f8fc 	bl	8002c5c <_read_r>
 8002a64:	2800      	cmp	r0, #0
 8002a66:	bfab      	itete	ge
 8002a68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8002a6c:	181b      	addge	r3, r3, r0
 8002a6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002a72:	bfac      	ite	ge
 8002a74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002a76:	81a3      	strhlt	r3, [r4, #12]
 8002a78:	bd10      	pop	{r4, pc}

08002a7a <__swrite>:
 8002a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a7e:	461f      	mov	r7, r3
 8002a80:	898b      	ldrh	r3, [r1, #12]
 8002a82:	4605      	mov	r5, r0
 8002a84:	05db      	lsls	r3, r3, #23
 8002a86:	460c      	mov	r4, r1
 8002a88:	4616      	mov	r6, r2
 8002a8a:	d505      	bpl.n	8002a98 <__swrite+0x1e>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a94:	f000 f8d0 	bl	8002c38 <_lseek_r>
 8002a98:	89a3      	ldrh	r3, [r4, #12]
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002aa0:	81a3      	strh	r3, [r4, #12]
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	463b      	mov	r3, r7
 8002aa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002aae:	f000 b8e7 	b.w	8002c80 <_write_r>

08002ab2 <__sseek>:
 8002ab2:	b510      	push	{r4, lr}
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002aba:	f000 f8bd 	bl	8002c38 <_lseek_r>
 8002abe:	1c43      	adds	r3, r0, #1
 8002ac0:	89a3      	ldrh	r3, [r4, #12]
 8002ac2:	bf15      	itete	ne
 8002ac4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002ac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002aca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002ace:	81a3      	strheq	r3, [r4, #12]
 8002ad0:	bf18      	it	ne
 8002ad2:	81a3      	strhne	r3, [r4, #12]
 8002ad4:	bd10      	pop	{r4, pc}

08002ad6 <__sclose>:
 8002ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ada:	f000 b89d 	b.w	8002c18 <_close_r>

08002ade <__swbuf_r>:
 8002ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ae0:	460e      	mov	r6, r1
 8002ae2:	4614      	mov	r4, r2
 8002ae4:	4605      	mov	r5, r0
 8002ae6:	b118      	cbz	r0, 8002af0 <__swbuf_r+0x12>
 8002ae8:	6a03      	ldr	r3, [r0, #32]
 8002aea:	b90b      	cbnz	r3, 8002af0 <__swbuf_r+0x12>
 8002aec:	f7ff feec 	bl	80028c8 <__sinit>
 8002af0:	69a3      	ldr	r3, [r4, #24]
 8002af2:	60a3      	str	r3, [r4, #8]
 8002af4:	89a3      	ldrh	r3, [r4, #12]
 8002af6:	071a      	lsls	r2, r3, #28
 8002af8:	d501      	bpl.n	8002afe <__swbuf_r+0x20>
 8002afa:	6923      	ldr	r3, [r4, #16]
 8002afc:	b943      	cbnz	r3, 8002b10 <__swbuf_r+0x32>
 8002afe:	4621      	mov	r1, r4
 8002b00:	4628      	mov	r0, r5
 8002b02:	f000 f82b 	bl	8002b5c <__swsetup_r>
 8002b06:	b118      	cbz	r0, 8002b10 <__swbuf_r+0x32>
 8002b08:	f04f 37ff 	mov.w	r7, #4294967295
 8002b0c:	4638      	mov	r0, r7
 8002b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b10:	6823      	ldr	r3, [r4, #0]
 8002b12:	6922      	ldr	r2, [r4, #16]
 8002b14:	b2f6      	uxtb	r6, r6
 8002b16:	1a98      	subs	r0, r3, r2
 8002b18:	6963      	ldr	r3, [r4, #20]
 8002b1a:	4637      	mov	r7, r6
 8002b1c:	4283      	cmp	r3, r0
 8002b1e:	dc05      	bgt.n	8002b2c <__swbuf_r+0x4e>
 8002b20:	4621      	mov	r1, r4
 8002b22:	4628      	mov	r0, r5
 8002b24:	f000 fe8a 	bl	800383c <_fflush_r>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	d1ed      	bne.n	8002b08 <__swbuf_r+0x2a>
 8002b2c:	68a3      	ldr	r3, [r4, #8]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60a3      	str	r3, [r4, #8]
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	6022      	str	r2, [r4, #0]
 8002b38:	701e      	strb	r6, [r3, #0]
 8002b3a:	6962      	ldr	r2, [r4, #20]
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d004      	beq.n	8002b4c <__swbuf_r+0x6e>
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	07db      	lsls	r3, r3, #31
 8002b46:	d5e1      	bpl.n	8002b0c <__swbuf_r+0x2e>
 8002b48:	2e0a      	cmp	r6, #10
 8002b4a:	d1df      	bne.n	8002b0c <__swbuf_r+0x2e>
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	4628      	mov	r0, r5
 8002b50:	f000 fe74 	bl	800383c <_fflush_r>
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d0d9      	beq.n	8002b0c <__swbuf_r+0x2e>
 8002b58:	e7d6      	b.n	8002b08 <__swbuf_r+0x2a>
	...

08002b5c <__swsetup_r>:
 8002b5c:	b538      	push	{r3, r4, r5, lr}
 8002b5e:	4b29      	ldr	r3, [pc, #164]	@ (8002c04 <__swsetup_r+0xa8>)
 8002b60:	4605      	mov	r5, r0
 8002b62:	6818      	ldr	r0, [r3, #0]
 8002b64:	460c      	mov	r4, r1
 8002b66:	b118      	cbz	r0, 8002b70 <__swsetup_r+0x14>
 8002b68:	6a03      	ldr	r3, [r0, #32]
 8002b6a:	b90b      	cbnz	r3, 8002b70 <__swsetup_r+0x14>
 8002b6c:	f7ff feac 	bl	80028c8 <__sinit>
 8002b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b74:	0719      	lsls	r1, r3, #28
 8002b76:	d422      	bmi.n	8002bbe <__swsetup_r+0x62>
 8002b78:	06da      	lsls	r2, r3, #27
 8002b7a:	d407      	bmi.n	8002b8c <__swsetup_r+0x30>
 8002b7c:	2209      	movs	r2, #9
 8002b7e:	602a      	str	r2, [r5, #0]
 8002b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b84:	f04f 30ff 	mov.w	r0, #4294967295
 8002b88:	81a3      	strh	r3, [r4, #12]
 8002b8a:	e033      	b.n	8002bf4 <__swsetup_r+0x98>
 8002b8c:	0758      	lsls	r0, r3, #29
 8002b8e:	d512      	bpl.n	8002bb6 <__swsetup_r+0x5a>
 8002b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b92:	b141      	cbz	r1, 8002ba6 <__swsetup_r+0x4a>
 8002b94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b98:	4299      	cmp	r1, r3
 8002b9a:	d002      	beq.n	8002ba2 <__swsetup_r+0x46>
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	f000 f8af 	bl	8002d00 <_free_r>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002bac:	81a3      	strh	r3, [r4, #12]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	6063      	str	r3, [r4, #4]
 8002bb2:	6923      	ldr	r3, [r4, #16]
 8002bb4:	6023      	str	r3, [r4, #0]
 8002bb6:	89a3      	ldrh	r3, [r4, #12]
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	81a3      	strh	r3, [r4, #12]
 8002bbe:	6923      	ldr	r3, [r4, #16]
 8002bc0:	b94b      	cbnz	r3, 8002bd6 <__swsetup_r+0x7a>
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bcc:	d003      	beq.n	8002bd6 <__swsetup_r+0x7a>
 8002bce:	4621      	mov	r1, r4
 8002bd0:	4628      	mov	r0, r5
 8002bd2:	f000 fe80 	bl	80038d6 <__smakebuf_r>
 8002bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bda:	f013 0201 	ands.w	r2, r3, #1
 8002bde:	d00a      	beq.n	8002bf6 <__swsetup_r+0x9a>
 8002be0:	2200      	movs	r2, #0
 8002be2:	60a2      	str	r2, [r4, #8]
 8002be4:	6962      	ldr	r2, [r4, #20]
 8002be6:	4252      	negs	r2, r2
 8002be8:	61a2      	str	r2, [r4, #24]
 8002bea:	6922      	ldr	r2, [r4, #16]
 8002bec:	b942      	cbnz	r2, 8002c00 <__swsetup_r+0xa4>
 8002bee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002bf2:	d1c5      	bne.n	8002b80 <__swsetup_r+0x24>
 8002bf4:	bd38      	pop	{r3, r4, r5, pc}
 8002bf6:	0799      	lsls	r1, r3, #30
 8002bf8:	bf58      	it	pl
 8002bfa:	6962      	ldrpl	r2, [r4, #20]
 8002bfc:	60a2      	str	r2, [r4, #8]
 8002bfe:	e7f4      	b.n	8002bea <__swsetup_r+0x8e>
 8002c00:	2000      	movs	r0, #0
 8002c02:	e7f7      	b.n	8002bf4 <__swsetup_r+0x98>
 8002c04:	2000001c 	.word	0x2000001c

08002c08 <memset>:
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4402      	add	r2, r0
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d100      	bne.n	8002c12 <memset+0xa>
 8002c10:	4770      	bx	lr
 8002c12:	f803 1b01 	strb.w	r1, [r3], #1
 8002c16:	e7f9      	b.n	8002c0c <memset+0x4>

08002c18 <_close_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	4d05      	ldr	r5, [pc, #20]	@ (8002c34 <_close_r+0x1c>)
 8002c1e:	4604      	mov	r4, r0
 8002c20:	4608      	mov	r0, r1
 8002c22:	602b      	str	r3, [r5, #0]
 8002c24:	f7fe f85b 	bl	8000cde <_close>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d102      	bne.n	8002c32 <_close_r+0x1a>
 8002c2c:	682b      	ldr	r3, [r5, #0]
 8002c2e:	b103      	cbz	r3, 8002c32 <_close_r+0x1a>
 8002c30:	6023      	str	r3, [r4, #0]
 8002c32:	bd38      	pop	{r3, r4, r5, pc}
 8002c34:	20000374 	.word	0x20000374

08002c38 <_lseek_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	4604      	mov	r4, r0
 8002c3c:	4608      	mov	r0, r1
 8002c3e:	4611      	mov	r1, r2
 8002c40:	2200      	movs	r2, #0
 8002c42:	4d05      	ldr	r5, [pc, #20]	@ (8002c58 <_lseek_r+0x20>)
 8002c44:	602a      	str	r2, [r5, #0]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f7fe f86d 	bl	8000d26 <_lseek>
 8002c4c:	1c43      	adds	r3, r0, #1
 8002c4e:	d102      	bne.n	8002c56 <_lseek_r+0x1e>
 8002c50:	682b      	ldr	r3, [r5, #0]
 8002c52:	b103      	cbz	r3, 8002c56 <_lseek_r+0x1e>
 8002c54:	6023      	str	r3, [r4, #0]
 8002c56:	bd38      	pop	{r3, r4, r5, pc}
 8002c58:	20000374 	.word	0x20000374

08002c5c <_read_r>:
 8002c5c:	b538      	push	{r3, r4, r5, lr}
 8002c5e:	4604      	mov	r4, r0
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	2200      	movs	r2, #0
 8002c66:	4d05      	ldr	r5, [pc, #20]	@ (8002c7c <_read_r+0x20>)
 8002c68:	602a      	str	r2, [r5, #0]
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	f7fd fffe 	bl	8000c6c <_read>
 8002c70:	1c43      	adds	r3, r0, #1
 8002c72:	d102      	bne.n	8002c7a <_read_r+0x1e>
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	b103      	cbz	r3, 8002c7a <_read_r+0x1e>
 8002c78:	6023      	str	r3, [r4, #0]
 8002c7a:	bd38      	pop	{r3, r4, r5, pc}
 8002c7c:	20000374 	.word	0x20000374

08002c80 <_write_r>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4604      	mov	r4, r0
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	2200      	movs	r2, #0
 8002c8a:	4d05      	ldr	r5, [pc, #20]	@ (8002ca0 <_write_r+0x20>)
 8002c8c:	602a      	str	r2, [r5, #0]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f7fe f809 	bl	8000ca6 <_write>
 8002c94:	1c43      	adds	r3, r0, #1
 8002c96:	d102      	bne.n	8002c9e <_write_r+0x1e>
 8002c98:	682b      	ldr	r3, [r5, #0]
 8002c9a:	b103      	cbz	r3, 8002c9e <_write_r+0x1e>
 8002c9c:	6023      	str	r3, [r4, #0]
 8002c9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ca0:	20000374 	.word	0x20000374

08002ca4 <__errno>:
 8002ca4:	4b01      	ldr	r3, [pc, #4]	@ (8002cac <__errno+0x8>)
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	2000001c 	.word	0x2000001c

08002cb0 <__libc_init_array>:
 8002cb0:	b570      	push	{r4, r5, r6, lr}
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	4d0c      	ldr	r5, [pc, #48]	@ (8002ce8 <__libc_init_array+0x38>)
 8002cb6:	4c0d      	ldr	r4, [pc, #52]	@ (8002cec <__libc_init_array+0x3c>)
 8002cb8:	1b64      	subs	r4, r4, r5
 8002cba:	10a4      	asrs	r4, r4, #2
 8002cbc:	42a6      	cmp	r6, r4
 8002cbe:	d109      	bne.n	8002cd4 <__libc_init_array+0x24>
 8002cc0:	f000 fee4 	bl	8003a8c <_init>
 8002cc4:	2600      	movs	r6, #0
 8002cc6:	4d0a      	ldr	r5, [pc, #40]	@ (8002cf0 <__libc_init_array+0x40>)
 8002cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002cf4 <__libc_init_array+0x44>)
 8002cca:	1b64      	subs	r4, r4, r5
 8002ccc:	10a4      	asrs	r4, r4, #2
 8002cce:	42a6      	cmp	r6, r4
 8002cd0:	d105      	bne.n	8002cde <__libc_init_array+0x2e>
 8002cd2:	bd70      	pop	{r4, r5, r6, pc}
 8002cd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cd8:	4798      	blx	r3
 8002cda:	3601      	adds	r6, #1
 8002cdc:	e7ee      	b.n	8002cbc <__libc_init_array+0xc>
 8002cde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ce2:	4798      	blx	r3
 8002ce4:	3601      	adds	r6, #1
 8002ce6:	e7f2      	b.n	8002cce <__libc_init_array+0x1e>
 8002ce8:	08003bcc 	.word	0x08003bcc
 8002cec:	08003bcc 	.word	0x08003bcc
 8002cf0:	08003bcc 	.word	0x08003bcc
 8002cf4:	08003bd0 	.word	0x08003bd0

08002cf8 <__retarget_lock_init_recursive>:
 8002cf8:	4770      	bx	lr

08002cfa <__retarget_lock_acquire_recursive>:
 8002cfa:	4770      	bx	lr

08002cfc <__retarget_lock_release_recursive>:
 8002cfc:	4770      	bx	lr
	...

08002d00 <_free_r>:
 8002d00:	b538      	push	{r3, r4, r5, lr}
 8002d02:	4605      	mov	r5, r0
 8002d04:	2900      	cmp	r1, #0
 8002d06:	d040      	beq.n	8002d8a <_free_r+0x8a>
 8002d08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d0c:	1f0c      	subs	r4, r1, #4
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bfb8      	it	lt
 8002d12:	18e4      	addlt	r4, r4, r3
 8002d14:	f000 f8de 	bl	8002ed4 <__malloc_lock>
 8002d18:	4a1c      	ldr	r2, [pc, #112]	@ (8002d8c <_free_r+0x8c>)
 8002d1a:	6813      	ldr	r3, [r2, #0]
 8002d1c:	b933      	cbnz	r3, 8002d2c <_free_r+0x2c>
 8002d1e:	6063      	str	r3, [r4, #4]
 8002d20:	6014      	str	r4, [r2, #0]
 8002d22:	4628      	mov	r0, r5
 8002d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d28:	f000 b8da 	b.w	8002ee0 <__malloc_unlock>
 8002d2c:	42a3      	cmp	r3, r4
 8002d2e:	d908      	bls.n	8002d42 <_free_r+0x42>
 8002d30:	6820      	ldr	r0, [r4, #0]
 8002d32:	1821      	adds	r1, r4, r0
 8002d34:	428b      	cmp	r3, r1
 8002d36:	bf01      	itttt	eq
 8002d38:	6819      	ldreq	r1, [r3, #0]
 8002d3a:	685b      	ldreq	r3, [r3, #4]
 8002d3c:	1809      	addeq	r1, r1, r0
 8002d3e:	6021      	streq	r1, [r4, #0]
 8002d40:	e7ed      	b.n	8002d1e <_free_r+0x1e>
 8002d42:	461a      	mov	r2, r3
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	b10b      	cbz	r3, 8002d4c <_free_r+0x4c>
 8002d48:	42a3      	cmp	r3, r4
 8002d4a:	d9fa      	bls.n	8002d42 <_free_r+0x42>
 8002d4c:	6811      	ldr	r1, [r2, #0]
 8002d4e:	1850      	adds	r0, r2, r1
 8002d50:	42a0      	cmp	r0, r4
 8002d52:	d10b      	bne.n	8002d6c <_free_r+0x6c>
 8002d54:	6820      	ldr	r0, [r4, #0]
 8002d56:	4401      	add	r1, r0
 8002d58:	1850      	adds	r0, r2, r1
 8002d5a:	4283      	cmp	r3, r0
 8002d5c:	6011      	str	r1, [r2, #0]
 8002d5e:	d1e0      	bne.n	8002d22 <_free_r+0x22>
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	4408      	add	r0, r1
 8002d66:	6010      	str	r0, [r2, #0]
 8002d68:	6053      	str	r3, [r2, #4]
 8002d6a:	e7da      	b.n	8002d22 <_free_r+0x22>
 8002d6c:	d902      	bls.n	8002d74 <_free_r+0x74>
 8002d6e:	230c      	movs	r3, #12
 8002d70:	602b      	str	r3, [r5, #0]
 8002d72:	e7d6      	b.n	8002d22 <_free_r+0x22>
 8002d74:	6820      	ldr	r0, [r4, #0]
 8002d76:	1821      	adds	r1, r4, r0
 8002d78:	428b      	cmp	r3, r1
 8002d7a:	bf01      	itttt	eq
 8002d7c:	6819      	ldreq	r1, [r3, #0]
 8002d7e:	685b      	ldreq	r3, [r3, #4]
 8002d80:	1809      	addeq	r1, r1, r0
 8002d82:	6021      	streq	r1, [r4, #0]
 8002d84:	6063      	str	r3, [r4, #4]
 8002d86:	6054      	str	r4, [r2, #4]
 8002d88:	e7cb      	b.n	8002d22 <_free_r+0x22>
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	20000380 	.word	0x20000380

08002d90 <sbrk_aligned>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	4e0f      	ldr	r6, [pc, #60]	@ (8002dd0 <sbrk_aligned+0x40>)
 8002d94:	460c      	mov	r4, r1
 8002d96:	6831      	ldr	r1, [r6, #0]
 8002d98:	4605      	mov	r5, r0
 8002d9a:	b911      	cbnz	r1, 8002da2 <sbrk_aligned+0x12>
 8002d9c:	f000 fe14 	bl	80039c8 <_sbrk_r>
 8002da0:	6030      	str	r0, [r6, #0]
 8002da2:	4621      	mov	r1, r4
 8002da4:	4628      	mov	r0, r5
 8002da6:	f000 fe0f 	bl	80039c8 <_sbrk_r>
 8002daa:	1c43      	adds	r3, r0, #1
 8002dac:	d103      	bne.n	8002db6 <sbrk_aligned+0x26>
 8002dae:	f04f 34ff 	mov.w	r4, #4294967295
 8002db2:	4620      	mov	r0, r4
 8002db4:	bd70      	pop	{r4, r5, r6, pc}
 8002db6:	1cc4      	adds	r4, r0, #3
 8002db8:	f024 0403 	bic.w	r4, r4, #3
 8002dbc:	42a0      	cmp	r0, r4
 8002dbe:	d0f8      	beq.n	8002db2 <sbrk_aligned+0x22>
 8002dc0:	1a21      	subs	r1, r4, r0
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	f000 fe00 	bl	80039c8 <_sbrk_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	d1f2      	bne.n	8002db2 <sbrk_aligned+0x22>
 8002dcc:	e7ef      	b.n	8002dae <sbrk_aligned+0x1e>
 8002dce:	bf00      	nop
 8002dd0:	2000037c 	.word	0x2000037c

08002dd4 <_malloc_r>:
 8002dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dd8:	1ccd      	adds	r5, r1, #3
 8002dda:	f025 0503 	bic.w	r5, r5, #3
 8002dde:	3508      	adds	r5, #8
 8002de0:	2d0c      	cmp	r5, #12
 8002de2:	bf38      	it	cc
 8002de4:	250c      	movcc	r5, #12
 8002de6:	2d00      	cmp	r5, #0
 8002de8:	4606      	mov	r6, r0
 8002dea:	db01      	blt.n	8002df0 <_malloc_r+0x1c>
 8002dec:	42a9      	cmp	r1, r5
 8002dee:	d904      	bls.n	8002dfa <_malloc_r+0x26>
 8002df0:	230c      	movs	r3, #12
 8002df2:	6033      	str	r3, [r6, #0]
 8002df4:	2000      	movs	r0, #0
 8002df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002ed0 <_malloc_r+0xfc>
 8002dfe:	f000 f869 	bl	8002ed4 <__malloc_lock>
 8002e02:	f8d8 3000 	ldr.w	r3, [r8]
 8002e06:	461c      	mov	r4, r3
 8002e08:	bb44      	cbnz	r4, 8002e5c <_malloc_r+0x88>
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f7ff ffbf 	bl	8002d90 <sbrk_aligned>
 8002e12:	1c43      	adds	r3, r0, #1
 8002e14:	4604      	mov	r4, r0
 8002e16:	d158      	bne.n	8002eca <_malloc_r+0xf6>
 8002e18:	f8d8 4000 	ldr.w	r4, [r8]
 8002e1c:	4627      	mov	r7, r4
 8002e1e:	2f00      	cmp	r7, #0
 8002e20:	d143      	bne.n	8002eaa <_malloc_r+0xd6>
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d04b      	beq.n	8002ebe <_malloc_r+0xea>
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	4639      	mov	r1, r7
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	eb04 0903 	add.w	r9, r4, r3
 8002e30:	f000 fdca 	bl	80039c8 <_sbrk_r>
 8002e34:	4581      	cmp	r9, r0
 8002e36:	d142      	bne.n	8002ebe <_malloc_r+0xea>
 8002e38:	6821      	ldr	r1, [r4, #0]
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	1a6d      	subs	r5, r5, r1
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f7ff ffa6 	bl	8002d90 <sbrk_aligned>
 8002e44:	3001      	adds	r0, #1
 8002e46:	d03a      	beq.n	8002ebe <_malloc_r+0xea>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	442b      	add	r3, r5
 8002e4c:	6023      	str	r3, [r4, #0]
 8002e4e:	f8d8 3000 	ldr.w	r3, [r8]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	bb62      	cbnz	r2, 8002eb0 <_malloc_r+0xdc>
 8002e56:	f8c8 7000 	str.w	r7, [r8]
 8002e5a:	e00f      	b.n	8002e7c <_malloc_r+0xa8>
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	1b52      	subs	r2, r2, r5
 8002e60:	d420      	bmi.n	8002ea4 <_malloc_r+0xd0>
 8002e62:	2a0b      	cmp	r2, #11
 8002e64:	d917      	bls.n	8002e96 <_malloc_r+0xc2>
 8002e66:	1961      	adds	r1, r4, r5
 8002e68:	42a3      	cmp	r3, r4
 8002e6a:	6025      	str	r5, [r4, #0]
 8002e6c:	bf18      	it	ne
 8002e6e:	6059      	strne	r1, [r3, #4]
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	bf08      	it	eq
 8002e74:	f8c8 1000 	streq.w	r1, [r8]
 8002e78:	5162      	str	r2, [r4, r5]
 8002e7a:	604b      	str	r3, [r1, #4]
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	f000 f82f 	bl	8002ee0 <__malloc_unlock>
 8002e82:	f104 000b 	add.w	r0, r4, #11
 8002e86:	1d23      	adds	r3, r4, #4
 8002e88:	f020 0007 	bic.w	r0, r0, #7
 8002e8c:	1ac2      	subs	r2, r0, r3
 8002e8e:	bf1c      	itt	ne
 8002e90:	1a1b      	subne	r3, r3, r0
 8002e92:	50a3      	strne	r3, [r4, r2]
 8002e94:	e7af      	b.n	8002df6 <_malloc_r+0x22>
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	42a3      	cmp	r3, r4
 8002e9a:	bf0c      	ite	eq
 8002e9c:	f8c8 2000 	streq.w	r2, [r8]
 8002ea0:	605a      	strne	r2, [r3, #4]
 8002ea2:	e7eb      	b.n	8002e7c <_malloc_r+0xa8>
 8002ea4:	4623      	mov	r3, r4
 8002ea6:	6864      	ldr	r4, [r4, #4]
 8002ea8:	e7ae      	b.n	8002e08 <_malloc_r+0x34>
 8002eaa:	463c      	mov	r4, r7
 8002eac:	687f      	ldr	r7, [r7, #4]
 8002eae:	e7b6      	b.n	8002e1e <_malloc_r+0x4a>
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d1fb      	bne.n	8002eb0 <_malloc_r+0xdc>
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6053      	str	r3, [r2, #4]
 8002ebc:	e7de      	b.n	8002e7c <_malloc_r+0xa8>
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	4630      	mov	r0, r6
 8002ec2:	6033      	str	r3, [r6, #0]
 8002ec4:	f000 f80c 	bl	8002ee0 <__malloc_unlock>
 8002ec8:	e794      	b.n	8002df4 <_malloc_r+0x20>
 8002eca:	6005      	str	r5, [r0, #0]
 8002ecc:	e7d6      	b.n	8002e7c <_malloc_r+0xa8>
 8002ece:	bf00      	nop
 8002ed0:	20000380 	.word	0x20000380

08002ed4 <__malloc_lock>:
 8002ed4:	4801      	ldr	r0, [pc, #4]	@ (8002edc <__malloc_lock+0x8>)
 8002ed6:	f7ff bf10 	b.w	8002cfa <__retarget_lock_acquire_recursive>
 8002eda:	bf00      	nop
 8002edc:	20000378 	.word	0x20000378

08002ee0 <__malloc_unlock>:
 8002ee0:	4801      	ldr	r0, [pc, #4]	@ (8002ee8 <__malloc_unlock+0x8>)
 8002ee2:	f7ff bf0b 	b.w	8002cfc <__retarget_lock_release_recursive>
 8002ee6:	bf00      	nop
 8002ee8:	20000378 	.word	0x20000378

08002eec <__ssputs_r>:
 8002eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ef0:	461f      	mov	r7, r3
 8002ef2:	688e      	ldr	r6, [r1, #8]
 8002ef4:	4682      	mov	sl, r0
 8002ef6:	42be      	cmp	r6, r7
 8002ef8:	460c      	mov	r4, r1
 8002efa:	4690      	mov	r8, r2
 8002efc:	680b      	ldr	r3, [r1, #0]
 8002efe:	d82d      	bhi.n	8002f5c <__ssputs_r+0x70>
 8002f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002f08:	d026      	beq.n	8002f58 <__ssputs_r+0x6c>
 8002f0a:	6965      	ldr	r5, [r4, #20]
 8002f0c:	6909      	ldr	r1, [r1, #16]
 8002f0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f12:	eba3 0901 	sub.w	r9, r3, r1
 8002f16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f1a:	1c7b      	adds	r3, r7, #1
 8002f1c:	444b      	add	r3, r9
 8002f1e:	106d      	asrs	r5, r5, #1
 8002f20:	429d      	cmp	r5, r3
 8002f22:	bf38      	it	cc
 8002f24:	461d      	movcc	r5, r3
 8002f26:	0553      	lsls	r3, r2, #21
 8002f28:	d527      	bpl.n	8002f7a <__ssputs_r+0x8e>
 8002f2a:	4629      	mov	r1, r5
 8002f2c:	f7ff ff52 	bl	8002dd4 <_malloc_r>
 8002f30:	4606      	mov	r6, r0
 8002f32:	b360      	cbz	r0, 8002f8e <__ssputs_r+0xa2>
 8002f34:	464a      	mov	r2, r9
 8002f36:	6921      	ldr	r1, [r4, #16]
 8002f38:	f000 fd64 	bl	8003a04 <memcpy>
 8002f3c:	89a3      	ldrh	r3, [r4, #12]
 8002f3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f46:	81a3      	strh	r3, [r4, #12]
 8002f48:	6126      	str	r6, [r4, #16]
 8002f4a:	444e      	add	r6, r9
 8002f4c:	6026      	str	r6, [r4, #0]
 8002f4e:	463e      	mov	r6, r7
 8002f50:	6165      	str	r5, [r4, #20]
 8002f52:	eba5 0509 	sub.w	r5, r5, r9
 8002f56:	60a5      	str	r5, [r4, #8]
 8002f58:	42be      	cmp	r6, r7
 8002f5a:	d900      	bls.n	8002f5e <__ssputs_r+0x72>
 8002f5c:	463e      	mov	r6, r7
 8002f5e:	4632      	mov	r2, r6
 8002f60:	4641      	mov	r1, r8
 8002f62:	6820      	ldr	r0, [r4, #0]
 8002f64:	f000 fcf3 	bl	800394e <memmove>
 8002f68:	2000      	movs	r0, #0
 8002f6a:	68a3      	ldr	r3, [r4, #8]
 8002f6c:	1b9b      	subs	r3, r3, r6
 8002f6e:	60a3      	str	r3, [r4, #8]
 8002f70:	6823      	ldr	r3, [r4, #0]
 8002f72:	4433      	add	r3, r6
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7a:	462a      	mov	r2, r5
 8002f7c:	f000 fd50 	bl	8003a20 <_realloc_r>
 8002f80:	4606      	mov	r6, r0
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d1e0      	bne.n	8002f48 <__ssputs_r+0x5c>
 8002f86:	4650      	mov	r0, sl
 8002f88:	6921      	ldr	r1, [r4, #16]
 8002f8a:	f7ff feb9 	bl	8002d00 <_free_r>
 8002f8e:	230c      	movs	r3, #12
 8002f90:	f8ca 3000 	str.w	r3, [sl]
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	f04f 30ff 	mov.w	r0, #4294967295
 8002f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	e7e9      	b.n	8002f76 <__ssputs_r+0x8a>
	...

08002fa4 <_svfiprintf_r>:
 8002fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fa8:	4698      	mov	r8, r3
 8002faa:	898b      	ldrh	r3, [r1, #12]
 8002fac:	4607      	mov	r7, r0
 8002fae:	061b      	lsls	r3, r3, #24
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4614      	mov	r4, r2
 8002fb4:	b09d      	sub	sp, #116	@ 0x74
 8002fb6:	d510      	bpl.n	8002fda <_svfiprintf_r+0x36>
 8002fb8:	690b      	ldr	r3, [r1, #16]
 8002fba:	b973      	cbnz	r3, 8002fda <_svfiprintf_r+0x36>
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	f7ff ff09 	bl	8002dd4 <_malloc_r>
 8002fc2:	6028      	str	r0, [r5, #0]
 8002fc4:	6128      	str	r0, [r5, #16]
 8002fc6:	b930      	cbnz	r0, 8002fd6 <_svfiprintf_r+0x32>
 8002fc8:	230c      	movs	r3, #12
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd0:	b01d      	add	sp, #116	@ 0x74
 8002fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd6:	2340      	movs	r3, #64	@ 0x40
 8002fd8:	616b      	str	r3, [r5, #20]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fde:	2320      	movs	r3, #32
 8002fe0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002fe4:	2330      	movs	r3, #48	@ 0x30
 8002fe6:	f04f 0901 	mov.w	r9, #1
 8002fea:	f8cd 800c 	str.w	r8, [sp, #12]
 8002fee:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003188 <_svfiprintf_r+0x1e4>
 8002ff2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ff6:	4623      	mov	r3, r4
 8002ff8:	469a      	mov	sl, r3
 8002ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ffe:	b10a      	cbz	r2, 8003004 <_svfiprintf_r+0x60>
 8003000:	2a25      	cmp	r2, #37	@ 0x25
 8003002:	d1f9      	bne.n	8002ff8 <_svfiprintf_r+0x54>
 8003004:	ebba 0b04 	subs.w	fp, sl, r4
 8003008:	d00b      	beq.n	8003022 <_svfiprintf_r+0x7e>
 800300a:	465b      	mov	r3, fp
 800300c:	4622      	mov	r2, r4
 800300e:	4629      	mov	r1, r5
 8003010:	4638      	mov	r0, r7
 8003012:	f7ff ff6b 	bl	8002eec <__ssputs_r>
 8003016:	3001      	adds	r0, #1
 8003018:	f000 80a7 	beq.w	800316a <_svfiprintf_r+0x1c6>
 800301c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800301e:	445a      	add	r2, fp
 8003020:	9209      	str	r2, [sp, #36]	@ 0x24
 8003022:	f89a 3000 	ldrb.w	r3, [sl]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 809f 	beq.w	800316a <_svfiprintf_r+0x1c6>
 800302c:	2300      	movs	r3, #0
 800302e:	f04f 32ff 	mov.w	r2, #4294967295
 8003032:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003036:	f10a 0a01 	add.w	sl, sl, #1
 800303a:	9304      	str	r3, [sp, #16]
 800303c:	9307      	str	r3, [sp, #28]
 800303e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003042:	931a      	str	r3, [sp, #104]	@ 0x68
 8003044:	4654      	mov	r4, sl
 8003046:	2205      	movs	r2, #5
 8003048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800304c:	484e      	ldr	r0, [pc, #312]	@ (8003188 <_svfiprintf_r+0x1e4>)
 800304e:	f000 fccb 	bl	80039e8 <memchr>
 8003052:	9a04      	ldr	r2, [sp, #16]
 8003054:	b9d8      	cbnz	r0, 800308e <_svfiprintf_r+0xea>
 8003056:	06d0      	lsls	r0, r2, #27
 8003058:	bf44      	itt	mi
 800305a:	2320      	movmi	r3, #32
 800305c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003060:	0711      	lsls	r1, r2, #28
 8003062:	bf44      	itt	mi
 8003064:	232b      	movmi	r3, #43	@ 0x2b
 8003066:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800306a:	f89a 3000 	ldrb.w	r3, [sl]
 800306e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003070:	d015      	beq.n	800309e <_svfiprintf_r+0xfa>
 8003072:	4654      	mov	r4, sl
 8003074:	2000      	movs	r0, #0
 8003076:	f04f 0c0a 	mov.w	ip, #10
 800307a:	9a07      	ldr	r2, [sp, #28]
 800307c:	4621      	mov	r1, r4
 800307e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003082:	3b30      	subs	r3, #48	@ 0x30
 8003084:	2b09      	cmp	r3, #9
 8003086:	d94b      	bls.n	8003120 <_svfiprintf_r+0x17c>
 8003088:	b1b0      	cbz	r0, 80030b8 <_svfiprintf_r+0x114>
 800308a:	9207      	str	r2, [sp, #28]
 800308c:	e014      	b.n	80030b8 <_svfiprintf_r+0x114>
 800308e:	eba0 0308 	sub.w	r3, r0, r8
 8003092:	fa09 f303 	lsl.w	r3, r9, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	46a2      	mov	sl, r4
 800309a:	9304      	str	r3, [sp, #16]
 800309c:	e7d2      	b.n	8003044 <_svfiprintf_r+0xa0>
 800309e:	9b03      	ldr	r3, [sp, #12]
 80030a0:	1d19      	adds	r1, r3, #4
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	9103      	str	r1, [sp, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	bfbb      	ittet	lt
 80030aa:	425b      	neglt	r3, r3
 80030ac:	f042 0202 	orrlt.w	r2, r2, #2
 80030b0:	9307      	strge	r3, [sp, #28]
 80030b2:	9307      	strlt	r3, [sp, #28]
 80030b4:	bfb8      	it	lt
 80030b6:	9204      	strlt	r2, [sp, #16]
 80030b8:	7823      	ldrb	r3, [r4, #0]
 80030ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80030bc:	d10a      	bne.n	80030d4 <_svfiprintf_r+0x130>
 80030be:	7863      	ldrb	r3, [r4, #1]
 80030c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80030c2:	d132      	bne.n	800312a <_svfiprintf_r+0x186>
 80030c4:	9b03      	ldr	r3, [sp, #12]
 80030c6:	3402      	adds	r4, #2
 80030c8:	1d1a      	adds	r2, r3, #4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	9203      	str	r2, [sp, #12]
 80030ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80030d2:	9305      	str	r3, [sp, #20]
 80030d4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800318c <_svfiprintf_r+0x1e8>
 80030d8:	2203      	movs	r2, #3
 80030da:	4650      	mov	r0, sl
 80030dc:	7821      	ldrb	r1, [r4, #0]
 80030de:	f000 fc83 	bl	80039e8 <memchr>
 80030e2:	b138      	cbz	r0, 80030f4 <_svfiprintf_r+0x150>
 80030e4:	2240      	movs	r2, #64	@ 0x40
 80030e6:	9b04      	ldr	r3, [sp, #16]
 80030e8:	eba0 000a 	sub.w	r0, r0, sl
 80030ec:	4082      	lsls	r2, r0
 80030ee:	4313      	orrs	r3, r2
 80030f0:	3401      	adds	r4, #1
 80030f2:	9304      	str	r3, [sp, #16]
 80030f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f8:	2206      	movs	r2, #6
 80030fa:	4825      	ldr	r0, [pc, #148]	@ (8003190 <_svfiprintf_r+0x1ec>)
 80030fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003100:	f000 fc72 	bl	80039e8 <memchr>
 8003104:	2800      	cmp	r0, #0
 8003106:	d036      	beq.n	8003176 <_svfiprintf_r+0x1d2>
 8003108:	4b22      	ldr	r3, [pc, #136]	@ (8003194 <_svfiprintf_r+0x1f0>)
 800310a:	bb1b      	cbnz	r3, 8003154 <_svfiprintf_r+0x1b0>
 800310c:	9b03      	ldr	r3, [sp, #12]
 800310e:	3307      	adds	r3, #7
 8003110:	f023 0307 	bic.w	r3, r3, #7
 8003114:	3308      	adds	r3, #8
 8003116:	9303      	str	r3, [sp, #12]
 8003118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800311a:	4433      	add	r3, r6
 800311c:	9309      	str	r3, [sp, #36]	@ 0x24
 800311e:	e76a      	b.n	8002ff6 <_svfiprintf_r+0x52>
 8003120:	460c      	mov	r4, r1
 8003122:	2001      	movs	r0, #1
 8003124:	fb0c 3202 	mla	r2, ip, r2, r3
 8003128:	e7a8      	b.n	800307c <_svfiprintf_r+0xd8>
 800312a:	2300      	movs	r3, #0
 800312c:	f04f 0c0a 	mov.w	ip, #10
 8003130:	4619      	mov	r1, r3
 8003132:	3401      	adds	r4, #1
 8003134:	9305      	str	r3, [sp, #20]
 8003136:	4620      	mov	r0, r4
 8003138:	f810 2b01 	ldrb.w	r2, [r0], #1
 800313c:	3a30      	subs	r2, #48	@ 0x30
 800313e:	2a09      	cmp	r2, #9
 8003140:	d903      	bls.n	800314a <_svfiprintf_r+0x1a6>
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0c6      	beq.n	80030d4 <_svfiprintf_r+0x130>
 8003146:	9105      	str	r1, [sp, #20]
 8003148:	e7c4      	b.n	80030d4 <_svfiprintf_r+0x130>
 800314a:	4604      	mov	r4, r0
 800314c:	2301      	movs	r3, #1
 800314e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003152:	e7f0      	b.n	8003136 <_svfiprintf_r+0x192>
 8003154:	ab03      	add	r3, sp, #12
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	462a      	mov	r2, r5
 800315a:	4638      	mov	r0, r7
 800315c:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <_svfiprintf_r+0x1f4>)
 800315e:	a904      	add	r1, sp, #16
 8003160:	f3af 8000 	nop.w
 8003164:	1c42      	adds	r2, r0, #1
 8003166:	4606      	mov	r6, r0
 8003168:	d1d6      	bne.n	8003118 <_svfiprintf_r+0x174>
 800316a:	89ab      	ldrh	r3, [r5, #12]
 800316c:	065b      	lsls	r3, r3, #25
 800316e:	f53f af2d 	bmi.w	8002fcc <_svfiprintf_r+0x28>
 8003172:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003174:	e72c      	b.n	8002fd0 <_svfiprintf_r+0x2c>
 8003176:	ab03      	add	r3, sp, #12
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	462a      	mov	r2, r5
 800317c:	4638      	mov	r0, r7
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <_svfiprintf_r+0x1f4>)
 8003180:	a904      	add	r1, sp, #16
 8003182:	f000 f9bd 	bl	8003500 <_printf_i>
 8003186:	e7ed      	b.n	8003164 <_svfiprintf_r+0x1c0>
 8003188:	08003b8e 	.word	0x08003b8e
 800318c:	08003b94 	.word	0x08003b94
 8003190:	08003b98 	.word	0x08003b98
 8003194:	00000000 	.word	0x00000000
 8003198:	08002eed 	.word	0x08002eed

0800319c <__sfputc_r>:
 800319c:	6893      	ldr	r3, [r2, #8]
 800319e:	b410      	push	{r4}
 80031a0:	3b01      	subs	r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	6093      	str	r3, [r2, #8]
 80031a6:	da07      	bge.n	80031b8 <__sfputc_r+0x1c>
 80031a8:	6994      	ldr	r4, [r2, #24]
 80031aa:	42a3      	cmp	r3, r4
 80031ac:	db01      	blt.n	80031b2 <__sfputc_r+0x16>
 80031ae:	290a      	cmp	r1, #10
 80031b0:	d102      	bne.n	80031b8 <__sfputc_r+0x1c>
 80031b2:	bc10      	pop	{r4}
 80031b4:	f7ff bc93 	b.w	8002ade <__swbuf_r>
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	1c58      	adds	r0, r3, #1
 80031bc:	6010      	str	r0, [r2, #0]
 80031be:	7019      	strb	r1, [r3, #0]
 80031c0:	4608      	mov	r0, r1
 80031c2:	bc10      	pop	{r4}
 80031c4:	4770      	bx	lr

080031c6 <__sfputs_r>:
 80031c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c8:	4606      	mov	r6, r0
 80031ca:	460f      	mov	r7, r1
 80031cc:	4614      	mov	r4, r2
 80031ce:	18d5      	adds	r5, r2, r3
 80031d0:	42ac      	cmp	r4, r5
 80031d2:	d101      	bne.n	80031d8 <__sfputs_r+0x12>
 80031d4:	2000      	movs	r0, #0
 80031d6:	e007      	b.n	80031e8 <__sfputs_r+0x22>
 80031d8:	463a      	mov	r2, r7
 80031da:	4630      	mov	r0, r6
 80031dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80031e0:	f7ff ffdc 	bl	800319c <__sfputc_r>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	d1f3      	bne.n	80031d0 <__sfputs_r+0xa>
 80031e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080031ec <_vfiprintf_r>:
 80031ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031f0:	460d      	mov	r5, r1
 80031f2:	4614      	mov	r4, r2
 80031f4:	4698      	mov	r8, r3
 80031f6:	4606      	mov	r6, r0
 80031f8:	b09d      	sub	sp, #116	@ 0x74
 80031fa:	b118      	cbz	r0, 8003204 <_vfiprintf_r+0x18>
 80031fc:	6a03      	ldr	r3, [r0, #32]
 80031fe:	b90b      	cbnz	r3, 8003204 <_vfiprintf_r+0x18>
 8003200:	f7ff fb62 	bl	80028c8 <__sinit>
 8003204:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003206:	07d9      	lsls	r1, r3, #31
 8003208:	d405      	bmi.n	8003216 <_vfiprintf_r+0x2a>
 800320a:	89ab      	ldrh	r3, [r5, #12]
 800320c:	059a      	lsls	r2, r3, #22
 800320e:	d402      	bmi.n	8003216 <_vfiprintf_r+0x2a>
 8003210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003212:	f7ff fd72 	bl	8002cfa <__retarget_lock_acquire_recursive>
 8003216:	89ab      	ldrh	r3, [r5, #12]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	d501      	bpl.n	8003220 <_vfiprintf_r+0x34>
 800321c:	692b      	ldr	r3, [r5, #16]
 800321e:	b99b      	cbnz	r3, 8003248 <_vfiprintf_r+0x5c>
 8003220:	4629      	mov	r1, r5
 8003222:	4630      	mov	r0, r6
 8003224:	f7ff fc9a 	bl	8002b5c <__swsetup_r>
 8003228:	b170      	cbz	r0, 8003248 <_vfiprintf_r+0x5c>
 800322a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800322c:	07dc      	lsls	r4, r3, #31
 800322e:	d504      	bpl.n	800323a <_vfiprintf_r+0x4e>
 8003230:	f04f 30ff 	mov.w	r0, #4294967295
 8003234:	b01d      	add	sp, #116	@ 0x74
 8003236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323a:	89ab      	ldrh	r3, [r5, #12]
 800323c:	0598      	lsls	r0, r3, #22
 800323e:	d4f7      	bmi.n	8003230 <_vfiprintf_r+0x44>
 8003240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003242:	f7ff fd5b 	bl	8002cfc <__retarget_lock_release_recursive>
 8003246:	e7f3      	b.n	8003230 <_vfiprintf_r+0x44>
 8003248:	2300      	movs	r3, #0
 800324a:	9309      	str	r3, [sp, #36]	@ 0x24
 800324c:	2320      	movs	r3, #32
 800324e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003252:	2330      	movs	r3, #48	@ 0x30
 8003254:	f04f 0901 	mov.w	r9, #1
 8003258:	f8cd 800c 	str.w	r8, [sp, #12]
 800325c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003408 <_vfiprintf_r+0x21c>
 8003260:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003264:	4623      	mov	r3, r4
 8003266:	469a      	mov	sl, r3
 8003268:	f813 2b01 	ldrb.w	r2, [r3], #1
 800326c:	b10a      	cbz	r2, 8003272 <_vfiprintf_r+0x86>
 800326e:	2a25      	cmp	r2, #37	@ 0x25
 8003270:	d1f9      	bne.n	8003266 <_vfiprintf_r+0x7a>
 8003272:	ebba 0b04 	subs.w	fp, sl, r4
 8003276:	d00b      	beq.n	8003290 <_vfiprintf_r+0xa4>
 8003278:	465b      	mov	r3, fp
 800327a:	4622      	mov	r2, r4
 800327c:	4629      	mov	r1, r5
 800327e:	4630      	mov	r0, r6
 8003280:	f7ff ffa1 	bl	80031c6 <__sfputs_r>
 8003284:	3001      	adds	r0, #1
 8003286:	f000 80a7 	beq.w	80033d8 <_vfiprintf_r+0x1ec>
 800328a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800328c:	445a      	add	r2, fp
 800328e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003290:	f89a 3000 	ldrb.w	r3, [sl]
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 809f 	beq.w	80033d8 <_vfiprintf_r+0x1ec>
 800329a:	2300      	movs	r3, #0
 800329c:	f04f 32ff 	mov.w	r2, #4294967295
 80032a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032a4:	f10a 0a01 	add.w	sl, sl, #1
 80032a8:	9304      	str	r3, [sp, #16]
 80032aa:	9307      	str	r3, [sp, #28]
 80032ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80032b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80032b2:	4654      	mov	r4, sl
 80032b4:	2205      	movs	r2, #5
 80032b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ba:	4853      	ldr	r0, [pc, #332]	@ (8003408 <_vfiprintf_r+0x21c>)
 80032bc:	f000 fb94 	bl	80039e8 <memchr>
 80032c0:	9a04      	ldr	r2, [sp, #16]
 80032c2:	b9d8      	cbnz	r0, 80032fc <_vfiprintf_r+0x110>
 80032c4:	06d1      	lsls	r1, r2, #27
 80032c6:	bf44      	itt	mi
 80032c8:	2320      	movmi	r3, #32
 80032ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032ce:	0713      	lsls	r3, r2, #28
 80032d0:	bf44      	itt	mi
 80032d2:	232b      	movmi	r3, #43	@ 0x2b
 80032d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80032d8:	f89a 3000 	ldrb.w	r3, [sl]
 80032dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80032de:	d015      	beq.n	800330c <_vfiprintf_r+0x120>
 80032e0:	4654      	mov	r4, sl
 80032e2:	2000      	movs	r0, #0
 80032e4:	f04f 0c0a 	mov.w	ip, #10
 80032e8:	9a07      	ldr	r2, [sp, #28]
 80032ea:	4621      	mov	r1, r4
 80032ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80032f0:	3b30      	subs	r3, #48	@ 0x30
 80032f2:	2b09      	cmp	r3, #9
 80032f4:	d94b      	bls.n	800338e <_vfiprintf_r+0x1a2>
 80032f6:	b1b0      	cbz	r0, 8003326 <_vfiprintf_r+0x13a>
 80032f8:	9207      	str	r2, [sp, #28]
 80032fa:	e014      	b.n	8003326 <_vfiprintf_r+0x13a>
 80032fc:	eba0 0308 	sub.w	r3, r0, r8
 8003300:	fa09 f303 	lsl.w	r3, r9, r3
 8003304:	4313      	orrs	r3, r2
 8003306:	46a2      	mov	sl, r4
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	e7d2      	b.n	80032b2 <_vfiprintf_r+0xc6>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	1d19      	adds	r1, r3, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	9103      	str	r1, [sp, #12]
 8003314:	2b00      	cmp	r3, #0
 8003316:	bfbb      	ittet	lt
 8003318:	425b      	neglt	r3, r3
 800331a:	f042 0202 	orrlt.w	r2, r2, #2
 800331e:	9307      	strge	r3, [sp, #28]
 8003320:	9307      	strlt	r3, [sp, #28]
 8003322:	bfb8      	it	lt
 8003324:	9204      	strlt	r2, [sp, #16]
 8003326:	7823      	ldrb	r3, [r4, #0]
 8003328:	2b2e      	cmp	r3, #46	@ 0x2e
 800332a:	d10a      	bne.n	8003342 <_vfiprintf_r+0x156>
 800332c:	7863      	ldrb	r3, [r4, #1]
 800332e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003330:	d132      	bne.n	8003398 <_vfiprintf_r+0x1ac>
 8003332:	9b03      	ldr	r3, [sp, #12]
 8003334:	3402      	adds	r4, #2
 8003336:	1d1a      	adds	r2, r3, #4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	9203      	str	r2, [sp, #12]
 800333c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003340:	9305      	str	r3, [sp, #20]
 8003342:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800340c <_vfiprintf_r+0x220>
 8003346:	2203      	movs	r2, #3
 8003348:	4650      	mov	r0, sl
 800334a:	7821      	ldrb	r1, [r4, #0]
 800334c:	f000 fb4c 	bl	80039e8 <memchr>
 8003350:	b138      	cbz	r0, 8003362 <_vfiprintf_r+0x176>
 8003352:	2240      	movs	r2, #64	@ 0x40
 8003354:	9b04      	ldr	r3, [sp, #16]
 8003356:	eba0 000a 	sub.w	r0, r0, sl
 800335a:	4082      	lsls	r2, r0
 800335c:	4313      	orrs	r3, r2
 800335e:	3401      	adds	r4, #1
 8003360:	9304      	str	r3, [sp, #16]
 8003362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003366:	2206      	movs	r2, #6
 8003368:	4829      	ldr	r0, [pc, #164]	@ (8003410 <_vfiprintf_r+0x224>)
 800336a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800336e:	f000 fb3b 	bl	80039e8 <memchr>
 8003372:	2800      	cmp	r0, #0
 8003374:	d03f      	beq.n	80033f6 <_vfiprintf_r+0x20a>
 8003376:	4b27      	ldr	r3, [pc, #156]	@ (8003414 <_vfiprintf_r+0x228>)
 8003378:	bb1b      	cbnz	r3, 80033c2 <_vfiprintf_r+0x1d6>
 800337a:	9b03      	ldr	r3, [sp, #12]
 800337c:	3307      	adds	r3, #7
 800337e:	f023 0307 	bic.w	r3, r3, #7
 8003382:	3308      	adds	r3, #8
 8003384:	9303      	str	r3, [sp, #12]
 8003386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003388:	443b      	add	r3, r7
 800338a:	9309      	str	r3, [sp, #36]	@ 0x24
 800338c:	e76a      	b.n	8003264 <_vfiprintf_r+0x78>
 800338e:	460c      	mov	r4, r1
 8003390:	2001      	movs	r0, #1
 8003392:	fb0c 3202 	mla	r2, ip, r2, r3
 8003396:	e7a8      	b.n	80032ea <_vfiprintf_r+0xfe>
 8003398:	2300      	movs	r3, #0
 800339a:	f04f 0c0a 	mov.w	ip, #10
 800339e:	4619      	mov	r1, r3
 80033a0:	3401      	adds	r4, #1
 80033a2:	9305      	str	r3, [sp, #20]
 80033a4:	4620      	mov	r0, r4
 80033a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033aa:	3a30      	subs	r2, #48	@ 0x30
 80033ac:	2a09      	cmp	r2, #9
 80033ae:	d903      	bls.n	80033b8 <_vfiprintf_r+0x1cc>
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0c6      	beq.n	8003342 <_vfiprintf_r+0x156>
 80033b4:	9105      	str	r1, [sp, #20]
 80033b6:	e7c4      	b.n	8003342 <_vfiprintf_r+0x156>
 80033b8:	4604      	mov	r4, r0
 80033ba:	2301      	movs	r3, #1
 80033bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80033c0:	e7f0      	b.n	80033a4 <_vfiprintf_r+0x1b8>
 80033c2:	ab03      	add	r3, sp, #12
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	462a      	mov	r2, r5
 80033c8:	4630      	mov	r0, r6
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <_vfiprintf_r+0x22c>)
 80033cc:	a904      	add	r1, sp, #16
 80033ce:	f3af 8000 	nop.w
 80033d2:	4607      	mov	r7, r0
 80033d4:	1c78      	adds	r0, r7, #1
 80033d6:	d1d6      	bne.n	8003386 <_vfiprintf_r+0x19a>
 80033d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033da:	07d9      	lsls	r1, r3, #31
 80033dc:	d405      	bmi.n	80033ea <_vfiprintf_r+0x1fe>
 80033de:	89ab      	ldrh	r3, [r5, #12]
 80033e0:	059a      	lsls	r2, r3, #22
 80033e2:	d402      	bmi.n	80033ea <_vfiprintf_r+0x1fe>
 80033e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033e6:	f7ff fc89 	bl	8002cfc <__retarget_lock_release_recursive>
 80033ea:	89ab      	ldrh	r3, [r5, #12]
 80033ec:	065b      	lsls	r3, r3, #25
 80033ee:	f53f af1f 	bmi.w	8003230 <_vfiprintf_r+0x44>
 80033f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80033f4:	e71e      	b.n	8003234 <_vfiprintf_r+0x48>
 80033f6:	ab03      	add	r3, sp, #12
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462a      	mov	r2, r5
 80033fc:	4630      	mov	r0, r6
 80033fe:	4b06      	ldr	r3, [pc, #24]	@ (8003418 <_vfiprintf_r+0x22c>)
 8003400:	a904      	add	r1, sp, #16
 8003402:	f000 f87d 	bl	8003500 <_printf_i>
 8003406:	e7e4      	b.n	80033d2 <_vfiprintf_r+0x1e6>
 8003408:	08003b8e 	.word	0x08003b8e
 800340c:	08003b94 	.word	0x08003b94
 8003410:	08003b98 	.word	0x08003b98
 8003414:	00000000 	.word	0x00000000
 8003418:	080031c7 	.word	0x080031c7

0800341c <_printf_common>:
 800341c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003420:	4616      	mov	r6, r2
 8003422:	4698      	mov	r8, r3
 8003424:	688a      	ldr	r2, [r1, #8]
 8003426:	690b      	ldr	r3, [r1, #16]
 8003428:	4607      	mov	r7, r0
 800342a:	4293      	cmp	r3, r2
 800342c:	bfb8      	it	lt
 800342e:	4613      	movlt	r3, r2
 8003430:	6033      	str	r3, [r6, #0]
 8003432:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003436:	460c      	mov	r4, r1
 8003438:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800343c:	b10a      	cbz	r2, 8003442 <_printf_common+0x26>
 800343e:	3301      	adds	r3, #1
 8003440:	6033      	str	r3, [r6, #0]
 8003442:	6823      	ldr	r3, [r4, #0]
 8003444:	0699      	lsls	r1, r3, #26
 8003446:	bf42      	ittt	mi
 8003448:	6833      	ldrmi	r3, [r6, #0]
 800344a:	3302      	addmi	r3, #2
 800344c:	6033      	strmi	r3, [r6, #0]
 800344e:	6825      	ldr	r5, [r4, #0]
 8003450:	f015 0506 	ands.w	r5, r5, #6
 8003454:	d106      	bne.n	8003464 <_printf_common+0x48>
 8003456:	f104 0a19 	add.w	sl, r4, #25
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	6832      	ldr	r2, [r6, #0]
 800345e:	1a9b      	subs	r3, r3, r2
 8003460:	42ab      	cmp	r3, r5
 8003462:	dc2b      	bgt.n	80034bc <_printf_common+0xa0>
 8003464:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003468:	6822      	ldr	r2, [r4, #0]
 800346a:	3b00      	subs	r3, #0
 800346c:	bf18      	it	ne
 800346e:	2301      	movne	r3, #1
 8003470:	0692      	lsls	r2, r2, #26
 8003472:	d430      	bmi.n	80034d6 <_printf_common+0xba>
 8003474:	4641      	mov	r1, r8
 8003476:	4638      	mov	r0, r7
 8003478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800347c:	47c8      	blx	r9
 800347e:	3001      	adds	r0, #1
 8003480:	d023      	beq.n	80034ca <_printf_common+0xae>
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	6922      	ldr	r2, [r4, #16]
 8003486:	f003 0306 	and.w	r3, r3, #6
 800348a:	2b04      	cmp	r3, #4
 800348c:	bf14      	ite	ne
 800348e:	2500      	movne	r5, #0
 8003490:	6833      	ldreq	r3, [r6, #0]
 8003492:	f04f 0600 	mov.w	r6, #0
 8003496:	bf08      	it	eq
 8003498:	68e5      	ldreq	r5, [r4, #12]
 800349a:	f104 041a 	add.w	r4, r4, #26
 800349e:	bf08      	it	eq
 80034a0:	1aed      	subeq	r5, r5, r3
 80034a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80034a6:	bf08      	it	eq
 80034a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034ac:	4293      	cmp	r3, r2
 80034ae:	bfc4      	itt	gt
 80034b0:	1a9b      	subgt	r3, r3, r2
 80034b2:	18ed      	addgt	r5, r5, r3
 80034b4:	42b5      	cmp	r5, r6
 80034b6:	d11a      	bne.n	80034ee <_printf_common+0xd2>
 80034b8:	2000      	movs	r0, #0
 80034ba:	e008      	b.n	80034ce <_printf_common+0xb2>
 80034bc:	2301      	movs	r3, #1
 80034be:	4652      	mov	r2, sl
 80034c0:	4641      	mov	r1, r8
 80034c2:	4638      	mov	r0, r7
 80034c4:	47c8      	blx	r9
 80034c6:	3001      	adds	r0, #1
 80034c8:	d103      	bne.n	80034d2 <_printf_common+0xb6>
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295
 80034ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034d2:	3501      	adds	r5, #1
 80034d4:	e7c1      	b.n	800345a <_printf_common+0x3e>
 80034d6:	2030      	movs	r0, #48	@ 0x30
 80034d8:	18e1      	adds	r1, r4, r3
 80034da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80034e4:	4422      	add	r2, r4
 80034e6:	3302      	adds	r3, #2
 80034e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80034ec:	e7c2      	b.n	8003474 <_printf_common+0x58>
 80034ee:	2301      	movs	r3, #1
 80034f0:	4622      	mov	r2, r4
 80034f2:	4641      	mov	r1, r8
 80034f4:	4638      	mov	r0, r7
 80034f6:	47c8      	blx	r9
 80034f8:	3001      	adds	r0, #1
 80034fa:	d0e6      	beq.n	80034ca <_printf_common+0xae>
 80034fc:	3601      	adds	r6, #1
 80034fe:	e7d9      	b.n	80034b4 <_printf_common+0x98>

08003500 <_printf_i>:
 8003500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	7e0f      	ldrb	r7, [r1, #24]
 8003506:	4691      	mov	r9, r2
 8003508:	2f78      	cmp	r7, #120	@ 0x78
 800350a:	4680      	mov	r8, r0
 800350c:	460c      	mov	r4, r1
 800350e:	469a      	mov	sl, r3
 8003510:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003512:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003516:	d807      	bhi.n	8003528 <_printf_i+0x28>
 8003518:	2f62      	cmp	r7, #98	@ 0x62
 800351a:	d80a      	bhi.n	8003532 <_printf_i+0x32>
 800351c:	2f00      	cmp	r7, #0
 800351e:	f000 80d1 	beq.w	80036c4 <_printf_i+0x1c4>
 8003522:	2f58      	cmp	r7, #88	@ 0x58
 8003524:	f000 80b8 	beq.w	8003698 <_printf_i+0x198>
 8003528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800352c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003530:	e03a      	b.n	80035a8 <_printf_i+0xa8>
 8003532:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003536:	2b15      	cmp	r3, #21
 8003538:	d8f6      	bhi.n	8003528 <_printf_i+0x28>
 800353a:	a101      	add	r1, pc, #4	@ (adr r1, 8003540 <_printf_i+0x40>)
 800353c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003540:	08003599 	.word	0x08003599
 8003544:	080035ad 	.word	0x080035ad
 8003548:	08003529 	.word	0x08003529
 800354c:	08003529 	.word	0x08003529
 8003550:	08003529 	.word	0x08003529
 8003554:	08003529 	.word	0x08003529
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003529 	.word	0x08003529
 8003560:	08003529 	.word	0x08003529
 8003564:	08003529 	.word	0x08003529
 8003568:	08003529 	.word	0x08003529
 800356c:	080036ab 	.word	0x080036ab
 8003570:	080035d7 	.word	0x080035d7
 8003574:	08003665 	.word	0x08003665
 8003578:	08003529 	.word	0x08003529
 800357c:	08003529 	.word	0x08003529
 8003580:	080036cd 	.word	0x080036cd
 8003584:	08003529 	.word	0x08003529
 8003588:	080035d7 	.word	0x080035d7
 800358c:	08003529 	.word	0x08003529
 8003590:	08003529 	.word	0x08003529
 8003594:	0800366d 	.word	0x0800366d
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	1d1a      	adds	r2, r3, #4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6032      	str	r2, [r6, #0]
 80035a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80035a8:	2301      	movs	r3, #1
 80035aa:	e09c      	b.n	80036e6 <_printf_i+0x1e6>
 80035ac:	6833      	ldr	r3, [r6, #0]
 80035ae:	6820      	ldr	r0, [r4, #0]
 80035b0:	1d19      	adds	r1, r3, #4
 80035b2:	6031      	str	r1, [r6, #0]
 80035b4:	0606      	lsls	r6, r0, #24
 80035b6:	d501      	bpl.n	80035bc <_printf_i+0xbc>
 80035b8:	681d      	ldr	r5, [r3, #0]
 80035ba:	e003      	b.n	80035c4 <_printf_i+0xc4>
 80035bc:	0645      	lsls	r5, r0, #25
 80035be:	d5fb      	bpl.n	80035b8 <_printf_i+0xb8>
 80035c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80035c4:	2d00      	cmp	r5, #0
 80035c6:	da03      	bge.n	80035d0 <_printf_i+0xd0>
 80035c8:	232d      	movs	r3, #45	@ 0x2d
 80035ca:	426d      	negs	r5, r5
 80035cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035d0:	230a      	movs	r3, #10
 80035d2:	4858      	ldr	r0, [pc, #352]	@ (8003734 <_printf_i+0x234>)
 80035d4:	e011      	b.n	80035fa <_printf_i+0xfa>
 80035d6:	6821      	ldr	r1, [r4, #0]
 80035d8:	6833      	ldr	r3, [r6, #0]
 80035da:	0608      	lsls	r0, r1, #24
 80035dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80035e0:	d402      	bmi.n	80035e8 <_printf_i+0xe8>
 80035e2:	0649      	lsls	r1, r1, #25
 80035e4:	bf48      	it	mi
 80035e6:	b2ad      	uxthmi	r5, r5
 80035e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80035ea:	6033      	str	r3, [r6, #0]
 80035ec:	bf14      	ite	ne
 80035ee:	230a      	movne	r3, #10
 80035f0:	2308      	moveq	r3, #8
 80035f2:	4850      	ldr	r0, [pc, #320]	@ (8003734 <_printf_i+0x234>)
 80035f4:	2100      	movs	r1, #0
 80035f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80035fa:	6866      	ldr	r6, [r4, #4]
 80035fc:	2e00      	cmp	r6, #0
 80035fe:	60a6      	str	r6, [r4, #8]
 8003600:	db05      	blt.n	800360e <_printf_i+0x10e>
 8003602:	6821      	ldr	r1, [r4, #0]
 8003604:	432e      	orrs	r6, r5
 8003606:	f021 0104 	bic.w	r1, r1, #4
 800360a:	6021      	str	r1, [r4, #0]
 800360c:	d04b      	beq.n	80036a6 <_printf_i+0x1a6>
 800360e:	4616      	mov	r6, r2
 8003610:	fbb5 f1f3 	udiv	r1, r5, r3
 8003614:	fb03 5711 	mls	r7, r3, r1, r5
 8003618:	5dc7      	ldrb	r7, [r0, r7]
 800361a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800361e:	462f      	mov	r7, r5
 8003620:	42bb      	cmp	r3, r7
 8003622:	460d      	mov	r5, r1
 8003624:	d9f4      	bls.n	8003610 <_printf_i+0x110>
 8003626:	2b08      	cmp	r3, #8
 8003628:	d10b      	bne.n	8003642 <_printf_i+0x142>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	07df      	lsls	r7, r3, #31
 800362e:	d508      	bpl.n	8003642 <_printf_i+0x142>
 8003630:	6923      	ldr	r3, [r4, #16]
 8003632:	6861      	ldr	r1, [r4, #4]
 8003634:	4299      	cmp	r1, r3
 8003636:	bfde      	ittt	le
 8003638:	2330      	movle	r3, #48	@ 0x30
 800363a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800363e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003642:	1b92      	subs	r2, r2, r6
 8003644:	6122      	str	r2, [r4, #16]
 8003646:	464b      	mov	r3, r9
 8003648:	4621      	mov	r1, r4
 800364a:	4640      	mov	r0, r8
 800364c:	f8cd a000 	str.w	sl, [sp]
 8003650:	aa03      	add	r2, sp, #12
 8003652:	f7ff fee3 	bl	800341c <_printf_common>
 8003656:	3001      	adds	r0, #1
 8003658:	d14a      	bne.n	80036f0 <_printf_i+0x1f0>
 800365a:	f04f 30ff 	mov.w	r0, #4294967295
 800365e:	b004      	add	sp, #16
 8003660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003664:	6823      	ldr	r3, [r4, #0]
 8003666:	f043 0320 	orr.w	r3, r3, #32
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	2778      	movs	r7, #120	@ 0x78
 800366e:	4832      	ldr	r0, [pc, #200]	@ (8003738 <_printf_i+0x238>)
 8003670:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	6831      	ldr	r1, [r6, #0]
 8003678:	061f      	lsls	r7, r3, #24
 800367a:	f851 5b04 	ldr.w	r5, [r1], #4
 800367e:	d402      	bmi.n	8003686 <_printf_i+0x186>
 8003680:	065f      	lsls	r7, r3, #25
 8003682:	bf48      	it	mi
 8003684:	b2ad      	uxthmi	r5, r5
 8003686:	6031      	str	r1, [r6, #0]
 8003688:	07d9      	lsls	r1, r3, #31
 800368a:	bf44      	itt	mi
 800368c:	f043 0320 	orrmi.w	r3, r3, #32
 8003690:	6023      	strmi	r3, [r4, #0]
 8003692:	b11d      	cbz	r5, 800369c <_printf_i+0x19c>
 8003694:	2310      	movs	r3, #16
 8003696:	e7ad      	b.n	80035f4 <_printf_i+0xf4>
 8003698:	4826      	ldr	r0, [pc, #152]	@ (8003734 <_printf_i+0x234>)
 800369a:	e7e9      	b.n	8003670 <_printf_i+0x170>
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	f023 0320 	bic.w	r3, r3, #32
 80036a2:	6023      	str	r3, [r4, #0]
 80036a4:	e7f6      	b.n	8003694 <_printf_i+0x194>
 80036a6:	4616      	mov	r6, r2
 80036a8:	e7bd      	b.n	8003626 <_printf_i+0x126>
 80036aa:	6833      	ldr	r3, [r6, #0]
 80036ac:	6825      	ldr	r5, [r4, #0]
 80036ae:	1d18      	adds	r0, r3, #4
 80036b0:	6961      	ldr	r1, [r4, #20]
 80036b2:	6030      	str	r0, [r6, #0]
 80036b4:	062e      	lsls	r6, r5, #24
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	d501      	bpl.n	80036be <_printf_i+0x1be>
 80036ba:	6019      	str	r1, [r3, #0]
 80036bc:	e002      	b.n	80036c4 <_printf_i+0x1c4>
 80036be:	0668      	lsls	r0, r5, #25
 80036c0:	d5fb      	bpl.n	80036ba <_printf_i+0x1ba>
 80036c2:	8019      	strh	r1, [r3, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	4616      	mov	r6, r2
 80036c8:	6123      	str	r3, [r4, #16]
 80036ca:	e7bc      	b.n	8003646 <_printf_i+0x146>
 80036cc:	6833      	ldr	r3, [r6, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	1d1a      	adds	r2, r3, #4
 80036d2:	6032      	str	r2, [r6, #0]
 80036d4:	681e      	ldr	r6, [r3, #0]
 80036d6:	6862      	ldr	r2, [r4, #4]
 80036d8:	4630      	mov	r0, r6
 80036da:	f000 f985 	bl	80039e8 <memchr>
 80036de:	b108      	cbz	r0, 80036e4 <_printf_i+0x1e4>
 80036e0:	1b80      	subs	r0, r0, r6
 80036e2:	6060      	str	r0, [r4, #4]
 80036e4:	6863      	ldr	r3, [r4, #4]
 80036e6:	6123      	str	r3, [r4, #16]
 80036e8:	2300      	movs	r3, #0
 80036ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036ee:	e7aa      	b.n	8003646 <_printf_i+0x146>
 80036f0:	4632      	mov	r2, r6
 80036f2:	4649      	mov	r1, r9
 80036f4:	4640      	mov	r0, r8
 80036f6:	6923      	ldr	r3, [r4, #16]
 80036f8:	47d0      	blx	sl
 80036fa:	3001      	adds	r0, #1
 80036fc:	d0ad      	beq.n	800365a <_printf_i+0x15a>
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	079b      	lsls	r3, r3, #30
 8003702:	d413      	bmi.n	800372c <_printf_i+0x22c>
 8003704:	68e0      	ldr	r0, [r4, #12]
 8003706:	9b03      	ldr	r3, [sp, #12]
 8003708:	4298      	cmp	r0, r3
 800370a:	bfb8      	it	lt
 800370c:	4618      	movlt	r0, r3
 800370e:	e7a6      	b.n	800365e <_printf_i+0x15e>
 8003710:	2301      	movs	r3, #1
 8003712:	4632      	mov	r2, r6
 8003714:	4649      	mov	r1, r9
 8003716:	4640      	mov	r0, r8
 8003718:	47d0      	blx	sl
 800371a:	3001      	adds	r0, #1
 800371c:	d09d      	beq.n	800365a <_printf_i+0x15a>
 800371e:	3501      	adds	r5, #1
 8003720:	68e3      	ldr	r3, [r4, #12]
 8003722:	9903      	ldr	r1, [sp, #12]
 8003724:	1a5b      	subs	r3, r3, r1
 8003726:	42ab      	cmp	r3, r5
 8003728:	dcf2      	bgt.n	8003710 <_printf_i+0x210>
 800372a:	e7eb      	b.n	8003704 <_printf_i+0x204>
 800372c:	2500      	movs	r5, #0
 800372e:	f104 0619 	add.w	r6, r4, #25
 8003732:	e7f5      	b.n	8003720 <_printf_i+0x220>
 8003734:	08003b9f 	.word	0x08003b9f
 8003738:	08003bb0 	.word	0x08003bb0

0800373c <__sflush_r>:
 800373c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003742:	0716      	lsls	r6, r2, #28
 8003744:	4605      	mov	r5, r0
 8003746:	460c      	mov	r4, r1
 8003748:	d454      	bmi.n	80037f4 <__sflush_r+0xb8>
 800374a:	684b      	ldr	r3, [r1, #4]
 800374c:	2b00      	cmp	r3, #0
 800374e:	dc02      	bgt.n	8003756 <__sflush_r+0x1a>
 8003750:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	dd48      	ble.n	80037e8 <__sflush_r+0xac>
 8003756:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003758:	2e00      	cmp	r6, #0
 800375a:	d045      	beq.n	80037e8 <__sflush_r+0xac>
 800375c:	2300      	movs	r3, #0
 800375e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003762:	682f      	ldr	r7, [r5, #0]
 8003764:	6a21      	ldr	r1, [r4, #32]
 8003766:	602b      	str	r3, [r5, #0]
 8003768:	d030      	beq.n	80037cc <__sflush_r+0x90>
 800376a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800376c:	89a3      	ldrh	r3, [r4, #12]
 800376e:	0759      	lsls	r1, r3, #29
 8003770:	d505      	bpl.n	800377e <__sflush_r+0x42>
 8003772:	6863      	ldr	r3, [r4, #4]
 8003774:	1ad2      	subs	r2, r2, r3
 8003776:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003778:	b10b      	cbz	r3, 800377e <__sflush_r+0x42>
 800377a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800377c:	1ad2      	subs	r2, r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	4628      	mov	r0, r5
 8003782:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003784:	6a21      	ldr	r1, [r4, #32]
 8003786:	47b0      	blx	r6
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	89a3      	ldrh	r3, [r4, #12]
 800378c:	d106      	bne.n	800379c <__sflush_r+0x60>
 800378e:	6829      	ldr	r1, [r5, #0]
 8003790:	291d      	cmp	r1, #29
 8003792:	d82b      	bhi.n	80037ec <__sflush_r+0xb0>
 8003794:	4a28      	ldr	r2, [pc, #160]	@ (8003838 <__sflush_r+0xfc>)
 8003796:	40ca      	lsrs	r2, r1
 8003798:	07d6      	lsls	r6, r2, #31
 800379a:	d527      	bpl.n	80037ec <__sflush_r+0xb0>
 800379c:	2200      	movs	r2, #0
 800379e:	6062      	str	r2, [r4, #4]
 80037a0:	6922      	ldr	r2, [r4, #16]
 80037a2:	04d9      	lsls	r1, r3, #19
 80037a4:	6022      	str	r2, [r4, #0]
 80037a6:	d504      	bpl.n	80037b2 <__sflush_r+0x76>
 80037a8:	1c42      	adds	r2, r0, #1
 80037aa:	d101      	bne.n	80037b0 <__sflush_r+0x74>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b903      	cbnz	r3, 80037b2 <__sflush_r+0x76>
 80037b0:	6560      	str	r0, [r4, #84]	@ 0x54
 80037b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80037b4:	602f      	str	r7, [r5, #0]
 80037b6:	b1b9      	cbz	r1, 80037e8 <__sflush_r+0xac>
 80037b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80037bc:	4299      	cmp	r1, r3
 80037be:	d002      	beq.n	80037c6 <__sflush_r+0x8a>
 80037c0:	4628      	mov	r0, r5
 80037c2:	f7ff fa9d 	bl	8002d00 <_free_r>
 80037c6:	2300      	movs	r3, #0
 80037c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80037ca:	e00d      	b.n	80037e8 <__sflush_r+0xac>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4628      	mov	r0, r5
 80037d0:	47b0      	blx	r6
 80037d2:	4602      	mov	r2, r0
 80037d4:	1c50      	adds	r0, r2, #1
 80037d6:	d1c9      	bne.n	800376c <__sflush_r+0x30>
 80037d8:	682b      	ldr	r3, [r5, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0c6      	beq.n	800376c <__sflush_r+0x30>
 80037de:	2b1d      	cmp	r3, #29
 80037e0:	d001      	beq.n	80037e6 <__sflush_r+0xaa>
 80037e2:	2b16      	cmp	r3, #22
 80037e4:	d11d      	bne.n	8003822 <__sflush_r+0xe6>
 80037e6:	602f      	str	r7, [r5, #0]
 80037e8:	2000      	movs	r0, #0
 80037ea:	e021      	b.n	8003830 <__sflush_r+0xf4>
 80037ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037f0:	b21b      	sxth	r3, r3
 80037f2:	e01a      	b.n	800382a <__sflush_r+0xee>
 80037f4:	690f      	ldr	r7, [r1, #16]
 80037f6:	2f00      	cmp	r7, #0
 80037f8:	d0f6      	beq.n	80037e8 <__sflush_r+0xac>
 80037fa:	0793      	lsls	r3, r2, #30
 80037fc:	bf18      	it	ne
 80037fe:	2300      	movne	r3, #0
 8003800:	680e      	ldr	r6, [r1, #0]
 8003802:	bf08      	it	eq
 8003804:	694b      	ldreq	r3, [r1, #20]
 8003806:	1bf6      	subs	r6, r6, r7
 8003808:	600f      	str	r7, [r1, #0]
 800380a:	608b      	str	r3, [r1, #8]
 800380c:	2e00      	cmp	r6, #0
 800380e:	ddeb      	ble.n	80037e8 <__sflush_r+0xac>
 8003810:	4633      	mov	r3, r6
 8003812:	463a      	mov	r2, r7
 8003814:	4628      	mov	r0, r5
 8003816:	6a21      	ldr	r1, [r4, #32]
 8003818:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800381c:	47e0      	blx	ip
 800381e:	2800      	cmp	r0, #0
 8003820:	dc07      	bgt.n	8003832 <__sflush_r+0xf6>
 8003822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800382a:	f04f 30ff 	mov.w	r0, #4294967295
 800382e:	81a3      	strh	r3, [r4, #12]
 8003830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003832:	4407      	add	r7, r0
 8003834:	1a36      	subs	r6, r6, r0
 8003836:	e7e9      	b.n	800380c <__sflush_r+0xd0>
 8003838:	20400001 	.word	0x20400001

0800383c <_fflush_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	690b      	ldr	r3, [r1, #16]
 8003840:	4605      	mov	r5, r0
 8003842:	460c      	mov	r4, r1
 8003844:	b913      	cbnz	r3, 800384c <_fflush_r+0x10>
 8003846:	2500      	movs	r5, #0
 8003848:	4628      	mov	r0, r5
 800384a:	bd38      	pop	{r3, r4, r5, pc}
 800384c:	b118      	cbz	r0, 8003856 <_fflush_r+0x1a>
 800384e:	6a03      	ldr	r3, [r0, #32]
 8003850:	b90b      	cbnz	r3, 8003856 <_fflush_r+0x1a>
 8003852:	f7ff f839 	bl	80028c8 <__sinit>
 8003856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d0f3      	beq.n	8003846 <_fflush_r+0xa>
 800385e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003860:	07d0      	lsls	r0, r2, #31
 8003862:	d404      	bmi.n	800386e <_fflush_r+0x32>
 8003864:	0599      	lsls	r1, r3, #22
 8003866:	d402      	bmi.n	800386e <_fflush_r+0x32>
 8003868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800386a:	f7ff fa46 	bl	8002cfa <__retarget_lock_acquire_recursive>
 800386e:	4628      	mov	r0, r5
 8003870:	4621      	mov	r1, r4
 8003872:	f7ff ff63 	bl	800373c <__sflush_r>
 8003876:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003878:	4605      	mov	r5, r0
 800387a:	07da      	lsls	r2, r3, #31
 800387c:	d4e4      	bmi.n	8003848 <_fflush_r+0xc>
 800387e:	89a3      	ldrh	r3, [r4, #12]
 8003880:	059b      	lsls	r3, r3, #22
 8003882:	d4e1      	bmi.n	8003848 <_fflush_r+0xc>
 8003884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003886:	f7ff fa39 	bl	8002cfc <__retarget_lock_release_recursive>
 800388a:	e7dd      	b.n	8003848 <_fflush_r+0xc>

0800388c <__swhatbuf_r>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	460c      	mov	r4, r1
 8003890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003894:	4615      	mov	r5, r2
 8003896:	2900      	cmp	r1, #0
 8003898:	461e      	mov	r6, r3
 800389a:	b096      	sub	sp, #88	@ 0x58
 800389c:	da0c      	bge.n	80038b8 <__swhatbuf_r+0x2c>
 800389e:	89a3      	ldrh	r3, [r4, #12]
 80038a0:	2100      	movs	r1, #0
 80038a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038a6:	bf14      	ite	ne
 80038a8:	2340      	movne	r3, #64	@ 0x40
 80038aa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80038ae:	2000      	movs	r0, #0
 80038b0:	6031      	str	r1, [r6, #0]
 80038b2:	602b      	str	r3, [r5, #0]
 80038b4:	b016      	add	sp, #88	@ 0x58
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	466a      	mov	r2, sp
 80038ba:	f000 f863 	bl	8003984 <_fstat_r>
 80038be:	2800      	cmp	r0, #0
 80038c0:	dbed      	blt.n	800389e <__swhatbuf_r+0x12>
 80038c2:	9901      	ldr	r1, [sp, #4]
 80038c4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038c8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038cc:	4259      	negs	r1, r3
 80038ce:	4159      	adcs	r1, r3
 80038d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80038d4:	e7eb      	b.n	80038ae <__swhatbuf_r+0x22>

080038d6 <__smakebuf_r>:
 80038d6:	898b      	ldrh	r3, [r1, #12]
 80038d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038da:	079d      	lsls	r5, r3, #30
 80038dc:	4606      	mov	r6, r0
 80038de:	460c      	mov	r4, r1
 80038e0:	d507      	bpl.n	80038f2 <__smakebuf_r+0x1c>
 80038e2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80038e6:	6023      	str	r3, [r4, #0]
 80038e8:	6123      	str	r3, [r4, #16]
 80038ea:	2301      	movs	r3, #1
 80038ec:	6163      	str	r3, [r4, #20]
 80038ee:	b003      	add	sp, #12
 80038f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038f2:	466a      	mov	r2, sp
 80038f4:	ab01      	add	r3, sp, #4
 80038f6:	f7ff ffc9 	bl	800388c <__swhatbuf_r>
 80038fa:	9f00      	ldr	r7, [sp, #0]
 80038fc:	4605      	mov	r5, r0
 80038fe:	4639      	mov	r1, r7
 8003900:	4630      	mov	r0, r6
 8003902:	f7ff fa67 	bl	8002dd4 <_malloc_r>
 8003906:	b948      	cbnz	r0, 800391c <__smakebuf_r+0x46>
 8003908:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800390c:	059a      	lsls	r2, r3, #22
 800390e:	d4ee      	bmi.n	80038ee <__smakebuf_r+0x18>
 8003910:	f023 0303 	bic.w	r3, r3, #3
 8003914:	f043 0302 	orr.w	r3, r3, #2
 8003918:	81a3      	strh	r3, [r4, #12]
 800391a:	e7e2      	b.n	80038e2 <__smakebuf_r+0xc>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003926:	81a3      	strh	r3, [r4, #12]
 8003928:	9b01      	ldr	r3, [sp, #4]
 800392a:	6020      	str	r0, [r4, #0]
 800392c:	b15b      	cbz	r3, 8003946 <__smakebuf_r+0x70>
 800392e:	4630      	mov	r0, r6
 8003930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003934:	f000 f838 	bl	80039a8 <_isatty_r>
 8003938:	b128      	cbz	r0, 8003946 <__smakebuf_r+0x70>
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	f023 0303 	bic.w	r3, r3, #3
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	81a3      	strh	r3, [r4, #12]
 8003946:	89a3      	ldrh	r3, [r4, #12]
 8003948:	431d      	orrs	r5, r3
 800394a:	81a5      	strh	r5, [r4, #12]
 800394c:	e7cf      	b.n	80038ee <__smakebuf_r+0x18>

0800394e <memmove>:
 800394e:	4288      	cmp	r0, r1
 8003950:	b510      	push	{r4, lr}
 8003952:	eb01 0402 	add.w	r4, r1, r2
 8003956:	d902      	bls.n	800395e <memmove+0x10>
 8003958:	4284      	cmp	r4, r0
 800395a:	4623      	mov	r3, r4
 800395c:	d807      	bhi.n	800396e <memmove+0x20>
 800395e:	1e43      	subs	r3, r0, #1
 8003960:	42a1      	cmp	r1, r4
 8003962:	d008      	beq.n	8003976 <memmove+0x28>
 8003964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003968:	f803 2f01 	strb.w	r2, [r3, #1]!
 800396c:	e7f8      	b.n	8003960 <memmove+0x12>
 800396e:	4601      	mov	r1, r0
 8003970:	4402      	add	r2, r0
 8003972:	428a      	cmp	r2, r1
 8003974:	d100      	bne.n	8003978 <memmove+0x2a>
 8003976:	bd10      	pop	{r4, pc}
 8003978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800397c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003980:	e7f7      	b.n	8003972 <memmove+0x24>
	...

08003984 <_fstat_r>:
 8003984:	b538      	push	{r3, r4, r5, lr}
 8003986:	2300      	movs	r3, #0
 8003988:	4d06      	ldr	r5, [pc, #24]	@ (80039a4 <_fstat_r+0x20>)
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	602b      	str	r3, [r5, #0]
 8003992:	f7fd f9af 	bl	8000cf4 <_fstat>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	d102      	bne.n	80039a0 <_fstat_r+0x1c>
 800399a:	682b      	ldr	r3, [r5, #0]
 800399c:	b103      	cbz	r3, 80039a0 <_fstat_r+0x1c>
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	bd38      	pop	{r3, r4, r5, pc}
 80039a2:	bf00      	nop
 80039a4:	20000374 	.word	0x20000374

080039a8 <_isatty_r>:
 80039a8:	b538      	push	{r3, r4, r5, lr}
 80039aa:	2300      	movs	r3, #0
 80039ac:	4d05      	ldr	r5, [pc, #20]	@ (80039c4 <_isatty_r+0x1c>)
 80039ae:	4604      	mov	r4, r0
 80039b0:	4608      	mov	r0, r1
 80039b2:	602b      	str	r3, [r5, #0]
 80039b4:	f7fd f9ad 	bl	8000d12 <_isatty>
 80039b8:	1c43      	adds	r3, r0, #1
 80039ba:	d102      	bne.n	80039c2 <_isatty_r+0x1a>
 80039bc:	682b      	ldr	r3, [r5, #0]
 80039be:	b103      	cbz	r3, 80039c2 <_isatty_r+0x1a>
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	bd38      	pop	{r3, r4, r5, pc}
 80039c4:	20000374 	.word	0x20000374

080039c8 <_sbrk_r>:
 80039c8:	b538      	push	{r3, r4, r5, lr}
 80039ca:	2300      	movs	r3, #0
 80039cc:	4d05      	ldr	r5, [pc, #20]	@ (80039e4 <_sbrk_r+0x1c>)
 80039ce:	4604      	mov	r4, r0
 80039d0:	4608      	mov	r0, r1
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	f7fd f9b4 	bl	8000d40 <_sbrk>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d102      	bne.n	80039e2 <_sbrk_r+0x1a>
 80039dc:	682b      	ldr	r3, [r5, #0]
 80039de:	b103      	cbz	r3, 80039e2 <_sbrk_r+0x1a>
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	bd38      	pop	{r3, r4, r5, pc}
 80039e4:	20000374 	.word	0x20000374

080039e8 <memchr>:
 80039e8:	4603      	mov	r3, r0
 80039ea:	b510      	push	{r4, lr}
 80039ec:	b2c9      	uxtb	r1, r1
 80039ee:	4402      	add	r2, r0
 80039f0:	4293      	cmp	r3, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	d101      	bne.n	80039fa <memchr+0x12>
 80039f6:	2000      	movs	r0, #0
 80039f8:	e003      	b.n	8003a02 <memchr+0x1a>
 80039fa:	7804      	ldrb	r4, [r0, #0]
 80039fc:	3301      	adds	r3, #1
 80039fe:	428c      	cmp	r4, r1
 8003a00:	d1f6      	bne.n	80039f0 <memchr+0x8>
 8003a02:	bd10      	pop	{r4, pc}

08003a04 <memcpy>:
 8003a04:	440a      	add	r2, r1
 8003a06:	4291      	cmp	r1, r2
 8003a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a0c:	d100      	bne.n	8003a10 <memcpy+0xc>
 8003a0e:	4770      	bx	lr
 8003a10:	b510      	push	{r4, lr}
 8003a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a16:	4291      	cmp	r1, r2
 8003a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a1c:	d1f9      	bne.n	8003a12 <memcpy+0xe>
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <_realloc_r>:
 8003a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a24:	4607      	mov	r7, r0
 8003a26:	4614      	mov	r4, r2
 8003a28:	460d      	mov	r5, r1
 8003a2a:	b921      	cbnz	r1, 8003a36 <_realloc_r+0x16>
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a32:	f7ff b9cf 	b.w	8002dd4 <_malloc_r>
 8003a36:	b92a      	cbnz	r2, 8003a44 <_realloc_r+0x24>
 8003a38:	f7ff f962 	bl	8002d00 <_free_r>
 8003a3c:	4625      	mov	r5, r4
 8003a3e:	4628      	mov	r0, r5
 8003a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a44:	f000 f81a 	bl	8003a7c <_malloc_usable_size_r>
 8003a48:	4284      	cmp	r4, r0
 8003a4a:	4606      	mov	r6, r0
 8003a4c:	d802      	bhi.n	8003a54 <_realloc_r+0x34>
 8003a4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003a52:	d8f4      	bhi.n	8003a3e <_realloc_r+0x1e>
 8003a54:	4621      	mov	r1, r4
 8003a56:	4638      	mov	r0, r7
 8003a58:	f7ff f9bc 	bl	8002dd4 <_malloc_r>
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	b908      	cbnz	r0, 8003a64 <_realloc_r+0x44>
 8003a60:	4645      	mov	r5, r8
 8003a62:	e7ec      	b.n	8003a3e <_realloc_r+0x1e>
 8003a64:	42b4      	cmp	r4, r6
 8003a66:	4622      	mov	r2, r4
 8003a68:	4629      	mov	r1, r5
 8003a6a:	bf28      	it	cs
 8003a6c:	4632      	movcs	r2, r6
 8003a6e:	f7ff ffc9 	bl	8003a04 <memcpy>
 8003a72:	4629      	mov	r1, r5
 8003a74:	4638      	mov	r0, r7
 8003a76:	f7ff f943 	bl	8002d00 <_free_r>
 8003a7a:	e7f1      	b.n	8003a60 <_realloc_r+0x40>

08003a7c <_malloc_usable_size_r>:
 8003a7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a80:	1f18      	subs	r0, r3, #4
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	bfbc      	itt	lt
 8003a86:	580b      	ldrlt	r3, [r1, r0]
 8003a88:	18c0      	addlt	r0, r0, r3
 8003a8a:	4770      	bx	lr

08003a8c <_init>:
 8003a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8e:	bf00      	nop
 8003a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a92:	bc08      	pop	{r3}
 8003a94:	469e      	mov	lr, r3
 8003a96:	4770      	bx	lr

08003a98 <_fini>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	bf00      	nop
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr
