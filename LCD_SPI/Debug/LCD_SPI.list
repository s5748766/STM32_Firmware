
LCD_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002488  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000354  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e8  080028e8  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080028e8  080028e8  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080028e8  080028e8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e8  080028e8  000038e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028ec  080028ec  000038ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080028f0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  080028fc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  080028fc  00004120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aca6  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000186f  00000000  00000000  0000ecdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00010550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000897  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017329  00000000  00000000  000118cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdc1  00000000  00000000  00028bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863ed  00000000  00000000  000359b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbda6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dac  00000000  00000000  000bbdec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000beb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800257c 	.word	0x0800257c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800257c 	.word	0x0800257c

0800014c <LCD_WriteCommand>:
void LCD_DrawString(uint8_t x, uint8_t y, const char* str, uint16_t color, uint16_t bg_color);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LCD_WriteCommand(uint8_t cmd) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 8000156:	2200      	movs	r2, #0
 8000158:	2140      	movs	r1, #64	@ 0x40
 800015a:	480c      	ldr	r0, [pc, #48]	@ (800018c <LCD_WriteCommand+0x40>)
 800015c:	f001 f8f4 	bl	8001348 <HAL_GPIO_WritePin>
    LCD_DC_LOW();
 8000160:	2200      	movs	r2, #0
 8000162:	2140      	movs	r1, #64	@ 0x40
 8000164:	480a      	ldr	r0, [pc, #40]	@ (8000190 <LCD_WriteCommand+0x44>)
 8000166:	f001 f8ef 	bl	8001348 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800016a:	1df9      	adds	r1, r7, #7
 800016c:	f04f 33ff 	mov.w	r3, #4294967295
 8000170:	2201      	movs	r2, #1
 8000172:	4808      	ldr	r0, [pc, #32]	@ (8000194 <LCD_WriteCommand+0x48>)
 8000174:	f001 fefa 	bl	8001f6c <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 8000178:	2201      	movs	r2, #1
 800017a:	2140      	movs	r1, #64	@ 0x40
 800017c:	4803      	ldr	r0, [pc, #12]	@ (800018c <LCD_WriteCommand+0x40>)
 800017e:	f001 f8e3 	bl	8001348 <HAL_GPIO_WritePin>
}
 8000182:	bf00      	nop
 8000184:	3708      	adds	r7, #8
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010c00 	.word	0x40010c00
 8000190:	40010800 	.word	0x40010800
 8000194:	2000007c 	.word	0x2000007c

08000198 <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	4603      	mov	r3, r0
 80001a0:	71fb      	strb	r3, [r7, #7]
    LCD_CS_LOW();
 80001a2:	2200      	movs	r2, #0
 80001a4:	2140      	movs	r1, #64	@ 0x40
 80001a6:	480c      	ldr	r0, [pc, #48]	@ (80001d8 <LCD_WriteData+0x40>)
 80001a8:	f001 f8ce 	bl	8001348 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 80001ac:	2201      	movs	r2, #1
 80001ae:	2140      	movs	r1, #64	@ 0x40
 80001b0:	480a      	ldr	r0, [pc, #40]	@ (80001dc <LCD_WriteData+0x44>)
 80001b2:	f001 f8c9 	bl	8001348 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80001b6:	1df9      	adds	r1, r7, #7
 80001b8:	f04f 33ff 	mov.w	r3, #4294967295
 80001bc:	2201      	movs	r2, #1
 80001be:	4808      	ldr	r0, [pc, #32]	@ (80001e0 <LCD_WriteData+0x48>)
 80001c0:	f001 fed4 	bl	8001f6c <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 80001c4:	2201      	movs	r2, #1
 80001c6:	2140      	movs	r1, #64	@ 0x40
 80001c8:	4803      	ldr	r0, [pc, #12]	@ (80001d8 <LCD_WriteData+0x40>)
 80001ca:	f001 f8bd 	bl	8001348 <HAL_GPIO_WritePin>
}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	40010c00 	.word	0x40010c00
 80001dc:	40010800 	.word	0x40010800
 80001e0:	2000007c 	.word	0x2000007c

080001e4 <LCD_WriteData16>:

void LCD_WriteData16(uint16_t data) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	80fb      	strh	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = (data >> 8) & 0xFF;
 80001ee:	88fb      	ldrh	r3, [r7, #6]
 80001f0:	0a1b      	lsrs	r3, r3, #8
 80001f2:	b29b      	uxth	r3, r3
 80001f4:	b2db      	uxtb	r3, r3
 80001f6:	733b      	strb	r3, [r7, #12]
    buffer[1] = data & 0xFF;
 80001f8:	88fb      	ldrh	r3, [r7, #6]
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	737b      	strb	r3, [r7, #13]

    LCD_CS_LOW();
 80001fe:	2200      	movs	r2, #0
 8000200:	2140      	movs	r1, #64	@ 0x40
 8000202:	480c      	ldr	r0, [pc, #48]	@ (8000234 <LCD_WriteData16+0x50>)
 8000204:	f001 f8a0 	bl	8001348 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 8000208:	2201      	movs	r2, #1
 800020a:	2140      	movs	r1, #64	@ 0x40
 800020c:	480a      	ldr	r0, [pc, #40]	@ (8000238 <LCD_WriteData16+0x54>)
 800020e:	f001 f89b 	bl	8001348 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 8000212:	f107 010c 	add.w	r1, r7, #12
 8000216:	f04f 33ff 	mov.w	r3, #4294967295
 800021a:	2202      	movs	r2, #2
 800021c:	4807      	ldr	r0, [pc, #28]	@ (800023c <LCD_WriteData16+0x58>)
 800021e:	f001 fea5 	bl	8001f6c <HAL_SPI_Transmit>
    LCD_CS_HIGH();
 8000222:	2201      	movs	r2, #1
 8000224:	2140      	movs	r1, #64	@ 0x40
 8000226:	4803      	ldr	r0, [pc, #12]	@ (8000234 <LCD_WriteData16+0x50>)
 8000228:	f001 f88e 	bl	8001348 <HAL_GPIO_WritePin>
}
 800022c:	bf00      	nop
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40010c00 	.word	0x40010c00
 8000238:	40010800 	.word	0x40010800
 800023c:	2000007c 	.word	0x2000007c

08000240 <LCD_Init>:

void LCD_Init(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
    // Hardware reset
    LCD_RES_LOW();
 8000244:	2200      	movs	r2, #0
 8000246:	2102      	movs	r1, #2
 8000248:	4890      	ldr	r0, [pc, #576]	@ (800048c <LCD_Init+0x24c>)
 800024a:	f001 f87d 	bl	8001348 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800024e:	2064      	movs	r0, #100	@ 0x64
 8000250:	f000 fdc4 	bl	8000ddc <HAL_Delay>
    LCD_RES_HIGH();
 8000254:	2201      	movs	r2, #1
 8000256:	2102      	movs	r1, #2
 8000258:	488c      	ldr	r0, [pc, #560]	@ (800048c <LCD_Init+0x24c>)
 800025a:	f001 f875 	bl	8001348 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800025e:	2064      	movs	r0, #100	@ 0x64
 8000260:	f000 fdbc 	bl	8000ddc <HAL_Delay>

    // Software reset
    LCD_WriteCommand(ST7735_SWRESET);
 8000264:	2001      	movs	r0, #1
 8000266:	f7ff ff71 	bl	800014c <LCD_WriteCommand>
    HAL_Delay(150);
 800026a:	2096      	movs	r0, #150	@ 0x96
 800026c:	f000 fdb6 	bl	8000ddc <HAL_Delay>

    // Out of sleep mode
    LCD_WriteCommand(ST7735_SLPOUT);
 8000270:	2011      	movs	r0, #17
 8000272:	f7ff ff6b 	bl	800014c <LCD_WriteCommand>
    HAL_Delay(500);
 8000276:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800027a:	f000 fdaf 	bl	8000ddc <HAL_Delay>

    // Frame rate control - normal mode
    LCD_WriteCommand(ST7735_FRMCTR1);
 800027e:	20b1      	movs	r0, #177	@ 0xb1
 8000280:	f7ff ff64 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x01);
 8000284:	2001      	movs	r0, #1
 8000286:	f7ff ff87 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2C);
 800028a:	202c      	movs	r0, #44	@ 0x2c
 800028c:	f7ff ff84 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2D);
 8000290:	202d      	movs	r0, #45	@ 0x2d
 8000292:	f7ff ff81 	bl	8000198 <LCD_WriteData>

    // Frame rate control - idle mode
    LCD_WriteCommand(ST7735_FRMCTR2);
 8000296:	20b2      	movs	r0, #178	@ 0xb2
 8000298:	f7ff ff58 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x01);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ff7b 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2C);
 80002a2:	202c      	movs	r0, #44	@ 0x2c
 80002a4:	f7ff ff78 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2D);
 80002a8:	202d      	movs	r0, #45	@ 0x2d
 80002aa:	f7ff ff75 	bl	8000198 <LCD_WriteData>

    // Frame rate control - partial mode
    LCD_WriteCommand(ST7735_FRMCTR3);
 80002ae:	20b3      	movs	r0, #179	@ 0xb3
 80002b0:	f7ff ff4c 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x01);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f7ff ff6f 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2C);
 80002ba:	202c      	movs	r0, #44	@ 0x2c
 80002bc:	f7ff ff6c 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2D);
 80002c0:	202d      	movs	r0, #45	@ 0x2d
 80002c2:	f7ff ff69 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x01);
 80002c6:	2001      	movs	r0, #1
 80002c8:	f7ff ff66 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2C);
 80002cc:	202c      	movs	r0, #44	@ 0x2c
 80002ce:	f7ff ff63 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2D);
 80002d2:	202d      	movs	r0, #45	@ 0x2d
 80002d4:	f7ff ff60 	bl	8000198 <LCD_WriteData>

    // Display inversion control
    LCD_WriteCommand(ST7735_INVCTR);
 80002d8:	20b4      	movs	r0, #180	@ 0xb4
 80002da:	f7ff ff37 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x07);
 80002de:	2007      	movs	r0, #7
 80002e0:	f7ff ff5a 	bl	8000198 <LCD_WriteData>

    // Power control
    LCD_WriteCommand(ST7735_PWCTR1);
 80002e4:	20c0      	movs	r0, #192	@ 0xc0
 80002e6:	f7ff ff31 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0xA2);
 80002ea:	20a2      	movs	r0, #162	@ 0xa2
 80002ec:	f7ff ff54 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x02);
 80002f0:	2002      	movs	r0, #2
 80002f2:	f7ff ff51 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x84);
 80002f6:	2084      	movs	r0, #132	@ 0x84
 80002f8:	f7ff ff4e 	bl	8000198 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR2);
 80002fc:	20c1      	movs	r0, #193	@ 0xc1
 80002fe:	f7ff ff25 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0xC5);
 8000302:	20c5      	movs	r0, #197	@ 0xc5
 8000304:	f7ff ff48 	bl	8000198 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR3);
 8000308:	20c2      	movs	r0, #194	@ 0xc2
 800030a:	f7ff ff1f 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x0A);
 800030e:	200a      	movs	r0, #10
 8000310:	f7ff ff42 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000314:	2000      	movs	r0, #0
 8000316:	f7ff ff3f 	bl	8000198 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR4);
 800031a:	20c3      	movs	r0, #195	@ 0xc3
 800031c:	f7ff ff16 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x8A);
 8000320:	208a      	movs	r0, #138	@ 0x8a
 8000322:	f7ff ff39 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2A);
 8000326:	202a      	movs	r0, #42	@ 0x2a
 8000328:	f7ff ff36 	bl	8000198 <LCD_WriteData>

    LCD_WriteCommand(ST7735_PWCTR5);
 800032c:	20c4      	movs	r0, #196	@ 0xc4
 800032e:	f7ff ff0d 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x8A);
 8000332:	208a      	movs	r0, #138	@ 0x8a
 8000334:	f7ff ff30 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0xEE);
 8000338:	20ee      	movs	r0, #238	@ 0xee
 800033a:	f7ff ff2d 	bl	8000198 <LCD_WriteData>

    // VCOM control
    LCD_WriteCommand(ST7735_VMCTR1);
 800033e:	20c5      	movs	r0, #197	@ 0xc5
 8000340:	f7ff ff04 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x0E);
 8000344:	200e      	movs	r0, #14
 8000346:	f7ff ff27 	bl	8000198 <LCD_WriteData>

    // Display inversion off
    LCD_WriteCommand(ST7735_INVOFF);
 800034a:	2020      	movs	r0, #32
 800034c:	f7ff fefe 	bl	800014c <LCD_WriteCommand>

    // Memory access control (rotation)
    LCD_WriteCommand(ST7735_MADCTL);
 8000350:	2036      	movs	r0, #54	@ 0x36
 8000352:	f7ff fefb 	bl	800014c <LCD_WriteCommand>
    // 1. 기본 90도 회전 (추천)
    //LCD_WriteData(0x20); // MY=0, MX=0, MV=1
    // 2. 현재 사용중
    //LCD_WriteData(0xE0); // MY=1, MX=1, MV=1
    // 3. 90도 + X축만 미러링
    LCD_WriteData(0x60); // MY=0, MX=1, MV=1
 8000356:	2060      	movs	r0, #96	@ 0x60
 8000358:	f7ff ff1e 	bl	8000198 <LCD_WriteData>
    // 4. 90도 + Y축만 미러링
    //LCD_WriteData(0xA0); // MY=1, MX=0, MV=1

    // Color mode: 16-bit color
    LCD_WriteCommand(ST7735_COLMOD);
 800035c:	203a      	movs	r0, #58	@ 0x3a
 800035e:	f7ff fef5 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x05);
 8000362:	2005      	movs	r0, #5
 8000364:	f7ff ff18 	bl	8000198 <LCD_WriteData>

    // Column address set
    LCD_WriteCommand(ST7735_CASET);
 8000368:	202a      	movs	r0, #42	@ 0x2a
 800036a:	f7ff feef 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x00);
 800036e:	2000      	movs	r0, #0
 8000370:	f7ff ff12 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000374:	2000      	movs	r0, #0
 8000376:	f7ff ff0f 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 800037a:	2000      	movs	r0, #0
 800037c:	f7ff ff0c 	bl	8000198 <LCD_WriteData>
    //LCD_WriteData(0x4F); // 79
    LCD_WriteData(0x9F); // 159
 8000380:	209f      	movs	r0, #159	@ 0x9f
 8000382:	f7ff ff09 	bl	8000198 <LCD_WriteData>


    // Row address set
    LCD_WriteCommand(ST7735_RASET);
 8000386:	202b      	movs	r0, #43	@ 0x2b
 8000388:	f7ff fee0 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x00);
 800038c:	2000      	movs	r0, #0
 800038e:	f7ff ff03 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ff00 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000398:	2000      	movs	r0, #0
 800039a:	f7ff fefd 	bl	8000198 <LCD_WriteData>
    //LCD_WriteData(0x9F); // 159
    // Row address set (80픽셀)
	LCD_WriteData(0x4F); // 79
 800039e:	204f      	movs	r0, #79	@ 0x4f
 80003a0:	f7ff fefa 	bl	8000198 <LCD_WriteData>

    // Gamma correction
    LCD_WriteCommand(ST7735_GMCTRP1);
 80003a4:	20e0      	movs	r0, #224	@ 0xe0
 80003a6:	f7ff fed1 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x0f);
 80003aa:	200f      	movs	r0, #15
 80003ac:	f7ff fef4 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x1a);
 80003b0:	201a      	movs	r0, #26
 80003b2:	f7ff fef1 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x0f);
 80003b6:	200f      	movs	r0, #15
 80003b8:	f7ff feee 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x18);
 80003bc:	2018      	movs	r0, #24
 80003be:	f7ff feeb 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2f);
 80003c2:	202f      	movs	r0, #47	@ 0x2f
 80003c4:	f7ff fee8 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x28);
 80003c8:	2028      	movs	r0, #40	@ 0x28
 80003ca:	f7ff fee5 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x20);
 80003ce:	2020      	movs	r0, #32
 80003d0:	f7ff fee2 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x22);
 80003d4:	2022      	movs	r0, #34	@ 0x22
 80003d6:	f7ff fedf 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x1f);
 80003da:	201f      	movs	r0, #31
 80003dc:	f7ff fedc 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x1b);
 80003e0:	201b      	movs	r0, #27
 80003e2:	f7ff fed9 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x23);
 80003e6:	2023      	movs	r0, #35	@ 0x23
 80003e8:	f7ff fed6 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x37);
 80003ec:	2037      	movs	r0, #55	@ 0x37
 80003ee:	f7ff fed3 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 80003f2:	2000      	movs	r0, #0
 80003f4:	f7ff fed0 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x07);
 80003f8:	2007      	movs	r0, #7
 80003fa:	f7ff fecd 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x02);
 80003fe:	2002      	movs	r0, #2
 8000400:	f7ff feca 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x10);
 8000404:	2010      	movs	r0, #16
 8000406:	f7ff fec7 	bl	8000198 <LCD_WriteData>

    LCD_WriteCommand(ST7735_GMCTRN1);
 800040a:	20e1      	movs	r0, #225	@ 0xe1
 800040c:	f7ff fe9e 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x0f);
 8000410:	200f      	movs	r0, #15
 8000412:	f7ff fec1 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x1b);
 8000416:	201b      	movs	r0, #27
 8000418:	f7ff febe 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x0f);
 800041c:	200f      	movs	r0, #15
 800041e:	f7ff febb 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x17);
 8000422:	2017      	movs	r0, #23
 8000424:	f7ff feb8 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x33);
 8000428:	2033      	movs	r0, #51	@ 0x33
 800042a:	f7ff feb5 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2c);
 800042e:	202c      	movs	r0, #44	@ 0x2c
 8000430:	f7ff feb2 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x29);
 8000434:	2029      	movs	r0, #41	@ 0x29
 8000436:	f7ff feaf 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x2e);
 800043a:	202e      	movs	r0, #46	@ 0x2e
 800043c:	f7ff feac 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x30);
 8000440:	2030      	movs	r0, #48	@ 0x30
 8000442:	f7ff fea9 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x30);
 8000446:	2030      	movs	r0, #48	@ 0x30
 8000448:	f7ff fea6 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x39);
 800044c:	2039      	movs	r0, #57	@ 0x39
 800044e:	f7ff fea3 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x3f);
 8000452:	203f      	movs	r0, #63	@ 0x3f
 8000454:	f7ff fea0 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff fe9d 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x07);
 800045e:	2007      	movs	r0, #7
 8000460:	f7ff fe9a 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x03);
 8000464:	2003      	movs	r0, #3
 8000466:	f7ff fe97 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x10);
 800046a:	2010      	movs	r0, #16
 800046c:	f7ff fe94 	bl	8000198 <LCD_WriteData>

    // Normal display on
    LCD_WriteCommand(ST7735_NORON);
 8000470:	2013      	movs	r0, #19
 8000472:	f7ff fe6b 	bl	800014c <LCD_WriteCommand>
    HAL_Delay(10);
 8000476:	200a      	movs	r0, #10
 8000478:	f000 fcb0 	bl	8000ddc <HAL_Delay>

    // Main screen turn on
    LCD_WriteCommand(ST7735_DISPON);
 800047c:	2029      	movs	r0, #41	@ 0x29
 800047e:	f7ff fe65 	bl	800014c <LCD_WriteCommand>
    HAL_Delay(100);
 8000482:	2064      	movs	r0, #100	@ 0x64
 8000484:	f000 fcaa 	bl	8000ddc <HAL_Delay>
}
 8000488:	bf00      	nop
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010800 	.word	0x40010800

08000490 <LCD_SetWindow>:

void LCD_SetWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	4604      	mov	r4, r0
 8000498:	4608      	mov	r0, r1
 800049a:	4611      	mov	r1, r2
 800049c:	461a      	mov	r2, r3
 800049e:	4623      	mov	r3, r4
 80004a0:	71fb      	strb	r3, [r7, #7]
 80004a2:	4603      	mov	r3, r0
 80004a4:	71bb      	strb	r3, [r7, #6]
 80004a6:	460b      	mov	r3, r1
 80004a8:	717b      	strb	r3, [r7, #5]
 80004aa:	4613      	mov	r3, r2
 80004ac:	713b      	strb	r3, [r7, #4]
    // 0.96" ST7735S LCD 오프셋 적용
    uint8_t x_offset = 0;  // X축 오프셋
 80004ae:	2300      	movs	r3, #0
 80004b0:	73fb      	strb	r3, [r7, #15]
    uint8_t y_offset = 0;   // Y축 오프셋
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]

    // Column address set (X축)
    LCD_WriteCommand(ST7735_CASET);
 80004b6:	202a      	movs	r0, #42	@ 0x2a
 80004b8:	f7ff fe48 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x00);
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff fe6b 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(x0 + x_offset);
 80004c2:	79fa      	ldrb	r2, [r7, #7]
 80004c4:	7bfb      	ldrb	r3, [r7, #15]
 80004c6:	4413      	add	r3, r2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fe64 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff fe61 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(x1 + x_offset);
 80004d6:	797a      	ldrb	r2, [r7, #5]
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	4413      	add	r3, r2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	f7ff fe5a 	bl	8000198 <LCD_WriteData>

    // Row address set (Y축)
    LCD_WriteCommand(ST7735_RASET);
 80004e4:	202b      	movs	r0, #43	@ 0x2b
 80004e6:	f7ff fe31 	bl	800014c <LCD_WriteCommand>
    LCD_WriteData(0x00);
 80004ea:	2000      	movs	r0, #0
 80004ec:	f7ff fe54 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(y0 + y_offset);
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	7bbb      	ldrb	r3, [r7, #14]
 80004f4:	4413      	add	r3, r2
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff fe4d 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(0x00);
 80004fe:	2000      	movs	r0, #0
 8000500:	f7ff fe4a 	bl	8000198 <LCD_WriteData>
    LCD_WriteData(y1 + y_offset);
 8000504:	793a      	ldrb	r2, [r7, #4]
 8000506:	7bbb      	ldrb	r3, [r7, #14]
 8000508:	4413      	add	r3, r2
 800050a:	b2db      	uxtb	r3, r3
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff fe43 	bl	8000198 <LCD_WriteData>

    // Write to RAM
    LCD_WriteCommand(ST7735_RAMWR);
 8000512:	202c      	movs	r0, #44	@ 0x2c
 8000514:	f7ff fe1a 	bl	800014c <LCD_WriteCommand>
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bd90      	pop	{r4, r7, pc}

08000520 <LCD_DrawPixel>:

void LCD_DrawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	460b      	mov	r3, r1
 800052c:	71bb      	strb	r3, [r7, #6]
 800052e:	4613      	mov	r3, r2
 8000530:	80bb      	strh	r3, [r7, #4]
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) return;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	2b9f      	cmp	r3, #159	@ 0x9f
 8000536:	d80d      	bhi.n	8000554 <LCD_DrawPixel+0x34>
 8000538:	79bb      	ldrb	r3, [r7, #6]
 800053a:	2b77      	cmp	r3, #119	@ 0x77
 800053c:	d80a      	bhi.n	8000554 <LCD_DrawPixel+0x34>

    LCD_SetWindow(x, y, x, y);
 800053e:	79bb      	ldrb	r3, [r7, #6]
 8000540:	79fa      	ldrb	r2, [r7, #7]
 8000542:	79b9      	ldrb	r1, [r7, #6]
 8000544:	79f8      	ldrb	r0, [r7, #7]
 8000546:	f7ff ffa3 	bl	8000490 <LCD_SetWindow>
    LCD_WriteData16(color);
 800054a:	88bb      	ldrh	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff fe49 	bl	80001e4 <LCD_WriteData16>
 8000552:	e000      	b.n	8000556 <LCD_DrawPixel+0x36>
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) return;
 8000554:	bf00      	nop
}
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <LCD_Fill>:

void LCD_Fill(uint16_t color) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
    LCD_SetWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8000566:	2377      	movs	r3, #119	@ 0x77
 8000568:	229f      	movs	r2, #159	@ 0x9f
 800056a:	2100      	movs	r1, #0
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff ff8f 	bl	8000490 <LCD_SetWindow>

    LCD_CS_LOW();
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	@ 0x40
 8000576:	4815      	ldr	r0, [pc, #84]	@ (80005cc <LCD_Fill+0x70>)
 8000578:	f000 fee6 	bl	8001348 <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	@ 0x40
 8000580:	4813      	ldr	r0, [pc, #76]	@ (80005d0 <LCD_Fill+0x74>)
 8000582:	f000 fee1 	bl	8001348 <HAL_GPIO_WritePin>

    for(uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 8000586:	2300      	movs	r3, #0
 8000588:	81fb      	strh	r3, [r7, #14]
 800058a:	e012      	b.n	80005b2 <LCD_Fill+0x56>
        uint8_t buffer[2];
        buffer[0] = (color >> 8) & 0xFF;
 800058c:	88fb      	ldrh	r3, [r7, #6]
 800058e:	0a1b      	lsrs	r3, r3, #8
 8000590:	b29b      	uxth	r3, r3
 8000592:	b2db      	uxtb	r3, r3
 8000594:	733b      	strb	r3, [r7, #12]
        buffer[1] = color & 0xFF;
 8000596:	88fb      	ldrh	r3, [r7, #6]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	737b      	strb	r3, [r7, #13]
        HAL_SPI_Transmit(&hspi1, buffer, 2, HAL_MAX_DELAY);
 800059c:	f107 010c 	add.w	r1, r7, #12
 80005a0:	f04f 33ff 	mov.w	r3, #4294967295
 80005a4:	2202      	movs	r2, #2
 80005a6:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <LCD_Fill+0x78>)
 80005a8:	f001 fce0 	bl	8001f6c <HAL_SPI_Transmit>
    for(uint16_t i = 0; i < LCD_WIDTH * LCD_HEIGHT; i++) {
 80005ac:	89fb      	ldrh	r3, [r7, #14]
 80005ae:	3301      	adds	r3, #1
 80005b0:	81fb      	strh	r3, [r7, #14]
 80005b2:	89fb      	ldrh	r3, [r7, #14]
 80005b4:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80005b8:	d3e8      	bcc.n	800058c <LCD_Fill+0x30>
    }

    LCD_CS_HIGH();
 80005ba:	2201      	movs	r2, #1
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	4803      	ldr	r0, [pc, #12]	@ (80005cc <LCD_Fill+0x70>)
 80005c0:	f000 fec2 	bl	8001348 <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	3710      	adds	r7, #16
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	40010800 	.word	0x40010800
 80005d4:	2000007c 	.word	0x2000007c

080005d8 <LCD_DrawChar>:

void LCD_DrawChar(uint8_t x, uint8_t y, char ch, uint16_t color, uint16_t bg_color) {
 80005d8:	b590      	push	{r4, r7, lr}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4604      	mov	r4, r0
 80005e0:	4608      	mov	r0, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	461a      	mov	r2, r3
 80005e6:	4623      	mov	r3, r4
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	4603      	mov	r3, r0
 80005ec:	71bb      	strb	r3, [r7, #6]
 80005ee:	460b      	mov	r3, r1
 80005f0:	717b      	strb	r3, [r7, #5]
 80005f2:	4613      	mov	r3, r2
 80005f4:	807b      	strh	r3, [r7, #2]
    if(ch < 32 || ch > 126) ch = 32; // Replace invalid chars with space
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	2b1f      	cmp	r3, #31
 80005fa:	d902      	bls.n	8000602 <LCD_DrawChar+0x2a>
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8000600:	d901      	bls.n	8000606 <LCD_DrawChar+0x2e>
 8000602:	2320      	movs	r3, #32
 8000604:	717b      	strb	r3, [r7, #5]

    const uint8_t* font_char = font8x8[ch - 32];
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	3b20      	subs	r3, #32
 800060a:	00db      	lsls	r3, r3, #3
 800060c:	4a1f      	ldr	r2, [pc, #124]	@ (800068c <LCD_DrawChar+0xb4>)
 800060e:	4413      	add	r3, r2
 8000610:	613b      	str	r3, [r7, #16]

    for(uint8_t i = 0; i < 8; i++) {
 8000612:	2300      	movs	r3, #0
 8000614:	75fb      	strb	r3, [r7, #23]
 8000616:	e031      	b.n	800067c <LCD_DrawChar+0xa4>
        uint8_t line = font_char[i];
 8000618:	7dfb      	ldrb	r3, [r7, #23]
 800061a:	693a      	ldr	r2, [r7, #16]
 800061c:	4413      	add	r3, r2
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	73fb      	strb	r3, [r7, #15]
        for(uint8_t j = 0; j < 8; j++) {
 8000622:	2300      	movs	r3, #0
 8000624:	75bb      	strb	r3, [r7, #22]
 8000626:	e023      	b.n	8000670 <LCD_DrawChar+0x98>
            //if(line & (0x80 >> j)) {
        	if(line & (0x01 << j)) { // LSB부터 읽기
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	7dbb      	ldrb	r3, [r7, #22]
 800062c:	fa42 f303 	asr.w	r3, r2, r3
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00c      	beq.n	8000652 <LCD_DrawChar+0x7a>
                LCD_DrawPixel(x + j, y + i, color);
 8000638:	79fa      	ldrb	r2, [r7, #7]
 800063a:	7dbb      	ldrb	r3, [r7, #22]
 800063c:	4413      	add	r3, r2
 800063e:	b2d8      	uxtb	r0, r3
 8000640:	79ba      	ldrb	r2, [r7, #6]
 8000642:	7dfb      	ldrb	r3, [r7, #23]
 8000644:	4413      	add	r3, r2
 8000646:	b2db      	uxtb	r3, r3
 8000648:	887a      	ldrh	r2, [r7, #2]
 800064a:	4619      	mov	r1, r3
 800064c:	f7ff ff68 	bl	8000520 <LCD_DrawPixel>
 8000650:	e00b      	b.n	800066a <LCD_DrawChar+0x92>
            } else {
                LCD_DrawPixel(x + j, y + i, bg_color);
 8000652:	79fa      	ldrb	r2, [r7, #7]
 8000654:	7dbb      	ldrb	r3, [r7, #22]
 8000656:	4413      	add	r3, r2
 8000658:	b2d8      	uxtb	r0, r3
 800065a:	79ba      	ldrb	r2, [r7, #6]
 800065c:	7dfb      	ldrb	r3, [r7, #23]
 800065e:	4413      	add	r3, r2
 8000660:	b2db      	uxtb	r3, r3
 8000662:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000664:	4619      	mov	r1, r3
 8000666:	f7ff ff5b 	bl	8000520 <LCD_DrawPixel>
        for(uint8_t j = 0; j < 8; j++) {
 800066a:	7dbb      	ldrb	r3, [r7, #22]
 800066c:	3301      	adds	r3, #1
 800066e:	75bb      	strb	r3, [r7, #22]
 8000670:	7dbb      	ldrb	r3, [r7, #22]
 8000672:	2b07      	cmp	r3, #7
 8000674:	d9d8      	bls.n	8000628 <LCD_DrawChar+0x50>
    for(uint8_t i = 0; i < 8; i++) {
 8000676:	7dfb      	ldrb	r3, [r7, #23]
 8000678:	3301      	adds	r3, #1
 800067a:	75fb      	strb	r3, [r7, #23]
 800067c:	7dfb      	ldrb	r3, [r7, #23]
 800067e:	2b07      	cmp	r3, #7
 8000680:	d9ca      	bls.n	8000618 <LCD_DrawChar+0x40>
            }
        }
    }
}
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	371c      	adds	r7, #28
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	080025c4 	.word	0x080025c4

08000690 <LCD_DrawString>:

void LCD_DrawString(uint8_t x, uint8_t y, const char* str, uint16_t color, uint16_t bg_color) {
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af02      	add	r7, sp, #8
 8000696:	603a      	str	r2, [r7, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
 800069e:	460b      	mov	r3, r1
 80006a0:	71bb      	strb	r3, [r7, #6]
 80006a2:	4613      	mov	r3, r2
 80006a4:	80bb      	strh	r3, [r7, #4]
    uint8_t orig_x = x;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	73fb      	strb	r3, [r7, #15]

    while(*str) {
 80006aa:	e02b      	b.n	8000704 <LCD_DrawString+0x74>
        if(*str == '\n') {
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b0a      	cmp	r3, #10
 80006b2:	d105      	bne.n	80006c0 <LCD_DrawString+0x30>
            y += 8;
 80006b4:	79bb      	ldrb	r3, [r7, #6]
 80006b6:	3308      	adds	r3, #8
 80006b8:	71bb      	strb	r3, [r7, #6]
            x = orig_x;
 80006ba:	7bfb      	ldrb	r3, [r7, #15]
 80006bc:	71fb      	strb	r3, [r7, #7]
 80006be:	e01e      	b.n	80006fe <LCD_DrawString+0x6e>
        } else if(*str == '\r') {
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b0d      	cmp	r3, #13
 80006c6:	d102      	bne.n	80006ce <LCD_DrawString+0x3e>
            x = orig_x;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	e017      	b.n	80006fe <LCD_DrawString+0x6e>
        } else {
            if(x + 8 > LCD_WIDTH) {
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b98      	cmp	r3, #152	@ 0x98
 80006d2:	d904      	bls.n	80006de <LCD_DrawString+0x4e>
                x = orig_x;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	71fb      	strb	r3, [r7, #7]
                y += 8;
 80006d8:	79bb      	ldrb	r3, [r7, #6]
 80006da:	3308      	adds	r3, #8
 80006dc:	71bb      	strb	r3, [r7, #6]
            }
            if(y + 8 > LCD_HEIGHT) {
 80006de:	79bb      	ldrb	r3, [r7, #6]
 80006e0:	2b70      	cmp	r3, #112	@ 0x70
 80006e2:	d814      	bhi.n	800070e <LCD_DrawString+0x7e>
                break;
            }

            LCD_DrawChar(x, y, *str, color, bg_color);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	781a      	ldrb	r2, [r3, #0]
 80006e8:	88bc      	ldrh	r4, [r7, #4]
 80006ea:	79b9      	ldrb	r1, [r7, #6]
 80006ec:	79f8      	ldrb	r0, [r7, #7]
 80006ee:	8c3b      	ldrh	r3, [r7, #32]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	4623      	mov	r3, r4
 80006f4:	f7ff ff70 	bl	80005d8 <LCD_DrawChar>
            x += 8;
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	3308      	adds	r3, #8
 80006fc:	71fb      	strb	r3, [r7, #7]
        }
        str++;
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000704:	683b      	ldr	r3, [r7, #0]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1cf      	bne.n	80006ac <LCD_DrawString+0x1c>
    }
}
 800070c:	e000      	b.n	8000710 <LCD_DrawString+0x80>
                break;
 800070e:	bf00      	nop
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fafb 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f83f 	bl	80007a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f90f 	bl	8000948 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072a:	f000 f8e3 	bl	80008f4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800072e:	f000 f87b 	bl	8000828 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000732:	f000 f8a7 	bl	8000884 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize LCD
    LCD_Init();
 8000736:	f7ff fd83 	bl	8000240 <LCD_Init>

    // Clear screen with black background
    LCD_Fill(BLACK);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff ff0e 	bl	800055c <LCD_Fill>

    LCD_DrawString(10, 30, "Hello World!", WHITE, BLACK);
 8000740:	2300      	movs	r3, #0
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000748:	4a12      	ldr	r2, [pc, #72]	@ (8000794 <main+0x7c>)
 800074a:	211e      	movs	r1, #30
 800074c:	200a      	movs	r0, #10
 800074e:	f7ff ff9f 	bl	8000690 <LCD_DrawString>
    LCD_DrawString(10, 45, "STM32F103", GREEN, BLACK);
 8000752:	2300      	movs	r3, #0
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800075a:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <main+0x80>)
 800075c:	212d      	movs	r1, #45	@ 0x2d
 800075e:	200a      	movs	r0, #10
 8000760:	f7ff ff96 	bl	8000690 <LCD_DrawString>
    LCD_DrawString(10, 60, "ST7735S LCD", CYAN, BLACK);
 8000764:	2300      	movs	r3, #0
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800076c:	4a0b      	ldr	r2, [pc, #44]	@ (800079c <main+0x84>)
 800076e:	213c      	movs	r1, #60	@ 0x3c
 8000770:	200a      	movs	r0, #10
 8000772:	f7ff ff8d 	bl	8000690 <LCD_DrawString>
    LCD_DrawString(10, 75, "160x80", YELLOW, BLACK);
 8000776:	2300      	movs	r3, #0
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <main+0x88>)
 8000780:	214b      	movs	r1, #75	@ 0x4b
 8000782:	200a      	movs	r0, #10
 8000784:	f7ff ff84 	bl	8000690 <LCD_DrawString>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8000788:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800078c:	f000 fb26 	bl	8000ddc <HAL_Delay>
 8000790:	e7fa      	b.n	8000788 <main+0x70>
 8000792:	bf00      	nop
 8000794:	08002594 	.word	0x08002594
 8000798:	080025a4 	.word	0x080025a4
 800079c:	080025b0 	.word	0x080025b0
 80007a0:	080025bc 	.word	0x080025bc

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b090      	sub	sp, #64	@ 0x40
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0318 	add.w	r3, r7, #24
 80007ae:	2228      	movs	r2, #40	@ 0x28
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 feb6 	bl	8002524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ca:	2301      	movs	r3, #1
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ce:	2310      	movs	r3, #16
 80007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007d6:	2300      	movs	r3, #0
 80007d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007da:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e0:	f107 0318 	add.w	r3, r7, #24
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 ff2d 	bl	8001644 <HAL_RCC_OscConfig>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007f0:	f000 f92e 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f4:	230f      	movs	r3, #15
 80007f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f8:	2302      	movs	r3, #2
 80007fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000800:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000804:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f001 f99a 	bl	8001b48 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800081a:	f000 f919 	bl	8000a50 <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3740      	adds	r7, #64	@ 0x40
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
	...

08000828 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <MX_I2C1_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	@ (800087c <MX_I2C1_Init+0x54>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000832:	4b11      	ldr	r3, [pc, #68]	@ (8000878 <MX_I2C1_Init+0x50>)
 8000834:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x58>)
 8000836:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000838:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <MX_I2C1_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800083e:	4b0e      	ldr	r3, [pc, #56]	@ (8000878 <MX_I2C1_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000844:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <MX_I2C1_Init+0x50>)
 8000846:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800084a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	@ (8000878 <MX_I2C1_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_I2C1_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MX_I2C1_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_I2C1_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_I2C1_Init+0x50>)
 8000866:	f000 fda9 	bl	80013bc <HAL_I2C_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 f8ee 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000028 	.word	0x20000028
 800087c:	40005400 	.word	0x40005400
 8000880:	000186a0 	.word	0x000186a0

08000884 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000888:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <MX_SPI1_Init+0x68>)
 800088a:	4a19      	ldr	r2, [pc, #100]	@ (80008f0 <MX_SPI1_Init+0x6c>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b17      	ldr	r3, [pc, #92]	@ (80008ec <MX_SPI1_Init+0x68>)
 8000890:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <MX_SPI1_Init+0x68>)
 8000898:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800089c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800089e:	4b13      	ldr	r3, [pc, #76]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a4:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008ba:	2208      	movs	r2, #8
 80008bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008be:	4b0b      	ldr	r3, [pc, #44]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008d2:	220a      	movs	r2, #10
 80008d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_SPI1_Init+0x68>)
 80008d8:	f001 fac4 	bl	8001e64 <HAL_SPI_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80008e2:	f000 f8b5 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000007c 	.word	0x2000007c
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	@ (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USART2_UART_Init+0x4c>)
 800092c:	f001 fd1b 	bl	8002366 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f88b 	bl	8000a50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000d4 	.word	0x200000d4
 8000944:	40004400 	.word	0x40004400

08000948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	f107 0310 	add.w	r3, r7, #16
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095c:	4b37      	ldr	r3, [pc, #220]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a36      	ldr	r2, [pc, #216]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000974:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a30      	ldr	r2, [pc, #192]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 800097a:	f043 0320 	orr.w	r3, r3, #32
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b2e      	ldr	r3, [pc, #184]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0320 	and.w	r3, r3, #32
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098c:	4b2b      	ldr	r3, [pc, #172]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a2a      	ldr	r2, [pc, #168]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b28      	ldr	r3, [pc, #160]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f003 0304 	and.w	r3, r3, #4
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a4:	4b25      	ldr	r3, [pc, #148]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a24      	ldr	r2, [pc, #144]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 80009aa:	f043 0308 	orr.w	r3, r3, #8
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b22      	ldr	r3, [pc, #136]	@ (8000a3c <MX_GPIO_Init+0xf4>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	603b      	str	r3, [r7, #0]
 80009ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RES_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2142      	movs	r1, #66	@ 0x42
 80009c0:	481f      	ldr	r0, [pc, #124]	@ (8000a40 <MX_GPIO_Init+0xf8>)
 80009c2:	f000 fcc1 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2140      	movs	r1, #64	@ 0x40
 80009ca:	481e      	ldr	r0, [pc, #120]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 80009cc:	f000 fcbc 	bl	8001348 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_GPIO_Init+0x100>)
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 0310 	add.w	r3, r7, #16
 80009e2:	4619      	mov	r1, r3
 80009e4:	4819      	ldr	r0, [pc, #100]	@ (8000a4c <MX_GPIO_Init+0x104>)
 80009e6:	f000 fb2b 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RES_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RES_Pin|LCD_DC_Pin;
 80009ea:	2342      	movs	r3, #66	@ 0x42
 80009ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480f      	ldr	r0, [pc, #60]	@ (8000a40 <MX_GPIO_Init+0xf8>)
 8000a02:	f000 fb1d 	bl	8001040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0310 	add.w	r3, r7, #16
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4809      	ldr	r0, [pc, #36]	@ (8000a44 <MX_GPIO_Init+0xfc>)
 8000a1e:	f000 fb0f 	bl	8001040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2028      	movs	r0, #40	@ 0x28
 8000a28:	f000 fad3 	bl	8000fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2c:	2028      	movs	r0, #40	@ 0x28
 8000a2e:	f000 faec 	bl	800100a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3720      	adds	r7, #32
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	40010800 	.word	0x40010800
 8000a44:	40010c00 	.word	0x40010c00
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40011000 	.word	0x40011000

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6193      	str	r3, [r2, #24]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a84:	61d3      	str	r3, [r2, #28]
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <HAL_MspInit+0x5c>)
 8000a88:	69db      	ldr	r3, [r3, #28]
 8000a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a92:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <HAL_MspInit+0x60>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_MspInit+0x60>)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3714      	adds	r7, #20
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40010000 	.word	0x40010000

08000ac0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	@ 0x28
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1d      	ldr	r2, [pc, #116]	@ (8000b50 <HAL_I2C_MspInit+0x90>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d132      	bne.n	8000b46 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <HAL_I2C_MspInit+0x94>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b54 <HAL_I2C_MspInit+0x94>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <HAL_I2C_MspInit+0x94>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afe:	2312      	movs	r3, #18
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <HAL_I2C_MspInit+0x98>)
 8000b0e:	f000 fa97 	bl	8001040 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <HAL_I2C_MspInit+0x9c>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b22:	f043 0302 	orr.w	r3, r3, #2
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b28:	4a0c      	ldr	r2, [pc, #48]	@ (8000b5c <HAL_I2C_MspInit+0x9c>)
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b2c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <HAL_I2C_MspInit+0x94>)
 8000b30:	69db      	ldr	r3, [r3, #28]
 8000b32:	4a08      	ldr	r2, [pc, #32]	@ (8000b54 <HAL_I2C_MspInit+0x94>)
 8000b34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b38:	61d3      	str	r3, [r2, #28]
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <HAL_I2C_MspInit+0x94>)
 8000b3c:	69db      	ldr	r3, [r3, #28]
 8000b3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40005400 	.word	0x40005400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010c00 	.word	0x40010c00
 8000b5c:	40010000 	.word	0x40010000

08000b60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a15      	ldr	r2, [pc, #84]	@ (8000bd0 <HAL_SPI_MspInit+0x70>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d123      	bne.n	8000bc8 <HAL_SPI_MspInit+0x68>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	4a13      	ldr	r2, [pc, #76]	@ (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b8a:	6193      	str	r3, [r2, #24]
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b98:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd4 <HAL_SPI_MspInit+0x74>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	60bb      	str	r3, [r7, #8]
 8000bae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bb0:	23a0      	movs	r3, #160	@ 0xa0
 8000bb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbc:	f107 0310 	add.w	r3, r7, #16
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4805      	ldr	r0, [pc, #20]	@ (8000bd8 <HAL_SPI_MspInit+0x78>)
 8000bc4:	f000 fa3c 	bl	8001040 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013000 	.word	0x40013000
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010800 	.word	0x40010800

08000bdc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a15      	ldr	r2, [pc, #84]	@ (8000c4c <HAL_UART_MspInit+0x70>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d123      	bne.n	8000c44 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <HAL_UART_MspInit+0x74>)
 8000bfe:	69db      	ldr	r3, [r3, #28]
 8000c00:	4a13      	ldr	r2, [pc, #76]	@ (8000c50 <HAL_UART_MspInit+0x74>)
 8000c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c06:	61d3      	str	r3, [r2, #28]
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <HAL_UART_MspInit+0x74>)
 8000c0a:	69db      	ldr	r3, [r3, #28]
 8000c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <HAL_UART_MspInit+0x74>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	@ (8000c50 <HAL_UART_MspInit+0x74>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <HAL_UART_MspInit+0x74>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c2c:	230c      	movs	r3, #12
 8000c2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c30:	2302      	movs	r3, #2
 8000c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2302      	movs	r3, #2
 8000c36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4805      	ldr	r0, [pc, #20]	@ (8000c54 <HAL_UART_MspInit+0x78>)
 8000c40:	f000 f9fe 	bl	8001040 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c44:	bf00      	nop
 8000c46:	3720      	adds	r7, #32
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010800 	.word	0x40010800

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <NMI_Handler+0x4>

08000c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <HardFault_Handler+0x4>

08000c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <MemManage_Handler+0x4>

08000c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca8:	f000 f87c 	bl	8000da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cb4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cb8:	f000 fb5e 	bl	8001378 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bc80      	pop	{r7}
 8000cca:	4770      	bx	lr

08000ccc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ccc:	f7ff fff8 	bl	8000cc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd0:	480b      	ldr	r0, [pc, #44]	@ (8000d00 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cd2:	490c      	ldr	r1, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8000d08 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a09      	ldr	r2, [pc, #36]	@ (8000d0c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ce8:	4c09      	ldr	r4, [pc, #36]	@ (8000d10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f001 fc1d 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfa:	f7ff fd0d 	bl	8000718 <main>
  bx lr
 8000cfe:	4770      	bx	lr
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d08:	080028f0 	.word	0x080028f0
  ldr r2, =_sbss
 8000d0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d10:	20000120 	.word	0x20000120

08000d14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC1_2_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <HAL_Init+0x28>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	@ (8000d40 <HAL_Init+0x28>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f947 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f000 f808 	bl	8000d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fe92 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40022000 	.word	0x40022000

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d4c:	4b12      	ldr	r3, [pc, #72]	@ (8000d98 <HAL_InitTick+0x54>)
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	4b12      	ldr	r3, [pc, #72]	@ (8000d9c <HAL_InitTick+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4619      	mov	r1, r3
 8000d56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f95f 	bl	8001026 <HAL_SYSTICK_Config>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00e      	b.n	8000d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b0f      	cmp	r3, #15
 8000d76:	d80a      	bhi.n	8000d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	6879      	ldr	r1, [r7, #4]
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f000 f927 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d84:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <HAL_InitTick+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	e000      	b.n	8000d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20000004 	.word	0x20000004

08000da4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <HAL_IncTick+0x1c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	461a      	mov	r2, r3
 8000dae:	4b05      	ldr	r3, [pc, #20]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4413      	add	r3, r2
 8000db4:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <HAL_IncTick+0x20>)
 8000db6:	6013      	str	r3, [r2, #0]
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	2000011c 	.word	0x2000011c

08000dc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return uwTick;
 8000dcc:	4b02      	ldr	r3, [pc, #8]	@ (8000dd8 <HAL_GetTick+0x10>)
 8000dce:	681b      	ldr	r3, [r3, #0]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	2000011c 	.word	0x2000011c

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff fff0 	bl	8000dc8 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffe0 	bl	8000dc8 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4906      	ldr	r1, [pc, #24]	@ (8000ebc <__NVIC_EnableIRQ+0x34>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff90 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff2d 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff42 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff90 	bl	8000f14 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5f 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff ff35 	bl	8000e88 <__NVIC_EnableIRQ>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b082      	sub	sp, #8
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff ffa2 	bl	8000f78 <SysTick_Config>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b08b      	sub	sp, #44	@ 0x2c
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001052:	e169      	b.n	8001328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001054:	2201      	movs	r2, #1
 8001056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	429a      	cmp	r2, r3
 800106e:	f040 8158 	bne.w	8001322 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	4a9a      	ldr	r2, [pc, #616]	@ (80012e0 <HAL_GPIO_Init+0x2a0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d05e      	beq.n	800113a <HAL_GPIO_Init+0xfa>
 800107c:	4a98      	ldr	r2, [pc, #608]	@ (80012e0 <HAL_GPIO_Init+0x2a0>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d875      	bhi.n	800116e <HAL_GPIO_Init+0x12e>
 8001082:	4a98      	ldr	r2, [pc, #608]	@ (80012e4 <HAL_GPIO_Init+0x2a4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d058      	beq.n	800113a <HAL_GPIO_Init+0xfa>
 8001088:	4a96      	ldr	r2, [pc, #600]	@ (80012e4 <HAL_GPIO_Init+0x2a4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d86f      	bhi.n	800116e <HAL_GPIO_Init+0x12e>
 800108e:	4a96      	ldr	r2, [pc, #600]	@ (80012e8 <HAL_GPIO_Init+0x2a8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d052      	beq.n	800113a <HAL_GPIO_Init+0xfa>
 8001094:	4a94      	ldr	r2, [pc, #592]	@ (80012e8 <HAL_GPIO_Init+0x2a8>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d869      	bhi.n	800116e <HAL_GPIO_Init+0x12e>
 800109a:	4a94      	ldr	r2, [pc, #592]	@ (80012ec <HAL_GPIO_Init+0x2ac>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d04c      	beq.n	800113a <HAL_GPIO_Init+0xfa>
 80010a0:	4a92      	ldr	r2, [pc, #584]	@ (80012ec <HAL_GPIO_Init+0x2ac>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d863      	bhi.n	800116e <HAL_GPIO_Init+0x12e>
 80010a6:	4a92      	ldr	r2, [pc, #584]	@ (80012f0 <HAL_GPIO_Init+0x2b0>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d046      	beq.n	800113a <HAL_GPIO_Init+0xfa>
 80010ac:	4a90      	ldr	r2, [pc, #576]	@ (80012f0 <HAL_GPIO_Init+0x2b0>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d85d      	bhi.n	800116e <HAL_GPIO_Init+0x12e>
 80010b2:	2b12      	cmp	r3, #18
 80010b4:	d82a      	bhi.n	800110c <HAL_GPIO_Init+0xcc>
 80010b6:	2b12      	cmp	r3, #18
 80010b8:	d859      	bhi.n	800116e <HAL_GPIO_Init+0x12e>
 80010ba:	a201      	add	r2, pc, #4	@ (adr r2, 80010c0 <HAL_GPIO_Init+0x80>)
 80010bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c0:	0800113b 	.word	0x0800113b
 80010c4:	08001115 	.word	0x08001115
 80010c8:	08001127 	.word	0x08001127
 80010cc:	08001169 	.word	0x08001169
 80010d0:	0800116f 	.word	0x0800116f
 80010d4:	0800116f 	.word	0x0800116f
 80010d8:	0800116f 	.word	0x0800116f
 80010dc:	0800116f 	.word	0x0800116f
 80010e0:	0800116f 	.word	0x0800116f
 80010e4:	0800116f 	.word	0x0800116f
 80010e8:	0800116f 	.word	0x0800116f
 80010ec:	0800116f 	.word	0x0800116f
 80010f0:	0800116f 	.word	0x0800116f
 80010f4:	0800116f 	.word	0x0800116f
 80010f8:	0800116f 	.word	0x0800116f
 80010fc:	0800116f 	.word	0x0800116f
 8001100:	0800116f 	.word	0x0800116f
 8001104:	0800111d 	.word	0x0800111d
 8001108:	08001131 	.word	0x08001131
 800110c:	4a79      	ldr	r2, [pc, #484]	@ (80012f4 <HAL_GPIO_Init+0x2b4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d013      	beq.n	800113a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001112:	e02c      	b.n	800116e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	623b      	str	r3, [r7, #32]
          break;
 800111a:	e029      	b.n	8001170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	3304      	adds	r3, #4
 8001122:	623b      	str	r3, [r7, #32]
          break;
 8001124:	e024      	b.n	8001170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	3308      	adds	r3, #8
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e01f      	b.n	8001170 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	330c      	adds	r3, #12
 8001136:	623b      	str	r3, [r7, #32]
          break;
 8001138:	e01a      	b.n	8001170 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d102      	bne.n	8001148 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001142:	2304      	movs	r3, #4
 8001144:	623b      	str	r3, [r7, #32]
          break;
 8001146:	e013      	b.n	8001170 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d105      	bne.n	800115c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001150:	2308      	movs	r3, #8
 8001152:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	611a      	str	r2, [r3, #16]
          break;
 800115a:	e009      	b.n	8001170 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800115c:	2308      	movs	r3, #8
 800115e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	615a      	str	r2, [r3, #20]
          break;
 8001166:	e003      	b.n	8001170 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x130>
          break;
 800116e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	2bff      	cmp	r3, #255	@ 0xff
 8001174:	d801      	bhi.n	800117a <HAL_GPIO_Init+0x13a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	e001      	b.n	800117e <HAL_GPIO_Init+0x13e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3304      	adds	r3, #4
 800117e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2bff      	cmp	r3, #255	@ 0xff
 8001184:	d802      	bhi.n	800118c <HAL_GPIO_Init+0x14c>
 8001186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	e002      	b.n	8001192 <HAL_GPIO_Init+0x152>
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	3b08      	subs	r3, #8
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	210f      	movs	r1, #15
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	401a      	ands	r2, r3
 80011a4:	6a39      	ldr	r1, [r7, #32]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	f000 80b1 	beq.w	8001322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c0:	4b4d      	ldr	r3, [pc, #308]	@ (80012f8 <HAL_GPIO_Init+0x2b8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a4c      	ldr	r2, [pc, #304]	@ (80012f8 <HAL_GPIO_Init+0x2b8>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b4a      	ldr	r3, [pc, #296]	@ (80012f8 <HAL_GPIO_Init+0x2b8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011d8:	4a48      	ldr	r2, [pc, #288]	@ (80012fc <HAL_GPIO_Init+0x2bc>)
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	220f      	movs	r2, #15
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a40      	ldr	r2, [pc, #256]	@ (8001300 <HAL_GPIO_Init+0x2c0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d013      	beq.n	800122c <HAL_GPIO_Init+0x1ec>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a3f      	ldr	r2, [pc, #252]	@ (8001304 <HAL_GPIO_Init+0x2c4>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d00d      	beq.n	8001228 <HAL_GPIO_Init+0x1e8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a3e      	ldr	r2, [pc, #248]	@ (8001308 <HAL_GPIO_Init+0x2c8>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d007      	beq.n	8001224 <HAL_GPIO_Init+0x1e4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3d      	ldr	r2, [pc, #244]	@ (800130c <HAL_GPIO_Init+0x2cc>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d101      	bne.n	8001220 <HAL_GPIO_Init+0x1e0>
 800121c:	2303      	movs	r3, #3
 800121e:	e006      	b.n	800122e <HAL_GPIO_Init+0x1ee>
 8001220:	2304      	movs	r3, #4
 8001222:	e004      	b.n	800122e <HAL_GPIO_Init+0x1ee>
 8001224:	2302      	movs	r3, #2
 8001226:	e002      	b.n	800122e <HAL_GPIO_Init+0x1ee>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <HAL_GPIO_Init+0x1ee>
 800122c:	2300      	movs	r3, #0
 800122e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	4093      	lsls	r3, r2
 8001238:	68fa      	ldr	r2, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800123e:	492f      	ldr	r1, [pc, #188]	@ (80012fc <HAL_GPIO_Init+0x2bc>)
 8001240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001258:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	492c      	ldr	r1, [pc, #176]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	608b      	str	r3, [r1, #8]
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	43db      	mvns	r3, r3
 800126e:	4928      	ldr	r1, [pc, #160]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 8001270:	4013      	ands	r3, r2
 8001272:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	4922      	ldr	r1, [pc, #136]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	60cb      	str	r3, [r1, #12]
 800128c:	e006      	b.n	800129c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 8001290:	68da      	ldr	r2, [r3, #12]
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	43db      	mvns	r3, r3
 8001296:	491e      	ldr	r1, [pc, #120]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 8001298:	4013      	ands	r3, r2
 800129a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4918      	ldr	r1, [pc, #96]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
 80012b4:	e006      	b.n	80012c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	43db      	mvns	r3, r3
 80012be:	4914      	ldr	r1, [pc, #80]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 80012c0:	4013      	ands	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d021      	beq.n	8001314 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	490e      	ldr	r1, [pc, #56]	@ (8001310 <HAL_GPIO_Init+0x2d0>)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	4313      	orrs	r3, r2
 80012da:	600b      	str	r3, [r1, #0]
 80012dc:	e021      	b.n	8001322 <HAL_GPIO_Init+0x2e2>
 80012de:	bf00      	nop
 80012e0:	10320000 	.word	0x10320000
 80012e4:	10310000 	.word	0x10310000
 80012e8:	10220000 	.word	0x10220000
 80012ec:	10210000 	.word	0x10210000
 80012f0:	10120000 	.word	0x10120000
 80012f4:	10110000 	.word	0x10110000
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000
 8001300:	40010800 	.word	0x40010800
 8001304:	40010c00 	.word	0x40010c00
 8001308:	40011000 	.word	0x40011000
 800130c:	40011400 	.word	0x40011400
 8001310:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_GPIO_Init+0x304>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	43db      	mvns	r3, r3
 800131c:	4909      	ldr	r1, [pc, #36]	@ (8001344 <HAL_GPIO_Init+0x304>)
 800131e:	4013      	ands	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001324:	3301      	adds	r3, #1
 8001326:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800132e:	fa22 f303 	lsr.w	r3, r2, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	f47f ae8e 	bne.w	8001054 <HAL_GPIO_Init+0x14>
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	372c      	adds	r7, #44	@ 0x2c
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	40010400 	.word	0x40010400

08001348 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	807b      	strh	r3, [r7, #2]
 8001354:	4613      	mov	r3, r2
 8001356:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001358:	787b      	ldrb	r3, [r7, #1]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800135e:	887a      	ldrh	r2, [r7, #2]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001364:	e003      	b.n	800136e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001366:	887b      	ldrh	r3, [r7, #2]
 8001368:	041a      	lsls	r2, r3, #16
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001382:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001384:	695a      	ldr	r2, [r3, #20]
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f806 	bl	80013a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40010400 	.word	0x40010400

080013a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e12b      	b.n	8001626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fb6c 	bl	8000ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2224      	movs	r2, #36	@ 0x24
 80013ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800140e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800141e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001420:	f000 fcda 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a81      	ldr	r2, [pc, #516]	@ (8001630 <HAL_I2C_Init+0x274>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d807      	bhi.n	8001440 <HAL_I2C_Init+0x84>
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4a80      	ldr	r2, [pc, #512]	@ (8001634 <HAL_I2C_Init+0x278>)
 8001434:	4293      	cmp	r3, r2
 8001436:	bf94      	ite	ls
 8001438:	2301      	movls	r3, #1
 800143a:	2300      	movhi	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	e006      	b.n	800144e <HAL_I2C_Init+0x92>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4a7d      	ldr	r2, [pc, #500]	@ (8001638 <HAL_I2C_Init+0x27c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	bf94      	ite	ls
 8001448:	2301      	movls	r3, #1
 800144a:	2300      	movhi	r3, #0
 800144c:	b2db      	uxtb	r3, r3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0e7      	b.n	8001626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4a78      	ldr	r2, [pc, #480]	@ (800163c <HAL_I2C_Init+0x280>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	0c9b      	lsrs	r3, r3, #18
 8001460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a6a      	ldr	r2, [pc, #424]	@ (8001630 <HAL_I2C_Init+0x274>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d802      	bhi.n	8001490 <HAL_I2C_Init+0xd4>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	3301      	adds	r3, #1
 800148e:	e009      	b.n	80014a4 <HAL_I2C_Init+0xe8>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001496:	fb02 f303 	mul.w	r3, r2, r3
 800149a:	4a69      	ldr	r2, [pc, #420]	@ (8001640 <HAL_I2C_Init+0x284>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	3301      	adds	r3, #1
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	430b      	orrs	r3, r1
 80014aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	495c      	ldr	r1, [pc, #368]	@ (8001630 <HAL_I2C_Init+0x274>)
 80014c0:	428b      	cmp	r3, r1
 80014c2:	d819      	bhi.n	80014f8 <HAL_I2C_Init+0x13c>
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	1e59      	subs	r1, r3, #1
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80014d2:	1c59      	adds	r1, r3, #1
 80014d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014d8:	400b      	ands	r3, r1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d00a      	beq.n	80014f4 <HAL_I2C_Init+0x138>
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1e59      	subs	r1, r3, #1
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f2:	e051      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 80014f4:	2304      	movs	r3, #4
 80014f6:	e04f      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d111      	bne.n	8001524 <HAL_I2C_Init+0x168>
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	1e58      	subs	r0, r3, #1
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6859      	ldr	r1, [r3, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	440b      	add	r3, r1
 800150e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001512:	3301      	adds	r3, #1
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	2b00      	cmp	r3, #0
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	e012      	b.n	800154a <HAL_I2C_Init+0x18e>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	0099      	lsls	r1, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	2b00      	cmp	r3, #0
 8001542:	bf0c      	ite	eq
 8001544:	2301      	moveq	r3, #1
 8001546:	2300      	movne	r3, #0
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_I2C_Init+0x196>
 800154e:	2301      	movs	r3, #1
 8001550:	e022      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10e      	bne.n	8001578 <HAL_I2C_Init+0x1bc>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e58      	subs	r0, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6859      	ldr	r1, [r3, #4]
 8001562:	460b      	mov	r3, r1
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	440b      	add	r3, r1
 8001568:	fbb0 f3f3 	udiv	r3, r0, r3
 800156c:	3301      	adds	r3, #1
 800156e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001576:	e00f      	b.n	8001598 <HAL_I2C_Init+0x1dc>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	0099      	lsls	r1, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	6809      	ldr	r1, [r1, #0]
 800159c:	4313      	orrs	r3, r2
 800159e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69da      	ldr	r2, [r3, #28]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a1b      	ldr	r3, [r3, #32]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6911      	ldr	r1, [r2, #16]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68d2      	ldr	r2, [r2, #12]
 80015d2:	4311      	orrs	r1, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	430b      	orrs	r3, r1
 80015da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2220      	movs	r2, #32
 8001612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	000186a0 	.word	0x000186a0
 8001634:	001e847f 	.word	0x001e847f
 8001638:	003d08ff 	.word	0x003d08ff
 800163c:	431bde83 	.word	0x431bde83
 8001640:	10624dd3 	.word	0x10624dd3

08001644 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e272      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8087 	beq.w	8001772 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001664:	4b92      	ldr	r3, [pc, #584]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b04      	cmp	r3, #4
 800166e:	d00c      	beq.n	800168a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001670:	4b8f      	ldr	r3, [pc, #572]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 030c 	and.w	r3, r3, #12
 8001678:	2b08      	cmp	r3, #8
 800167a:	d112      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
 800167c:	4b8c      	ldr	r3, [pc, #560]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001688:	d10b      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168a:	4b89      	ldr	r3, [pc, #548]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d06c      	beq.n	8001770 <HAL_RCC_OscConfig+0x12c>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d168      	bne.n	8001770 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e24c      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x76>
 80016ac:	4b80      	ldr	r3, [pc, #512]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a7f      	ldr	r2, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	e02e      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x98>
 80016c2:	4b7b      	ldr	r3, [pc, #492]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a7a      	ldr	r2, [pc, #488]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b78      	ldr	r3, [pc, #480]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a77      	ldr	r2, [pc, #476]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xbc>
 80016e6:	4b72      	ldr	r3, [pc, #456]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a71      	ldr	r2, [pc, #452]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b6f      	ldr	r3, [pc, #444]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a6e      	ldr	r2, [pc, #440]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xd4>
 8001700:	4b6b      	ldr	r3, [pc, #428]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6a      	ldr	r2, [pc, #424]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b68      	ldr	r3, [pc, #416]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a67      	ldr	r2, [pc, #412]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001716:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001720:	f7ff fb52 	bl	8000dc8 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fb4e 	bl	8000dc8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	@ 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e200      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b5d      	ldr	r3, [pc, #372]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xe4>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fb3e 	bl	8000dc8 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fb3a 	bl	8000dc8 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	@ 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e1ec      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b53      	ldr	r3, [pc, #332]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x10c>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d063      	beq.n	8001846 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800177e:	4b4c      	ldr	r3, [pc, #304]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178a:	4b49      	ldr	r3, [pc, #292]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 030c 	and.w	r3, r3, #12
 8001792:	2b08      	cmp	r3, #8
 8001794:	d11c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
 8001796:	4b46      	ldr	r3, [pc, #280]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a2:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d001      	beq.n	80017ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1c0      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ba:	4b3d      	ldr	r3, [pc, #244]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	4939      	ldr	r1, [pc, #228]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	e03a      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d020      	beq.n	800181a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d8:	4b36      	ldr	r3, [pc, #216]	@ (80018b4 <HAL_RCC_OscConfig+0x270>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017de:	f7ff faf3 	bl	8000dc8 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e6:	f7ff faef 	bl	8000dc8 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e1a1      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	4b2d      	ldr	r3, [pc, #180]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001804:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4927      	ldr	r1, [pc, #156]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181a:	4b26      	ldr	r3, [pc, #152]	@ (80018b4 <HAL_RCC_OscConfig+0x270>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fad2 	bl	8000dc8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001828:	f7ff face 	bl	8000dc8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e180      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d03a      	beq.n	80018c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d019      	beq.n	800188e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185a:	4b17      	ldr	r3, [pc, #92]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001860:	f7ff fab2 	bl	8000dc8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001868:	f7ff faae 	bl	8000dc8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e160      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d0f0      	beq.n	8001868 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001886:	2001      	movs	r0, #1
 8001888:	f000 face 	bl	8001e28 <RCC_Delay>
 800188c:	e01c      	b.n	80018c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <HAL_RCC_OscConfig+0x274>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001894:	f7ff fa98 	bl	8000dc8 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189a:	e00f      	b.n	80018bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800189c:	f7ff fa94 	bl	8000dc8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d908      	bls.n	80018bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e146      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	42420000 	.word	0x42420000
 80018b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	4b92      	ldr	r3, [pc, #584]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1e9      	bne.n	800189c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80a6 	beq.w	8001a22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b8b      	ldr	r3, [pc, #556]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b88      	ldr	r3, [pc, #544]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	4a87      	ldr	r2, [pc, #540]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	61d3      	str	r3, [r2, #28]
 80018f2:	4b85      	ldr	r3, [pc, #532]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	69db      	ldr	r3, [r3, #28]
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b82      	ldr	r3, [pc, #520]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b7f      	ldr	r3, [pc, #508]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7e      	ldr	r2, [pc, #504]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fa55 	bl	8000dc8 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fa51 	bl	8000dc8 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	@ 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e103      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b75      	ldr	r3, [pc, #468]	@ (8001b0c <HAL_RCC_OscConfig+0x4c8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x312>
 8001948:	4b6f      	ldr	r3, [pc, #444]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6213      	str	r3, [r2, #32]
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x334>
 800195e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a69      	ldr	r2, [pc, #420]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b67      	ldr	r3, [pc, #412]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a66      	ldr	r2, [pc, #408]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x356>
 8001980:	4b61      	ldr	r3, [pc, #388]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	6a1b      	ldr	r3, [r3, #32]
 8001984:	4a60      	ldr	r2, [pc, #384]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6213      	str	r3, [r2, #32]
 800198c:	4b5e      	ldr	r3, [pc, #376]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	6a1b      	ldr	r3, [r3, #32]
 8001990:	4a5d      	ldr	r2, [pc, #372]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	6213      	str	r3, [r2, #32]
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x36e>
 800199a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	6a1b      	ldr	r3, [r3, #32]
 800199e:	4a5a      	ldr	r2, [pc, #360]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	6213      	str	r3, [r2, #32]
 80019a6:	4b58      	ldr	r3, [pc, #352]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	4a57      	ldr	r2, [pc, #348]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 0304 	bic.w	r3, r3, #4
 80019b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa05 	bl	8000dc8 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fa01 	bl	8000dc8 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0b1      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x37e>
 80019e4:	e014      	b.n	8001a10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f9ef 	bl	8000dc8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7ff f9eb 	bl	8000dc8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e09b      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1ee      	bne.n	80019ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d105      	bne.n	8001a22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a16:	4b3c      	ldr	r3, [pc, #240]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69db      	ldr	r3, [r3, #28]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 8087 	beq.w	8001b3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d061      	beq.n	8001afc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d146      	bne.n	8001ace <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a46:	f7ff f9bf 	bl	8000dc8 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4e:	f7ff f9bb 	bl	8000dc8 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e06d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f0      	bne.n	8001a4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	4921      	ldr	r1, [pc, #132]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a88:	4b1f      	ldr	r3, [pc, #124]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a19      	ldr	r1, [r3, #32]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	491b      	ldr	r1, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f98f 	bl	8000dc8 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f98b 	bl	8000dc8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e03d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x46a>
 8001acc:	e035      	b.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_RCC_OscConfig+0x4cc>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f978 	bl	8000dc8 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f974 	bl	8000dc8 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e026      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x498>
 8001afa:	e01e      	b.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e019      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_OscConfig+0x500>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0d0      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d910      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6a:	4b67      	ldr	r3, [pc, #412]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 0207 	bic.w	r2, r3, #7
 8001b72:	4965      	ldr	r1, [pc, #404]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d040      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d115      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d107      	bne.n	8001c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c06:	4b41      	ldr	r3, [pc, #260]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d109      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e073      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e06b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c26:	4b39      	ldr	r3, [pc, #228]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f023 0203 	bic.w	r2, r3, #3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	4936      	ldr	r1, [pc, #216]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c38:	f7ff f8c6 	bl	8000dc8 <HAL_GetTick>
 8001c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	e00a      	b.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c40:	f7ff f8c2 	bl	8000dc8 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e053      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c56:	4b2d      	ldr	r3, [pc, #180]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 020c 	and.w	r2, r3, #12
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d1eb      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d210      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 0207 	bic.w	r2, r3, #7
 8001c7e:	4922      	ldr	r1, [pc, #136]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c0>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_ClockConfig+0x1d0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f824 	bl	8000d44 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40022000 	.word	0x40022000
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	080028bc 	.word	0x080028bc
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d36:	4b1e      	ldr	r3, [pc, #120]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d002      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x30>
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0x36>
 8001d4a:	e027      	b.n	8001d9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d4e:	613b      	str	r3, [r7, #16]
      break;
 8001d50:	e027      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	0c9b      	lsrs	r3, r3, #18
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	0c5b      	lsrs	r3, r3, #17
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d76:	5cd3      	ldrb	r3, [r2, r3]
 8001d78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7e:	fb03 f202 	mul.w	r2, r3, r2
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
 8001d8a:	e004      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	613b      	str	r3, [r7, #16]
      break;
 8001d9a:	e002      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d9e:	613b      	str	r3, [r7, #16]
      break;
 8001da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da2:	693b      	ldr	r3, [r7, #16]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	371c      	adds	r7, #28
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	080028d4 	.word	0x080028d4
 8001dbc:	080028e4 	.word	0x080028e4
 8001dc0:	003d0900 	.word	0x003d0900

08001dc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b02      	ldr	r3, [pc, #8]	@ (8001dd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	20000000 	.word	0x20000000

08001dd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ddc:	f7ff fff2 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de0:	4602      	mov	r2, r0
 8001de2:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	4903      	ldr	r1, [pc, #12]	@ (8001dfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dee:	5ccb      	ldrb	r3, [r1, r3]
 8001df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	080028cc 	.word	0x080028cc

08001e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e04:	f7ff ffde 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	4903      	ldr	r1, [pc, #12]	@ (8001e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e16:	5ccb      	ldrb	r3, [r1, r3]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	080028cc 	.word	0x080028cc

08001e28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <RCC_Delay+0x34>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <RCC_Delay+0x38>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0a5b      	lsrs	r3, r3, #9
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	fb02 f303 	mul.w	r3, r2, r3
 8001e42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e44:	bf00      	nop
  }
  while (Delay --);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	60fa      	str	r2, [r7, #12]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1f9      	bne.n	8001e44 <RCC_Delay+0x1c>
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d101      	bne.n	8001e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e076      	b.n	8001f64 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d108      	bne.n	8001e90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e86:	d009      	beq.n	8001e9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
 8001e8e:	e005      	b.n	8001e9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7fe fe52 	bl	8000b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ed2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f0c:	431a      	orrs	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f20:	ea42 0103 	orr.w	r1, r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	0c1a      	lsrs	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f002 0204 	and.w	r2, r2, #4
 8001f42:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f52:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3708      	adds	r7, #8
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f7c:	f7fe ff24 	bl	8000dc8 <HAL_GetTick>
 8001f80:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d001      	beq.n	8001f96 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	e12a      	b.n	80021ec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d002      	beq.n	8001fa2 <HAL_SPI_Transmit+0x36>
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e122      	b.n	80021ec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d101      	bne.n	8001fb4 <HAL_SPI_Transmit+0x48>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e11b      	b.n	80021ec <HAL_SPI_Transmit+0x280>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	88fa      	ldrh	r2, [r7, #6]
 8001fda:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2200      	movs	r2, #0
 8001fec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002002:	d10f      	bne.n	8002024 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002012:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002022:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202e:	2b40      	cmp	r3, #64	@ 0x40
 8002030:	d007      	beq.n	8002042 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002040:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800204a:	d152      	bne.n	80020f2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d002      	beq.n	800205a <HAL_SPI_Transmit+0xee>
 8002054:	8b7b      	ldrh	r3, [r7, #26]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d145      	bne.n	80020e6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	881a      	ldrh	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	1c9a      	adds	r2, r3, #2
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800207e:	e032      	b.n	80020e6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d112      	bne.n	80020b4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	881a      	ldrh	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	3b01      	subs	r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020b2:	e018      	b.n	80020e6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020b4:	f7fe fe88 	bl	8000dc8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d803      	bhi.n	80020cc <HAL_SPI_Transmit+0x160>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ca:	d102      	bne.n	80020d2 <HAL_SPI_Transmit+0x166>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e082      	b.n	80021ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1c7      	bne.n	8002080 <HAL_SPI_Transmit+0x114>
 80020f0:	e053      	b.n	800219a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_SPI_Transmit+0x194>
 80020fa:	8b7b      	ldrh	r3, [r7, #26]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d147      	bne.n	8002190 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	330c      	adds	r3, #12
 800210a:	7812      	ldrb	r2, [r2, #0]
 800210c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800211c:	b29b      	uxth	r3, r3
 800211e:	3b01      	subs	r3, #1
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002126:	e033      	b.n	8002190 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b02      	cmp	r3, #2
 8002134:	d113      	bne.n	800215e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	330c      	adds	r3, #12
 8002140:	7812      	ldrb	r2, [r2, #0]
 8002142:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800215c:	e018      	b.n	8002190 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800215e:	f7fe fe33 	bl	8000dc8 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d803      	bhi.n	8002176 <HAL_SPI_Transmit+0x20a>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002174:	d102      	bne.n	800217c <HAL_SPI_Transmit+0x210>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e02d      	b.n	80021ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002194:	b29b      	uxth	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1c6      	bne.n	8002128 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800219a:	69fa      	ldr	r2, [r7, #28]
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f8b0 	bl	8002304 <SPI_EndRxTxTransaction>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2220      	movs	r2, #32
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80021ea:	2300      	movs	r3, #0
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b088      	sub	sp, #32
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	603b      	str	r3, [r7, #0]
 8002200:	4613      	mov	r3, r2
 8002202:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002204:	f7fe fde0 	bl	8000dc8 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	4413      	add	r3, r2
 8002212:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002214:	f7fe fdd8 	bl	8000dc8 <HAL_GetTick>
 8002218:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800221a:	4b39      	ldr	r3, [pc, #228]	@ (8002300 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	015b      	lsls	r3, r3, #5
 8002220:	0d1b      	lsrs	r3, r3, #20
 8002222:	69fa      	ldr	r2, [r7, #28]
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800222a:	e054      	b.n	80022d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002232:	d050      	beq.n	80022d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002234:	f7fe fdc8 	bl	8000dc8 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	429a      	cmp	r2, r3
 8002242:	d902      	bls.n	800224a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d13d      	bne.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002258:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002262:	d111      	bne.n	8002288 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800226c:	d004      	beq.n	8002278 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002276:	d107      	bne.n	8002288 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002286:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002290:	d10f      	bne.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e017      	b.n	80022f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4013      	ands	r3, r2
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d19b      	bne.n	800222c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3720      	adds	r7, #32
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000

08002304 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b086      	sub	sp, #24
 8002308:	af02      	add	r7, sp, #8
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2201      	movs	r2, #1
 8002318:	2102      	movs	r1, #2
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff ff6a 	bl	80021f4 <SPI_WaitFlagStateUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d007      	beq.n	8002336 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800232a:	f043 0220 	orr.w	r2, r3, #32
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e013      	b.n	800235e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2200      	movs	r2, #0
 800233e:	2180      	movs	r1, #128	@ 0x80
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f7ff ff57 	bl	80021f4 <SPI_WaitFlagStateUntilTimeout>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e000      	b.n	800235e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e042      	b.n	80023fe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7fe fc25 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2224      	movs	r2, #36	@ 0x24
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f82c 	bl	8002408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002442:	f023 030c 	bic.w	r3, r3, #12
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	68b9      	ldr	r1, [r7, #8]
 800244c:	430b      	orrs	r3, r1
 800244e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2c      	ldr	r2, [pc, #176]	@ (800251c <UART_SetConfig+0x114>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d103      	bne.n	8002478 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002470:	f7ff fcc6 	bl	8001e00 <HAL_RCC_GetPCLK2Freq>
 8002474:	60f8      	str	r0, [r7, #12]
 8002476:	e002      	b.n	800247e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002478:	f7ff fcae 	bl	8001dd8 <HAL_RCC_GetPCLK1Freq>
 800247c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	009a      	lsls	r2, r3, #2
 8002488:	441a      	add	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	4a22      	ldr	r2, [pc, #136]	@ (8002520 <UART_SetConfig+0x118>)
 8002496:	fba2 2303 	umull	r2, r3, r2, r3
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	0119      	lsls	r1, r3, #4
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	009a      	lsls	r2, r3, #2
 80024a8:	441a      	add	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002520 <UART_SetConfig+0x118>)
 80024b6:	fba3 0302 	umull	r0, r3, r3, r2
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	2064      	movs	r0, #100	@ 0x64
 80024be:	fb00 f303 	mul.w	r3, r0, r3
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	3332      	adds	r3, #50	@ 0x32
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <UART_SetConfig+0x118>)
 80024ca:	fba2 2303 	umull	r2, r3, r2, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d4:	4419      	add	r1, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4613      	mov	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4413      	add	r3, r2
 80024de:	009a      	lsls	r2, r3, #2
 80024e0:	441a      	add	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <UART_SetConfig+0x118>)
 80024ee:	fba3 0302 	umull	r0, r3, r3, r2
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2064      	movs	r0, #100	@ 0x64
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	1ad3      	subs	r3, r2, r3
 80024fc:	011b      	lsls	r3, r3, #4
 80024fe:	3332      	adds	r3, #50	@ 0x32
 8002500:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <UART_SetConfig+0x118>)
 8002502:	fba2 2303 	umull	r2, r3, r2, r3
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	f003 020f 	and.w	r2, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	440a      	add	r2, r1
 8002512:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013800 	.word	0x40013800
 8002520:	51eb851f 	.word	0x51eb851f

08002524 <memset>:
 8002524:	4603      	mov	r3, r0
 8002526:	4402      	add	r2, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	@ (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	@ (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	f000 f81a 	bl	800257c <_init>
 8002548:	2600      	movs	r6, #0
 800254a:	4d0a      	ldr	r5, [pc, #40]	@ (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	@ (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080028e8 	.word	0x080028e8
 8002570:	080028e8 	.word	0x080028e8
 8002574:	080028e8 	.word	0x080028e8
 8002578:	080028ec 	.word	0x080028ec

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
