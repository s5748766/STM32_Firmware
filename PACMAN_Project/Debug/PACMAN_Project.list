
PACMAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  080057ac  080057ac  000067ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d04  08005d04  000071c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005d04  08005d04  000071c0  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005d04  08005d04  000071c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00006d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d08  08005d08  00006d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c0  20000000  08005d0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001c0  08005ecc  000071c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005ecc  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c97b  00000000  00000000  000071e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001982  00000000  00000000  00013b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  000154e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a54  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c61  00000000  00000000  00016c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000daa2  00000000  00000000  0002e8b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cfe4  00000000  00000000  0003c357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c933b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cb0  00000000  00000000  000c9380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000cd030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001c0 	.word	0x200001c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08005794 	.word	0x08005794

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001c4 	.word	0x200001c4
 8000148:	08005794 	.word	0x08005794

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <LCD_CS_LOW>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ----------------------------- LCD low-level ----------------------------- */
static inline void LCD_CS_LOW(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <LCD_CS_LOW+0x14>)
 8000776:	f002 fd84 	bl	8003282 <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010c00 	.word	0x40010c00

08000784 <LCD_CS_HIGH>:
static inline void LCD_CS_HIGH(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <LCD_CS_HIGH+0x14>)
 800078e:	f002 fd78 	bl	8003282 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010c00 	.word	0x40010c00

0800079c <LCD_RS_CMD>:
static inline void LCD_RS_CMD(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <LCD_RS_CMD+0x14>)
 80007a6:	f002 fd6c 	bl	8003282 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800

080007b4 <LCD_RS_DATA>:
static inline void LCD_RS_DATA(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2110      	movs	r1, #16
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <LCD_RS_DATA+0x14>)
 80007be:	f002 fd60 	bl	8003282 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800

080007cc <LCD_WR_LOW>:
static inline void LCD_WR_LOW(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2102      	movs	r1, #2
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <LCD_WR_LOW+0x14>)
 80007d6:	f002 fd54 	bl	8003282 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010800 	.word	0x40010800

080007e4 <LCD_WR_HIGH>:
static inline void LCD_WR_HIGH(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2102      	movs	r1, #2
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <LCD_WR_HIGH+0x14>)
 80007ee:	f002 fd48 	bl	8003282 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010800 	.word	0x40010800

080007fc <LCD_RD_HIGH>:
static inline void LCD_RD_HIGH(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <LCD_RD_HIGH+0x14>)
 8000806:	f002 fd3c 	bl	8003282 <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <LCD_RST_LOW>:
static inline void LCD_RST_LOW(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <LCD_RST_LOW+0x14>)
 800081e:	f002 fd30 	bl	8003282 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40011000 	.word	0x40011000

0800082c <LCD_RST_HIGH>:
static inline void LCD_RST_HIGH(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <LCD_RST_HIGH+0x14>)
 8000836:	f002 fd24 	bl	8003282 <HAL_GPIO_WritePin>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40011000 	.word	0x40011000

08000844 <LCD_SET_DATA>:

/* 8-bit data bus */
static inline void LCD_SET_DATA(uint8_t d) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
			(d & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
 8000856:	461a      	mov	r2, r3
 8000858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085c:	4829      	ldr	r0, [pc, #164]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800085e:	f002 fd10 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
			(d & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	105b      	asrs	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
 800086e:	461a      	mov	r2, r3
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <LCD_SET_DATA+0xc4>)
 8000874:	f002 fd05 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
			(d & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	109b      	asrs	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
 8000884:	461a      	mov	r2, r3
 8000886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088a:	481e      	ldr	r0, [pc, #120]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800088c:	f002 fcf9 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
			(d & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	10db      	asrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
 800089c:	461a      	mov	r2, r3
 800089e:	2108      	movs	r1, #8
 80008a0:	481a      	ldr	r0, [pc, #104]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008a2:	f002 fcee 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
			(d & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	111b      	asrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
 80008b2:	461a      	mov	r2, r3
 80008b4:	2120      	movs	r1, #32
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008b8:	f002 fce3 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
			(d & (1 << 5)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	115b      	asrs	r3, r3, #5
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
 80008c8:	461a      	mov	r2, r3
 80008ca:	2110      	movs	r1, #16
 80008cc:	480f      	ldr	r0, [pc, #60]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008ce:	f002 fcd8 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
			(d & (1 << 6)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	119b      	asrs	r3, r3, #6
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008e6:	f002 fccc 	bl	8003282 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
			(d & (1 << 7)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	09db      	lsrs	r3, r3, #7
 80008ee:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <LCD_SET_DATA+0xc0>)
 80008f8:	f002 fcc3 	bl	8003282 <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40010800 	.word	0x40010800
 8000908:	40011000 	.word	0x40011000
 800090c:	40010c00 	.word	0x40010c00

08000910 <LCD_WRITE_STROBE>:

static inline void LCD_WRITE_STROBE(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	LCD_WR_LOW();
 8000914:	f7ff ff5a 	bl	80007cc <LCD_WR_LOW>
	__NOP();
 8000918:	bf00      	nop
	__NOP();
 800091a:	bf00      	nop
	__NOP();
 800091c:	bf00      	nop
	LCD_WR_HIGH();
 800091e:	f7ff ff61 	bl	80007e4 <LCD_WR_HIGH>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <ILI9341_WriteCmd>:

static void ILI9341_WriteCmd(uint8_t cmd) {
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
	LCD_RS_CMD();
 8000930:	f7ff ff34 	bl	800079c <LCD_RS_CMD>
	LCD_SET_DATA(cmd);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff84 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 800093c:	f7ff ffe8 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <ILI9341_WriteData8>:
static void ILI9341_WriteData8(uint8_t d) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	LCD_RS_DATA();
 8000952:	f7ff ff2f 	bl	80007b4 <LCD_RS_DATA>
	LCD_SET_DATA(d);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff73 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 800095e:	f7ff ffd7 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <ILI9341_WriteData16>:
static void ILI9341_WriteData16(uint16_t d) {
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
	ILI9341_WriteData8(d >> 8);
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ffe3 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(d & 0xFF);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffde 	bl	8000948 <ILI9341_WriteData8>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ILI9341_SetWindow>:

static void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	803b      	strh	r3, [r7, #0]
	ILI9341_WriteCmd(0x2A);
 80009b2:	202a      	movs	r0, #42	@ 0x2a
 80009b4:	f7ff ffb7 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData16(x0);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffd5 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteData16(x1);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffd1 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2B);
 80009c8:	202b      	movs	r0, #43	@ 0x2b
 80009ca:	f7ff ffac 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData16(y0);
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffca 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteData16(y1);
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffc6 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2C);
 80009de:	202c      	movs	r0, #44	@ 0x2c
 80009e0:	f7ff ffa1 	bl	8000926 <ILI9341_WriteCmd>
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t c) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	460b      	mov	r3, r1
 80009f8:	80bb      	strh	r3, [r7, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	807b      	strh	r3, [r7, #2]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 80009fe:	88fb      	ldrh	r3, [r7, #6]
 8000a00:	2bef      	cmp	r3, #239	@ 0xef
 8000a02:	d80e      	bhi.n	8000a22 <ILI9341_DrawPixel+0x36>
 8000a04:	88bb      	ldrh	r3, [r7, #4]
 8000a06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a0a:	d20a      	bcs.n	8000a22 <ILI9341_DrawPixel+0x36>
		return;
	ILI9341_SetWindow(x, y, x, y);
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	88fa      	ldrh	r2, [r7, #6]
 8000a10:	88b9      	ldrh	r1, [r7, #4]
 8000a12:	88f8      	ldrh	r0, [r7, #6]
 8000a14:	f7ff ffbe 	bl	8000994 <ILI9341_SetWindow>
	ILI9341_WriteData16(c);
 8000a18:	887b      	ldrh	r3, [r7, #2]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff ffa5 	bl	800096a <ILI9341_WriteData16>
 8000a20:	e000      	b.n	8000a24 <ILI9341_DrawPixel+0x38>
		return;
 8000a22:	bf00      	nop
}
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <ILI9341_FillRect>:
void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t c) {
 8000a2a:	b590      	push	{r4, r7, lr}
 8000a2c:	b085      	sub	sp, #20
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4604      	mov	r4, r0
 8000a32:	4608      	mov	r0, r1
 8000a34:	4611      	mov	r1, r2
 8000a36:	461a      	mov	r2, r3
 8000a38:	4623      	mov	r3, r4
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	80bb      	strh	r3, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
 8000a44:	4613      	mov	r3, r2
 8000a46:	803b      	strh	r3, [r7, #0]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	2bef      	cmp	r3, #239	@ 0xef
 8000a4c:	d834      	bhi.n	8000ab8 <ILI9341_FillRect+0x8e>
 8000a4e:	88bb      	ldrh	r3, [r7, #4]
 8000a50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a54:	d230      	bcs.n	8000ab8 <ILI9341_FillRect+0x8e>
		return;
	uint16_t x1 = (x + w - 1 < LCD_WIDTH) ? (x + w - 1) : (LCD_WIDTH - 1);
 8000a56:	88fa      	ldrh	r2, [r7, #6]
 8000a58:	887b      	ldrh	r3, [r7, #2]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a5e:	bfa8      	it	ge
 8000a60:	23f0      	movge	r3, #240	@ 0xf0
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	3b01      	subs	r3, #1
 8000a66:	817b      	strh	r3, [r7, #10]
	uint16_t y1 = (y + h - 1 < LCD_HEIGHT) ? (y + h - 1) : (LCD_HEIGHT - 1);
 8000a68:	88ba      	ldrh	r2, [r7, #4]
 8000a6a:	883b      	ldrh	r3, [r7, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a72:	bfa8      	it	ge
 8000a74:	f44f 73a0 	movge.w	r3, #320	@ 0x140
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	813b      	strh	r3, [r7, #8]
	ILI9341_SetWindow(x, y, x1, y1);
 8000a7e:	893b      	ldrh	r3, [r7, #8]
 8000a80:	897a      	ldrh	r2, [r7, #10]
 8000a82:	88b9      	ldrh	r1, [r7, #4]
 8000a84:	88f8      	ldrh	r0, [r7, #6]
 8000a86:	f7ff ff85 	bl	8000994 <ILI9341_SetWindow>
	uint32_t n = (uint32_t) (x1 - x + 1) * (uint32_t) (y1 - y + 1);
 8000a8a:	897a      	ldrh	r2, [r7, #10]
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	3301      	adds	r3, #1
 8000a92:	4619      	mov	r1, r3
 8000a94:	893a      	ldrh	r2, [r7, #8]
 8000a96:	88bb      	ldrh	r3, [r7, #4]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	fb01 f303 	mul.w	r3, r1, r3
 8000aa0:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000aa2:	e003      	b.n	8000aac <ILI9341_FillRect+0x82>
		ILI9341_WriteData16(c);
 8000aa4:	8c3b      	ldrh	r3, [r7, #32]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ff5f 	bl	800096a <ILI9341_WriteData16>
	while (n--)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	1e5a      	subs	r2, r3, #1
 8000ab0:	60fa      	str	r2, [r7, #12]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f6      	bne.n	8000aa4 <ILI9341_FillRect+0x7a>
 8000ab6:	e000      	b.n	8000aba <ILI9341_FillRect+0x90>
		return;
 8000ab8:	bf00      	nop
}
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd90      	pop	{r4, r7, pc}

08000ac0 <ILI9341_FillScreen>:
void ILI9341_FillScreen(uint16_t c) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, c);
 8000aca:	88fb      	ldrh	r3, [r7, #6]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ad2:	22f0      	movs	r2, #240	@ 0xf0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f7ff ffa7 	bl	8000a2a <ILI9341_FillRect>
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <fw_rand>:
	}
}

/* ----- LCG 난수 (컨페티/각도 지터용) ----- */
static uint32_t fw_seed = 0x31415927u;
static inline uint32_t fw_rand(void){
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
    fw_seed = fw_seed * 1664525u + 1013904223u;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	@ (8000b08 <fw_rand+0x24>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a07      	ldr	r2, [pc, #28]	@ (8000b0c <fw_rand+0x28>)
 8000aee:	fb03 f202 	mul.w	r2, r3, r2
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <fw_rand+0x2c>)
 8000af4:	4413      	add	r3, r2
 8000af6:	4a04      	ldr	r2, [pc, #16]	@ (8000b08 <fw_rand+0x24>)
 8000af8:	6013      	str	r3, [r2, #0]
    return fw_seed;
 8000afa:	4b03      	ldr	r3, [pc, #12]	@ (8000b08 <fw_rand+0x24>)
 8000afc:	681b      	ldr	r3, [r3, #0]
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bc80      	pop	{r7}
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	2000015c 	.word	0x2000015c
 8000b0c:	0019660d 	.word	0x0019660d
 8000b10:	3c6ef35f 	.word	0x3c6ef35f

08000b14 <PutDot2>:

/* 안전한 사각 점 찍기(2x2 기본) */
static inline void PutDot2(int x, int y, uint16_t c){
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b08b      	sub	sp, #44	@ 0x2c
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	4613      	mov	r3, r2
 8000b20:	80fb      	strh	r3, [r7, #6]
    if ((unsigned)x < LCD_WIDTH && (unsigned)y < LCD_HEIGHT) {
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2bef      	cmp	r3, #239	@ 0xef
 8000b26:	d833      	bhi.n	8000b90 <PutDot2+0x7c>
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000b2e:	d22f      	bcs.n	8000b90 <PutDot2+0x7c>
        int x0 = (x>0)?(x-1):x, y0 = (y>0)?(y-1):y;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	dd02      	ble.n	8000b3c <PutDot2+0x28>
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <PutDot2+0x2a>
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	dd02      	ble.n	8000b4c <PutDot2+0x38>
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	e000      	b.n	8000b4e <PutDot2+0x3a>
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	61bb      	str	r3, [r7, #24]
        int w = (x0+2 <= LCD_WIDTH)  ? 2 : (LCD_WIDTH  - x0);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	2bee      	cmp	r3, #238	@ 0xee
 8000b54:	dd03      	ble.n	8000b5e <PutDot2+0x4a>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000b5c:	e000      	b.n	8000b60 <PutDot2+0x4c>
 8000b5e:	2302      	movs	r3, #2
 8000b60:	617b      	str	r3, [r7, #20]
        int h = (y0+2 <= LCD_HEIGHT) ? 2 : (LCD_HEIGHT - y0);
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8000b68:	dd03      	ble.n	8000b72 <PutDot2+0x5e>
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000b70:	e000      	b.n	8000b74 <PutDot2+0x60>
 8000b72:	2302      	movs	r3, #2
 8000b74:	613b      	str	r3, [r7, #16]
        ILI9341_FillRect(x0, y0, w, h, c);
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	b298      	uxth	r0, r3
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	b29c      	uxth	r4, r3
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	4623      	mov	r3, r4
 8000b8c:	f7ff ff4d 	bl	8000a2a <ILI9341_FillRect>
    }
}
 8000b90:	bf00      	nop
 8000b92:	3724      	adds	r7, #36	@ 0x24
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}

08000b98 <DrawFilledCircle>:
		cx += 6 * scale;
	}
}

/* circles + pacman */
static void DrawFilledCircle(int xc, int yc, int r, uint16_t color) {
 8000b98:	b5b0      	push	{r4, r5, r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af02      	add	r7, sp, #8
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
 8000ba4:	807b      	strh	r3, [r7, #2]
	for (int y = -r; y <= r; y++) {
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	425b      	negs	r3, r3
 8000baa:	617b      	str	r3, [r7, #20]
 8000bac:	e048      	b.n	8000c40 <DrawFilledCircle+0xa8>
		int dx = (int) (sqrtf((float) r * r - (float) y * y) + 0.5f);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff fb86 	bl	80002c0 <__aeabi_i2f>
 8000bb4:	4604      	mov	r4, r0
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fb82 	bl	80002c0 <__aeabi_i2f>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4620      	mov	r0, r4
 8000bc2:	f7ff fbd1 	bl	8000368 <__aeabi_fmul>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461d      	mov	r5, r3
 8000bca:	6978      	ldr	r0, [r7, #20]
 8000bcc:	f7ff fb78 	bl	80002c0 <__aeabi_i2f>
 8000bd0:	4604      	mov	r4, r0
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f7ff fb74 	bl	80002c0 <__aeabi_i2f>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f7ff fbc3 	bl	8000368 <__aeabi_fmul>
 8000be2:	4603      	mov	r3, r0
 8000be4:	4619      	mov	r1, r3
 8000be6:	4628      	mov	r0, r5
 8000be8:	f7ff fab4 	bl	8000154 <__aeabi_fsub>
 8000bec:	4603      	mov	r3, r0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 ff48 	bl	8004a84 <sqrtf>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff faac 	bl	8000158 <__addsf3>
 8000c00:	4603      	mov	r3, r0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd8c 	bl	8000720 <__aeabi_f2iz>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	613b      	str	r3, [r7, #16]
		ILI9341_FillRect(xc - dx, yc + y, 2 * dx + 1, 1, color);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	b298      	uxth	r0, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	b29a      	uxth	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	4413      	add	r3, r2
 8000c22:	b299      	uxth	r1, r3
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29a      	uxth	r2, r3
 8000c30:	887b      	ldrh	r3, [r7, #2]
 8000c32:	9300      	str	r3, [sp, #0]
 8000c34:	2301      	movs	r3, #1
 8000c36:	f7ff fef8 	bl	8000a2a <ILI9341_FillRect>
	for (int y = -r; y <= r; y++) {
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	617b      	str	r3, [r7, #20]
 8000c40:	697a      	ldr	r2, [r7, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	ddb2      	ble.n	8000bae <DrawFilledCircle+0x16>
	}
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c54 <DrawPacman>:
		DrawLineV(x + w - 1 - i, y + r, h - 2 * r, 1, c);
	}
}

static void DrawPacman(int xc, int yc, int r, float mouth_deg, uint16_t color,
		uint16_t bg) {
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b098      	sub	sp, #96	@ 0x60
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	603b      	str	r3, [r7, #0]
	DrawFilledCircle(xc, yc, r, color);
 8000c62:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	68b9      	ldr	r1, [r7, #8]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff ff94 	bl	8000b98 <DrawFilledCircle>
	float a = mouth_deg * 3.1415926f / 180.f;
 8000c70:	4989      	ldr	r1, [pc, #548]	@ (8000e98 <DrawPacman+0x244>)
 8000c72:	6838      	ldr	r0, [r7, #0]
 8000c74:	f7ff fb78 	bl	8000368 <__aeabi_fmul>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	4988      	ldr	r1, [pc, #544]	@ (8000e9c <DrawPacman+0x248>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fc27 	bl	80004d0 <__aeabi_fdiv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	647b      	str	r3, [r7, #68]	@ 0x44
	int x1 = xc, y1 = yc;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x2 = xc + (int) (r * cosf(a / 2)), y2 = yc - (int) (r * sinf(a / 2));
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f7ff fb16 	bl	80002c0 <__aeabi_i2f>
 8000c94:	4604      	mov	r4, r0
 8000c96:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000c9a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000c9c:	f7ff fc18 	bl	80004d0 <__aeabi_fdiv>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 ff08 	bl	8004ab8 <cosf>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	4619      	mov	r1, r3
 8000cac:	4620      	mov	r0, r4
 8000cae:	f7ff fb5b 	bl	8000368 <__aeabi_fmul>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fd33 	bl	8000720 <__aeabi_f2iz>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fafc 	bl	80002c0 <__aeabi_i2f>
 8000cc8:	4604      	mov	r4, r0
 8000cca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000cce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000cd0:	f7ff fbfe 	bl	80004d0 <__aeabi_fdiv>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 ff26 	bl	8004b28 <sinf>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4620      	mov	r0, r4
 8000ce2:	f7ff fb41 	bl	8000368 <__aeabi_fmul>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fd19 	bl	8000720 <__aeabi_f2iz>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	637b      	str	r3, [r7, #52]	@ 0x34
	int x3 = xc + (int) (r * cosf(-a / 2)), y3 = yc - (int) (r * sinf(-a / 2));
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff fae2 	bl	80002c0 <__aeabi_i2f>
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d00:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000d04:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fbe1 	bl	80004d0 <__aeabi_fdiv>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4618      	mov	r0, r3
 8000d12:	f003 fed1 	bl	8004ab8 <cosf>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4620      	mov	r0, r4
 8000d1c:	f7ff fb24 	bl	8000368 <__aeabi_fmul>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fcfc 	bl	8000720 <__aeabi_f2iz>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fac5 	bl	80002c0 <__aeabi_i2f>
 8000d36:	4604      	mov	r4, r0
 8000d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d3a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000d3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fbc4 	bl	80004d0 <__aeabi_fdiv>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 feec 	bl	8004b28 <sinf>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4619      	mov	r1, r3
 8000d54:	4620      	mov	r0, r4
 8000d56:	f7ff fb07 	bl	8000368 <__aeabi_fmul>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fcdf 	bl	8000720 <__aeabi_f2iz>
 8000d62:	4602      	mov	r2, r0
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	1a9b      	subs	r3, r3, r2
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int miny = y1;
 8000d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d6c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y2 < miny)
 8000d6e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d72:	429a      	cmp	r2, r3
 8000d74:	da01      	bge.n	8000d7a <DrawPacman+0x126>
		miny = y2;
 8000d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d78:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y3 < miny)
 8000d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	da01      	bge.n	8000d86 <DrawPacman+0x132>
		miny = y3;
 8000d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d84:	657b      	str	r3, [r7, #84]	@ 0x54
	int maxy = y1;
 8000d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d88:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y2 > maxy)
 8000d8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	dd01      	ble.n	8000d96 <DrawPacman+0x142>
		maxy = y2;
 8000d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d94:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y3 > maxy)
 8000d96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	dd01      	ble.n	8000da2 <DrawPacman+0x14e>
		maxy = y3;
 8000d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000da0:	653b      	str	r3, [r7, #80]	@ 0x50
	for (int y = miny; y <= maxy; y++) {
 8000da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000da4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000da6:	e102      	b.n	8000fae <DrawPacman+0x35a>
		int xs[3], n = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	64bb      	str	r3, [r7, #72]	@ 0x48
#define EDGE(xa,ya,xb,yb) if(!((ya<y&&yb<y)||(ya>y&&yb>y)||(ya==yb))){ float t=(ya==yb)?0.f:((float)(y-ya)/(float)(yb-ya)); xs[n++]=xa+(int)((xb-xa)*t); }
		EDGE(x1, y1, x2, y2);
 8000dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000db0:	429a      	cmp	r2, r3
 8000db2:	da03      	bge.n	8000dbc <DrawPacman+0x168>
 8000db4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000db6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000db8:	429a      	cmp	r2, r3
 8000dba:	db40      	blt.n	8000e3e <DrawPacman+0x1ea>
 8000dbc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dd03      	ble.n	8000dcc <DrawPacman+0x178>
 8000dc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	dc38      	bgt.n	8000e3e <DrawPacman+0x1ea>
 8000dcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d034      	beq.n	8000e3e <DrawPacman+0x1ea>
 8000dd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d013      	beq.n	8000e04 <DrawPacman+0x1b0>
 8000ddc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000dde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa6c 	bl	80002c0 <__aeabi_i2f>
 8000de8:	4604      	mov	r4, r0
 8000dea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fa65 	bl	80002c0 <__aeabi_i2f>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4620      	mov	r0, r4
 8000dfc:	f7ff fb68 	bl	80004d0 <__aeabi_fdiv>
 8000e00:	4603      	mov	r3, r0
 8000e02:	e001      	b.n	8000e08 <DrawPacman+0x1b4>
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000e0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fa55 	bl	80002c0 <__aeabi_i2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff faa4 	bl	8000368 <__aeabi_fmul>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff fc7c 	bl	8000720 <__aeabi_f2iz>
 8000e28:	4601      	mov	r1, r0
 8000e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e2c:	1c5a      	adds	r2, r3, #1
 8000e2e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000e30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e32:	440a      	add	r2, r1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	3358      	adds	r3, #88	@ 0x58
 8000e38:	443b      	add	r3, r7
 8000e3a:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x2, y2, x3, y3);
 8000e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e42:	429a      	cmp	r2, r3
 8000e44:	da03      	bge.n	8000e4e <DrawPacman+0x1fa>
 8000e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	db45      	blt.n	8000eda <DrawPacman+0x286>
 8000e4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e52:	429a      	cmp	r2, r3
 8000e54:	dd03      	ble.n	8000e5e <DrawPacman+0x20a>
 8000e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dc3d      	bgt.n	8000eda <DrawPacman+0x286>
 8000e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d039      	beq.n	8000eda <DrawPacman+0x286>
 8000e66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d018      	beq.n	8000ea0 <DrawPacman+0x24c>
 8000e6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fa23 	bl	80002c0 <__aeabi_i2f>
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fa1c 	bl	80002c0 <__aeabi_i2f>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	f7ff fb1f 	bl	80004d0 <__aeabi_fdiv>
 8000e92:	4603      	mov	r3, r0
 8000e94:	e006      	b.n	8000ea4 <DrawPacman+0x250>
 8000e96:	bf00      	nop
 8000e98:	40490fda 	.word	0x40490fda
 8000e9c:	43340000 	.word	0x43340000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fa07 	bl	80002c0 <__aeabi_i2f>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fa56 	bl	8000368 <__aeabi_fmul>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff fc2e 	bl	8000720 <__aeabi_f2iz>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ec8:	1c5a      	adds	r2, r3, #1
 8000eca:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000ecc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ece:	440a      	add	r2, r1
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	3358      	adds	r3, #88	@ 0x58
 8000ed4:	443b      	add	r3, r7
 8000ed6:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x3, y3, x1, y1);
 8000eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	da03      	bge.n	8000eea <DrawPacman+0x296>
 8000ee2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ee4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	db40      	blt.n	8000f6c <DrawPacman+0x318>
 8000eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	dd03      	ble.n	8000efa <DrawPacman+0x2a6>
 8000ef2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	dc38      	bgt.n	8000f6c <DrawPacman+0x318>
 8000efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000efc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d034      	beq.n	8000f6c <DrawPacman+0x318>
 8000f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d013      	beq.n	8000f32 <DrawPacman+0x2de>
 8000f0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff f9d5 	bl	80002c0 <__aeabi_i2f>
 8000f16:	4604      	mov	r4, r0
 8000f18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff f9ce 	bl	80002c0 <__aeabi_i2f>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4619      	mov	r1, r3
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f7ff fad1 	bl	80004d0 <__aeabi_fdiv>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	e001      	b.n	8000f36 <DrawPacman+0x2e2>
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f9be 	bl	80002c0 <__aeabi_i2f>
 8000f44:	4603      	mov	r3, r0
 8000f46:	6a39      	ldr	r1, [r7, #32]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fa0d 	bl	8000368 <__aeabi_fmul>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fbe5 	bl	8000720 <__aeabi_f2iz>
 8000f56:	4601      	mov	r1, r0
 8000f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000f5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f60:	440a      	add	r2, r1
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	3358      	adds	r3, #88	@ 0x58
 8000f66:	443b      	add	r3, r7
 8000f68:	f843 2c48 	str.w	r2, [r3, #-72]
#undef EDGE
		if (n >= 2) {
 8000f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	dd1a      	ble.n	8000fa8 <DrawPacman+0x354>
			if (xs[0] > xs[1]) {
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dd05      	ble.n	8000f86 <DrawPacman+0x332>
				int t = xs[0];
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	61fb      	str	r3, [r7, #28]
				xs[0] = xs[1];
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	613b      	str	r3, [r7, #16]
				xs[1] = t;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	617b      	str	r3, [r7, #20]
			}
			ILI9341_FillRect(xs[0], y, xs[1] - xs[0] + 1, 1, COLOR_BLACK);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	b298      	uxth	r0, r3
 8000f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f7ff fd41 	bl	8000a2a <ILI9341_FillRect>
	for (int y = miny; y <= maxy; y++) {
 8000fa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000faa:	3301      	adds	r3, #1
 8000fac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000fae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	f77f aef8 	ble.w	8000da8 <DrawPacman+0x154>
		}
	}
	/* 눈 */
	ILI9341_FillRect(xc + r / 5, yc - r / 2, r / 6, r / 6, COLOR_BLACK);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <DrawPacman+0x3c0>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1052      	asrs	r2, r2, #1
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	4413      	add	r3, r2
 8000fce:	b298      	uxth	r0, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	0fda      	lsrs	r2, r3, #31
 8000fd4:	4413      	add	r3, r2
 8000fd6:	105b      	asrs	r3, r3, #1
 8000fd8:	425b      	negs	r3, r3
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b299      	uxth	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <DrawPacman+0x3c4>)
 8000fe8:	fb82 4203 	smull	r4, r2, r2, r3
 8000fec:	17db      	asrs	r3, r3, #31
 8000fee:	1ad3      	subs	r3, r2, r3
 8000ff0:	b29c      	uxth	r4, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a08      	ldr	r2, [pc, #32]	@ (8001018 <DrawPacman+0x3c4>)
 8000ff6:	fb82 5203 	smull	r5, r2, r2, r3
 8000ffa:	17db      	asrs	r3, r3, #31
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	2200      	movs	r2, #0
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	4622      	mov	r2, r4
 8001006:	f7ff fd10 	bl	8000a2a <ILI9341_FillRect>
}
 800100a:	bf00      	nop
 800100c:	3758      	adds	r7, #88	@ 0x58
 800100e:	46bd      	mov	sp, r7
 8001010:	bdb0      	pop	{r4, r5, r7, pc}
 8001012:	bf00      	nop
 8001014:	66666667 	.word	0x66666667
 8001018:	2aaaaaab 	.word	0x2aaaaaab

0800101c <DrawGhost>:

	/* 눈: 왼쪽에 위치하도록 이동 */
	ILI9341_FillRect(xc - r / 5 - r / 6, yc - r / 2, r / 6, r / 6, COLOR_BLACK);
}

static void DrawGhost(int x, int y, int w, int h, uint16_t body, uint16_t eye) {
 800101c:	b5b0      	push	{r4, r5, r7, lr}
 800101e:	b08e      	sub	sp, #56	@ 0x38
 8001020:	af02      	add	r7, sp, #8
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
 8001028:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x, y + h / 4, w, 3 * h / 4, body);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	b298      	uxth	r0, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	da00      	bge.n	8001036 <DrawGhost+0x1a>
 8001034:	3303      	adds	r3, #3
 8001036:	109b      	asrs	r3, r3, #2
 8001038:	b29a      	uxth	r2, r3
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	b29b      	uxth	r3, r3
 800103e:	4413      	add	r3, r2
 8001040:	b299      	uxth	r1, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	b29c      	uxth	r4, r3
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4613      	mov	r3, r2
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	4413      	add	r3, r2
 800104e:	2b00      	cmp	r3, #0
 8001050:	da00      	bge.n	8001054 <DrawGhost+0x38>
 8001052:	3303      	adds	r3, #3
 8001054:	109b      	asrs	r3, r3, #2
 8001056:	b29a      	uxth	r2, r3
 8001058:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4613      	mov	r3, r2
 8001060:	4622      	mov	r2, r4
 8001062:	f7ff fce2 	bl	8000a2a <ILI9341_FillRect>
	int r = w / 2;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0fda      	lsrs	r2, r3, #31
 800106a:	4413      	add	r3, r2
 800106c:	105b      	asrs	r3, r3, #1
 800106e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int yy = 0; yy < h / 2; yy++) {
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001074:	e04b      	b.n	800110e <DrawGhost+0xf2>
		int dx = (int) sqrtf((float) r * r - (float) (r - yy) * (r - yy));
 8001076:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001078:	f7ff f922 	bl	80002c0 <__aeabi_i2f>
 800107c:	4604      	mov	r4, r0
 800107e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001080:	f7ff f91e 	bl	80002c0 <__aeabi_i2f>
 8001084:	4603      	mov	r3, r0
 8001086:	4619      	mov	r1, r3
 8001088:	4620      	mov	r0, r4
 800108a:	f7ff f96d 	bl	8000368 <__aeabi_fmul>
 800108e:	4603      	mov	r3, r0
 8001090:	461d      	mov	r5, r3
 8001092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f911 	bl	80002c0 <__aeabi_i2f>
 800109e:	4604      	mov	r4, r0
 80010a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f90a 	bl	80002c0 <__aeabi_i2f>
 80010ac:	4603      	mov	r3, r0
 80010ae:	4619      	mov	r1, r3
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff f959 	bl	8000368 <__aeabi_fmul>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4619      	mov	r1, r3
 80010ba:	4628      	mov	r0, r5
 80010bc:	f7ff f84a 	bl	8000154 <__aeabi_fsub>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f003 fcde 	bl	8004a84 <sqrtf>
 80010c8:	4603      	mov	r3, r0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fb28 	bl	8000720 <__aeabi_f2iz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	617b      	str	r3, [r7, #20]
		ILI9341_FillRect(x + r - dx, y + yy, 2 * dx, 1, body);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4413      	add	r3, r2
 80010de:	b29a      	uxth	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b298      	uxth	r0, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4413      	add	r3, r2
 80010f2:	b299      	uxth	r1, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001100:	9300      	str	r3, [sp, #0]
 8001102:	2301      	movs	r3, #1
 8001104:	f7ff fc91 	bl	8000a2a <ILI9341_FillRect>
	for (int yy = 0; yy < h / 2; yy++) {
 8001108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800110a:	3301      	adds	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	0fda      	lsrs	r2, r3, #31
 8001112:	4413      	add	r3, r2
 8001114:	105b      	asrs	r3, r3, #1
 8001116:	461a      	mov	r2, r3
 8001118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800111a:	4293      	cmp	r3, r2
 800111c:	dbab      	blt.n	8001076 <DrawGhost+0x5a>
	}
	int tooth = w / 5;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a76      	ldr	r2, [pc, #472]	@ (80012fc <DrawGhost+0x2e0>)
 8001122:	fb82 1203 	smull	r1, r2, r2, r3
 8001126:	1052      	asrs	r2, r2, #1
 8001128:	17db      	asrs	r3, r3, #31
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001132:	e02d      	b.n	8001190 <DrawGhost+0x174>
		if (i % 2 == 0)
 8001134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b00      	cmp	r3, #0
 800113c:	d125      	bne.n	800118a <DrawGhost+0x16e>
			ILI9341_FillRect(x + i * tooth, y + h - (h / 8), tooth, h / 8,
 800113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001140:	b29b      	uxth	r3, r3
 8001142:	6a3a      	ldr	r2, [r7, #32]
 8001144:	b292      	uxth	r2, r2
 8001146:	fb02 f303 	mul.w	r3, r2, r3
 800114a:	b29a      	uxth	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	b29b      	uxth	r3, r3
 8001150:	4413      	add	r3, r2
 8001152:	b298      	uxth	r0, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	b29a      	uxth	r2, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29a      	uxth	r2, r3
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	2b00      	cmp	r3, #0
 8001164:	da00      	bge.n	8001168 <DrawGhost+0x14c>
 8001166:	3307      	adds	r3, #7
 8001168:	10db      	asrs	r3, r3, #3
 800116a:	425b      	negs	r3, r3
 800116c:	b29b      	uxth	r3, r3
 800116e:	4413      	add	r3, r2
 8001170:	b299      	uxth	r1, r3
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	b29a      	uxth	r2, r3
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	da00      	bge.n	800117e <DrawGhost+0x162>
 800117c:	3307      	adds	r3, #7
 800117e:	10db      	asrs	r3, r3, #3
 8001180:	b29b      	uxth	r3, r3
 8001182:	2400      	movs	r4, #0
 8001184:	9400      	str	r4, [sp, #0]
 8001186:	f7ff fc50 	bl	8000a2a <ILI9341_FillRect>
	for (int i = 0; i < 5; i++)
 800118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800118c:	3301      	adds	r3, #1
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001192:	2b04      	cmp	r3, #4
 8001194:	ddce      	ble.n	8001134 <DrawGhost+0x118>
			COLOR_BLACK);
	int ex = x + w / 4, ey = y + h / 3;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b00      	cmp	r3, #0
 800119a:	da00      	bge.n	800119e <DrawGhost+0x182>
 800119c:	3303      	adds	r3, #3
 800119e:	109b      	asrs	r3, r3, #2
 80011a0:	461a      	mov	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4413      	add	r3, r2
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4a55      	ldr	r2, [pc, #340]	@ (8001300 <DrawGhost+0x2e4>)
 80011ac:	fb82 1203 	smull	r1, r2, r2, r3
 80011b0:	17db      	asrs	r3, r3, #31
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	68ba      	ldr	r2, [r7, #8]
 80011b6:	4413      	add	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
	ILI9341_FillRect(ex, ey, w / 6, h / 6, COLOR_WHITE);
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	b298      	uxth	r0, r3
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	b299      	uxth	r1, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001304 <DrawGhost+0x2e8>)
 80011c6:	fb82 4203 	smull	r4, r2, r2, r3
 80011ca:	17db      	asrs	r3, r3, #31
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	b29c      	uxth	r4, r3
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001304 <DrawGhost+0x2e8>)
 80011d4:	fb82 5203 	smull	r5, r2, r2, r3
 80011d8:	17db      	asrs	r3, r3, #31
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	b29b      	uxth	r3, r3
 80011de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	4622      	mov	r2, r4
 80011e6:	f7ff fc20 	bl	8000a2a <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2, ey, w / 6, h / 6, COLOR_WHITE);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	0fda      	lsrs	r2, r3, #31
 80011ee:	4413      	add	r3, r2
 80011f0:	105b      	asrs	r3, r3, #1
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	4413      	add	r3, r2
 80011fa:	b298      	uxth	r0, r3
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	b299      	uxth	r1, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a40      	ldr	r2, [pc, #256]	@ (8001304 <DrawGhost+0x2e8>)
 8001204:	fb82 4203 	smull	r4, r2, r2, r3
 8001208:	17db      	asrs	r3, r3, #31
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b29c      	uxth	r4, r3
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	4a3c      	ldr	r2, [pc, #240]	@ (8001304 <DrawGhost+0x2e8>)
 8001212:	fb82 5203 	smull	r5, r2, r2, r3
 8001216:	17db      	asrs	r3, r3, #31
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001220:	9200      	str	r2, [sp, #0]
 8001222:	4622      	mov	r2, r4
 8001224:	f7ff fc01 	bl	8000a2a <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 12, ey + h / 12, w / 12, w / 12, eye);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a36      	ldr	r2, [pc, #216]	@ (8001304 <DrawGhost+0x2e8>)
 800122c:	fb82 1203 	smull	r1, r2, r2, r3
 8001230:	1052      	asrs	r2, r2, #1
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b298      	uxth	r0, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4a30      	ldr	r2, [pc, #192]	@ (8001304 <DrawGhost+0x2e8>)
 8001244:	fb82 1203 	smull	r1, r2, r2, r3
 8001248:	1052      	asrs	r2, r2, #1
 800124a:	17db      	asrs	r3, r3, #31
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	b29a      	uxth	r2, r3
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4413      	add	r3, r2
 8001256:	b299      	uxth	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a2a      	ldr	r2, [pc, #168]	@ (8001304 <DrawGhost+0x2e8>)
 800125c:	fb82 4203 	smull	r4, r2, r2, r3
 8001260:	1052      	asrs	r2, r2, #1
 8001262:	17db      	asrs	r3, r3, #31
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b29c      	uxth	r4, r3
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a26      	ldr	r2, [pc, #152]	@ (8001304 <DrawGhost+0x2e8>)
 800126c:	fb82 5203 	smull	r5, r2, r2, r3
 8001270:	1052      	asrs	r2, r2, #1
 8001272:	17db      	asrs	r3, r3, #31
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29a      	uxth	r2, r3
 8001278:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	4622      	mov	r2, r4
 8001282:	f7ff fbd2 	bl	8000a2a <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2 + w / 12, ey + h / 12, w / 12, w / 12, eye);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	0fda      	lsrs	r2, r3, #31
 800128a:	4413      	add	r3, r2
 800128c:	105b      	asrs	r3, r3, #1
 800128e:	b29a      	uxth	r2, r3
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	b29b      	uxth	r3, r3
 8001294:	4413      	add	r3, r2
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	491a      	ldr	r1, [pc, #104]	@ (8001304 <DrawGhost+0x2e8>)
 800129c:	fb81 0103 	smull	r0, r1, r1, r3
 80012a0:	1049      	asrs	r1, r1, #1
 80012a2:	17db      	asrs	r3, r3, #31
 80012a4:	1acb      	subs	r3, r1, r3
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4413      	add	r3, r2
 80012aa:	b298      	uxth	r0, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	4a15      	ldr	r2, [pc, #84]	@ (8001304 <DrawGhost+0x2e8>)
 80012b0:	fb82 1203 	smull	r1, r2, r2, r3
 80012b4:	1052      	asrs	r2, r2, #1
 80012b6:	17db      	asrs	r3, r3, #31
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	b299      	uxth	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001304 <DrawGhost+0x2e8>)
 80012c8:	fb82 4203 	smull	r4, r2, r2, r3
 80012cc:	1052      	asrs	r2, r2, #1
 80012ce:	17db      	asrs	r3, r3, #31
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29c      	uxth	r4, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <DrawGhost+0x2e8>)
 80012d8:	fb82 5203 	smull	r5, r2, r2, r3
 80012dc:	1052      	asrs	r2, r2, #1
 80012de:	17db      	asrs	r3, r3, #31
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	4613      	mov	r3, r2
 80012ec:	4622      	mov	r2, r4
 80012ee:	f7ff fb9c 	bl	8000a2a <ILI9341_FillRect>
}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	@ 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bdb0      	pop	{r4, r5, r7, pc}
 80012fa:	bf00      	nop
 80012fc:	66666667 	.word	0x66666667
 8001300:	55555556 	.word	0x55555556
 8001304:	2aaaaaab 	.word	0x2aaaaaab

08001308 <ds_lcg>:
	g_mirror_xy = 0;
}

/* --- DeadScreen 전용 LCG 난수 --- */
static uint32_t ds_seed = 0x13572468u;
static inline uint32_t ds_lcg(void){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    ds_seed = ds_seed * 1664525u + 1013904223u;
 800130c:	4b07      	ldr	r3, [pc, #28]	@ (800132c <ds_lcg+0x24>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <ds_lcg+0x28>)
 8001312:	fb03 f202 	mul.w	r2, r3, r2
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <ds_lcg+0x2c>)
 8001318:	4413      	add	r3, r2
 800131a:	4a04      	ldr	r2, [pc, #16]	@ (800132c <ds_lcg+0x24>)
 800131c:	6013      	str	r3, [r2, #0]
    return ds_seed;
 800131e:	4b03      	ldr	r3, [pc, #12]	@ (800132c <ds_lcg+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000160 	.word	0x20000160
 8001330:	0019660d 	.word	0x0019660d
 8001334:	3c6ef35f 	.word	0x3c6ef35f

08001338 <PutDashH>:

/* --- 작은 가로 대시(‘-’) 찍기: 중심(xc,yc), 길이 len, 두께 th --- */
static inline void PutDashH(int xc, int yc, int len, int th, uint16_t col){
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b089      	sub	sp, #36	@ 0x24
 800133c:	af02      	add	r7, sp, #8
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]
    if (len < 1) len = 1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	dc01      	bgt.n	8001350 <PutDashH+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	607b      	str	r3, [r7, #4]
    if (th  < 1) th  = 1;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	dc01      	bgt.n	800135a <PutDashH+0x22>
 8001356:	2301      	movs	r3, #1
 8001358:	603b      	str	r3, [r7, #0]
    int x0 = xc - len/2;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	0fda      	lsrs	r2, r3, #31
 800135e:	4413      	add	r3, r2
 8001360:	105b      	asrs	r3, r3, #1
 8001362:	425b      	negs	r3, r3
 8001364:	461a      	mov	r2, r3
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4413      	add	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
    int y0 = yc - th/2;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	0fda      	lsrs	r2, r3, #31
 8001370:	4413      	add	r3, r2
 8001372:	105b      	asrs	r3, r3, #1
 8001374:	425b      	negs	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4413      	add	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
    if (x0 < 0) { len -= -x0; x0 = 0; }
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	da05      	bge.n	8001390 <PutDashH+0x58>
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	4413      	add	r3, r2
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
    if (y0 < 0) { th  -= -y0; y0 = 0; }
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da05      	bge.n	80013a2 <PutDashH+0x6a>
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	4413      	add	r3, r2
 800139c:	603b      	str	r3, [r7, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
    if (x0 + len > LCD_WIDTH)  len = LCD_WIDTH  - x0;
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4413      	add	r3, r2
 80013a8:	2bf0      	cmp	r3, #240	@ 0xf0
 80013aa:	dd03      	ble.n	80013b4 <PutDashH+0x7c>
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80013b2:	607b      	str	r3, [r7, #4]
    if (y0 + th  > LCD_HEIGHT) th  = LCD_HEIGHT - y0;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	4413      	add	r3, r2
 80013ba:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80013be:	dd03      	ble.n	80013c8 <PutDashH+0x90>
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80013c6:	603b      	str	r3, [r7, #0]
    if (len > 0 && th > 0)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	dd0f      	ble.n	80013ee <PutDashH+0xb6>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd0c      	ble.n	80013ee <PutDashH+0xb6>
        ILI9341_FillRect(x0, y0, len, th, col);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	b298      	uxth	r0, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	b299      	uxth	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	b29a      	uxth	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b29c      	uxth	r4, r3
 80013e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	4623      	mov	r3, r4
 80013ea:	f7ff fb1e 	bl	8000a2a <ILI9341_FillRect>
}
 80013ee:	bf00      	nop
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd90      	pop	{r4, r7, pc}
	...

080013f8 <DeadScreen_Draw>:

/* ===== 사망 폭발: '-' 대시가 링처럼 퍼지고, 중심부터 서서히 사라짐 ===== */
static void DeadScreen_Draw(void) {
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b0a3      	sub	sp, #140	@ 0x8c
 80013fc:	af02      	add	r7, sp, #8
    /* 폭발 중심: 팩맨 현재 픽셀 좌표 */
    const int cx = pacman.x * GRID_SIZE + GRID_SIZE / 2;
 80013fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001684 <DeadScreen_Draw+0x28c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	3308      	adds	r3, #8
 8001406:	65fb      	str	r3, [r7, #92]	@ 0x5c
    const int cy = pacman.y * GRID_SIZE + GRID_SIZE / 2;
 8001408:	4b9e      	ldr	r3, [pc, #632]	@ (8001684 <DeadScreen_Draw+0x28c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	3308      	adds	r3, #8
 8001410:	65bb      	str	r3, [r7, #88]	@ 0x58
    /* 반경: 화면 전체의 약 90%까지 허용 */
    const int full = (LCD_WIDTH < LCD_HEIGHT ? LCD_WIDTH : LCD_HEIGHT) * 0.9f;
 8001412:	23d8      	movs	r3, #216	@ 0xd8
 8001414:	657b      	str	r3, [r7, #84]	@ 0x54

    int roomL = cx, roomR = LCD_WIDTH  - 1 - cx;
 8001416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001418:	653b      	str	r3, [r7, #80]	@ 0x50
 800141a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141c:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001420:	64fb      	str	r3, [r7, #76]	@ 0x4c
    int roomT = cy, roomB = LCD_HEIGHT - 1 - cy;
 8001422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001428:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800142c:	3301      	adds	r3, #1
 800142e:	647b      	str	r3, [r7, #68]	@ 0x44
    int edgeLimited = roomL;
 8001430:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001432:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (roomR < edgeLimited) edgeLimited = roomR;
 8001434:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001436:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001438:	429a      	cmp	r2, r3
 800143a:	da01      	bge.n	8001440 <DeadScreen_Draw+0x48>
 800143c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800143e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (roomT < edgeLimited) edgeLimited = roomT;
 8001440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001442:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001444:	429a      	cmp	r2, r3
 8001446:	da01      	bge.n	800144c <DeadScreen_Draw+0x54>
 8001448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800144a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (roomB < edgeLimited) edgeLimited = roomB;
 800144c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800144e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001450:	429a      	cmp	r2, r3
 8001452:	da01      	bge.n	8001458 <DeadScreen_Draw+0x60>
 8001454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001456:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* 두 배 정도 넓힌 폭발 반경 */
    const int maxr = (edgeLimited < full ? edgeLimited : (int)full);
 8001458:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800145a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800145c:	4293      	cmp	r3, r2
 800145e:	bfa8      	it	ge
 8001460:	4613      	movge	r3, r2
 8001462:	643b      	str	r3, [r7, #64]	@ 0x40

    /* 파라미터 */
    const int step_r = 3;          // 반경 증가 속도
 8001464:	2303      	movs	r3, #3
 8001466:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const int frame_delay_ms = 10; // 프레임 간 딜레이
 8001468:	230a      	movs	r3, #10
 800146a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* 화면 어둡게 시작 */
    ILI9341_FillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, COLOR_BLACK);
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001474:	22f0      	movs	r2, #240	@ 0xf0
 8001476:	2100      	movs	r1, #0
 8001478:	2000      	movs	r0, #0
 800147a:	f7ff fad6 	bl	8000a2a <ILI9341_FillRect>

    /* 1) 중심에서 바깥으로: '-' 대시 링을 뿌린다 */
    for (int r = 0; r <= maxr; r += step_r) {
 800147e:	2300      	movs	r3, #0
 8001480:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001482:	e13c      	b.n	80016fe <DeadScreen_Draw+0x306>
        /* 색상 그라데이션: 노랑 → 오렌지 → 빨강 */
        uint16_t col = (r < (int)(maxr * 0.35f)) ? COLOR_YELLOW :
 8001484:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001486:	f7fe ff1b 	bl	80002c0 <__aeabi_i2f>
 800148a:	4603      	mov	r3, r0
 800148c:	497e      	ldr	r1, [pc, #504]	@ (8001688 <DeadScreen_Draw+0x290>)
 800148e:	4618      	mov	r0, r3
 8001490:	f7fe ff6a 	bl	8000368 <__aeabi_fmul>
 8001494:	4603      	mov	r3, r0
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f942 	bl	8000720 <__aeabi_f2iz>
 800149c:	4602      	mov	r2, r0
 800149e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014a0:	4293      	cmp	r3, r2
 80014a2:	db15      	blt.n	80014d0 <DeadScreen_Draw+0xd8>
                       (r < (int)(maxr * 0.70f)) ? COLOR_ORANGE : COLOR_RED;
 80014a4:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80014a6:	f7fe ff0b 	bl	80002c0 <__aeabi_i2f>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4977      	ldr	r1, [pc, #476]	@ (800168c <DeadScreen_Draw+0x294>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ff5a 	bl	8000368 <__aeabi_fmul>
 80014b4:	4603      	mov	r3, r0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f932 	bl	8000720 <__aeabi_f2iz>
 80014bc:	4602      	mov	r2, r0
        uint16_t col = (r < (int)(maxr * 0.35f)) ? COLOR_YELLOW :
 80014be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80014c0:	4293      	cmp	r3, r2
 80014c2:	da02      	bge.n	80014ca <DeadScreen_Draw+0xd2>
 80014c4:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80014c8:	e004      	b.n	80014d4 <DeadScreen_Draw+0xdc>
 80014ca:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014ce:	e001      	b.n	80014d4 <DeadScreen_Draw+0xdc>
 80014d0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014d4:	857b      	strh	r3, [r7, #42]	@ 0x2a

        /* 링 위 대시 개수(둘레 비례, 하한 10) */
        int count = 8 + (int)((2.f * 3.1415926f * r) / 12.f);
 80014d6:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80014d8:	f7fe fef2 	bl	80002c0 <__aeabi_i2f>
 80014dc:	4603      	mov	r3, r0
 80014de:	496c      	ldr	r1, [pc, #432]	@ (8001690 <DeadScreen_Draw+0x298>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7fe ff41 	bl	8000368 <__aeabi_fmul>
 80014e6:	4603      	mov	r3, r0
 80014e8:	496a      	ldr	r1, [pc, #424]	@ (8001694 <DeadScreen_Draw+0x29c>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe fff0 	bl	80004d0 <__aeabi_fdiv>
 80014f0:	4603      	mov	r3, r0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f914 	bl	8000720 <__aeabi_f2iz>
 80014f8:	4603      	mov	r3, r0
 80014fa:	3308      	adds	r3, #8
 80014fc:	677b      	str	r3, [r7, #116]	@ 0x74
        if (count < 10) count = 10;
 80014fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001500:	2b09      	cmp	r3, #9
 8001502:	dc01      	bgt.n	8001508 <DeadScreen_Draw+0x110>
 8001504:	230a      	movs	r3, #10
 8001506:	677b      	str	r3, [r7, #116]	@ 0x74

        for (int i = 0; i < count; ++i) {
 8001508:	2300      	movs	r3, #0
 800150a:	673b      	str	r3, [r7, #112]	@ 0x70
 800150c:	e081      	b.n	8001612 <DeadScreen_Draw+0x21a>
            float base = (2.f * 3.1415926f * i) / (float)count;
 800150e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001510:	f7fe fed6 	bl	80002c0 <__aeabi_i2f>
 8001514:	4603      	mov	r3, r0
 8001516:	495e      	ldr	r1, [pc, #376]	@ (8001690 <DeadScreen_Draw+0x298>)
 8001518:	4618      	mov	r0, r3
 800151a:	f7fe ff25 	bl	8000368 <__aeabi_fmul>
 800151e:	4603      	mov	r3, r0
 8001520:	461c      	mov	r4, r3
 8001522:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001524:	f7fe fecc 	bl	80002c0 <__aeabi_i2f>
 8001528:	4603      	mov	r3, r0
 800152a:	4619      	mov	r1, r3
 800152c:	4620      	mov	r0, r4
 800152e:	f7fe ffcf 	bl	80004d0 <__aeabi_fdiv>
 8001532:	4603      	mov	r3, r0
 8001534:	61bb      	str	r3, [r7, #24]
            /* 각도/반경에 약간 지터(±1~2° 수준) */
            float jitter = ((int)(ds_lcg() % 61) - 30) * (3.1415926f / 1800.f);
 8001536:	f7ff fee7 	bl	8001308 <ds_lcg>
 800153a:	4601      	mov	r1, r0
 800153c:	4b56      	ldr	r3, [pc, #344]	@ (8001698 <DeadScreen_Draw+0x2a0>)
 800153e:	fba3 2301 	umull	r2, r3, r3, r1
 8001542:	091a      	lsrs	r2, r3, #4
 8001544:	4613      	mov	r3, r2
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	1a9b      	subs	r3, r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	1aca      	subs	r2, r1, r3
 8001550:	4613      	mov	r3, r2
 8001552:	3b1e      	subs	r3, #30
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe feb3 	bl	80002c0 <__aeabi_i2f>
 800155a:	4603      	mov	r3, r0
 800155c:	494f      	ldr	r1, [pc, #316]	@ (800169c <DeadScreen_Draw+0x2a4>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe ff02 	bl	8000368 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	617b      	str	r3, [r7, #20]
            float a = base + jitter;
 8001568:	6979      	ldr	r1, [r7, #20]
 800156a:	69b8      	ldr	r0, [r7, #24]
 800156c:	f7fe fdf4 	bl	8000158 <__addsf3>
 8001570:	4603      	mov	r3, r0
 8001572:	613b      	str	r3, [r7, #16]

            int x = cx + (int)(r * cosf(a));
 8001574:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001576:	f7fe fea3 	bl	80002c0 <__aeabi_i2f>
 800157a:	4604      	mov	r4, r0
 800157c:	6938      	ldr	r0, [r7, #16]
 800157e:	f003 fa9b 	bl	8004ab8 <cosf>
 8001582:	4603      	mov	r3, r0
 8001584:	4619      	mov	r1, r3
 8001586:	4620      	mov	r0, r4
 8001588:	f7fe feee 	bl	8000368 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f8c6 	bl	8000720 <__aeabi_f2iz>
 8001594:	4602      	mov	r2, r0
 8001596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001598:	4413      	add	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]
            int y = cy + (int)(r * sinf(a));
 800159c:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800159e:	f7fe fe8f 	bl	80002c0 <__aeabi_i2f>
 80015a2:	4604      	mov	r4, r0
 80015a4:	6938      	ldr	r0, [r7, #16]
 80015a6:	f003 fabf 	bl	8004b28 <sinf>
 80015aa:	4603      	mov	r3, r0
 80015ac:	4619      	mov	r1, r3
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7fe feda 	bl	8000368 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff f8b2 	bl	8000720 <__aeabi_f2iz>
 80015bc:	4602      	mov	r2, r0
 80015be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80015c0:	4413      	add	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]

            /* 대시 길이/두께를 살짝 랜덤화 (길이 4~8, 두께 1~2) */
            int len = 4 + (int)(ds_lcg() % 5);       // 4..8
 80015c4:	f7ff fea0 	bl	8001308 <ds_lcg>
 80015c8:	4601      	mov	r1, r0
 80015ca:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <DeadScreen_Draw+0x2a8>)
 80015cc:	fba3 2301 	umull	r2, r3, r3, r1
 80015d0:	089a      	lsrs	r2, r3, #2
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	1aca      	subs	r2, r1, r3
 80015da:	4613      	mov	r3, r2
 80015dc:	3304      	adds	r3, #4
 80015de:	607b      	str	r3, [r7, #4]
            int th  = 1 + (int)(ds_lcg() & 1);       // 1..2
 80015e0:	f7ff fe92 	bl	8001308 <ds_lcg>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	3301      	adds	r3, #1
 80015ec:	603b      	str	r3, [r7, #0]

            /* 가로 대시로 찍기(‘-’ 느낌). 방향은 모두 수평로 통일 */
            if ((unsigned)x < LCD_WIDTH && (unsigned)y < LCD_HEIGHT)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2bef      	cmp	r3, #239	@ 0xef
 80015f2:	d80b      	bhi.n	800160c <DeadScreen_Draw+0x214>
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80015fa:	d207      	bcs.n	800160c <DeadScreen_Draw+0x214>
                PutDashH(x, y, len, th, col);
 80015fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f7ff fe96 	bl	8001338 <PutDashH>
        for (int i = 0; i < count; ++i) {
 800160c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800160e:	3301      	adds	r3, #1
 8001610:	673b      	str	r3, [r7, #112]	@ 0x70
 8001612:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001614:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001616:	429a      	cmp	r2, r3
 8001618:	f6ff af79 	blt.w	800150e <DeadScreen_Draw+0x116>
        }

        /* 중심을 조금씩 비워 ‘산산이’ 느낌 */
        if ((r % (step_r * 2)) == 0) {
 800161c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800161e:	005a      	lsls	r2, r3, #1
 8001620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001622:	fb93 f1f2 	sdiv	r1, r3, r2
 8001626:	fb01 f202 	mul.w	r2, r1, r2
 800162a:	1a9b      	subs	r3, r3, r2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d15e      	bne.n	80016ee <DeadScreen_Draw+0x2f6>
            int holes = count / 4;
 8001630:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001632:	2b00      	cmp	r3, #0
 8001634:	da00      	bge.n	8001638 <DeadScreen_Draw+0x240>
 8001636:	3303      	adds	r3, #3
 8001638:	109b      	asrs	r3, r3, #2
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
            for (int k = 0; k < holes; ++k) {
 800163c:	2300      	movs	r3, #0
 800163e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001640:	e051      	b.n	80016e6 <DeadScreen_Draw+0x2ee>
                int rx = cx + ((int)ds_lcg() % (r ? r : 1)) - r/2;
 8001642:	f7ff fe61 	bl	8001308 <ds_lcg>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <DeadScreen_Draw+0x25c>
 8001650:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001652:	e000      	b.n	8001656 <DeadScreen_Draw+0x25e>
 8001654:	2301      	movs	r3, #1
 8001656:	fb92 f1f3 	sdiv	r1, r2, r3
 800165a:	fb01 f303 	mul.w	r3, r1, r3
 800165e:	1ad2      	subs	r2, r2, r3
 8001660:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001662:	441a      	add	r2, r3
 8001664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001666:	0fd9      	lsrs	r1, r3, #31
 8001668:	440b      	add	r3, r1
 800166a:	105b      	asrs	r3, r3, #1
 800166c:	425b      	negs	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	623b      	str	r3, [r7, #32]
                int ry = cy + ((int)ds_lcg() % (r ? r : 1)) - r/2;
 8001672:	f7ff fe49 	bl	8001308 <ds_lcg>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800167c:	2b00      	cmp	r3, #0
 800167e:	d011      	beq.n	80016a4 <DeadScreen_Draw+0x2ac>
 8001680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001682:	e010      	b.n	80016a6 <DeadScreen_Draw+0x2ae>
 8001684:	20000000 	.word	0x20000000
 8001688:	3eb33333 	.word	0x3eb33333
 800168c:	3f333333 	.word	0x3f333333
 8001690:	40c90fda 	.word	0x40c90fda
 8001694:	41400000 	.word	0x41400000
 8001698:	4325c53f 	.word	0x4325c53f
 800169c:	3ae4c387 	.word	0x3ae4c387
 80016a0:	cccccccd 	.word	0xcccccccd
 80016a4:	2301      	movs	r3, #1
 80016a6:	fb92 f1f3 	sdiv	r1, r2, r3
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80016b2:	441a      	add	r2, r3
 80016b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80016b6:	0fd9      	lsrs	r1, r3, #31
 80016b8:	440b      	add	r3, r1
 80016ba:	105b      	asrs	r3, r3, #1
 80016bc:	425b      	negs	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	61fb      	str	r3, [r7, #28]
                if ((unsigned)rx < LCD_WIDTH && (unsigned)ry < LCD_HEIGHT)
 80016c2:	6a3b      	ldr	r3, [r7, #32]
 80016c4:	2bef      	cmp	r3, #239	@ 0xef
 80016c6:	d80b      	bhi.n	80016e0 <DeadScreen_Draw+0x2e8>
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80016ce:	d207      	bcs.n	80016e0 <DeadScreen_Draw+0x2e8>
                    ILI9341_DrawPixel(rx, ry, COLOR_BLACK);
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	b291      	uxth	r1, r2
 80016d8:	2200      	movs	r2, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff f986 	bl	80009ec <ILI9341_DrawPixel>
            for (int k = 0; k < holes; ++k) {
 80016e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016e2:	3301      	adds	r3, #1
 80016e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	429a      	cmp	r2, r3
 80016ec:	dba9      	blt.n	8001642 <DeadScreen_Draw+0x24a>
            }
        }

        HAL_Delay(frame_delay_ms);
 80016ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 faf9 	bl	8002ce8 <HAL_Delay>
    for (int r = 0; r <= maxr; r += step_r) {
 80016f6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80016f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016fa:	4413      	add	r3, r2
 80016fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016fe:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001702:	429a      	cmp	r2, r3
 8001704:	f77f aebe 	ble.w	8001484 <DeadScreen_Draw+0x8c>
    }

    /* 2) 페이드아웃: 중심에서부터 검정 원을 키워가며 지운다 */
    for (int er = 2; er <= maxr; er += 3) {
 8001708:	2302      	movs	r3, #2
 800170a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800170c:	e00b      	b.n	8001726 <DeadScreen_Draw+0x32e>
        DrawFilledCircle(cx, cy, er, COLOR_BLACK);   // 가운데부터 서서히 사라짐
 800170e:	2300      	movs	r3, #0
 8001710:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001712:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001714:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001716:	f7ff fa3f 	bl	8000b98 <DrawFilledCircle>
        HAL_Delay(12);
 800171a:	200c      	movs	r0, #12
 800171c:	f001 fae4 	bl	8002ce8 <HAL_Delay>
    for (int er = 2; er <= maxr; er += 3) {
 8001720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001722:	3303      	adds	r3, #3
 8001724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001726:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001728:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800172a:	429a      	cmp	r2, r3
 800172c:	ddef      	ble.n	800170e <DeadScreen_Draw+0x316>
    }

    /* 3) 잔여 점수 정리(조금의 랜덤 블랙 스플랫) */
    for (int t = 0; t < 3; ++t) {
 800172e:	2300      	movs	r3, #0
 8001730:	667b      	str	r3, [r7, #100]	@ 0x64
 8001732:	e040      	b.n	80017b6 <DeadScreen_Draw+0x3be>
        int n = 60 + (ds_lcg() % 40);
 8001734:	f7ff fde8 	bl	8001308 <ds_lcg>
 8001738:	4601      	mov	r1, r0
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <DeadScreen_Draw+0x3d0>)
 800173c:	fba3 2301 	umull	r2, r3, r3, r1
 8001740:	095a      	lsrs	r2, r3, #5
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1aca      	subs	r2, r1, r3
 800174c:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 8001750:	637b      	str	r3, [r7, #52]	@ 0x34
        for (int j = 0; j < n; ++j) {
 8001752:	2300      	movs	r3, #0
 8001754:	663b      	str	r3, [r7, #96]	@ 0x60
 8001756:	e024      	b.n	80017a2 <DeadScreen_Draw+0x3aa>
            int rx = (int)(ds_lcg() % LCD_WIDTH);
 8001758:	f7ff fdd6 	bl	8001308 <ds_lcg>
 800175c:	4601      	mov	r1, r0
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <DeadScreen_Draw+0x3d4>)
 8001760:	fba3 2301 	umull	r2, r3, r3, r1
 8001764:	09da      	lsrs	r2, r3, #7
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	011b      	lsls	r3, r3, #4
 800176e:	1aca      	subs	r2, r1, r3
 8001770:	633a      	str	r2, [r7, #48]	@ 0x30
            int ry = (int)(ds_lcg() % LCD_HEIGHT);
 8001772:	f7ff fdc9 	bl	8001308 <ds_lcg>
 8001776:	4601      	mov	r1, r0
 8001778:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <DeadScreen_Draw+0x3d0>)
 800177a:	fba3 2301 	umull	r2, r3, r3, r1
 800177e:	0a1a      	lsrs	r2, r3, #8
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	019b      	lsls	r3, r3, #6
 8001788:	1aca      	subs	r2, r1, r3
 800178a:	62fa      	str	r2, [r7, #44]	@ 0x2c
            ILI9341_DrawPixel(rx, ry, COLOR_BLACK);
 800178c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800178e:	b29b      	uxth	r3, r3
 8001790:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001792:	b291      	uxth	r1, r2
 8001794:	2200      	movs	r2, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff f928 	bl	80009ec <ILI9341_DrawPixel>
        for (int j = 0; j < n; ++j) {
 800179c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800179e:	3301      	adds	r3, #1
 80017a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80017a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a6:	429a      	cmp	r2, r3
 80017a8:	dbd6      	blt.n	8001758 <DeadScreen_Draw+0x360>
        }
        HAL_Delay(8);
 80017aa:	2008      	movs	r0, #8
 80017ac:	f001 fa9c 	bl	8002ce8 <HAL_Delay>
    for (int t = 0; t < 3; ++t) {
 80017b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b2:	3301      	adds	r3, #1
 80017b4:	667b      	str	r3, [r7, #100]	@ 0x64
 80017b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	ddbb      	ble.n	8001734 <DeadScreen_Draw+0x33c>
    }
}
 80017bc:	bf00      	nop
 80017be:	bf00      	nop
 80017c0:	3784      	adds	r7, #132	@ 0x84
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	cccccccd 	.word	0xcccccccd
 80017cc:	88888889 	.word	0x88888889

080017d0 <Firework_BurstFadeMasked>:


/* ----- 축포: 폭발 → 중심부터 페이드아웃 (팩맨 마스킹 지원) ----- */
static void Firework_BurstFadeMasked(int xc, int yc, int rmax,
                                     int mask_x, int mask_y, int mask_r_plus_gap) {
 80017d0:	b590      	push	{r4, r7, lr}
 80017d2:	b097      	sub	sp, #92	@ 0x5c
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
 80017dc:	603b      	str	r3, [r7, #0]
    if (rmax < 10) rmax = 10;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b09      	cmp	r3, #9
 80017e2:	dc01      	bgt.n	80017e8 <Firework_BurstFadeMasked+0x18>
 80017e4:	230a      	movs	r3, #10
 80017e6:	607b      	str	r3, [r7, #4]
    const int step_r = 3;
 80017e8:	2303      	movs	r3, #3
 80017ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* 1) 폭발: 링을 늘리며 점 뿌리기 (팩맨 원 안은 마스킹) */
    for (int r = 3; r <= rmax; r += step_r) {
 80017ec:	2303      	movs	r3, #3
 80017ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80017f0:	e0c9      	b.n	8001986 <Firework_BurstFadeMasked+0x1b6>
        uint16_t col = (r < (int)(rmax * 0.33f)) ? COLOR_YELLOW :
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe fd64 	bl	80002c0 <__aeabi_i2f>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4995      	ldr	r1, [pc, #596]	@ (8001a50 <Firework_BurstFadeMasked+0x280>)
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fdb3 	bl	8000368 <__aeabi_fmul>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe ff8b 	bl	8000720 <__aeabi_f2iz>
 800180a:	4602      	mov	r2, r0
 800180c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800180e:	4293      	cmp	r3, r2
 8001810:	db15      	blt.n	800183e <Firework_BurstFadeMasked+0x6e>
                       (r < (int)(rmax * 0.66f)) ? COLOR_ORANGE : COLOR_WHITE;
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7fe fd54 	bl	80002c0 <__aeabi_i2f>
 8001818:	4603      	mov	r3, r0
 800181a:	498e      	ldr	r1, [pc, #568]	@ (8001a54 <Firework_BurstFadeMasked+0x284>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fda3 	bl	8000368 <__aeabi_fmul>
 8001822:	4603      	mov	r3, r0
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe ff7b 	bl	8000720 <__aeabi_f2iz>
 800182a:	4602      	mov	r2, r0
        uint16_t col = (r < (int)(rmax * 0.33f)) ? COLOR_YELLOW :
 800182c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800182e:	4293      	cmp	r3, r2
 8001830:	da02      	bge.n	8001838 <Firework_BurstFadeMasked+0x68>
 8001832:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001836:	e004      	b.n	8001842 <Firework_BurstFadeMasked+0x72>
 8001838:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800183c:	e001      	b.n	8001842 <Firework_BurstFadeMasked+0x72>
 800183e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001842:	85fb      	strh	r3, [r7, #46]	@ 0x2e

        int count = 10 + (int)((2.f * 3.1415926f * r) / 12.f);
 8001844:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001846:	f7fe fd3b 	bl	80002c0 <__aeabi_i2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4982      	ldr	r1, [pc, #520]	@ (8001a58 <Firework_BurstFadeMasked+0x288>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fd8a 	bl	8000368 <__aeabi_fmul>
 8001854:	4603      	mov	r3, r0
 8001856:	4981      	ldr	r1, [pc, #516]	@ (8001a5c <Firework_BurstFadeMasked+0x28c>)
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe39 	bl	80004d0 <__aeabi_fdiv>
 800185e:	4603      	mov	r3, r0
 8001860:	4618      	mov	r0, r3
 8001862:	f7fe ff5d 	bl	8000720 <__aeabi_f2iz>
 8001866:	4603      	mov	r3, r0
 8001868:	330a      	adds	r3, #10
 800186a:	653b      	str	r3, [r7, #80]	@ 0x50
        if (count > 50) count = 50;
 800186c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800186e:	2b32      	cmp	r3, #50	@ 0x32
 8001870:	dd01      	ble.n	8001876 <Firework_BurstFadeMasked+0xa6>
 8001872:	2332      	movs	r3, #50	@ 0x32
 8001874:	653b      	str	r3, [r7, #80]	@ 0x50

        for (int i = 0; i < count; ++i) {
 8001876:	2300      	movs	r3, #0
 8001878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800187a:	e079      	b.n	8001970 <Firework_BurstFadeMasked+0x1a0>
            float base = (2.f * 3.1415926f * i) / (float)count;
 800187c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800187e:	f7fe fd1f 	bl	80002c0 <__aeabi_i2f>
 8001882:	4603      	mov	r3, r0
 8001884:	4974      	ldr	r1, [pc, #464]	@ (8001a58 <Firework_BurstFadeMasked+0x288>)
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fd6e 	bl	8000368 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	461c      	mov	r4, r3
 8001890:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001892:	f7fe fd15 	bl	80002c0 <__aeabi_i2f>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f7fe fe18 	bl	80004d0 <__aeabi_fdiv>
 80018a0:	4603      	mov	r3, r0
 80018a2:	62bb      	str	r3, [r7, #40]	@ 0x28
            float jitter = ((int)(fw_rand()%61) - 30) * (3.1415926f/1800.f); // ±~1.7°
 80018a4:	f7ff f91e 	bl	8000ae4 <fw_rand>
 80018a8:	4601      	mov	r1, r0
 80018aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001a60 <Firework_BurstFadeMasked+0x290>)
 80018ac:	fba3 2301 	umull	r2, r3, r3, r1
 80018b0:	091a      	lsrs	r2, r3, #4
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	1aca      	subs	r2, r1, r3
 80018be:	4613      	mov	r3, r2
 80018c0:	3b1e      	subs	r3, #30
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fcfc 	bl	80002c0 <__aeabi_i2f>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4966      	ldr	r1, [pc, #408]	@ (8001a64 <Firework_BurstFadeMasked+0x294>)
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fd4b 	bl	8000368 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	627b      	str	r3, [r7, #36]	@ 0x24
            float a = base + jitter;
 80018d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80018da:	f7fe fc3d 	bl	8000158 <__addsf3>
 80018de:	4603      	mov	r3, r0
 80018e0:	623b      	str	r3, [r7, #32]

            int x = xc + (int)(r * cosf(a));
 80018e2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80018e4:	f7fe fcec 	bl	80002c0 <__aeabi_i2f>
 80018e8:	4604      	mov	r4, r0
 80018ea:	6a38      	ldr	r0, [r7, #32]
 80018ec:	f003 f8e4 	bl	8004ab8 <cosf>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4619      	mov	r1, r3
 80018f4:	4620      	mov	r0, r4
 80018f6:	f7fe fd37 	bl	8000368 <__aeabi_fmul>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe ff0f 	bl	8000720 <__aeabi_f2iz>
 8001902:	4602      	mov	r2, r0
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4413      	add	r3, r2
 8001908:	61fb      	str	r3, [r7, #28]
            int y = yc + (int)(r * sinf(a));
 800190a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800190c:	f7fe fcd8 	bl	80002c0 <__aeabi_i2f>
 8001910:	4604      	mov	r4, r0
 8001912:	6a38      	ldr	r0, [r7, #32]
 8001914:	f003 f908 	bl	8004b28 <sinf>
 8001918:	4603      	mov	r3, r0
 800191a:	4619      	mov	r1, r3
 800191c:	4620      	mov	r0, r4
 800191e:	f7fe fd23 	bl	8000368 <__aeabi_fmul>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fefb 	bl	8000720 <__aeabi_f2iz>
 800192a:	4602      	mov	r2, r0
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	4413      	add	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]

            /* ★ 마스킹: 팩맨 원(여유 포함) 내부면 건너뜀 */
            int dx = x - mask_x, dy = y - mask_y;
 8001932:	69fa      	ldr	r2, [r7, #28]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	613b      	str	r3, [r7, #16]
            if (dx*dx + dy*dy <= mask_r_plus_gap * mask_r_plus_gap) continue;
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fb03 f203 	mul.w	r2, r3, r3
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	fb03 f303 	mul.w	r3, r3, r3
 800194e:	441a      	add	r2, r3
 8001950:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001952:	fb03 f303 	mul.w	r3, r3, r3
 8001956:	429a      	cmp	r2, r3
 8001958:	dd06      	ble.n	8001968 <Firework_BurstFadeMasked+0x198>

            PutDot2(x, y, col);
 800195a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800195c:	461a      	mov	r2, r3
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	69f8      	ldr	r0, [r7, #28]
 8001962:	f7ff f8d7 	bl	8000b14 <PutDot2>
 8001966:	e000      	b.n	800196a <Firework_BurstFadeMasked+0x19a>
            if (dx*dx + dy*dy <= mask_r_plus_gap * mask_r_plus_gap) continue;
 8001968:	bf00      	nop
        for (int i = 0; i < count; ++i) {
 800196a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800196c:	3301      	adds	r3, #1
 800196e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001970:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001974:	429a      	cmp	r2, r3
 8001976:	db81      	blt.n	800187c <Firework_BurstFadeMasked+0xac>
        }
        HAL_Delay(10);
 8001978:	200a      	movs	r0, #10
 800197a:	f001 f9b5 	bl	8002ce8 <HAL_Delay>
    for (int r = 3; r <= rmax; r += step_r) {
 800197e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001982:	4413      	add	r3, r2
 8001984:	657b      	str	r3, [r7, #84]	@ 0x54
 8001986:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	f77f af31 	ble.w	80017f2 <Firework_BurstFadeMasked+0x22>
    }

    /* 2) 페이드: 중심부터 검정 원으로 지우기 */
    for (int er = 2; er <= rmax; er += 3) {
 8001990:	2302      	movs	r3, #2
 8001992:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001994:	e00b      	b.n	80019ae <Firework_BurstFadeMasked+0x1de>
        DrawFilledCircle(xc, yc, er, COLOR_BLACK);
 8001996:	2300      	movs	r3, #0
 8001998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800199a:	68b9      	ldr	r1, [r7, #8]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f7ff f8fb 	bl	8000b98 <DrawFilledCircle>
        HAL_Delay(12);
 80019a2:	200c      	movs	r0, #12
 80019a4:	f001 f9a0 	bl	8002ce8 <HAL_Delay>
    for (int er = 2; er <= rmax; er += 3) {
 80019a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019aa:	3303      	adds	r3, #3
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	ddef      	ble.n	8001996 <Firework_BurstFadeMasked+0x1c6>
    }

    /* 3) 가장자리 잔여 정리 */
    for (int t=0; t<3; ++t){
 80019b6:	2300      	movs	r3, #0
 80019b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80019ba:	e040      	b.n	8001a3e <Firework_BurstFadeMasked+0x26e>
        int n = 60 + (fw_rand()%40);
 80019bc:	f7ff f892 	bl	8000ae4 <fw_rand>
 80019c0:	4601      	mov	r1, r0
 80019c2:	4b29      	ldr	r3, [pc, #164]	@ (8001a68 <Firework_BurstFadeMasked+0x298>)
 80019c4:	fba3 2301 	umull	r2, r3, r3, r1
 80019c8:	095a      	lsrs	r2, r3, #5
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	1aca      	subs	r2, r1, r3
 80019d4:	f102 033c 	add.w	r3, r2, #60	@ 0x3c
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (int j=0;j<n;++j){
 80019da:	2300      	movs	r3, #0
 80019dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80019de:	e024      	b.n	8001a2a <Firework_BurstFadeMasked+0x25a>
            int rx = (int)(fw_rand()%LCD_WIDTH);
 80019e0:	f7ff f880 	bl	8000ae4 <fw_rand>
 80019e4:	4601      	mov	r1, r0
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <Firework_BurstFadeMasked+0x29c>)
 80019e8:	fba3 2301 	umull	r2, r3, r3, r1
 80019ec:	09da      	lsrs	r2, r3, #7
 80019ee:	4613      	mov	r3, r2
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	1a9b      	subs	r3, r3, r2
 80019f4:	011b      	lsls	r3, r3, #4
 80019f6:	1aca      	subs	r2, r1, r3
 80019f8:	637a      	str	r2, [r7, #52]	@ 0x34
            int ry = (int)(fw_rand()%LCD_HEIGHT);
 80019fa:	f7ff f873 	bl	8000ae4 <fw_rand>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4b19      	ldr	r3, [pc, #100]	@ (8001a68 <Firework_BurstFadeMasked+0x298>)
 8001a02:	fba3 2301 	umull	r2, r3, r3, r1
 8001a06:	0a1a      	lsrs	r2, r3, #8
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	1aca      	subs	r2, r1, r3
 8001a12:	633a      	str	r2, [r7, #48]	@ 0x30
            ILI9341_DrawPixel(rx, ry, COLOR_BLACK);
 8001a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a1a:	b291      	uxth	r1, r2
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe ffe4 	bl	80009ec <ILI9341_DrawPixel>
        for (int j=0;j<n;++j){
 8001a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a26:	3301      	adds	r3, #1
 8001a28:	643b      	str	r3, [r7, #64]	@ 0x40
 8001a2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	dbd6      	blt.n	80019e0 <Firework_BurstFadeMasked+0x210>
        }
        HAL_Delay(8);
 8001a32:	2008      	movs	r0, #8
 8001a34:	f001 f958 	bl	8002ce8 <HAL_Delay>
    for (int t=0; t<3; ++t){
 8001a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	ddbb      	ble.n	80019bc <Firework_BurstFadeMasked+0x1ec>
    }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	375c      	adds	r7, #92	@ 0x5c
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	3ea8f5c3 	.word	0x3ea8f5c3
 8001a54:	3f28f5c3 	.word	0x3f28f5c3
 8001a58:	40c90fda 	.word	0x40c90fda
 8001a5c:	41400000 	.word	0x41400000
 8001a60:	4325c53f 	.word	0x4325c53f
 8001a64:	3ae4c387 	.word	0x3ae4c387
 8001a68:	cccccccd 	.word	0xcccccccd
 8001a6c:	88888889 	.word	0x88888889

08001a70 <ClearScreen_Draw>:


/* ====== 문자 없이: 팩맨 + 주변 축포(2~3개), 절대 겹치지 않음 ====== */
static void ClearScreen_Draw(void){
 8001a70:	b590      	push	{r4, r7, lr}
 8001a72:	b093      	sub	sp, #76	@ 0x4c
 8001a74:	af02      	add	r7, sp, #8
    ILI9341_FillScreen(COLOR_BLACK);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f7ff f822 	bl	8000ac0 <ILI9341_FillScreen>
    fw_seed ^= (HAL_GetTick() | 0xA5A55A5Au);
 8001a7c:	f001 f92a 	bl	8002cd4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	4b82      	ldr	r3, [pc, #520]	@ (8001c8c <ClearScreen_Draw+0x21c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	4a82      	ldr	r2, [pc, #520]	@ (8001c90 <ClearScreen_Draw+0x220>)
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4053      	eors	r3, r2
 8001a8c:	4a80      	ldr	r2, [pc, #512]	@ (8001c90 <ClearScreen_Draw+0x220>)
 8001a8e:	6013      	str	r3, [r2, #0]

    /* 중앙 팩맨 */
    const int pcx = LCD_WIDTH/2;
 8001a90:	2378      	movs	r3, #120	@ 0x78
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const int pcy = LCD_HEIGHT/2 + 8;
 8001a94:	23a8      	movs	r3, #168	@ 0xa8
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
    const int pr  = (LCD_WIDTH < LCD_HEIGHT ? LCD_WIDTH : LCD_HEIGHT) / 6;
 8001a98:	2328      	movs	r3, #40	@ 0x28
 8001a9a:	627b      	str	r3, [r7, #36]	@ 0x24

    DrawPacman(pcx, pcy, pr, 24.f, COLOR_YELLOW, COLOR_BLACK);
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	9301      	str	r3, [sp, #4]
 8001aa0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	4b7b      	ldr	r3, [pc, #492]	@ (8001c94 <ClearScreen_Draw+0x224>)
 8001aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001aac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001aae:	f7ff f8d1 	bl	8000c54 <DrawPacman>
    HAL_Delay(120);
 8001ab2:	2078      	movs	r0, #120	@ 0x78
 8001ab4:	f001 f918 	bl	8002ce8 <HAL_Delay>
    DrawPacman(pcx, pcy, pr, 10.f, COLOR_YELLOW, COLOR_BLACK);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4b75      	ldr	r3, [pc, #468]	@ (8001c98 <ClearScreen_Draw+0x228>)
 8001ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ac8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001aca:	f7ff f8c3 	bl	8000c54 <DrawPacman>

    /* === 축포 파라미터 === */
    const int fireworks = 2 + (fw_rand()%2);         // 2 또는 3개
 8001ace:	f7ff f809 	bl	8000ae4 <fw_rand>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	3302      	adds	r3, #2
 8001ada:	623b      	str	r3, [r7, #32]
    const int screen_half = (LCD_WIDTH < LCD_HEIGHT ? LCD_WIDTH : LCD_HEIGHT) / 2;
 8001adc:	2378      	movs	r3, #120	@ 0x78
 8001ade:	61fb      	str	r3, [r7, #28]
    int fw_rmax = (int)(screen_half * 0.45f);        // 축포 최대 반경(화면 절반 미만)
 8001ae0:	69f8      	ldr	r0, [r7, #28]
 8001ae2:	f7fe fbed 	bl	80002c0 <__aeabi_i2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	496c      	ldr	r1, [pc, #432]	@ (8001c9c <ClearScreen_Draw+0x22c>)
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fc3c 	bl	8000368 <__aeabi_fmul>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fe14 	bl	8000720 <__aeabi_f2iz>
 8001af8:	4603      	mov	r3, r0
 8001afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const int GAP = 6;                                // 팩맨과 축포 점 사이 최소 여유
 8001afc:	2306      	movs	r3, #6
 8001afe:	61bb      	str	r3, [r7, #24]
    int ring_r = pr + GAP + fw_rmax;                 // ★ 배치 거리: 터져도 절대 안 겹침
 8001b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	4413      	add	r3, r2
 8001b06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b08:	4413      	add	r3, r2
 8001b0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* 화면 경계도 고려: 배치 반경이 너무 크면 축소 & rmax 조정 */
    int edge_lim = pcx; if (LCD_WIDTH-1-pcx < edge_lim) edge_lim = LCD_WIDTH-1-pcx;
 8001b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b12:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dd03      	ble.n	8001b24 <ClearScreen_Draw+0xb4>
 8001b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1e:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001b22:	637b      	str	r3, [r7, #52]	@ 0x34
    if (pcy < edge_lim) edge_lim = pcy;
 8001b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	da01      	bge.n	8001b30 <ClearScreen_Draw+0xc0>
 8001b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b2e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (LCD_HEIGHT-1-pcy < edge_lim) edge_lim = LCD_HEIGHT-1-pcy;
 8001b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b32:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001b36:	3301      	adds	r3, #1
 8001b38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dd04      	ble.n	8001b48 <ClearScreen_Draw+0xd8>
 8001b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b40:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8001b44:	3301      	adds	r3, #1
 8001b46:	637b      	str	r3, [r7, #52]	@ 0x34
    edge_lim -= (fw_rmax + 4);                       // 축포가 화면 밖으로 나가지 않게
 8001b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b4a:	3304      	adds	r3, #4
 8001b4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
    if (ring_r > edge_lim) {
 8001b52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dd13      	ble.n	8001b82 <ClearScreen_Draw+0x112>
        /* ring_r를 우선 edge에 맞추고, 부족하면 fw_rmax도 함께 줄임 */
        ring_r = edge_lim;
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
        if (ring_r < pr + GAP + 8) {
 8001b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	4413      	add	r3, r2
 8001b64:	3307      	adds	r3, #7
 8001b66:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dc0a      	bgt.n	8001b82 <ClearScreen_Draw+0x112>
            fw_rmax = (ring_r - pr - GAP);
 8001b6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	1ad2      	subs	r2, r2, r3
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
            if (fw_rmax < 10) fw_rmax = 10;
 8001b78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b7a:	2b09      	cmp	r3, #9
 8001b7c:	dc01      	bgt.n	8001b82 <ClearScreen_Draw+0x112>
 8001b7e:	230a      	movs	r3, #10
 8001b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    /* 축포 위치 배치: 등각 배치, 클램프 없이 (거리 보장 유지) */
    float base_ang = (float)(fw_rand()%360) * 3.1415926f/180.f;
 8001b82:	f7fe ffaf 	bl	8000ae4 <fw_rand>
 8001b86:	4602      	mov	r2, r0
 8001b88:	08d3      	lsrs	r3, r2, #3
 8001b8a:	4945      	ldr	r1, [pc, #276]	@ (8001ca0 <ClearScreen_Draw+0x230>)
 8001b8c:	fba1 1303 	umull	r1, r3, r1, r3
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001b96:	fb01 f303 	mul.w	r3, r1, r3
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fb8b 	bl	80002b8 <__aeabi_ui2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	493f      	ldr	r1, [pc, #252]	@ (8001ca4 <ClearScreen_Draw+0x234>)
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7fe fbde 	bl	8000368 <__aeabi_fmul>
 8001bac:	4603      	mov	r3, r0
 8001bae:	493e      	ldr	r1, [pc, #248]	@ (8001ca8 <ClearScreen_Draw+0x238>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fc8d 	bl	80004d0 <__aeabi_fdiv>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	617b      	str	r3, [r7, #20]
    for (int k=0; k<fireworks; ++k) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001bbe:	e05b      	b.n	8001c78 <ClearScreen_Draw+0x208>
        float a = base_ang + k * (2.f*3.1415926f / fireworks);
 8001bc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001bc2:	f7fe fb7d 	bl	80002c0 <__aeabi_i2f>
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	6a38      	ldr	r0, [r7, #32]
 8001bca:	f7fe fb79 	bl	80002c0 <__aeabi_i2f>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4836      	ldr	r0, [pc, #216]	@ (8001cac <ClearScreen_Draw+0x23c>)
 8001bd4:	f7fe fc7c 	bl	80004d0 <__aeabi_fdiv>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7fe fbc3 	bl	8000368 <__aeabi_fmul>
 8001be2:	4603      	mov	r3, r0
 8001be4:	4619      	mov	r1, r3
 8001be6:	6978      	ldr	r0, [r7, #20]
 8001be8:	f7fe fab6 	bl	8000158 <__addsf3>
 8001bec:	4603      	mov	r3, r0
 8001bee:	613b      	str	r3, [r7, #16]
        int fx = pcx + (int)(ring_r * cosf(a));
 8001bf0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001bf2:	f7fe fb65 	bl	80002c0 <__aeabi_i2f>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	6938      	ldr	r0, [r7, #16]
 8001bfa:	f002 ff5d 	bl	8004ab8 <cosf>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4619      	mov	r1, r3
 8001c02:	4620      	mov	r0, r4
 8001c04:	f7fe fbb0 	bl	8000368 <__aeabi_fmul>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fd88 	bl	8000720 <__aeabi_f2iz>
 8001c10:	4602      	mov	r2, r0
 8001c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c14:	4413      	add	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]
        int fy = pcy + (int)(ring_r * sinf(a));
 8001c18:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001c1a:	f7fe fb51 	bl	80002c0 <__aeabi_i2f>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	6938      	ldr	r0, [r7, #16]
 8001c22:	f002 ff81 	bl	8004b28 <sinf>
 8001c26:	4603      	mov	r3, r0
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7fe fb9c 	bl	8000368 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fd74 	bl	8000720 <__aeabi_f2iz>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c3c:	4413      	add	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]

        /* ★ 마스킹 반경: 팩맨 반지름 + 여유 */
        int mask_r_plus_gap = pr + GAP;
 8001c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	4413      	add	r3, r2
 8001c46:	607b      	str	r3, [r7, #4]

        /* 축포 1개 (마스킹 적용) */
        Firework_BurstFadeMasked(fx, fy, fw_rmax, pcx, pcy, mask_r_plus_gap);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c52:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c54:	68b9      	ldr	r1, [r7, #8]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fdba 	bl	80017d0 <Firework_BurstFadeMasked>

        /* 축포로 가려졌을 수 있으니 팩맨 한 번 더 덧그리기 */
        DrawPacman(pcx, pcy, pr, 12.f, COLOR_YELLOW, COLOR_BLACK);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	4b12      	ldr	r3, [pc, #72]	@ (8001cb0 <ClearScreen_Draw+0x240>)
 8001c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c6e:	f7fe fff1 	bl	8000c54 <DrawPacman>
    for (int k=0; k<fireworks; ++k) {
 8001c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c74:	3301      	adds	r3, #1
 8001c76:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c7a:	6a3b      	ldr	r3, [r7, #32]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	db9f      	blt.n	8001bc0 <ClearScreen_Draw+0x150>
    }

}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3744      	adds	r7, #68	@ 0x44
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	a5a55a5a 	.word	0xa5a55a5a
 8001c90:	2000015c 	.word	0x2000015c
 8001c94:	41c00000 	.word	0x41c00000
 8001c98:	41200000 	.word	0x41200000
 8001c9c:	3ee66666 	.word	0x3ee66666
 8001ca0:	16c16c17 	.word	0x16c16c17
 8001ca4:	40490fda 	.word	0x40490fda
 8001ca8:	43340000 	.word	0x43340000
 8001cac:	40c90fda 	.word	0x40c90fda
 8001cb0:	41400000 	.word	0x41400000

08001cb4 <ILI9341_Init>:
	}
	HAL_Delay(20);
}

/* ----------------------------- ILI9341 init ------------------------------ */
void ILI9341_Init(void) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8001cb8:	f7fe fd64 	bl	8000784 <LCD_CS_HIGH>
	LCD_WR_HIGH();
 8001cbc:	f7fe fd92 	bl	80007e4 <LCD_WR_HIGH>
	LCD_RD_HIGH();
 8001cc0:	f7fe fd9c 	bl	80007fc <LCD_RD_HIGH>
	LCD_RST_LOW();
 8001cc4:	f7fe fda6 	bl	8000814 <LCD_RST_LOW>
	HAL_Delay(20);
 8001cc8:	2014      	movs	r0, #20
 8001cca:	f001 f80d 	bl	8002ce8 <HAL_Delay>
	LCD_RST_HIGH();
 8001cce:	f7fe fdad 	bl	800082c <LCD_RST_HIGH>
	HAL_Delay(120);
 8001cd2:	2078      	movs	r0, #120	@ 0x78
 8001cd4:	f001 f808 	bl	8002ce8 <HAL_Delay>

	LCD_CS_LOW();
 8001cd8:	f7fe fd48 	bl	800076c <LCD_CS_LOW>

	ILI9341_WriteCmd(0x01);
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7fe fe22 	bl	8000926 <ILI9341_WriteCmd>
	HAL_Delay(5);
 8001ce2:	2005      	movs	r0, #5
 8001ce4:	f001 f800 	bl	8002ce8 <HAL_Delay>
	ILI9341_WriteCmd(0x28);
 8001ce8:	2028      	movs	r0, #40	@ 0x28
 8001cea:	f7fe fe1c 	bl	8000926 <ILI9341_WriteCmd>

	ILI9341_WriteCmd(0xCF);
 8001cee:	20cf      	movs	r0, #207	@ 0xcf
 8001cf0:	f7fe fe19 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f7fe fe27 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x83);
 8001cfa:	2083      	movs	r0, #131	@ 0x83
 8001cfc:	f7fe fe24 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x30);
 8001d00:	2030      	movs	r0, #48	@ 0x30
 8001d02:	f7fe fe21 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xED);
 8001d06:	20ed      	movs	r0, #237	@ 0xed
 8001d08:	f7fe fe0d 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x64);
 8001d0c:	2064      	movs	r0, #100	@ 0x64
 8001d0e:	f7fe fe1b 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x03);
 8001d12:	2003      	movs	r0, #3
 8001d14:	f7fe fe18 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x12);
 8001d18:	2012      	movs	r0, #18
 8001d1a:	f7fe fe15 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x81);
 8001d1e:	2081      	movs	r0, #129	@ 0x81
 8001d20:	f7fe fe12 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xE8);
 8001d24:	20e8      	movs	r0, #232	@ 0xe8
 8001d26:	f7fe fdfe 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x85);
 8001d2a:	2085      	movs	r0, #133	@ 0x85
 8001d2c:	f7fe fe0c 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x01);
 8001d30:	2001      	movs	r0, #1
 8001d32:	f7fe fe09 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x79);
 8001d36:	2079      	movs	r0, #121	@ 0x79
 8001d38:	f7fe fe06 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xCB);
 8001d3c:	20cb      	movs	r0, #203	@ 0xcb
 8001d3e:	f7fe fdf2 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x39);
 8001d42:	2039      	movs	r0, #57	@ 0x39
 8001d44:	f7fe fe00 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x2C);
 8001d48:	202c      	movs	r0, #44	@ 0x2c
 8001d4a:	f7fe fdfd 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7fe fdfa 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x34);
 8001d54:	2034      	movs	r0, #52	@ 0x34
 8001d56:	f7fe fdf7 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x02);
 8001d5a:	2002      	movs	r0, #2
 8001d5c:	f7fe fdf4 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xF7);
 8001d60:	20f7      	movs	r0, #247	@ 0xf7
 8001d62:	f7fe fde0 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x20);
 8001d66:	2020      	movs	r0, #32
 8001d68:	f7fe fdee 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xEA);
 8001d6c:	20ea      	movs	r0, #234	@ 0xea
 8001d6e:	f7fe fdda 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7fe fde8 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe fde5 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xC0);
 8001d7e:	20c0      	movs	r0, #192	@ 0xc0
 8001d80:	f7fe fdd1 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x26);
 8001d84:	2026      	movs	r0, #38	@ 0x26
 8001d86:	f7fe fddf 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC1);
 8001d8a:	20c1      	movs	r0, #193	@ 0xc1
 8001d8c:	f7fe fdcb 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x11);
 8001d90:	2011      	movs	r0, #17
 8001d92:	f7fe fdd9 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC5);
 8001d96:	20c5      	movs	r0, #197	@ 0xc5
 8001d98:	f7fe fdc5 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x35);
 8001d9c:	2035      	movs	r0, #53	@ 0x35
 8001d9e:	f7fe fdd3 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x3E);
 8001da2:	203e      	movs	r0, #62	@ 0x3e
 8001da4:	f7fe fdd0 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC7);
 8001da8:	20c7      	movs	r0, #199	@ 0xc7
 8001daa:	f7fe fdbc 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0xBE);
 8001dae:	20be      	movs	r0, #190	@ 0xbe
 8001db0:	f7fe fdca 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x36);
 8001db4:	2036      	movs	r0, #54	@ 0x36
 8001db6:	f7fe fdb6 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x48); /* MY=1, BGR=1 */
 8001dba:	2048      	movs	r0, #72	@ 0x48
 8001dbc:	f7fe fdc4 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x3A);
 8001dc0:	203a      	movs	r0, #58	@ 0x3a
 8001dc2:	f7fe fdb0 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x55); /* RGB565 */
 8001dc6:	2055      	movs	r0, #85	@ 0x55
 8001dc8:	f7fe fdbe 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xB1);
 8001dcc:	20b1      	movs	r0, #177	@ 0xb1
 8001dce:	f7fe fdaa 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7fe fdb8 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x1B);
 8001dd8:	201b      	movs	r0, #27
 8001dda:	f7fe fdb5 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xB6);
 8001dde:	20b6      	movs	r0, #182	@ 0xb6
 8001de0:	f7fe fda1 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x0A);
 8001de4:	200a      	movs	r0, #10
 8001de6:	f7fe fdaf 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0xA2);
 8001dea:	20a2      	movs	r0, #162	@ 0xa2
 8001dec:	f7fe fdac 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xF2);
 8001df0:	20f2      	movs	r0, #242	@ 0xf2
 8001df2:	f7fe fd98 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7fe fda6 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x26);
 8001dfc:	2026      	movs	r0, #38	@ 0x26
 8001dfe:	f7fe fd92 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x01);
 8001e02:	2001      	movs	r0, #1
 8001e04:	f7fe fda0 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x11);
 8001e08:	2011      	movs	r0, #17
 8001e0a:	f7fe fd8c 	bl	8000926 <ILI9341_WriteCmd>
	HAL_Delay(120);
 8001e0e:	2078      	movs	r0, #120	@ 0x78
 8001e10:	f000 ff6a 	bl	8002ce8 <HAL_Delay>
	ILI9341_WriteCmd(0x29);
 8001e14:	2029      	movs	r0, #41	@ 0x29
 8001e16:	f7fe fd86 	bl	8000926 <ILI9341_WriteCmd>
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <set_pwm_freq>:

/* ----------------------------- Buzzer (PWM) ------------------------------ */
/* duty 50% square: ARR = TIMER_TICK_HZ/freq - 1 , CCR = (ARR+1)/2 */
static void set_pwm_freq(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t hz) {
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]
	if (hz == 0) {
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d11c      	bne.n	8001e6c <set_pwm_freq+0x4c>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d104      	bne.n	8001e42 <set_pwm_freq+0x22>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8001e40:	e050      	b.n	8001ee4 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d104      	bne.n	8001e52 <set_pwm_freq+0x32>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	6393      	str	r3, [r2, #56]	@ 0x38
		return;
 8001e50:	e048      	b.n	8001ee4 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d104      	bne.n	8001e62 <set_pwm_freq+0x42>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63d3      	str	r3, [r2, #60]	@ 0x3c
		return;
 8001e60:	e040      	b.n	8001ee4 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2300      	movs	r3, #0
 8001e68:	6413      	str	r3, [r2, #64]	@ 0x40
		return;
 8001e6a:	e03b      	b.n	8001ee4 <set_pwm_freq+0xc4>
	}
	uint32_t arr = (TIMER_TICK_HZ / hz);
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001eec <set_pwm_freq+0xcc>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	617b      	str	r3, [r7, #20]
	if (arr < 2)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d801      	bhi.n	8001e80 <set_pwm_freq+0x60>
		arr = 2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	617b      	str	r3, [r7, #20]
	arr -= 1;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(htim, arr);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim, channel, (arr + 1) / 2);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d106      	bne.n	8001ea8 <set_pwm_freq+0x88>
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	0852      	lsrs	r2, r2, #1
 8001ea4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ea6:	e019      	b.n	8001edc <set_pwm_freq+0xbc>
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d106      	bne.n	8001ebc <set_pwm_freq+0x9c>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	6393      	str	r3, [r2, #56]	@ 0x38
 8001eba:	e00f      	b.n	8001edc <set_pwm_freq+0xbc>
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d106      	bne.n	8001ed0 <set_pwm_freq+0xb0>
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	085b      	lsrs	r3, r3, #1
 8001ecc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001ece:	e005      	b.n	8001edc <set_pwm_freq+0xbc>
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COUNTER(htim, 0);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ee4:	371c      	adds	r7, #28
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	000f4240 	.word	0x000f4240

08001ef0 <BUZZ_Start>:

void BUZZ_Start(void) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); /* PA11 */
 8001ef4:	210c      	movs	r1, #12
 8001ef6:	4804      	ldr	r0, [pc, #16]	@ (8001f08 <BUZZ_Start+0x18>)
 8001ef8:	f001 feb6 	bl	8003c68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); /* PB1  */
 8001efc:	210c      	movs	r1, #12
 8001efe:	4803      	ldr	r0, [pc, #12]	@ (8001f0c <BUZZ_Start+0x1c>)
 8001f00:	f001 feb2 	bl	8003c68 <HAL_TIM_PWM_Start>
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	200001dc 	.word	0x200001dc
 8001f0c:	20000224 	.word	0x20000224

08001f10 <BUZZ_Stop>:
void BUZZ_Stop(void) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <BUZZ_Stop+0x28>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001f1c:	4b07      	ldr	r3, [pc, #28]	@ (8001f3c <BUZZ_Stop+0x2c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8001f24:	210c      	movs	r1, #12
 8001f26:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <BUZZ_Stop+0x28>)
 8001f28:	f001 ff40 	bl	8003dac <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	4803      	ldr	r0, [pc, #12]	@ (8001f3c <BUZZ_Stop+0x2c>)
 8001f30:	f001 ff3c 	bl	8003dac <HAL_TIM_PWM_Stop>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200001dc 	.word	0x200001dc
 8001f3c:	20000224 	.word	0x20000224

08001f40 <BUZZ_SetFreq_TIM1>:
void BUZZ_SetFreq_TIM1(uint32_t hz) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim1, TIM_CHANNEL_4, hz);
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	210c      	movs	r1, #12
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <BUZZ_SetFreq_TIM1+0x1c>)
 8001f4e:	f7ff ff67 	bl	8001e20 <set_pwm_freq>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200001dc 	.word	0x200001dc

08001f60 <BUZZ_SetFreq_TIM3>:
void BUZZ_SetFreq_TIM3(uint32_t hz) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim3, TIM_CHANNEL_4, hz);
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	210c      	movs	r1, #12
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <BUZZ_SetFreq_TIM3+0x1c>)
 8001f6e:	f7ff ff57 	bl	8001e20 <set_pwm_freq>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000224 	.word	0x20000224

08001f80 <GameScreen_DrawMap>:
}

/* ----------------------------- Game UI ----------------------------- */

// 미로와 도트 그리기
void GameScreen_DrawMap(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(COLOR_BLACK);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7fe fd9a 	bl	8000ac0 <ILI9341_FillScreen>
	for (int y = 0; y < 20; y++) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	e041      	b.n	8002016 <GameScreen_DrawMap+0x96>
		for (int x = 0; x < 15; x++) {
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	e038      	b.n	800200a <GameScreen_DrawMap+0x8a>
			int px = x * GRID_SIZE;
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	607b      	str	r3, [r7, #4]
			int py = y * GRID_SIZE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	603b      	str	r3, [r7, #0]
			if (game_map[y][x] == 1) {
 8001fa4:	4920      	ldr	r1, [pc, #128]	@ (8002028 <GameScreen_DrawMap+0xa8>)
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	011b      	lsls	r3, r3, #4
 8001fac:	1a9b      	subs	r3, r3, r2
 8001fae:	18ca      	adds	r2, r1, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d10a      	bne.n	8001fd0 <GameScreen_DrawMap+0x50>
				// 벽 (파란색)
				ILI9341_FillRect(px, py, GRID_SIZE, GRID_SIZE, COLOR_BLUE);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	b298      	uxth	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b299      	uxth	r1, r3
 8001fc2:	231f      	movs	r3, #31
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2310      	movs	r3, #16
 8001fc8:	2210      	movs	r2, #16
 8001fca:	f7fe fd2e 	bl	8000a2a <ILI9341_FillRect>
 8001fce:	e019      	b.n	8002004 <GameScreen_DrawMap+0x84>
			} else if (game_map[y][x] == 2) {
 8001fd0:	4915      	ldr	r1, [pc, #84]	@ (8002028 <GameScreen_DrawMap+0xa8>)
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	011b      	lsls	r3, r3, #4
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	18ca      	adds	r2, r1, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4413      	add	r3, r2
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d10e      	bne.n	8002004 <GameScreen_DrawMap+0x84>
				// 도트 (흰색)
				ILI9341_FillRect(px + GRID_SIZE / 2 - DOT_SIZE / 2,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	3306      	adds	r3, #6
 8001fec:	b298      	uxth	r0, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	3306      	adds	r3, #6
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	2204      	movs	r2, #4
 8002000:	f7fe fd13 	bl	8000a2a <ILI9341_FillRect>
		for (int x = 0; x < 15; x++) {
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	3301      	adds	r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b0e      	cmp	r3, #14
 800200e:	ddc3      	ble.n	8001f98 <GameScreen_DrawMap+0x18>
	for (int y = 0; y < 20; y++) {
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2b13      	cmp	r3, #19
 800201a:	ddba      	ble.n	8001f92 <GameScreen_DrawMap+0x12>
						py + GRID_SIZE / 2 - DOT_SIZE / 2,
						DOT_SIZE, DOT_SIZE, COLOR_WHITE);
			}
		}
	}
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000030 	.word	0x20000030

0800202c <Game_ResetMap>:

void Game_ResetMap(void) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b0cc      	sub	sp, #304	@ 0x130
 8002030:	af00      	add	r7, sp, #0
	uint8_t initial_map[20][15] = { { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
 8002032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002036:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800203a:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <Game_ResetMap+0x44>)
 800203c:	4618      	mov	r0, r3
 800203e:	4611      	mov	r1, r2
 8002040:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8002044:	461a      	mov	r2, r3
 8002046:	f002 fd0f 	bl	8004a68 <memcpy>
					1 }, { 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1 }, { 1,
					2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 }, { 1, 2, 1, 2, 1,
					1, 1, 1, 1, 1, 1, 2, 1, 2, 1 }, { 1, 2, 1, 2, 2, 2, 2, 2, 2,
					2, 2, 2, 1, 2, 1 }, { 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
					2, 1 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 } };
	memcpy(game_map, initial_map, sizeof(game_map));
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <Game_ResetMap+0x48>)
 800204c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002050:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800205c:	461a      	mov	r2, r3
 800205e:	f002 fd03 	bl	8004a68 <memcpy>

	// 2. 화면 다시 그리기
	GameScreen_DrawMap();
 8002062:	f7ff ff8d 	bl	8001f80 <GameScreen_DrawMap>
}
 8002066:	bf00      	nop
 8002068:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	080057b4 	.word	0x080057b4
 8002074:	20000030 	.word	0x20000030

08002078 <GameScreen_DrawEntities>:

// 팩맨과 고스트 그리기
void GameScreen_DrawEntities(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af02      	add	r7, sp, #8
	// 팩맨 그리기
	DrawPacman(pacman.x * GRID_SIZE + GRID_SIZE / 2,
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <GameScreen_DrawEntities+0x54>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	f103 0008 	add.w	r0, r3, #8
			pacman.y * GRID_SIZE + GRID_SIZE / 2,
 8002088:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <GameScreen_DrawEntities+0x54>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	011b      	lsls	r3, r3, #4
	DrawPacman(pacman.x * GRID_SIZE + GRID_SIZE / 2,
 800208e:	f103 0108 	add.w	r1, r3, #8
 8002092:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <GameScreen_DrawEntities+0x54>)
 8002094:	899b      	ldrh	r3, [r3, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <GameScreen_DrawEntities+0x58>)
 800209e:	2206      	movs	r2, #6
 80020a0:	f7fe fdd8 	bl	8000c54 <DrawPacman>
			GRID_SIZE / 2 - 2, 40.f, pacman.color, COLOR_BLACK);

	// 고스트 그리기 (단순화)
	DrawGhost(ghost.x * GRID_SIZE + 2, ghost.y * GRID_SIZE + 2,
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <GameScreen_DrawEntities+0x5c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	1c98      	adds	r0, r3, #2
 80020ac:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <GameScreen_DrawEntities+0x5c>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1c99      	adds	r1, r3, #2
 80020b4:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <GameScreen_DrawEntities+0x5c>)
 80020b6:	899b      	ldrh	r3, [r3, #12]
 80020b8:	221f      	movs	r2, #31
 80020ba:	9201      	str	r2, [sp, #4]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	230c      	movs	r3, #12
 80020c0:	220c      	movs	r2, #12
 80020c2:	f7fe ffab 	bl	800101c <DrawGhost>
	GRID_SIZE - 4, GRID_SIZE - 4, ghost.color, COLOR_BLUE);
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000000 	.word	0x20000000
 80020d0:	42200000 	.word	0x42200000
 80020d4:	20000010 	.word	0x20000010

080020d8 <get_next_pacman_dir>:

/* ----------------------------- Game Logic ----------------------------- */

// 버튼 입력에 따라 팩맨의 다음 방향 결정
int get_next_pacman_dir(void) {
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
	int direction;

	// 각 버튼의 현재 상태를 변수로 저장
	GPIO_PinState up_state = HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin);
 80020de:	2104      	movs	r1, #4
 80020e0:	481c      	ldr	r0, [pc, #112]	@ (8002154 <get_next_pacman_dir+0x7c>)
 80020e2:	f001 f8b7 	bl	8003254 <HAL_GPIO_ReadPin>
 80020e6:	4603      	mov	r3, r0
 80020e8:	70fb      	strb	r3, [r7, #3]
	GPIO_PinState down_state = HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin);
 80020ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020ee:	481a      	ldr	r0, [pc, #104]	@ (8002158 <get_next_pacman_dir+0x80>)
 80020f0:	f001 f8b0 	bl	8003254 <HAL_GPIO_ReadPin>
 80020f4:	4603      	mov	r3, r0
 80020f6:	70bb      	strb	r3, [r7, #2]
	GPIO_PinState left_state = HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin);
 80020f8:	2108      	movs	r1, #8
 80020fa:	4816      	ldr	r0, [pc, #88]	@ (8002154 <get_next_pacman_dir+0x7c>)
 80020fc:	f001 f8aa 	bl	8003254 <HAL_GPIO_ReadPin>
 8002100:	4603      	mov	r3, r0
 8002102:	707b      	strb	r3, [r7, #1]
	GPIO_PinState right_state = HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin);
 8002104:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002108:	4813      	ldr	r0, [pc, #76]	@ (8002158 <get_next_pacman_dir+0x80>)
 800210a:	f001 f8a3 	bl	8003254 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	703b      	strb	r3, [r7, #0]

	// 디버깅용: watch 창에서 이 변수들을 보면 됨
	if (up_state == GPIO_PIN_RESET)
 8002112:	78fb      	ldrb	r3, [r7, #3]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d102      	bne.n	800211e <get_next_pacman_dir+0x46>
		direction = 1;
 8002118:	2301      	movs	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	e014      	b.n	8002148 <get_next_pacman_dir+0x70>
	else if (left_state == GPIO_PIN_RESET)
 800211e:	787b      	ldrb	r3, [r7, #1]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <get_next_pacman_dir+0x52>
		direction = 2;
 8002124:	2302      	movs	r3, #2
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	e00e      	b.n	8002148 <get_next_pacman_dir+0x70>
	else if (right_state == GPIO_PIN_RESET)
 800212a:	783b      	ldrb	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d102      	bne.n	8002136 <get_next_pacman_dir+0x5e>
		direction = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	e008      	b.n	8002148 <get_next_pacman_dir+0x70>
	else if (down_state == GPIO_PIN_RESET)
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <get_next_pacman_dir+0x6a>
		direction = 3;
 800213c:	2303      	movs	r3, #3
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	e002      	b.n	8002148 <get_next_pacman_dir+0x70>
	else
		direction = -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
 8002146:	607b      	str	r3, [r7, #4]

	return direction;
 8002148:	687b      	ldr	r3, [r7, #4]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40011000 	.word	0x40011000
 8002158:	40010c00 	.word	0x40010c00

0800215c <Update_Pacman_Logic>:

// 팩맨 이동 및 도트 처리 로직
void Update_Pacman_Logic(void) {
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
	// 1. ✨ 화면 업데이트를 위해 현재 위치를 이전 위치로 저장 (이동 시도 전에 저장해야 함)
	pacman_old_x = pacman.x;
 8002162:	4b3e      	ldr	r3, [pc, #248]	@ (800225c <Update_Pacman_Logic+0x100>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a3e      	ldr	r2, [pc, #248]	@ (8002260 <Update_Pacman_Logic+0x104>)
 8002168:	6013      	str	r3, [r2, #0]
	pacman_old_y = pacman.y;
 800216a:	4b3c      	ldr	r3, [pc, #240]	@ (800225c <Update_Pacman_Logic+0x100>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	4a3d      	ldr	r2, [pc, #244]	@ (8002264 <Update_Pacman_Logic+0x108>)
 8002170:	6013      	str	r3, [r2, #0]

	int input_dir = get_next_pacman_dir();
 8002172:	f7ff ffb1 	bl	80020d8 <get_next_pacman_dir>
 8002176:	6078      	str	r0, [r7, #4]

	// 입력이 없으면 움직이지 않고, 화면 업데이트가 되지 않도록 여기서 바로 종료
	if (input_dir == -1) {
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217e:	d069      	beq.n	8002254 <Update_Pacman_Logic+0xf8>
		// pacman.x == pacman_old_x 상태로 유지되어 GameScreen_Update_Screen에서 지우지 않음
		return;
	}

	int next_x = pacman.x;
 8002180:	4b36      	ldr	r3, [pc, #216]	@ (800225c <Update_Pacman_Logic+0x100>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]
	int next_y = pacman.y;
 8002186:	4b35      	ldr	r3, [pc, #212]	@ (800225c <Update_Pacman_Logic+0x100>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	60bb      	str	r3, [r7, #8]

	// 다음 위치 계산 (0:Right, 1:Up, 2:Left, 3:Down)
	if (input_dir == 0)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d103      	bne.n	800219a <Update_Pacman_Logic+0x3e>
		next_x++;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3301      	adds	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e013      	b.n	80021c2 <Update_Pacman_Logic+0x66>
	else if (input_dir == 1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d103      	bne.n	80021a8 <Update_Pacman_Logic+0x4c>
		next_y--;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	e00c      	b.n	80021c2 <Update_Pacman_Logic+0x66>
	else if (input_dir == 2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d103      	bne.n	80021b6 <Update_Pacman_Logic+0x5a>
		next_x--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e005      	b.n	80021c2 <Update_Pacman_Logic+0x66>
	else if (input_dir == 3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d102      	bne.n	80021c2 <Update_Pacman_Logic+0x66>
		next_y++;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	3301      	adds	r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]

	// 충돌 검사 (벽=1)
	if (next_x >= 0 && next_x < 15 && next_y >= 0 && next_y < 20
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db46      	blt.n	8002256 <Update_Pacman_Logic+0xfa>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b0e      	cmp	r3, #14
 80021cc:	dc43      	bgt.n	8002256 <Update_Pacman_Logic+0xfa>
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db40      	blt.n	8002256 <Update_Pacman_Logic+0xfa>
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b13      	cmp	r3, #19
 80021d8:	dc3d      	bgt.n	8002256 <Update_Pacman_Logic+0xfa>
			&& game_map[next_y][next_x] != 1) {
 80021da:	4923      	ldr	r1, [pc, #140]	@ (8002268 <Update_Pacman_Logic+0x10c>)
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	1a9b      	subs	r3, r3, r2
 80021e4:	18ca      	adds	r2, r1, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d032      	beq.n	8002256 <Update_Pacman_Logic+0xfa>
		// 움직임 허용
		pacman.x = next_x;
 80021f0:	4a1a      	ldr	r2, [pc, #104]	@ (800225c <Update_Pacman_Logic+0x100>)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6013      	str	r3, [r2, #0]
		pacman.y = next_y;
 80021f6:	4a19      	ldr	r2, [pc, #100]	@ (800225c <Update_Pacman_Logic+0x100>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	6053      	str	r3, [r2, #4]

		// 🚨 이동 성공 시에만 방향 업데이트
		pacman.dir = input_dir;
 80021fc:	4a17      	ldr	r2, [pc, #92]	@ (800225c <Update_Pacman_Logic+0x100>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6093      	str	r3, [r2, #8]

		// 도트(2) 먹기
		if (game_map[pacman.y][pacman.x] == 2) {
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <Update_Pacman_Logic+0x100>)
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <Update_Pacman_Logic+0x100>)
 8002208:	6819      	ldr	r1, [r3, #0]
 800220a:	4817      	ldr	r0, [pc, #92]	@ (8002268 <Update_Pacman_Logic+0x10c>)
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	4403      	add	r3, r0
 8002214:	440b      	add	r3, r1
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d11c      	bne.n	8002256 <Update_Pacman_Logic+0xfa>
			game_map[pacman.y][pacman.x] = 0; // 도트 제거
 800221c:	4b0f      	ldr	r3, [pc, #60]	@ (800225c <Update_Pacman_Logic+0x100>)
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4b0e      	ldr	r3, [pc, #56]	@ (800225c <Update_Pacman_Logic+0x100>)
 8002222:	6819      	ldr	r1, [r3, #0]
 8002224:	4810      	ldr	r0, [pc, #64]	@ (8002268 <Update_Pacman_Logic+0x10c>)
 8002226:	4613      	mov	r3, r2
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	4403      	add	r3, r0
 800222e:	440b      	add	r3, r1
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]

			// 💰 아이템 획득 사운드 (간단한 고음 재생)
			BUZZ_Start();
 8002234:	f7ff fe5c 	bl	8001ef0 <BUZZ_Start>
			BUZZ_SetFreq_TIM1(A6);
 8002238:	f44f 60dc 	mov.w	r0, #1760	@ 0x6e0
 800223c:	f7ff fe80 	bl	8001f40 <BUZZ_SetFreq_TIM1>
			BUZZ_SetFreq_TIM3(A5);
 8002240:	f44f 705c 	mov.w	r0, #880	@ 0x370
 8002244:	f7ff fe8c 	bl	8001f60 <BUZZ_SetFreq_TIM3>
			HAL_Delay(50);
 8002248:	2032      	movs	r0, #50	@ 0x32
 800224a:	f000 fd4d 	bl	8002ce8 <HAL_Delay>
			BUZZ_Stop();
 800224e:	f7ff fe5f 	bl	8001f10 <BUZZ_Stop>
 8002252:	e000      	b.n	8002256 <Update_Pacman_Logic+0xfa>
		return;
 8002254:	bf00      	nop
	} else {
		// 🚨 벽에 막혀 움직이지 못한 경우:
		// pacman.x가 pacman_old_x와 같아지도록 원래대로 놔둠.
		// 이는 GameScreen_Update_Screen에서 팩맨을 지우지 않도록 보장함.
	}
}
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20000000 	.word	0x20000000
 8002260:	20000020 	.word	0x20000020
 8002264:	20000024 	.word	0x20000024
 8002268:	20000030 	.word	0x20000030

0800226c <Update_Ghost_Logic>:

// 고스트 이동 (단순 무작위 이동)
void Update_Ghost_Logic(void) {
 800226c:	b590      	push	{r4, r7, lr}
 800226e:	b08b      	sub	sp, #44	@ 0x2c
 8002270:	af00      	add	r7, sp, #0
	// ✨ 1. 현재 위치를 이전 위치로 저장 (화면 지우기를 위해)
	ghost_old_x = ghost.x;
 8002272:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a30      	ldr	r2, [pc, #192]	@ (8002338 <Update_Ghost_Logic+0xcc>)
 8002278:	6013      	str	r3, [r2, #0]
	ghost_old_y = ghost.y;
 800227a:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a2f      	ldr	r2, [pc, #188]	@ (800233c <Update_Ghost_Logic+0xd0>)
 8002280:	6013      	str	r3, [r2, #0]

	if (HAL_GetTick() - ghost_last_move_time < 200)
 8002282:	f000 fd27 	bl	8002cd4 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	4b2d      	ldr	r3, [pc, #180]	@ (8002340 <Update_Ghost_Logic+0xd4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2bc7      	cmp	r3, #199	@ 0xc7
 8002290:	d94b      	bls.n	800232a <Update_Ghost_Logic+0xbe>
		return; // 200ms마다 이동
	ghost_last_move_time = HAL_GetTick();
 8002292:	f000 fd1f 	bl	8002cd4 <HAL_GetTick>
 8002296:	4603      	mov	r3, r0
 8002298:	4a29      	ldr	r2, [pc, #164]	@ (8002340 <Update_Ghost_Logic+0xd4>)
 800229a:	6013      	str	r3, [r2, #0]

	int dx[] = { 1, 0, -1, 0 }; // R, U, L, D
 800229c:	4b29      	ldr	r3, [pc, #164]	@ (8002344 <Update_Ghost_Logic+0xd8>)
 800229e:	f107 0410 	add.w	r4, r7, #16
 80022a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int dy[] = { 0, -1, 0, 1 };
 80022a8:	4b27      	ldr	r3, [pc, #156]	@ (8002348 <Update_Ghost_Logic+0xdc>)
 80022aa:	463c      	mov	r4, r7
 80022ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int next_x = ghost.x + dx[ghost.dir];
 80022b2:	4b20      	ldr	r3, [pc, #128]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	3328      	adds	r3, #40	@ 0x28
 80022be:	443b      	add	r3, r7
 80022c0:	f853 3c18 	ldr.w	r3, [r3, #-24]
 80022c4:	4413      	add	r3, r2
 80022c6:	627b      	str	r3, [r7, #36]	@ 0x24
	int next_y = ghost.y + dy[ghost.dir];
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	3328      	adds	r3, #40	@ 0x28
 80022d4:	443b      	add	r3, r7
 80022d6:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80022da:	4413      	add	r3, r2
 80022dc:	623b      	str	r3, [r7, #32]

	// 벽에 부딪히거나 통로가 막혔을 경우 무작위 방향으로 변경
	if (next_x < 0 || next_x >= 15 || next_y < 0 || next_y >= 20
 80022de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	db13      	blt.n	800230c <Update_Ghost_Logic+0xa0>
 80022e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e6:	2b0e      	cmp	r3, #14
 80022e8:	dc10      	bgt.n	800230c <Update_Ghost_Logic+0xa0>
 80022ea:	6a3b      	ldr	r3, [r7, #32]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	db0d      	blt.n	800230c <Update_Ghost_Logic+0xa0>
 80022f0:	6a3b      	ldr	r3, [r7, #32]
 80022f2:	2b13      	cmp	r3, #19
 80022f4:	dc0a      	bgt.n	800230c <Update_Ghost_Logic+0xa0>
			|| game_map[next_y][next_x] == 1) {
 80022f6:	4915      	ldr	r1, [pc, #84]	@ (800234c <Update_Ghost_Logic+0xe0>)
 80022f8:	6a3a      	ldr	r2, [r7, #32]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	18ca      	adds	r2, r1, r3
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <Update_Ghost_Logic+0xb0>
		ghost.dir = HAL_GetTick() % 4; // 방향 전환
 800230c:	f000 fce2 	bl	8002cd4 <HAL_GetTick>
 8002310:	4603      	mov	r3, r0
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	4a07      	ldr	r2, [pc, #28]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 8002318:	6093      	str	r3, [r2, #8]
 800231a:	e007      	b.n	800232c <Update_Ghost_Logic+0xc0>
	} else {
		ghost.x = next_x;
 800231c:	4a05      	ldr	r2, [pc, #20]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	6013      	str	r3, [r2, #0]
		ghost.y = next_y;
 8002322:	4a04      	ldr	r2, [pc, #16]	@ (8002334 <Update_Ghost_Logic+0xc8>)
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	6053      	str	r3, [r2, #4]
 8002328:	e000      	b.n	800232c <Update_Ghost_Logic+0xc0>
		return; // 200ms마다 이동
 800232a:	bf00      	nop
	}
}
 800232c:	372c      	adds	r7, #44	@ 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}
 8002332:	bf00      	nop
 8002334:	20000010 	.word	0x20000010
 8002338:	20000028 	.word	0x20000028
 800233c:	2000002c 	.word	0x2000002c
 8002340:	200002b4 	.word	0x200002b4
 8002344:	080058e0 	.word	0x080058e0
 8002348:	080058f0 	.word	0x080058f0
 800234c:	20000030 	.word	0x20000030

08002350 <Update_Game_Logic>:

void Update_Game_Logic(void) {
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	// 1. 팩맨 이동
	Update_Pacman_Logic();
 8002354:	f7ff ff02 	bl	800215c <Update_Pacman_Logic>

	// 2. 고스트 이동
	Update_Ghost_Logic();
 8002358:	f7ff ff88 	bl	800226c <Update_Ghost_Logic>

	// 3. 충돌 검사 (팩맨과 고스트가 같은 칸에 있는지)
	if (pacman.x == ghost.x && pacman.y == ghost.y) {
 800235c:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <Update_Game_Logic+0x68>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	4b16      	ldr	r3, [pc, #88]	@ (80023bc <Update_Game_Logic+0x6c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	429a      	cmp	r2, r3
 8002366:	d124      	bne.n	80023b2 <Update_Game_Logic+0x62>
 8002368:	4b13      	ldr	r3, [pc, #76]	@ (80023b8 <Update_Game_Logic+0x68>)
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <Update_Game_Logic+0x6c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	429a      	cmp	r2, r3
 8002372:	d11e      	bne.n	80023b2 <Update_Game_Logic+0x62>

		//사망 화면
	    DeadScreen_Draw();
 8002374:	f7ff f840 	bl	80013f8 <DeadScreen_Draw>

		// Game Over! (사망 효과음)
		BUZZ_Start();
 8002378:	f7ff fdba 	bl	8001ef0 <BUZZ_Start>
		BUZZ_SetFreq_TIM1(C3);
 800237c:	2083      	movs	r0, #131	@ 0x83
 800237e:	f7ff fddf 	bl	8001f40 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(C4);
 8002382:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8002386:	f7ff fdeb 	bl	8001f60 <BUZZ_SetFreq_TIM3>
		HAL_Delay(500);
 800238a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800238e:	f000 fcab 	bl	8002ce8 <HAL_Delay>
		BUZZ_Stop();
 8002392:	f7ff fdbd 	bl	8001f10 <BUZZ_Stop>

		// 초기 리셋
		Game_ResetMap();
 8002396:	f7ff fe49 	bl	800202c <Game_ResetMap>
		pacman.x = 1;
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <Update_Game_Logic+0x68>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]
		pacman.y = 1;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <Update_Game_Logic+0x68>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	605a      	str	r2, [r3, #4]
		ghost.x = 13;
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <Update_Game_Logic+0x6c>)
 80023a8:	220d      	movs	r2, #13
 80023aa:	601a      	str	r2, [r3, #0]
		ghost.y = 10;
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <Update_Game_Logic+0x6c>)
 80023ae:	220a      	movs	r2, #10
 80023b0:	605a      	str	r2, [r3, #4]
	}
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000010 	.word	0x20000010

080023c0 <GameScreen_Update_Screen>:

// **화면 업데이트 함수 (지우고 그리기)**

void GameScreen_Update_Screen(void) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af02      	add	r7, sp, #8

// 이전 위치를 배경색(BLACK)으로 지웁니다.
// 팩맨 이전 위치 지우기

	ILI9341_FillRect(pacman_old_x * GRID_SIZE, pacman_old_y * GRID_SIZE,
 80023c6:	4b34      	ldr	r3, [pc, #208]	@ (8002498 <GameScreen_Update_Screen+0xd8>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	b298      	uxth	r0, r3
 80023d0:	4b32      	ldr	r3, [pc, #200]	@ (800249c <GameScreen_Update_Screen+0xdc>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	b299      	uxth	r1, r3
 80023da:	2300      	movs	r3, #0
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2310      	movs	r3, #16
 80023e0:	2210      	movs	r2, #16
 80023e2:	f7fe fb22 	bl	8000a2a <ILI9341_FillRect>
			GRID_SIZE, GRID_SIZE, COLOR_BLACK);

	// 고스트 이전 위치 지우기
	ILI9341_FillRect(ghost_old_x * GRID_SIZE, ghost_old_y * GRID_SIZE,
 80023e6:	4b2e      	ldr	r3, [pc, #184]	@ (80024a0 <GameScreen_Update_Screen+0xe0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	b298      	uxth	r0, r3
 80023f0:	4b2c      	ldr	r3, [pc, #176]	@ (80024a4 <GameScreen_Update_Screen+0xe4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	b299      	uxth	r1, r3
 80023fa:	2300      	movs	r3, #0
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2310      	movs	r3, #16
 8002400:	2210      	movs	r2, #16
 8002402:	f7fe fb12 	bl	8000a2a <ILI9341_FillRect>
			GRID_SIZE, GRID_SIZE, COLOR_BLACK);

	// 맵의 도트가 지워졌을 수도 있으므로 이전 위치의 도트를 다시 그립니다.
	// ✨ 지워진 칸에 도트가 있다면 다시 그립니다.

	if (game_map[pacman_old_y][pacman_old_x] == 2) {
 8002406:	4b25      	ldr	r3, [pc, #148]	@ (800249c <GameScreen_Update_Screen+0xdc>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <GameScreen_Update_Screen+0xd8>)
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	4826      	ldr	r0, [pc, #152]	@ (80024a8 <GameScreen_Update_Screen+0xe8>)
 8002410:	4613      	mov	r3, r2
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	4403      	add	r3, r0
 8002418:	440b      	add	r3, r1
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b02      	cmp	r3, #2
 800241e:	d114      	bne.n	800244a <GameScreen_Update_Screen+0x8a>
		ILI9341_FillRect(
 8002420:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <GameScreen_Update_Screen+0xd8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b29b      	uxth	r3, r3
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	b29b      	uxth	r3, r3
 800242a:	3306      	adds	r3, #6
 800242c:	b298      	uxth	r0, r3
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <GameScreen_Update_Screen+0xdc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	b29b      	uxth	r3, r3
 8002438:	3306      	adds	r3, #6
 800243a:	b299      	uxth	r1, r3
 800243c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2304      	movs	r3, #4
 8002444:	2204      	movs	r2, #4
 8002446:	f7fe faf0 	bl	8000a2a <ILI9341_FillRect>
				pacman_old_x * GRID_SIZE + GRID_SIZE / 2 - DOT_SIZE / 2,
				pacman_old_y * GRID_SIZE + GRID_SIZE / 2 - DOT_SIZE / 2,
				DOT_SIZE, DOT_SIZE, COLOR_WHITE);
	}

	if (game_map[ghost_old_y][ghost_old_x] == 2) {
 800244a:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <GameScreen_Update_Screen+0xe4>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <GameScreen_Update_Screen+0xe0>)
 8002450:	6819      	ldr	r1, [r3, #0]
 8002452:	4815      	ldr	r0, [pc, #84]	@ (80024a8 <GameScreen_Update_Screen+0xe8>)
 8002454:	4613      	mov	r3, r2
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	1a9b      	subs	r3, r3, r2
 800245a:	4403      	add	r3, r0
 800245c:	440b      	add	r3, r1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d114      	bne.n	800248e <GameScreen_Update_Screen+0xce>

		ILI9341_FillRect(ghost_old_x * GRID_SIZE + GRID_SIZE / 2 - DOT_SIZE / 2,
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <GameScreen_Update_Screen+0xe0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	b29b      	uxth	r3, r3
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	b29b      	uxth	r3, r3
 800246e:	3306      	adds	r3, #6
 8002470:	b298      	uxth	r0, r3
 8002472:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <GameScreen_Update_Screen+0xe4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	b29b      	uxth	r3, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	b29b      	uxth	r3, r3
 800247c:	3306      	adds	r3, #6
 800247e:	b299      	uxth	r1, r3
 8002480:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2304      	movs	r3, #4
 8002488:	2204      	movs	r2, #4
 800248a:	f7fe face 	bl	8000a2a <ILI9341_FillRect>

	}

// 현재 위치를 다시 그립니다.

	GameScreen_DrawEntities();
 800248e:	f7ff fdf3 	bl	8002078 <GameScreen_DrawEntities>

}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	20000020 	.word	0x20000020
 800249c:	20000024 	.word	0x20000024
 80024a0:	20000028 	.word	0x20000028
 80024a4:	2000002c 	.word	0x2000002c
 80024a8:	20000030 	.word	0x20000030

080024ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80024b0:	f000 fbb8 	bl	8002c24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80024b4:	f000 f821 	bl	80024fa <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80024b8:	f000 f9a2 	bl	8002800 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80024bc:	f000 f976 	bl	80027ac <MX_USART2_UART_Init>
	MX_TIM1_Init();
 80024c0:	f000 f85c 	bl	800257c <MX_TIM1_Init>
	MX_TIM3_Init();
 80024c4:	f000 f8fa 	bl	80026bc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 80024c8:	f7ff fbf4 	bl	8001cb4 <ILI9341_Init>
	ClearScreen_Draw();
 80024cc:	f7ff fad0 	bl	8001a70 <ClearScreen_Draw>
	HAL_Delay(100);
 80024d0:	2064      	movs	r0, #100	@ 0x64
 80024d2:	f000 fc09 	bl	8002ce8 <HAL_Delay>
	DeadScreen_Draw();
 80024d6:	f7fe ff8f 	bl	80013f8 <DeadScreen_Draw>
	HAL_Delay(100);
 80024da:	2064      	movs	r0, #100	@ 0x64
 80024dc:	f000 fc04 	bl	8002ce8 <HAL_Delay>
//	Next_Step_Screen();
//	HAL_Delay(1000);

	//맵 체크
	GameScreen_DrawMap();
 80024e0:	f7ff fd4e 	bl	8001f80 <GameScreen_DrawMap>
	GameScreen_DrawEntities();
 80024e4:	f7ff fdc8 	bl	8002078 <GameScreen_DrawEntities>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* 아무 방향 버튼을 누르면 다음 화면 */
		Update_Game_Logic();
 80024e8:	f7ff ff32 	bl	8002350 <Update_Game_Logic>
		GameScreen_Update_Screen();
 80024ec:	f7ff ff68 	bl	80023c0 <GameScreen_Update_Screen>
		HAL_Delay(100);
 80024f0:	2064      	movs	r0, #100	@ 0x64
 80024f2:	f000 fbf9 	bl	8002ce8 <HAL_Delay>
		Update_Game_Logic();
 80024f6:	bf00      	nop
 80024f8:	e7f6      	b.n	80024e8 <main+0x3c>

080024fa <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b090      	sub	sp, #64	@ 0x40
 80024fe:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002500:	f107 0318 	add.w	r3, r7, #24
 8002504:	2228      	movs	r2, #40	@ 0x28
 8002506:	2100      	movs	r1, #0
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fa7b 	bl	8004a04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800251c:	2302      	movs	r3, #2
 800251e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002520:	2301      	movs	r3, #1
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002524:	2310      	movs	r3, #16
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002528:	2302      	movs	r3, #2
 800252a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800252c:	2300      	movs	r3, #0
 800252e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002530:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002536:	f107 0318 	add.w	r3, r7, #24
 800253a:	4618      	mov	r0, r3
 800253c:	f000 fedc 	bl	80032f8 <HAL_RCC_OscConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <SystemClock_Config+0x50>
		Error_Handler();
 8002546:	f000 fa0f 	bl	8002968 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800254a:	230f      	movs	r3, #15
 800254c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800254e:	2302      	movs	r3, #2
 8002550:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002556:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800255a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8002560:	1d3b      	adds	r3, r7, #4
 8002562:	2102      	movs	r1, #2
 8002564:	4618      	mov	r0, r3
 8002566:	f001 f949 	bl	80037fc <HAL_RCC_ClockConfig>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <SystemClock_Config+0x7a>
		Error_Handler();
 8002570:	f000 f9fa 	bl	8002968 <Error_Handler>
	}
}
 8002574:	bf00      	nop
 8002576:	3740      	adds	r7, #64	@ 0x40
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b096      	sub	sp, #88	@ 0x58
 8002580:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002582:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002590:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800259a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2220      	movs	r2, #32
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f002 fa25 	bl	8004a04 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80025ba:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025bc:	4a3e      	ldr	r2, [pc, #248]	@ (80026b8 <MX_TIM1_Init+0x13c>)
 80025be:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1;
 80025c0:	4b3c      	ldr	r3, [pc, #240]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025c2:	223f      	movs	r2, #63	@ 0x3f
 80025c4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80025cc:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80025d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d4:	4b37      	ldr	r3, [pc, #220]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80025da:	4b36      	ldr	r3, [pc, #216]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025dc:	2200      	movs	r2, #0
 80025de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e0:	4b34      	ldr	r3, [pc, #208]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80025e6:	4833      	ldr	r0, [pc, #204]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80025e8:	f001 fa96 	bl	8003b18 <HAL_TIM_Base_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM1_Init+0x7a>
		Error_Handler();
 80025f2:	f000 f9b9 	bl	8002968 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80025fc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002600:	4619      	mov	r1, r3
 8002602:	482c      	ldr	r0, [pc, #176]	@ (80026b4 <MX_TIM1_Init+0x138>)
 8002604:	f001 fcf8 	bl	8003ff8 <HAL_TIM_ConfigClockSource>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM1_Init+0x96>
		Error_Handler();
 800260e:	f000 f9ab 	bl	8002968 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002612:	4828      	ldr	r0, [pc, #160]	@ (80026b4 <MX_TIM1_Init+0x138>)
 8002614:	f001 facf 	bl	8003bb6 <HAL_TIM_PWM_Init>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM1_Init+0xa6>
		Error_Handler();
 800261e:	f000 f9a3 	bl	8002968 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002622:	2300      	movs	r3, #0
 8002624:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002626:	2300      	movs	r3, #0
 8002628:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800262a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800262e:	4619      	mov	r1, r3
 8002630:	4820      	ldr	r0, [pc, #128]	@ (80026b4 <MX_TIM1_Init+0x138>)
 8002632:	f002 f859 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 800263c:	f000 f994 	bl	8002968 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002640:	2360      	movs	r3, #96	@ 0x60
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 500;
 8002644:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 800265a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265e:	220c      	movs	r2, #12
 8002660:	4619      	mov	r1, r3
 8002662:	4814      	ldr	r0, [pc, #80]	@ (80026b4 <MX_TIM1_Init+0x138>)
 8002664:	f001 fc06 	bl	8003e74 <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 800266e:	f000 f97b 	bl	8002968 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800268a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002690:	1d3b      	adds	r3, r7, #4
 8002692:	4619      	mov	r1, r3
 8002694:	4807      	ldr	r0, [pc, #28]	@ (80026b4 <MX_TIM1_Init+0x138>)
 8002696:	f002 f885 	bl	80047a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 80026a0:	f000 f962 	bl	8002968 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80026a4:	4803      	ldr	r0, [pc, #12]	@ (80026b4 <MX_TIM1_Init+0x138>)
 80026a6:	f000 f9c9 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 80026aa:	bf00      	nop
 80026ac:	3758      	adds	r7, #88	@ 0x58
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	200001dc 	.word	0x200001dc
 80026b8:	40012c00 	.word	0x40012c00

080026bc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	@ 0x38
 80026c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80026c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	605a      	str	r2, [r3, #4]
 80026cc:	609a      	str	r2, [r3, #8]
 80026ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
 80026e8:	615a      	str	r2, [r3, #20]
 80026ea:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80026ec:	4b2d      	ldr	r3, [pc, #180]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 80026ee:	4a2e      	ldr	r2, [pc, #184]	@ (80027a8 <MX_TIM3_Init+0xec>)
 80026f0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64 - 1;
 80026f2:	4b2c      	ldr	r3, [pc, #176]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 80026f4:	223f      	movs	r2, #63	@ 0x3f
 80026f6:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026f8:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80026fe:	4b29      	ldr	r3, [pc, #164]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002704:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002706:	4b27      	ldr	r3, [pc, #156]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002708:	2200      	movs	r2, #0
 800270a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270c:	4b25      	ldr	r3, [pc, #148]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 800270e:	2200      	movs	r2, #0
 8002710:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002712:	4824      	ldr	r0, [pc, #144]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002714:	f001 fa00 	bl	8003b18 <HAL_TIM_Base_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM3_Init+0x66>
		Error_Handler();
 800271e:	f000 f923 	bl	8002968 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002726:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002728:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800272c:	4619      	mov	r1, r3
 800272e:	481d      	ldr	r0, [pc, #116]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002730:	f001 fc62 	bl	8003ff8 <HAL_TIM_ConfigClockSource>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM3_Init+0x82>
		Error_Handler();
 800273a:	f000 f915 	bl	8002968 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800273e:	4819      	ldr	r0, [pc, #100]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002740:	f001 fa39 	bl	8003bb6 <HAL_TIM_PWM_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_TIM3_Init+0x92>
		Error_Handler();
 800274a:	f000 f90d 	bl	8002968 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274e:	2300      	movs	r3, #0
 8002750:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002756:	f107 0320 	add.w	r3, r7, #32
 800275a:	4619      	mov	r1, r3
 800275c:	4811      	ldr	r0, [pc, #68]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 800275e:	f001 ffc3 	bl	80046e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8002768:	f000 f8fe 	bl	8002968 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276c:	2360      	movs	r3, #96	@ 0x60
 800276e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500;
 8002770:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002774:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	220c      	movs	r2, #12
 8002782:	4619      	mov	r1, r3
 8002784:	4807      	ldr	r0, [pc, #28]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002786:	f001 fb75 	bl	8003e74 <HAL_TIM_PWM_ConfigChannel>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8002790:	f000 f8ea 	bl	8002968 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002794:	4803      	ldr	r0, [pc, #12]	@ (80027a4 <MX_TIM3_Init+0xe8>)
 8002796:	f000 f951 	bl	8002a3c <HAL_TIM_MspPostInit>

}
 800279a:	bf00      	nop
 800279c:	3738      	adds	r7, #56	@ 0x38
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000224 	.word	0x20000224
 80027a8:	40000400 	.word	0x40000400

080027ac <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	@ (80027fc <MX_USART2_UART_Init+0x50>)
 80027b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80027b6:	4b10      	ldr	r3, [pc, #64]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80027c4:	4b0c      	ldr	r3, [pc, #48]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80027ca:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d2:	220c      	movs	r2, #12
 80027d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80027e2:	4805      	ldr	r0, [pc, #20]	@ (80027f8 <MX_USART2_UART_Init+0x4c>)
 80027e4:	f002 f82f 	bl	8004846 <HAL_UART_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80027ee:	f000 f8bb 	bl	8002968 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000026c 	.word	0x2000026c
 80027fc:	40004400 	.word	0x40004400

08002800 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002806:	f107 0310 	add.w	r3, r7, #16
 800280a:	2200      	movs	r2, #0
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	605a      	str	r2, [r3, #4]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002814:	4b4f      	ldr	r3, [pc, #316]	@ (8002954 <MX_GPIO_Init+0x154>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a4e      	ldr	r2, [pc, #312]	@ (8002954 <MX_GPIO_Init+0x154>)
 800281a:	f043 0310 	orr.w	r3, r3, #16
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b4c      	ldr	r3, [pc, #304]	@ (8002954 <MX_GPIO_Init+0x154>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800282c:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <MX_GPIO_Init+0x154>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a48      	ldr	r2, [pc, #288]	@ (8002954 <MX_GPIO_Init+0x154>)
 8002832:	f043 0320 	orr.w	r3, r3, #32
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <MX_GPIO_Init+0x154>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <MX_GPIO_Init+0x154>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a42      	ldr	r2, [pc, #264]	@ (8002954 <MX_GPIO_Init+0x154>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b40      	ldr	r3, [pc, #256]	@ (8002954 <MX_GPIO_Init+0x154>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <MX_GPIO_Init+0x154>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a3c      	ldr	r2, [pc, #240]	@ (8002954 <MX_GPIO_Init+0x154>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b3a      	ldr	r3, [pc, #232]	@ (8002954 <MX_GPIO_Init+0x154>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin | LCD_D1_Pin, GPIO_PIN_RESET);
 8002874:	2200      	movs	r2, #0
 8002876:	2182      	movs	r1, #130	@ 0x82
 8002878:	4837      	ldr	r0, [pc, #220]	@ (8002958 <MX_GPIO_Init+0x158>)
 800287a:	f000 fd02 	bl	8003282 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 800287e:	2200      	movs	r2, #0
 8002880:	f240 7133 	movw	r1, #1843	@ 0x733
 8002884:	4835      	ldr	r0, [pc, #212]	@ (800295c <MX_GPIO_Init+0x15c>)
 8002886:	f000 fcfc 	bl	8003282 <HAL_GPIO_WritePin>
			LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin | LCD_D7_Pin
					| LCD_D0_Pin | LCD_D2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800288a:	2200      	movs	r2, #0
 800288c:	f240 4139 	movw	r1, #1081	@ 0x439
 8002890:	4833      	ldr	r0, [pc, #204]	@ (8002960 <MX_GPIO_Init+0x160>)
 8002892:	f000 fcf6 	bl	8003282 <HAL_GPIO_WritePin>
			LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin | LCD_D4_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002896:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800289a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <MX_GPIO_Init+0x164>)
 800289e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4619      	mov	r1, r3
 80028aa:	482b      	ldr	r0, [pc, #172]	@ (8002958 <MX_GPIO_Init+0x158>)
 80028ac:	f000 fb4e 	bl	8002f4c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_D1_Pin;
 80028b0:	2382      	movs	r3, #130	@ 0x82
 80028b2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b4:	2301      	movs	r3, #1
 80028b6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	4619      	mov	r1, r3
 80028c6:	4824      	ldr	r0, [pc, #144]	@ (8002958 <MX_GPIO_Init+0x158>)
 80028c8:	f000 fb40 	bl	8002f4c <HAL_GPIO_Init>

	/*Configure GPIO pins : UP_Pin LEFT_Pin */
	GPIO_InitStruct.Pin = UP_Pin | LEFT_Pin;
 80028cc:	230c      	movs	r3, #12
 80028ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d0:	2300      	movs	r3, #0
 80028d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028d4:	2301      	movs	r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d8:	f107 0310 	add.w	r3, r7, #16
 80028dc:	4619      	mov	r1, r3
 80028de:	481e      	ldr	r0, [pc, #120]	@ (8002958 <MX_GPIO_Init+0x158>)
 80028e0:	f000 fb34 	bl	8002f4c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LD2_Pin
	 LCD_D7_Pin LCD_D0_Pin LCD_D2_Pin */
	GPIO_InitStruct.Pin = LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin
 80028e4:	f240 7333 	movw	r3, #1843	@ 0x733
 80028e8:	613b      	str	r3, [r7, #16]
			| LCD_D7_Pin | LCD_D0_Pin | LCD_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f2:	2302      	movs	r3, #2
 80028f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	4619      	mov	r1, r3
 80028fc:	4817      	ldr	r0, [pc, #92]	@ (800295c <MX_GPIO_Init+0x15c>)
 80028fe:	f000 fb25 	bl	8002f4c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
	 LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin
 8002902:	f240 4339 	movw	r3, #1081	@ 0x439
 8002906:	613b      	str	r3, [r7, #16]
			| LCD_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002908:	2301      	movs	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002910:	2302      	movs	r3, #2
 8002912:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4619      	mov	r1, r3
 800291a:	4811      	ldr	r0, [pc, #68]	@ (8002960 <MX_GPIO_Init+0x160>)
 800291c:	f000 fb16 	bl	8002f4c <HAL_GPIO_Init>

	/*Configure GPIO pins : DOWN_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = DOWN_Pin | RIGHT_Pin;
 8002920:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002924:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002926:	2300      	movs	r3, #0
 8002928:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800292a:	2301      	movs	r3, #1
 800292c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292e:	f107 0310 	add.w	r3, r7, #16
 8002932:	4619      	mov	r1, r3
 8002934:	480a      	ldr	r0, [pc, #40]	@ (8002960 <MX_GPIO_Init+0x160>)
 8002936:	f000 fb09 	bl	8002f4c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	2028      	movs	r0, #40	@ 0x28
 8002940:	f000 facd 	bl	8002ede <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002944:	2028      	movs	r0, #40	@ 0x28
 8002946:	f000 fae6 	bl	8002f16 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800294a:	bf00      	nop
 800294c:	3720      	adds	r7, #32
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40011000 	.word	0x40011000
 800295c:	40010800 	.word	0x40010800
 8002960:	40010c00 	.word	0x40010c00
 8002964:	10110000 	.word	0x10110000

08002968 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800296c:	b672      	cpsid	i
}
 800296e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <Error_Handler+0x8>

08002974 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <HAL_MspInit+0x5c>)
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	4a14      	ldr	r2, [pc, #80]	@ (80029d0 <HAL_MspInit+0x5c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6193      	str	r3, [r2, #24]
 8002986:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <HAL_MspInit+0x5c>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <HAL_MspInit+0x5c>)
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	4a0e      	ldr	r2, [pc, #56]	@ (80029d0 <HAL_MspInit+0x5c>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800299c:	61d3      	str	r3, [r2, #28]
 800299e:	4b0c      	ldr	r3, [pc, #48]	@ (80029d0 <HAL_MspInit+0x5c>)
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	607b      	str	r3, [r7, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029aa:	4b0a      	ldr	r3, [pc, #40]	@ (80029d4 <HAL_MspInit+0x60>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	4a04      	ldr	r2, [pc, #16]	@ (80029d4 <HAL_MspInit+0x60>)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c6:	bf00      	nop
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40010000 	.word	0x40010000

080029d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <HAL_TIM_Base_MspInit+0x58>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d10c      	bne.n	8002a04 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ea:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	4a11      	ldr	r2, [pc, #68]	@ (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 80029f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80029f4:	6193      	str	r3, [r2, #24]
 80029f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a02:	e010      	b.n	8002a26 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a0b      	ldr	r2, [pc, #44]	@ (8002a38 <HAL_TIM_Base_MspInit+0x60>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10b      	bne.n	8002a26 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a0e:	4b09      	ldr	r3, [pc, #36]	@ (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	4a08      	ldr	r2, [pc, #32]	@ (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	61d3      	str	r3, [r2, #28]
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_TIM_Base_MspInit+0x5c>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60bb      	str	r3, [r7, #8]
 8002a24:	68bb      	ldr	r3, [r7, #8]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40000400 	.word	0x40000400

08002a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0310 	add.w	r3, r7, #16
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad4 <HAL_TIM_MspPostInit+0x98>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d119      	bne.n	8002a90 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <HAL_TIM_MspPostInit+0x9c>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad8 <HAL_TIM_MspPostInit+0x9c>)
 8002a62:	f043 0304 	orr.w	r3, r3, #4
 8002a66:	6193      	str	r3, [r2, #24]
 8002a68:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_TIM_MspPostInit+0x9c>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a74:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a82:	f107 0310 	add.w	r3, r7, #16
 8002a86:	4619      	mov	r1, r3
 8002a88:	4814      	ldr	r0, [pc, #80]	@ (8002adc <HAL_TIM_MspPostInit+0xa0>)
 8002a8a:	f000 fa5f 	bl	8002f4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a8e:	e01c      	b.n	8002aca <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <HAL_TIM_MspPostInit+0xa4>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d117      	bne.n	8002aca <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ad8 <HAL_TIM_MspPostInit+0x9c>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad8 <HAL_TIM_MspPostInit+0x9c>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	6193      	str	r3, [r2, #24]
 8002aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <HAL_TIM_MspPostInit+0x9c>)
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	f107 0310 	add.w	r3, r7, #16
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4807      	ldr	r0, [pc, #28]	@ (8002ae4 <HAL_TIM_MspPostInit+0xa8>)
 8002ac6:	f000 fa41 	bl	8002f4c <HAL_GPIO_Init>
}
 8002aca:	bf00      	nop
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40010800 	.word	0x40010800
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40010c00 	.word	0x40010c00

08002ae8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b088      	sub	sp, #32
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a15      	ldr	r2, [pc, #84]	@ (8002b58 <HAL_UART_MspInit+0x70>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d123      	bne.n	8002b50 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b08:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <HAL_UART_MspInit+0x74>)
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4a13      	ldr	r2, [pc, #76]	@ (8002b5c <HAL_UART_MspInit+0x74>)
 8002b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b12:	61d3      	str	r3, [r2, #28]
 8002b14:	4b11      	ldr	r3, [pc, #68]	@ (8002b5c <HAL_UART_MspInit+0x74>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b20:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_UART_MspInit+0x74>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4a0d      	ldr	r2, [pc, #52]	@ (8002b5c <HAL_UART_MspInit+0x74>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6193      	str	r3, [r2, #24]
 8002b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b5c <HAL_UART_MspInit+0x74>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b38:	230c      	movs	r3, #12
 8002b3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b40:	2302      	movs	r3, #2
 8002b42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	f107 0310 	add.w	r3, r7, #16
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4805      	ldr	r0, [pc, #20]	@ (8002b60 <HAL_UART_MspInit+0x78>)
 8002b4c:	f000 f9fe 	bl	8002f4c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002b50:	bf00      	nop
 8002b52:	3720      	adds	r7, #32
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40004400 	.word	0x40004400
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	40010800 	.word	0x40010800

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b68:	bf00      	nop
 8002b6a:	e7fd      	b.n	8002b68 <NMI_Handler+0x4>

08002b6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b70:	bf00      	nop
 8002b72:	e7fd      	b.n	8002b70 <HardFault_Handler+0x4>

08002b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <MemManage_Handler+0x4>

08002b7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <BusFault_Handler+0x4>

08002b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b88:	bf00      	nop
 8002b8a:	e7fd      	b.n	8002b88 <UsageFault_Handler+0x4>

08002b8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bc80      	pop	{r7}
 8002ba2:	4770      	bx	lr

08002ba4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bb4:	f000 f87c 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002bc0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002bc4:	f000 fb76 	bl	80032b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <Reset_Handler>:
 8002bd8:	f7ff fff8 	bl	8002bcc <SystemInit>
 8002bdc:	480b      	ldr	r0, [pc, #44]	@ (8002c0c <LoopFillZerobss+0xe>)
 8002bde:	490c      	ldr	r1, [pc, #48]	@ (8002c10 <LoopFillZerobss+0x12>)
 8002be0:	4a0c      	ldr	r2, [pc, #48]	@ (8002c14 <LoopFillZerobss+0x16>)
 8002be2:	2300      	movs	r3, #0
 8002be4:	e002      	b.n	8002bec <LoopCopyDataInit>

08002be6 <CopyDataInit>:
 8002be6:	58d4      	ldr	r4, [r2, r3]
 8002be8:	50c4      	str	r4, [r0, r3]
 8002bea:	3304      	adds	r3, #4

08002bec <LoopCopyDataInit>:
 8002bec:	18c4      	adds	r4, r0, r3
 8002bee:	428c      	cmp	r4, r1
 8002bf0:	d3f9      	bcc.n	8002be6 <CopyDataInit>
 8002bf2:	4a09      	ldr	r2, [pc, #36]	@ (8002c18 <LoopFillZerobss+0x1a>)
 8002bf4:	4c09      	ldr	r4, [pc, #36]	@ (8002c1c <LoopFillZerobss+0x1e>)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e001      	b.n	8002bfe <LoopFillZerobss>

08002bfa <FillZerobss>:
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	3204      	adds	r2, #4

08002bfe <LoopFillZerobss>:
 8002bfe:	42a2      	cmp	r2, r4
 8002c00:	d3fb      	bcc.n	8002bfa <FillZerobss>
 8002c02:	f001 ff0d 	bl	8004a20 <__libc_init_array>
 8002c06:	f7ff fc51 	bl	80024ac <main>
 8002c0a:	4770      	bx	lr
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	200001c0 	.word	0x200001c0
 8002c14:	08005d0c 	.word	0x08005d0c
 8002c18:	200001c0 	.word	0x200001c0
 8002c1c:	200003f4 	.word	0x200003f4

08002c20 <ADC1_2_IRQHandler>:
 8002c20:	e7fe      	b.n	8002c20 <ADC1_2_IRQHandler>
	...

08002c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_Init+0x28>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_Init+0x28>)
 8002c2e:	f043 0310 	orr.w	r3, r3, #16
 8002c32:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 f947 	bl	8002ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff fe98 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40022000 	.word	0x40022000

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	@ (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95f 	bl	8002f32 <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 f927 	bl	8002ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	@ (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000164 	.word	0x20000164
 8002ca8:	2000016c 	.word	0x2000016c
 8002cac:	20000168 	.word	0x20000168

08002cb0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b05      	ldr	r3, [pc, #20]	@ (8002ccc <HAL_IncTick+0x1c>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a03      	ldr	r2, [pc, #12]	@ (8002cd0 <HAL_IncTick+0x20>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	2000016c 	.word	0x2000016c
 8002cd0:	200002b8 	.word	0x200002b8

08002cd4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd8:	4b02      	ldr	r3, [pc, #8]	@ (8002ce4 <HAL_GetTick+0x10>)
 8002cda:	681b      	ldr	r3, [r3, #0]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr
 8002ce4:	200002b8 	.word	0x200002b8

08002ce8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cf0:	f7ff fff0 	bl	8002cd4 <HAL_GetTick>
 8002cf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d005      	beq.n	8002d0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d02:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_Delay+0x44>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d0e:	bf00      	nop
 8002d10:	f7ff ffe0 	bl	8002cd4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d8f7      	bhi.n	8002d10 <HAL_Delay+0x28>
  {
  }
}
 8002d20:	bf00      	nop
 8002d22:	bf00      	nop
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	2000016c 	.word	0x2000016c

08002d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d40:	4b0c      	ldr	r3, [pc, #48]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d62:	4a04      	ldr	r2, [pc, #16]	@ (8002d74 <__NVIC_SetPriorityGrouping+0x44>)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	60d3      	str	r3, [r2, #12]
}
 8002d68:	bf00      	nop
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d7c:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <__NVIC_GetPriorityGrouping+0x18>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	0a1b      	lsrs	r3, r3, #8
 8002d82:	f003 0307 	and.w	r3, r3, #7
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	db0b      	blt.n	8002dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002da6:	79fb      	ldrb	r3, [r7, #7]
 8002da8:	f003 021f 	and.w	r2, r3, #31
 8002dac:	4906      	ldr	r1, [pc, #24]	@ (8002dc8 <__NVIC_EnableIRQ+0x34>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	2001      	movs	r0, #1
 8002db6:	fa00 f202 	lsl.w	r2, r0, r2
 8002dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100

08002dcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	6039      	str	r1, [r7, #0]
 8002dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	db0a      	blt.n	8002df6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	490c      	ldr	r1, [pc, #48]	@ (8002e18 <__NVIC_SetPriority+0x4c>)
 8002de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dea:	0112      	lsls	r2, r2, #4
 8002dec:	b2d2      	uxtb	r2, r2
 8002dee:	440b      	add	r3, r1
 8002df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002df4:	e00a      	b.n	8002e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	4908      	ldr	r1, [pc, #32]	@ (8002e1c <__NVIC_SetPriority+0x50>)
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	3b04      	subs	r3, #4
 8002e04:	0112      	lsls	r2, r2, #4
 8002e06:	b2d2      	uxtb	r2, r2
 8002e08:	440b      	add	r3, r1
 8002e0a:	761a      	strb	r2, [r3, #24]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bc80      	pop	{r7}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	e000e100 	.word	0xe000e100
 8002e1c:	e000ed00 	.word	0xe000ed00

08002e20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b089      	sub	sp, #36	@ 0x24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f1c3 0307 	rsb	r3, r3, #7
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	bf28      	it	cs
 8002e3e:	2304      	movcs	r3, #4
 8002e40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3304      	adds	r3, #4
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d902      	bls.n	8002e50 <NVIC_EncodePriority+0x30>
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3b03      	subs	r3, #3
 8002e4e:	e000      	b.n	8002e52 <NVIC_EncodePriority+0x32>
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e54:	f04f 32ff 	mov.w	r2, #4294967295
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	401a      	ands	r2, r3
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	43d9      	mvns	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	4313      	orrs	r3, r2
         );
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e94:	d301      	bcc.n	8002e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00f      	b.n	8002eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec4 <SysTick_Config+0x40>)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea8:	f7ff ff90 	bl	8002dcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eac:	4b05      	ldr	r3, [pc, #20]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb2:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <SysTick_Config+0x40>)
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	e000e010 	.word	0xe000e010

08002ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff2d 	bl	8002d30 <__NVIC_SetPriorityGrouping>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
 8002eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ef0:	f7ff ff42 	bl	8002d78 <__NVIC_GetPriorityGrouping>
 8002ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	68b9      	ldr	r1, [r7, #8]
 8002efa:	6978      	ldr	r0, [r7, #20]
 8002efc:	f7ff ff90 	bl	8002e20 <NVIC_EncodePriority>
 8002f00:	4602      	mov	r2, r0
 8002f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff ff5f 	bl	8002dcc <__NVIC_SetPriority>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff35 	bl	8002d94 <__NVIC_EnableIRQ>
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff ffa2 	bl	8002e84 <SysTick_Config>
 8002f40:	4603      	mov	r3, r0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b08b      	sub	sp, #44	@ 0x2c
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f56:	2300      	movs	r3, #0
 8002f58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5e:	e169      	b.n	8003234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f60:	2201      	movs	r2, #1
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	fa02 f303 	lsl.w	r3, r2, r3
 8002f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	f040 8158 	bne.w	800322e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	4a9a      	ldr	r2, [pc, #616]	@ (80031ec <HAL_GPIO_Init+0x2a0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d05e      	beq.n	8003046 <HAL_GPIO_Init+0xfa>
 8002f88:	4a98      	ldr	r2, [pc, #608]	@ (80031ec <HAL_GPIO_Init+0x2a0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d875      	bhi.n	800307a <HAL_GPIO_Init+0x12e>
 8002f8e:	4a98      	ldr	r2, [pc, #608]	@ (80031f0 <HAL_GPIO_Init+0x2a4>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d058      	beq.n	8003046 <HAL_GPIO_Init+0xfa>
 8002f94:	4a96      	ldr	r2, [pc, #600]	@ (80031f0 <HAL_GPIO_Init+0x2a4>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d86f      	bhi.n	800307a <HAL_GPIO_Init+0x12e>
 8002f9a:	4a96      	ldr	r2, [pc, #600]	@ (80031f4 <HAL_GPIO_Init+0x2a8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d052      	beq.n	8003046 <HAL_GPIO_Init+0xfa>
 8002fa0:	4a94      	ldr	r2, [pc, #592]	@ (80031f4 <HAL_GPIO_Init+0x2a8>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d869      	bhi.n	800307a <HAL_GPIO_Init+0x12e>
 8002fa6:	4a94      	ldr	r2, [pc, #592]	@ (80031f8 <HAL_GPIO_Init+0x2ac>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d04c      	beq.n	8003046 <HAL_GPIO_Init+0xfa>
 8002fac:	4a92      	ldr	r2, [pc, #584]	@ (80031f8 <HAL_GPIO_Init+0x2ac>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d863      	bhi.n	800307a <HAL_GPIO_Init+0x12e>
 8002fb2:	4a92      	ldr	r2, [pc, #584]	@ (80031fc <HAL_GPIO_Init+0x2b0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d046      	beq.n	8003046 <HAL_GPIO_Init+0xfa>
 8002fb8:	4a90      	ldr	r2, [pc, #576]	@ (80031fc <HAL_GPIO_Init+0x2b0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d85d      	bhi.n	800307a <HAL_GPIO_Init+0x12e>
 8002fbe:	2b12      	cmp	r3, #18
 8002fc0:	d82a      	bhi.n	8003018 <HAL_GPIO_Init+0xcc>
 8002fc2:	2b12      	cmp	r3, #18
 8002fc4:	d859      	bhi.n	800307a <HAL_GPIO_Init+0x12e>
 8002fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002fcc <HAL_GPIO_Init+0x80>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08003047 	.word	0x08003047
 8002fd0:	08003021 	.word	0x08003021
 8002fd4:	08003033 	.word	0x08003033
 8002fd8:	08003075 	.word	0x08003075
 8002fdc:	0800307b 	.word	0x0800307b
 8002fe0:	0800307b 	.word	0x0800307b
 8002fe4:	0800307b 	.word	0x0800307b
 8002fe8:	0800307b 	.word	0x0800307b
 8002fec:	0800307b 	.word	0x0800307b
 8002ff0:	0800307b 	.word	0x0800307b
 8002ff4:	0800307b 	.word	0x0800307b
 8002ff8:	0800307b 	.word	0x0800307b
 8002ffc:	0800307b 	.word	0x0800307b
 8003000:	0800307b 	.word	0x0800307b
 8003004:	0800307b 	.word	0x0800307b
 8003008:	0800307b 	.word	0x0800307b
 800300c:	0800307b 	.word	0x0800307b
 8003010:	08003029 	.word	0x08003029
 8003014:	0800303d 	.word	0x0800303d
 8003018:	4a79      	ldr	r2, [pc, #484]	@ (8003200 <HAL_GPIO_Init+0x2b4>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800301e:	e02c      	b.n	800307a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	623b      	str	r3, [r7, #32]
          break;
 8003026:	e029      	b.n	800307c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	3304      	adds	r3, #4
 800302e:	623b      	str	r3, [r7, #32]
          break;
 8003030:	e024      	b.n	800307c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	3308      	adds	r3, #8
 8003038:	623b      	str	r3, [r7, #32]
          break;
 800303a:	e01f      	b.n	800307c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	330c      	adds	r3, #12
 8003042:	623b      	str	r3, [r7, #32]
          break;
 8003044:	e01a      	b.n	800307c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d102      	bne.n	8003054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800304e:	2304      	movs	r3, #4
 8003050:	623b      	str	r3, [r7, #32]
          break;
 8003052:	e013      	b.n	800307c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d105      	bne.n	8003068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800305c:	2308      	movs	r3, #8
 800305e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	611a      	str	r2, [r3, #16]
          break;
 8003066:	e009      	b.n	800307c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003068:	2308      	movs	r3, #8
 800306a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	615a      	str	r2, [r3, #20]
          break;
 8003072:	e003      	b.n	800307c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003074:	2300      	movs	r3, #0
 8003076:	623b      	str	r3, [r7, #32]
          break;
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x130>
          break;
 800307a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2bff      	cmp	r3, #255	@ 0xff
 8003080:	d801      	bhi.n	8003086 <HAL_GPIO_Init+0x13a>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	e001      	b.n	800308a <HAL_GPIO_Init+0x13e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3304      	adds	r3, #4
 800308a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	2bff      	cmp	r3, #255	@ 0xff
 8003090:	d802      	bhi.n	8003098 <HAL_GPIO_Init+0x14c>
 8003092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	e002      	b.n	800309e <HAL_GPIO_Init+0x152>
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	3b08      	subs	r3, #8
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	210f      	movs	r1, #15
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	401a      	ands	r2, r3
 80030b0:	6a39      	ldr	r1, [r7, #32]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	431a      	orrs	r2, r3
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80b1 	beq.w	800322e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003204 <HAL_GPIO_Init+0x2b8>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003204 <HAL_GPIO_Init+0x2b8>)
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6193      	str	r3, [r2, #24]
 80030d8:	4b4a      	ldr	r3, [pc, #296]	@ (8003204 <HAL_GPIO_Init+0x2b8>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030e4:	4a48      	ldr	r2, [pc, #288]	@ (8003208 <HAL_GPIO_Init+0x2bc>)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	089b      	lsrs	r3, r3, #2
 80030ea:	3302      	adds	r3, #2
 80030ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	220f      	movs	r2, #15
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a40      	ldr	r2, [pc, #256]	@ (800320c <HAL_GPIO_Init+0x2c0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_GPIO_Init+0x1ec>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a3f      	ldr	r2, [pc, #252]	@ (8003210 <HAL_GPIO_Init+0x2c4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00d      	beq.n	8003134 <HAL_GPIO_Init+0x1e8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a3e      	ldr	r2, [pc, #248]	@ (8003214 <HAL_GPIO_Init+0x2c8>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d007      	beq.n	8003130 <HAL_GPIO_Init+0x1e4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a3d      	ldr	r2, [pc, #244]	@ (8003218 <HAL_GPIO_Init+0x2cc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d101      	bne.n	800312c <HAL_GPIO_Init+0x1e0>
 8003128:	2303      	movs	r3, #3
 800312a:	e006      	b.n	800313a <HAL_GPIO_Init+0x1ee>
 800312c:	2304      	movs	r3, #4
 800312e:	e004      	b.n	800313a <HAL_GPIO_Init+0x1ee>
 8003130:	2302      	movs	r3, #2
 8003132:	e002      	b.n	800313a <HAL_GPIO_Init+0x1ee>
 8003134:	2301      	movs	r3, #1
 8003136:	e000      	b.n	800313a <HAL_GPIO_Init+0x1ee>
 8003138:	2300      	movs	r3, #0
 800313a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800313c:	f002 0203 	and.w	r2, r2, #3
 8003140:	0092      	lsls	r2, r2, #2
 8003142:	4093      	lsls	r3, r2
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800314a:	492f      	ldr	r1, [pc, #188]	@ (8003208 <HAL_GPIO_Init+0x2bc>)
 800314c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d006      	beq.n	8003172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003164:	4b2d      	ldr	r3, [pc, #180]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	492c      	ldr	r1, [pc, #176]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]
 8003170:	e006      	b.n	8003180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003172:	4b2a      	ldr	r3, [pc, #168]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	43db      	mvns	r3, r3
 800317a:	4928      	ldr	r1, [pc, #160]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 800317c:	4013      	ands	r3, r2
 800317e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d006      	beq.n	800319a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800318c:	4b23      	ldr	r3, [pc, #140]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4922      	ldr	r1, [pc, #136]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	4313      	orrs	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
 8003198:	e006      	b.n	80031a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800319a:	4b20      	ldr	r3, [pc, #128]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	491e      	ldr	r1, [pc, #120]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031b4:	4b19      	ldr	r3, [pc, #100]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	4918      	ldr	r1, [pc, #96]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
 80031c0:	e006      	b.n	80031d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031c2:	4b16      	ldr	r3, [pc, #88]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	4914      	ldr	r1, [pc, #80]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d021      	beq.n	8003220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031dc:	4b0f      	ldr	r3, [pc, #60]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	490e      	ldr	r1, [pc, #56]	@ (800321c <HAL_GPIO_Init+0x2d0>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e021      	b.n	800322e <HAL_GPIO_Init+0x2e2>
 80031ea:	bf00      	nop
 80031ec:	10320000 	.word	0x10320000
 80031f0:	10310000 	.word	0x10310000
 80031f4:	10220000 	.word	0x10220000
 80031f8:	10210000 	.word	0x10210000
 80031fc:	10120000 	.word	0x10120000
 8003200:	10110000 	.word	0x10110000
 8003204:	40021000 	.word	0x40021000
 8003208:	40010000 	.word	0x40010000
 800320c:	40010800 	.word	0x40010800
 8003210:	40010c00 	.word	0x40010c00
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <HAL_GPIO_Init+0x304>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	43db      	mvns	r3, r3
 8003228:	4909      	ldr	r1, [pc, #36]	@ (8003250 <HAL_GPIO_Init+0x304>)
 800322a:	4013      	ands	r3, r2
 800322c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800322e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003230:	3301      	adds	r3, #1
 8003232:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	fa22 f303 	lsr.w	r3, r2, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	f47f ae8e 	bne.w	8002f60 <HAL_GPIO_Init+0x14>
  }
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	372c      	adds	r7, #44	@ 0x2c
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr
 8003250:	40010400 	.word	0x40010400

08003254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	887b      	ldrh	r3, [r7, #2]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e001      	b.n	8003276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003272:	2300      	movs	r3, #0
 8003274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003276:	7bfb      	ldrb	r3, [r7, #15]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr

08003282 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003282:	b480      	push	{r7}
 8003284:	b083      	sub	sp, #12
 8003286:	af00      	add	r7, sp, #0
 8003288:	6078      	str	r0, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	807b      	strh	r3, [r7, #2]
 800328e:	4613      	mov	r3, r2
 8003290:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003292:	787b      	ldrb	r3, [r7, #1]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800329e:	e003      	b.n	80032a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032a0:	887b      	ldrh	r3, [r7, #2]
 80032a2:	041a      	lsls	r2, r3, #16
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	611a      	str	r2, [r3, #16]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
	...

080032b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	4603      	mov	r3, r0
 80032bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032be:	4b08      	ldr	r3, [pc, #32]	@ (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ca:	4a05      	ldr	r2, [pc, #20]	@ (80032e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032cc:	88fb      	ldrh	r3, [r7, #6]
 80032ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f806 	bl	80032e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032d8:	bf00      	nop
 80032da:	3708      	adds	r7, #8
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e272      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8087 	beq.w	8003426 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003318:	4b92      	ldr	r3, [pc, #584]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f003 030c 	and.w	r3, r3, #12
 8003320:	2b04      	cmp	r3, #4
 8003322:	d00c      	beq.n	800333e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003324:	4b8f      	ldr	r3, [pc, #572]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 030c 	and.w	r3, r3, #12
 800332c:	2b08      	cmp	r3, #8
 800332e:	d112      	bne.n	8003356 <HAL_RCC_OscConfig+0x5e>
 8003330:	4b8c      	ldr	r3, [pc, #560]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333c:	d10b      	bne.n	8003356 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333e:	4b89      	ldr	r3, [pc, #548]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d06c      	beq.n	8003424 <HAL_RCC_OscConfig+0x12c>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d168      	bne.n	8003424 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e24c      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335e:	d106      	bne.n	800336e <HAL_RCC_OscConfig+0x76>
 8003360:	4b80      	ldr	r3, [pc, #512]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a7f      	ldr	r2, [pc, #508]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003366:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e02e      	b.n	80033cc <HAL_RCC_OscConfig+0xd4>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10c      	bne.n	8003390 <HAL_RCC_OscConfig+0x98>
 8003376:	4b7b      	ldr	r3, [pc, #492]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a7a      	ldr	r2, [pc, #488]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 800337c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	4b78      	ldr	r3, [pc, #480]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a77      	ldr	r2, [pc, #476]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003388:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e01d      	b.n	80033cc <HAL_RCC_OscConfig+0xd4>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0xbc>
 800339a:	4b72      	ldr	r3, [pc, #456]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a71      	ldr	r2, [pc, #452]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4b6f      	ldr	r3, [pc, #444]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e00b      	b.n	80033cc <HAL_RCC_OscConfig+0xd4>
 80033b4:	4b6b      	ldr	r3, [pc, #428]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a6a      	ldr	r2, [pc, #424]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033be:	6013      	str	r3, [r2, #0]
 80033c0:	4b68      	ldr	r3, [pc, #416]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a67      	ldr	r2, [pc, #412]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d013      	beq.n	80033fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fc7e 	bl	8002cd4 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7ff fc7a 	bl	8002cd4 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e200      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ee:	4b5d      	ldr	r3, [pc, #372]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0f0      	beq.n	80033dc <HAL_RCC_OscConfig+0xe4>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7ff fc6a 	bl	8002cd4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7ff fc66 	bl	8002cd4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e1ec      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003416:	4b53      	ldr	r3, [pc, #332]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x10c>
 8003422:	e000      	b.n	8003426 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d063      	beq.n	80034fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003432:	4b4c      	ldr	r3, [pc, #304]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 030c 	and.w	r3, r3, #12
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00b      	beq.n	8003456 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800343e:	4b49      	ldr	r3, [pc, #292]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 030c 	and.w	r3, r3, #12
 8003446:	2b08      	cmp	r3, #8
 8003448:	d11c      	bne.n	8003484 <HAL_RCC_OscConfig+0x18c>
 800344a:	4b46      	ldr	r3, [pc, #280]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d116      	bne.n	8003484 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	4b43      	ldr	r3, [pc, #268]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d005      	beq.n	800346e <HAL_RCC_OscConfig+0x176>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d001      	beq.n	800346e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e1c0      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346e:	4b3d      	ldr	r3, [pc, #244]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4939      	ldr	r1, [pc, #228]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 800347e:	4313      	orrs	r3, r2
 8003480:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003482:	e03a      	b.n	80034fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d020      	beq.n	80034ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800348c:	4b36      	ldr	r3, [pc, #216]	@ (8003568 <HAL_RCC_OscConfig+0x270>)
 800348e:	2201      	movs	r2, #1
 8003490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003492:	f7ff fc1f 	bl	8002cd4 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800349a:	f7ff fc1b 	bl	8002cd4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e1a1      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f0      	beq.n	800349a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4927      	ldr	r1, [pc, #156]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	600b      	str	r3, [r1, #0]
 80034cc:	e015      	b.n	80034fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ce:	4b26      	ldr	r3, [pc, #152]	@ (8003568 <HAL_RCC_OscConfig+0x270>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7ff fbfe 	bl	8002cd4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034dc:	f7ff fbfa 	bl	8002cd4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e180      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d03a      	beq.n	800357c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d019      	beq.n	8003542 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350e:	4b17      	ldr	r3, [pc, #92]	@ (800356c <HAL_RCC_OscConfig+0x274>)
 8003510:	2201      	movs	r2, #1
 8003512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7ff fbde 	bl	8002cd4 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800351c:	f7ff fbda 	bl	8002cd4 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b02      	cmp	r3, #2
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e160      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352e:	4b0d      	ldr	r3, [pc, #52]	@ (8003564 <HAL_RCC_OscConfig+0x26c>)
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800353a:	2001      	movs	r0, #1
 800353c:	f000 face 	bl	8003adc <RCC_Delay>
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <HAL_RCC_OscConfig+0x274>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003548:	f7ff fbc4 	bl	8002cd4 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800354e:	e00f      	b.n	8003570 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003550:	f7ff fbc0 	bl	8002cd4 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d908      	bls.n	8003570 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e146      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	42420000 	.word	0x42420000
 800356c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003570:	4b92      	ldr	r3, [pc, #584]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e9      	bne.n	8003550 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80a6 	beq.w	80036d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358a:	2300      	movs	r3, #0
 800358c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800358e:	4b8b      	ldr	r3, [pc, #556]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d10d      	bne.n	80035b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359a:	4b88      	ldr	r3, [pc, #544]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4a87      	ldr	r2, [pc, #540]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	61d3      	str	r3, [r2, #28]
 80035a6:	4b85      	ldr	r3, [pc, #532]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ae:	60bb      	str	r3, [r7, #8]
 80035b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b2:	2301      	movs	r3, #1
 80035b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b6:	4b82      	ldr	r3, [pc, #520]	@ (80037c0 <HAL_RCC_OscConfig+0x4c8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d118      	bne.n	80035f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035c2:	4b7f      	ldr	r3, [pc, #508]	@ (80037c0 <HAL_RCC_OscConfig+0x4c8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7e      	ldr	r2, [pc, #504]	@ (80037c0 <HAL_RCC_OscConfig+0x4c8>)
 80035c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ce:	f7ff fb81 	bl	8002cd4 <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d6:	f7ff fb7d 	bl	8002cd4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b64      	cmp	r3, #100	@ 0x64
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e103      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e8:	4b75      	ldr	r3, [pc, #468]	@ (80037c0 <HAL_RCC_OscConfig+0x4c8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d0f0      	beq.n	80035d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d106      	bne.n	800360a <HAL_RCC_OscConfig+0x312>
 80035fc:	4b6f      	ldr	r3, [pc, #444]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4a6e      	ldr	r2, [pc, #440]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6213      	str	r3, [r2, #32]
 8003608:	e02d      	b.n	8003666 <HAL_RCC_OscConfig+0x36e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10c      	bne.n	800362c <HAL_RCC_OscConfig+0x334>
 8003612:	4b6a      	ldr	r3, [pc, #424]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4a69      	ldr	r2, [pc, #420]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003618:	f023 0301 	bic.w	r3, r3, #1
 800361c:	6213      	str	r3, [r2, #32]
 800361e:	4b67      	ldr	r3, [pc, #412]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	4a66      	ldr	r2, [pc, #408]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003624:	f023 0304 	bic.w	r3, r3, #4
 8003628:	6213      	str	r3, [r2, #32]
 800362a:	e01c      	b.n	8003666 <HAL_RCC_OscConfig+0x36e>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b05      	cmp	r3, #5
 8003632:	d10c      	bne.n	800364e <HAL_RCC_OscConfig+0x356>
 8003634:	4b61      	ldr	r3, [pc, #388]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a60      	ldr	r2, [pc, #384]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 800363a:	f043 0304 	orr.w	r3, r3, #4
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	4b5e      	ldr	r3, [pc, #376]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	4a5d      	ldr	r2, [pc, #372]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6213      	str	r3, [r2, #32]
 800364c:	e00b      	b.n	8003666 <HAL_RCC_OscConfig+0x36e>
 800364e:	4b5b      	ldr	r3, [pc, #364]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4a5a      	ldr	r2, [pc, #360]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	6213      	str	r3, [r2, #32]
 800365a:	4b58      	ldr	r3, [pc, #352]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a57      	ldr	r2, [pc, #348]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f023 0304 	bic.w	r3, r3, #4
 8003664:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d015      	beq.n	800369a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800366e:	f7ff fb31 	bl	8002cd4 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003674:	e00a      	b.n	800368c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003676:	f7ff fb2d 	bl	8002cd4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e0b1      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368c:	4b4b      	ldr	r3, [pc, #300]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0ee      	beq.n	8003676 <HAL_RCC_OscConfig+0x37e>
 8003698:	e014      	b.n	80036c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800369a:	f7ff fb1b 	bl	8002cd4 <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a0:	e00a      	b.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7ff fb17 	bl	8002cd4 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e09b      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b8:	4b40      	ldr	r3, [pc, #256]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1ee      	bne.n	80036a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d105      	bne.n	80036d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ca:	4b3c      	ldr	r3, [pc, #240]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	4a3b      	ldr	r2, [pc, #236]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8087 	beq.w	80037ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e0:	4b36      	ldr	r3, [pc, #216]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 030c 	and.w	r3, r3, #12
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d061      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d146      	bne.n	8003782 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036f4:	4b33      	ldr	r3, [pc, #204]	@ (80037c4 <HAL_RCC_OscConfig+0x4cc>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036fa:	f7ff faeb 	bl	8002cd4 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003702:	f7ff fae7 	bl	8002cd4 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e06d      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003714:	4b29      	ldr	r3, [pc, #164]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f0      	bne.n	8003702 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003728:	d108      	bne.n	800373c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	4921      	ldr	r1, [pc, #132]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003738:	4313      	orrs	r3, r2
 800373a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373c:	4b1f      	ldr	r3, [pc, #124]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a19      	ldr	r1, [r3, #32]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	430b      	orrs	r3, r1
 800374e:	491b      	ldr	r1, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003750:	4313      	orrs	r3, r2
 8003752:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003754:	4b1b      	ldr	r3, [pc, #108]	@ (80037c4 <HAL_RCC_OscConfig+0x4cc>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375a:	f7ff fabb 	bl	8002cd4 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003762:	f7ff fab7 	bl	8002cd4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e03d      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x46a>
 8003780:	e035      	b.n	80037ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b10      	ldr	r3, [pc, #64]	@ (80037c4 <HAL_RCC_OscConfig+0x4cc>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7ff faa4 	bl	8002cd4 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003790:	f7ff faa0 	bl	8002cd4 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e026      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037a2:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x498>
 80037ae:	e01e      	b.n	80037ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e019      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40007000 	.word	0x40007000
 80037c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c8:	4b0b      	ldr	r3, [pc, #44]	@ (80037f8 <HAL_RCC_OscConfig+0x500>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d106      	bne.n	80037ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d001      	beq.n	80037ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40021000 	.word	0x40021000

080037fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d0      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003810:	4b6a      	ldr	r3, [pc, #424]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d910      	bls.n	8003840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381e:	4b67      	ldr	r3, [pc, #412]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f023 0207 	bic.w	r2, r3, #7
 8003826:	4965      	ldr	r1, [pc, #404]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	4313      	orrs	r3, r2
 800382c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800382e:	4b63      	ldr	r3, [pc, #396]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d001      	beq.n	8003840 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0b8      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003858:	4b59      	ldr	r3, [pc, #356]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a58      	ldr	r2, [pc, #352]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800385e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003862:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0308 	and.w	r3, r3, #8
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003870:	4b53      	ldr	r3, [pc, #332]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a52      	ldr	r2, [pc, #328]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800387a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800387c:	4b50      	ldr	r3, [pc, #320]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	494d      	ldr	r1, [pc, #308]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800388a:	4313      	orrs	r3, r2
 800388c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d040      	beq.n	800391c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d107      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a2:	4b47      	ldr	r3, [pc, #284]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d115      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e07f      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d107      	bne.n	80038ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ba:	4b41      	ldr	r3, [pc, #260]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e073      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ca:	4b3d      	ldr	r3, [pc, #244]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e06b      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038da:	4b39      	ldr	r3, [pc, #228]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f023 0203 	bic.w	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	4936      	ldr	r1, [pc, #216]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038ec:	f7ff f9f2 	bl	8002cd4 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f2:	e00a      	b.n	800390a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f4:	f7ff f9ee 	bl	8002cd4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e053      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 020c 	and.w	r2, r3, #12
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d1eb      	bne.n	80038f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800391c:	4b27      	ldr	r3, [pc, #156]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d210      	bcs.n	800394c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b24      	ldr	r3, [pc, #144]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f023 0207 	bic.w	r2, r3, #7
 8003932:	4922      	ldr	r1, [pc, #136]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	4313      	orrs	r3, r2
 8003938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <HAL_RCC_ClockConfig+0x1c0>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e032      	b.n	80039b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003958:	4b19      	ldr	r3, [pc, #100]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	4916      	ldr	r1, [pc, #88]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b00      	cmp	r3, #0
 8003974:	d009      	beq.n	800398a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003976:	4b12      	ldr	r3, [pc, #72]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	490e      	ldr	r1, [pc, #56]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800398a:	f000 f821 	bl	80039d0 <HAL_RCC_GetSysClockFreq>
 800398e:	4602      	mov	r2, r0
 8003990:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	091b      	lsrs	r3, r3, #4
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	490a      	ldr	r1, [pc, #40]	@ (80039c4 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	5ccb      	ldrb	r3, [r1, r3]
 800399e:	fa22 f303 	lsr.w	r3, r2, r3
 80039a2:	4a09      	ldr	r2, [pc, #36]	@ (80039c8 <HAL_RCC_ClockConfig+0x1cc>)
 80039a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <HAL_RCC_ClockConfig+0x1d0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff f950 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40021000 	.word	0x40021000
 80039c4:	08005900 	.word	0x08005900
 80039c8:	20000164 	.word	0x20000164
 80039cc:	20000168 	.word	0x20000168

080039d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	2300      	movs	r3, #0
 80039e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 030c 	and.w	r3, r3, #12
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d002      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0x30>
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d003      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x36>
 80039fe:	e027      	b.n	8003a50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a02:	613b      	str	r3, [r7, #16]
      break;
 8003a04:	e027      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0c9b      	lsrs	r3, r3, #18
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	4a17      	ldr	r2, [pc, #92]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a10:	5cd3      	ldrb	r3, [r2, r3]
 8003a12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a1e:	4b11      	ldr	r3, [pc, #68]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	0c5b      	lsrs	r3, r3, #17
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	4a11      	ldr	r2, [pc, #68]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a2a:	5cd3      	ldrb	r3, [r2, r3]
 8003a2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a32:	fb03 f202 	mul.w	r2, r3, r2
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	e004      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a0c      	ldr	r2, [pc, #48]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a44:	fb02 f303 	mul.w	r3, r2, r3
 8003a48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	613b      	str	r3, [r7, #16]
      break;
 8003a4e:	e002      	b.n	8003a56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a50:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a52:	613b      	str	r3, [r7, #16]
      break;
 8003a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a56:	693b      	ldr	r3, [r7, #16]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bc80      	pop	{r7}
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	007a1200 	.word	0x007a1200
 8003a6c:	08005918 	.word	0x08005918
 8003a70:	08005928 	.word	0x08005928
 8003a74:	003d0900 	.word	0x003d0900

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b02      	ldr	r3, [pc, #8]	@ (8003a88 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr
 8003a88:	20000164 	.word	0x20000164

08003a8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a90:	f7ff fff2 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0a1b      	lsrs	r3, r3, #8
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	08005910 	.word	0x08005910

08003ab4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab8:	f7ff ffde 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	0adb      	lsrs	r3, r3, #11
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08005910 	.word	0x08005910

08003adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <RCC_Delay+0x34>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <RCC_Delay+0x38>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0a5b      	lsrs	r3, r3, #9
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	fb02 f303 	mul.w	r3, r2, r3
 8003af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af8:	bf00      	nop
  }
  while (Delay --);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e5a      	subs	r2, r3, #1
 8003afe:	60fa      	str	r2, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f9      	bne.n	8003af8 <RCC_Delay+0x1c>
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bc80      	pop	{r7}
 8003b0e:	4770      	bx	lr
 8003b10:	20000164 	.word	0x20000164
 8003b14:	10624dd3 	.word	0x10624dd3

08003b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e041      	b.n	8003bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe ff4a 	bl	80029d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f000 fb16 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e041      	b.n	8003c4c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f839 	bl	8003c54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2202      	movs	r2, #2
 8003be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f000 fac7 	bl	8004188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bc80      	pop	{r7}
 8003c64:	4770      	bx	lr
	...

08003c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d109      	bne.n	8003c8c <HAL_TIM_PWM_Start+0x24>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	e022      	b.n	8003cd2 <HAL_TIM_PWM_Start+0x6a>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2b04      	cmp	r3, #4
 8003c90:	d109      	bne.n	8003ca6 <HAL_TIM_PWM_Start+0x3e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	bf14      	ite	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	2300      	moveq	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	e015      	b.n	8003cd2 <HAL_TIM_PWM_Start+0x6a>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d109      	bne.n	8003cc0 <HAL_TIM_PWM_Start+0x58>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	bf14      	ite	ne
 8003cb8:	2301      	movne	r3, #1
 8003cba:	2300      	moveq	r3, #0
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	e008      	b.n	8003cd2 <HAL_TIM_PWM_Start+0x6a>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e05e      	b.n	8003d98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_PWM_Start+0x82>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ce8:	e013      	b.n	8003d12 <HAL_TIM_PWM_Start+0xaa>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_PWM_Start+0x92>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cf8:	e00b      	b.n	8003d12 <HAL_TIM_PWM_Start+0xaa>
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d104      	bne.n	8003d0a <HAL_TIM_PWM_Start+0xa2>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d08:	e003      	b.n	8003d12 <HAL_TIM_PWM_Start+0xaa>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2201      	movs	r2, #1
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fcc0 	bl	80046a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1e      	ldr	r2, [pc, #120]	@ (8003da0 <HAL_TIM_PWM_Start+0x138>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <HAL_TIM_PWM_Start+0x138>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00e      	beq.n	8003d62 <HAL_TIM_PWM_Start+0xfa>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d4c:	d009      	beq.n	8003d62 <HAL_TIM_PWM_Start+0xfa>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a14      	ldr	r2, [pc, #80]	@ (8003da4 <HAL_TIM_PWM_Start+0x13c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d004      	beq.n	8003d62 <HAL_TIM_PWM_Start+0xfa>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a12      	ldr	r2, [pc, #72]	@ (8003da8 <HAL_TIM_PWM_Start+0x140>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d111      	bne.n	8003d86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d010      	beq.n	8003d96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d84:	e007      	b.n	8003d96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	40012c00 	.word	0x40012c00
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 fc6e 	bl	80046a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a29      	ldr	r2, [pc, #164]	@ (8003e70 <HAL_TIM_PWM_Stop+0xc4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d117      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6a1a      	ldr	r2, [r3, #32]
 8003dd4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0x52>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a1a      	ldr	r2, [r3, #32]
 8003de4:	f240 4344 	movw	r3, #1092	@ 0x444
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d107      	bne.n	8003dfe <HAL_TIM_PWM_Stop+0x52>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003dfc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <HAL_TIM_PWM_Stop+0x82>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d107      	bne.n	8003e2e <HAL_TIM_PWM_Stop+0x82>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0201 	bic.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Stop+0x92>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e3c:	e013      	b.n	8003e66 <HAL_TIM_PWM_Stop+0xba>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Stop+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e4c:	e00b      	b.n	8003e66 <HAL_TIM_PWM_Stop+0xba>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Stop+0xb2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e5c:	e003      	b.n	8003e66 <HAL_TIM_PWM_Stop+0xba>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40012c00 	.word	0x40012c00

08003e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0ae      	b.n	8003ff0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	f200 809f 	bhi.w	8003fe0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003fe1 	.word	0x08003fe1
 8003eb0:	08003fe1 	.word	0x08003fe1
 8003eb4:	08003fe1 	.word	0x08003fe1
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003fe1 	.word	0x08003fe1
 8003ec0:	08003fe1 	.word	0x08003fe1
 8003ec4:	08003fe1 	.word	0x08003fe1
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003fe1 	.word	0x08003fe1
 8003ed0:	08003fe1 	.word	0x08003fe1
 8003ed4:	08003fe1 	.word	0x08003fe1
 8003ed8:	08003f9f 	.word	0x08003f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f9be 	bl	8004264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0208 	orr.w	r2, r2, #8
 8003ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	619a      	str	r2, [r3, #24]
      break;
 8003f1a:	e064      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fa04 	bl	8004330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6999      	ldr	r1, [r3, #24]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
      break;
 8003f5c:	e043      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fa4d 	bl	8004404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0204 	bic.w	r2, r2, #4
 8003f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69d9      	ldr	r1, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	61da      	str	r2, [r3, #28]
      break;
 8003f9c:	e023      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa97 	bl	80044d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
      break;
 8003fde:	e002      	b.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8003fe4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400c:	2b01      	cmp	r3, #1
 800400e:	d101      	bne.n	8004014 <HAL_TIM_ConfigClockSource+0x1c>
 8004010:	2302      	movs	r3, #2
 8004012:	e0b4      	b.n	800417e <HAL_TIM_ConfigClockSource+0x186>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800403a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404c:	d03e      	beq.n	80040cc <HAL_TIM_ConfigClockSource+0xd4>
 800404e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004052:	f200 8087 	bhi.w	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405a:	f000 8086 	beq.w	800416a <HAL_TIM_ConfigClockSource+0x172>
 800405e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004062:	d87f      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b70      	cmp	r3, #112	@ 0x70
 8004066:	d01a      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xa6>
 8004068:	2b70      	cmp	r3, #112	@ 0x70
 800406a:	d87b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b60      	cmp	r3, #96	@ 0x60
 800406e:	d050      	beq.n	8004112 <HAL_TIM_ConfigClockSource+0x11a>
 8004070:	2b60      	cmp	r3, #96	@ 0x60
 8004072:	d877      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b50      	cmp	r3, #80	@ 0x50
 8004076:	d03c      	beq.n	80040f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004078:	2b50      	cmp	r3, #80	@ 0x50
 800407a:	d873      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b40      	cmp	r3, #64	@ 0x40
 800407e:	d058      	beq.n	8004132 <HAL_TIM_ConfigClockSource+0x13a>
 8004080:	2b40      	cmp	r3, #64	@ 0x40
 8004082:	d86f      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b30      	cmp	r3, #48	@ 0x30
 8004086:	d064      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b30      	cmp	r3, #48	@ 0x30
 800408a:	d86b      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d060      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b20      	cmp	r3, #32
 8004092:	d867      	bhi.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d05c      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 8004098:	2b10      	cmp	r3, #16
 800409a:	d05a      	beq.n	8004152 <HAL_TIM_ConfigClockSource+0x15a>
 800409c:	e062      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040ae:	f000 fad8 	bl	8004662 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	609a      	str	r2, [r3, #8]
      break;
 80040ca:	e04f      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040dc:	f000 fac1 	bl	8004662 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040ee:	609a      	str	r2, [r3, #8]
      break;
 80040f0:	e03c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	461a      	mov	r2, r3
 8004100:	f000 fa38 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2150      	movs	r1, #80	@ 0x50
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fa8f 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004110:	e02c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800411e:	461a      	mov	r2, r3
 8004120:	f000 fa56 	bl	80045d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2160      	movs	r1, #96	@ 0x60
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fa7f 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004130:	e01c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	461a      	mov	r2, r3
 8004140:	f000 fa18 	bl	8004574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2140      	movs	r1, #64	@ 0x40
 800414a:	4618      	mov	r0, r3
 800414c:	f000 fa6f 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004150:	e00c      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4619      	mov	r1, r3
 800415c:	4610      	mov	r0, r2
 800415e:	f000 fa66 	bl	800462e <TIM_ITRx_SetConfig>
      break;
 8004162:	e003      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	73fb      	strb	r3, [r7, #15]
      break;
 8004168:	e000      	b.n	800416c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800416a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2f      	ldr	r2, [pc, #188]	@ (8004258 <TIM_Base_SetConfig+0xd0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00b      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a2c      	ldr	r2, [pc, #176]	@ (800425c <TIM_Base_SetConfig+0xd4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0x30>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004260 <TIM_Base_SetConfig+0xd8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a22      	ldr	r2, [pc, #136]	@ (8004258 <TIM_Base_SetConfig+0xd0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00b      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d007      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a1f      	ldr	r2, [pc, #124]	@ (800425c <TIM_Base_SetConfig+0xd4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_Base_SetConfig+0x62>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004260 <TIM_Base_SetConfig+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d108      	bne.n	80041fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a0d      	ldr	r2, [pc, #52]	@ (8004258 <TIM_Base_SetConfig+0xd0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d103      	bne.n	8004230 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	f023 0201 	bic.w	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	611a      	str	r2, [r3, #16]
  }
}
 800424e:	bf00      	nop
 8004250:	3714      	adds	r7, #20
 8004252:	46bd      	mov	sp, r7
 8004254:	bc80      	pop	{r7}
 8004256:	4770      	bx	lr
 8004258:	40012c00 	.word	0x40012c00
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800

08004264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f023 0201 	bic.w	r2, r3, #1
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68fa      	ldr	r2, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 0302 	bic.w	r3, r3, #2
 80042ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a1c      	ldr	r2, [pc, #112]	@ (800432c <TIM_OC1_SetConfig+0xc8>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d10c      	bne.n	80042da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f023 0308 	bic.w	r3, r3, #8
 80042c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f023 0304 	bic.w	r3, r3, #4
 80042d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a13      	ldr	r2, [pc, #76]	@ (800432c <TIM_OC1_SetConfig+0xc8>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d111      	bne.n	8004306 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40012c00 	.word	0x40012c00

08004330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f023 0210 	bic.w	r2, r3, #16
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f023 0320 	bic.w	r3, r3, #32
 800437a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a1d      	ldr	r2, [pc, #116]	@ (8004400 <TIM_OC2_SetConfig+0xd0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10d      	bne.n	80043ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a14      	ldr	r2, [pc, #80]	@ (8004400 <TIM_OC2_SetConfig+0xd0>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d113      	bne.n	80043dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	621a      	str	r2, [r3, #32]
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	40012c00 	.word	0x40012c00

08004404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0303 	bic.w	r3, r3, #3
 800443a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800444c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <TIM_OC3_SetConfig+0xd0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d10d      	bne.n	800447e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800447c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a14      	ldr	r2, [pc, #80]	@ (80044d4 <TIM_OC3_SetConfig+0xd0>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d113      	bne.n	80044ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800448c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004494:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	4313      	orrs	r3, r2
 80044a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	011b      	lsls	r3, r3, #4
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	621a      	str	r2, [r3, #32]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40012c00 	.word	0x40012c00

080044d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	021b      	lsls	r3, r3, #8
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004522:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	031b      	lsls	r3, r3, #12
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a0f      	ldr	r2, [pc, #60]	@ (8004570 <TIM_OC4_SetConfig+0x98>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d109      	bne.n	800454c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800453e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	019b      	lsls	r3, r3, #6
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	4313      	orrs	r3, r2
 800454a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685a      	ldr	r2, [r3, #4]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	621a      	str	r2, [r3, #32]
}
 8004566:	bf00      	nop
 8004568:	371c      	adds	r7, #28
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00

08004574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1b      	ldr	r3, [r3, #32]
 8004584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	f023 0201 	bic.w	r2, r3, #1
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800459e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f023 030a 	bic.w	r3, r3, #10
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	621a      	str	r2, [r3, #32]
}
 80045c6:	bf00      	nop
 80045c8:	371c      	adds	r7, #28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr

080045d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	f023 0210 	bic.w	r2, r3, #16
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	031b      	lsls	r3, r3, #12
 8004600:	693a      	ldr	r2, [r7, #16]
 8004602:	4313      	orrs	r3, r2
 8004604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800460c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	621a      	str	r2, [r3, #32]
}
 8004624:	bf00      	nop
 8004626:	371c      	adds	r7, #28
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr

0800462e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800462e:	b480      	push	{r7}
 8004630:	b085      	sub	sp, #20
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
 8004636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	f043 0307 	orr.w	r3, r3, #7
 8004650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68fa      	ldr	r2, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	bc80      	pop	{r7}
 8004660:	4770      	bx	lr

08004662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800467c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	021a      	lsls	r2, r3, #8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	431a      	orrs	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4313      	orrs	r3, r2
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	609a      	str	r2, [r3, #8]
}
 8004696:	bf00      	nop
 8004698:	371c      	adds	r7, #28
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr

080046a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	f003 031f 	and.w	r3, r3, #31
 80046b2:	2201      	movs	r2, #1
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a1a      	ldr	r2, [r3, #32]
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	401a      	ands	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 031f 	and.w	r3, r3, #31
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	fa01 f303 	lsl.w	r3, r1, r3
 80046d8:	431a      	orrs	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr

080046e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e046      	b.n	800478e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	4313      	orrs	r3, r2
 8004730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474c:	d009      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a12      	ldr	r2, [pc, #72]	@ (800479c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a10      	ldr	r2, [pc, #64]	@ (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d10c      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4313      	orrs	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68ba      	ldr	r2, [r7, #8]
 800477a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40012c00 	.word	0x40012c00
 800479c:	40000400 	.word	0x40000400
 80047a0:	40000800 	.word	0x40000800

080047a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d101      	bne.n	80047c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80047bc:	2302      	movs	r3, #2
 80047be:	e03d      	b.n	800483c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	bc80      	pop	{r7}
 8004844:	4770      	bx	lr

08004846 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e042      	b.n	80048de <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fe f93b 	bl	8002ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2224      	movs	r2, #36	@ 0x24
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004888:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f82c 	bl	80048e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800489e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048ae:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048be:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004922:	f023 030c 	bic.w	r3, r3, #12
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	430b      	orrs	r3, r1
 800492e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699a      	ldr	r2, [r3, #24]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2c      	ldr	r2, [pc, #176]	@ (80049fc <UART_SetConfig+0x114>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d103      	bne.n	8004958 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004950:	f7ff f8b0 	bl	8003ab4 <HAL_RCC_GetPCLK2Freq>
 8004954:	60f8      	str	r0, [r7, #12]
 8004956:	e002      	b.n	800495e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004958:	f7ff f898 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 800495c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	009a      	lsls	r2, r3, #2
 8004968:	441a      	add	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	fbb2 f3f3 	udiv	r3, r2, r3
 8004974:	4a22      	ldr	r2, [pc, #136]	@ (8004a00 <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	0119      	lsls	r1, r3, #4
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	4b1a      	ldr	r3, [pc, #104]	@ (8004a00 <UART_SetConfig+0x118>)
 8004996:	fba3 0302 	umull	r0, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2064      	movs	r0, #100	@ 0x64
 800499e:	fb00 f303 	mul.w	r3, r0, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	@ 0x32
 80049a8:	4a15      	ldr	r2, [pc, #84]	@ (8004a00 <UART_SetConfig+0x118>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049b4:	4419      	add	r1, r3
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004a00 <UART_SetConfig+0x118>)
 80049ce:	fba3 0302 	umull	r0, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2064      	movs	r0, #100	@ 0x64
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	3332      	adds	r3, #50	@ 0x32
 80049e0:	4a07      	ldr	r2, [pc, #28]	@ (8004a00 <UART_SetConfig+0x118>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	f003 020f 	and.w	r2, r3, #15
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	440a      	add	r2, r1
 80049f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049f4:	bf00      	nop
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40013800 	.word	0x40013800
 8004a00:	51eb851f 	.word	0x51eb851f

08004a04 <memset>:
 8004a04:	4603      	mov	r3, r0
 8004a06:	4402      	add	r2, r0
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d100      	bne.n	8004a0e <memset+0xa>
 8004a0c:	4770      	bx	lr
 8004a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a12:	e7f9      	b.n	8004a08 <memset+0x4>

08004a14 <__errno>:
 8004a14:	4b01      	ldr	r3, [pc, #4]	@ (8004a1c <__errno+0x8>)
 8004a16:	6818      	ldr	r0, [r3, #0]
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000170 	.word	0x20000170

08004a20 <__libc_init_array>:
 8004a20:	b570      	push	{r4, r5, r6, lr}
 8004a22:	2600      	movs	r6, #0
 8004a24:	4d0c      	ldr	r5, [pc, #48]	@ (8004a58 <__libc_init_array+0x38>)
 8004a26:	4c0d      	ldr	r4, [pc, #52]	@ (8004a5c <__libc_init_array+0x3c>)
 8004a28:	1b64      	subs	r4, r4, r5
 8004a2a:	10a4      	asrs	r4, r4, #2
 8004a2c:	42a6      	cmp	r6, r4
 8004a2e:	d109      	bne.n	8004a44 <__libc_init_array+0x24>
 8004a30:	f000 feb0 	bl	8005794 <_init>
 8004a34:	2600      	movs	r6, #0
 8004a36:	4d0a      	ldr	r5, [pc, #40]	@ (8004a60 <__libc_init_array+0x40>)
 8004a38:	4c0a      	ldr	r4, [pc, #40]	@ (8004a64 <__libc_init_array+0x44>)
 8004a3a:	1b64      	subs	r4, r4, r5
 8004a3c:	10a4      	asrs	r4, r4, #2
 8004a3e:	42a6      	cmp	r6, r4
 8004a40:	d105      	bne.n	8004a4e <__libc_init_array+0x2e>
 8004a42:	bd70      	pop	{r4, r5, r6, pc}
 8004a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a48:	4798      	blx	r3
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7ee      	b.n	8004a2c <__libc_init_array+0xc>
 8004a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a52:	4798      	blx	r3
 8004a54:	3601      	adds	r6, #1
 8004a56:	e7f2      	b.n	8004a3e <__libc_init_array+0x1e>
 8004a58:	08005d04 	.word	0x08005d04
 8004a5c:	08005d04 	.word	0x08005d04
 8004a60:	08005d04 	.word	0x08005d04
 8004a64:	08005d08 	.word	0x08005d08

08004a68 <memcpy>:
 8004a68:	440a      	add	r2, r1
 8004a6a:	4291      	cmp	r1, r2
 8004a6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a70:	d100      	bne.n	8004a74 <memcpy+0xc>
 8004a72:	4770      	bx	lr
 8004a74:	b510      	push	{r4, lr}
 8004a76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a7a:	4291      	cmp	r1, r2
 8004a7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a80:	d1f9      	bne.n	8004a76 <memcpy+0xe>
 8004a82:	bd10      	pop	{r4, pc}

08004a84 <sqrtf>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4605      	mov	r5, r0
 8004a88:	f000 f888 	bl	8004b9c <__ieee754_sqrtf>
 8004a8c:	4629      	mov	r1, r5
 8004a8e:	4604      	mov	r4, r0
 8004a90:	4628      	mov	r0, r5
 8004a92:	f7fb fe2f 	bl	80006f4 <__aeabi_fcmpun>
 8004a96:	b968      	cbnz	r0, 8004ab4 <sqrtf+0x30>
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f7fb fe02 	bl	80006a4 <__aeabi_fcmplt>
 8004aa0:	b140      	cbz	r0, 8004ab4 <sqrtf+0x30>
 8004aa2:	f7ff ffb7 	bl	8004a14 <__errno>
 8004aa6:	2321      	movs	r3, #33	@ 0x21
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	6003      	str	r3, [r0, #0]
 8004aac:	4608      	mov	r0, r1
 8004aae:	f7fb fd0f 	bl	80004d0 <__aeabi_fdiv>
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	bd38      	pop	{r3, r4, r5, pc}

08004ab8 <cosf>:
 8004ab8:	b507      	push	{r0, r1, r2, lr}
 8004aba:	4a1a      	ldr	r2, [pc, #104]	@ (8004b24 <cosf+0x6c>)
 8004abc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	4601      	mov	r1, r0
 8004ac4:	d805      	bhi.n	8004ad2 <cosf+0x1a>
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	b003      	add	sp, #12
 8004aca:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ace:	f000 b8d5 	b.w	8004c7c <__kernel_cosf>
 8004ad2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004ad6:	d304      	bcc.n	8004ae2 <cosf+0x2a>
 8004ad8:	f7fb fb3c 	bl	8000154 <__aeabi_fsub>
 8004adc:	b003      	add	sp, #12
 8004ade:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ae2:	4669      	mov	r1, sp
 8004ae4:	f000 f9c0 	bl	8004e68 <__ieee754_rem_pio2f>
 8004ae8:	f000 0203 	and.w	r2, r0, #3
 8004aec:	2a01      	cmp	r2, #1
 8004aee:	d007      	beq.n	8004b00 <cosf+0x48>
 8004af0:	2a02      	cmp	r2, #2
 8004af2:	d00c      	beq.n	8004b0e <cosf+0x56>
 8004af4:	b982      	cbnz	r2, 8004b18 <cosf+0x60>
 8004af6:	9901      	ldr	r1, [sp, #4]
 8004af8:	9800      	ldr	r0, [sp, #0]
 8004afa:	f000 f8bf 	bl	8004c7c <__kernel_cosf>
 8004afe:	e7ed      	b.n	8004adc <cosf+0x24>
 8004b00:	9901      	ldr	r1, [sp, #4]
 8004b02:	9800      	ldr	r0, [sp, #0]
 8004b04:	f000 f93a 	bl	8004d7c <__kernel_sinf>
 8004b08:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004b0c:	e7e6      	b.n	8004adc <cosf+0x24>
 8004b0e:	9901      	ldr	r1, [sp, #4]
 8004b10:	9800      	ldr	r0, [sp, #0]
 8004b12:	f000 f8b3 	bl	8004c7c <__kernel_cosf>
 8004b16:	e7f7      	b.n	8004b08 <cosf+0x50>
 8004b18:	2201      	movs	r2, #1
 8004b1a:	9901      	ldr	r1, [sp, #4]
 8004b1c:	9800      	ldr	r0, [sp, #0]
 8004b1e:	f000 f92d 	bl	8004d7c <__kernel_sinf>
 8004b22:	e7db      	b.n	8004adc <cosf+0x24>
 8004b24:	3f490fd8 	.word	0x3f490fd8

08004b28 <sinf>:
 8004b28:	b507      	push	{r0, r1, r2, lr}
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b98 <sinf+0x70>)
 8004b2c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004b30:	4293      	cmp	r3, r2
 8004b32:	4601      	mov	r1, r0
 8004b34:	d806      	bhi.n	8004b44 <sinf+0x1c>
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	b003      	add	sp, #12
 8004b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b40:	f000 b91c 	b.w	8004d7c <__kernel_sinf>
 8004b44:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004b48:	d304      	bcc.n	8004b54 <sinf+0x2c>
 8004b4a:	f7fb fb03 	bl	8000154 <__aeabi_fsub>
 8004b4e:	b003      	add	sp, #12
 8004b50:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b54:	4669      	mov	r1, sp
 8004b56:	f000 f987 	bl	8004e68 <__ieee754_rem_pio2f>
 8004b5a:	f000 0003 	and.w	r0, r0, #3
 8004b5e:	2801      	cmp	r0, #1
 8004b60:	d008      	beq.n	8004b74 <sinf+0x4c>
 8004b62:	2802      	cmp	r0, #2
 8004b64:	d00b      	beq.n	8004b7e <sinf+0x56>
 8004b66:	b990      	cbnz	r0, 8004b8e <sinf+0x66>
 8004b68:	2201      	movs	r2, #1
 8004b6a:	9901      	ldr	r1, [sp, #4]
 8004b6c:	9800      	ldr	r0, [sp, #0]
 8004b6e:	f000 f905 	bl	8004d7c <__kernel_sinf>
 8004b72:	e7ec      	b.n	8004b4e <sinf+0x26>
 8004b74:	9901      	ldr	r1, [sp, #4]
 8004b76:	9800      	ldr	r0, [sp, #0]
 8004b78:	f000 f880 	bl	8004c7c <__kernel_cosf>
 8004b7c:	e7e7      	b.n	8004b4e <sinf+0x26>
 8004b7e:	2201      	movs	r2, #1
 8004b80:	9901      	ldr	r1, [sp, #4]
 8004b82:	9800      	ldr	r0, [sp, #0]
 8004b84:	f000 f8fa 	bl	8004d7c <__kernel_sinf>
 8004b88:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004b8c:	e7df      	b.n	8004b4e <sinf+0x26>
 8004b8e:	9901      	ldr	r1, [sp, #4]
 8004b90:	9800      	ldr	r0, [sp, #0]
 8004b92:	f000 f873 	bl	8004c7c <__kernel_cosf>
 8004b96:	e7f7      	b.n	8004b88 <sinf+0x60>
 8004b98:	3f490fd8 	.word	0x3f490fd8

08004b9c <__ieee754_sqrtf>:
 8004b9c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8004ba0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4604      	mov	r4, r0
 8004bac:	d30a      	bcc.n	8004bc4 <__ieee754_sqrtf+0x28>
 8004bae:	4601      	mov	r1, r0
 8004bb0:	f7fb fbda 	bl	8000368 <__aeabi_fmul>
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb face 	bl	8000158 <__addsf3>
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc4:	2a00      	cmp	r2, #0
 8004bc6:	d0fa      	beq.n	8004bbe <__ieee754_sqrtf+0x22>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	da06      	bge.n	8004bda <__ieee754_sqrtf+0x3e>
 8004bcc:	4601      	mov	r1, r0
 8004bce:	f7fb fac1 	bl	8000154 <__aeabi_fsub>
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	f7fb fc7c 	bl	80004d0 <__aeabi_fdiv>
 8004bd8:	e7f0      	b.n	8004bbc <__ieee754_sqrtf+0x20>
 8004bda:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8004bde:	d03c      	beq.n	8004c5a <__ieee754_sqrtf+0xbe>
 8004be0:	15c2      	asrs	r2, r0, #23
 8004be2:	2400      	movs	r4, #0
 8004be4:	2019      	movs	r0, #25
 8004be6:	4626      	mov	r6, r4
 8004be8:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8004bec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004bf0:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8004bf4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004bf8:	07d2      	lsls	r2, r2, #31
 8004bfa:	bf58      	it	pl
 8004bfc:	005b      	lslpl	r3, r3, #1
 8004bfe:	106d      	asrs	r5, r5, #1
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	1872      	adds	r2, r6, r1
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bfcf      	iteee	gt
 8004c08:	461a      	movgt	r2, r3
 8004c0a:	1856      	addle	r6, r2, r1
 8004c0c:	1864      	addle	r4, r4, r1
 8004c0e:	1a9a      	suble	r2, r3, r2
 8004c10:	3801      	subs	r0, #1
 8004c12:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8004c16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8004c1a:	d1f2      	bne.n	8004c02 <__ieee754_sqrtf+0x66>
 8004c1c:	b1ba      	cbz	r2, 8004c4e <__ieee754_sqrtf+0xb2>
 8004c1e:	4e15      	ldr	r6, [pc, #84]	@ (8004c74 <__ieee754_sqrtf+0xd8>)
 8004c20:	4f15      	ldr	r7, [pc, #84]	@ (8004c78 <__ieee754_sqrtf+0xdc>)
 8004c22:	6830      	ldr	r0, [r6, #0]
 8004c24:	6839      	ldr	r1, [r7, #0]
 8004c26:	f7fb fa95 	bl	8000154 <__aeabi_fsub>
 8004c2a:	f8d6 8000 	ldr.w	r8, [r6]
 8004c2e:	4601      	mov	r1, r0
 8004c30:	4640      	mov	r0, r8
 8004c32:	f7fb fd41 	bl	80006b8 <__aeabi_fcmple>
 8004c36:	b150      	cbz	r0, 8004c4e <__ieee754_sqrtf+0xb2>
 8004c38:	6830      	ldr	r0, [r6, #0]
 8004c3a:	6839      	ldr	r1, [r7, #0]
 8004c3c:	f7fb fa8c 	bl	8000158 <__addsf3>
 8004c40:	6836      	ldr	r6, [r6, #0]
 8004c42:	4601      	mov	r1, r0
 8004c44:	4630      	mov	r0, r6
 8004c46:	f7fb fd2d 	bl	80006a4 <__aeabi_fcmplt>
 8004c4a:	b170      	cbz	r0, 8004c6a <__ieee754_sqrtf+0xce>
 8004c4c:	3402      	adds	r4, #2
 8004c4e:	1064      	asrs	r4, r4, #1
 8004c50:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8004c54:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8004c58:	e7b1      	b.n	8004bbe <__ieee754_sqrtf+0x22>
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	0218      	lsls	r0, r3, #8
 8004c5e:	460a      	mov	r2, r1
 8004c60:	f101 0101 	add.w	r1, r1, #1
 8004c64:	d5f9      	bpl.n	8004c5a <__ieee754_sqrtf+0xbe>
 8004c66:	4252      	negs	r2, r2
 8004c68:	e7bb      	b.n	8004be2 <__ieee754_sqrtf+0x46>
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	f024 0401 	bic.w	r4, r4, #1
 8004c70:	e7ed      	b.n	8004c4e <__ieee754_sqrtf+0xb2>
 8004c72:	bf00      	nop
 8004c74:	08005930 	.word	0x08005930
 8004c78:	0800592c 	.word	0x0800592c

08004c7c <__kernel_cosf>:
 8004c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c80:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004c84:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8004c88:	4606      	mov	r6, r0
 8004c8a:	4688      	mov	r8, r1
 8004c8c:	d203      	bcs.n	8004c96 <__kernel_cosf+0x1a>
 8004c8e:	f7fb fd47 	bl	8000720 <__aeabi_f2iz>
 8004c92:	2800      	cmp	r0, #0
 8004c94:	d05c      	beq.n	8004d50 <__kernel_cosf+0xd4>
 8004c96:	4631      	mov	r1, r6
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f7fb fb65 	bl	8000368 <__aeabi_fmul>
 8004c9e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	f7fb fb60 	bl	8000368 <__aeabi_fmul>
 8004ca8:	492b      	ldr	r1, [pc, #172]	@ (8004d58 <__kernel_cosf+0xdc>)
 8004caa:	4607      	mov	r7, r0
 8004cac:	4620      	mov	r0, r4
 8004cae:	f7fb fb5b 	bl	8000368 <__aeabi_fmul>
 8004cb2:	492a      	ldr	r1, [pc, #168]	@ (8004d5c <__kernel_cosf+0xe0>)
 8004cb4:	f7fb fa50 	bl	8000158 <__addsf3>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	f7fb fb55 	bl	8000368 <__aeabi_fmul>
 8004cbe:	4928      	ldr	r1, [pc, #160]	@ (8004d60 <__kernel_cosf+0xe4>)
 8004cc0:	f7fb fa48 	bl	8000154 <__aeabi_fsub>
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	f7fb fb4f 	bl	8000368 <__aeabi_fmul>
 8004cca:	4926      	ldr	r1, [pc, #152]	@ (8004d64 <__kernel_cosf+0xe8>)
 8004ccc:	f7fb fa44 	bl	8000158 <__addsf3>
 8004cd0:	4621      	mov	r1, r4
 8004cd2:	f7fb fb49 	bl	8000368 <__aeabi_fmul>
 8004cd6:	4924      	ldr	r1, [pc, #144]	@ (8004d68 <__kernel_cosf+0xec>)
 8004cd8:	f7fb fa3c 	bl	8000154 <__aeabi_fsub>
 8004cdc:	4621      	mov	r1, r4
 8004cde:	f7fb fb43 	bl	8000368 <__aeabi_fmul>
 8004ce2:	4922      	ldr	r1, [pc, #136]	@ (8004d6c <__kernel_cosf+0xf0>)
 8004ce4:	f7fb fa38 	bl	8000158 <__addsf3>
 8004ce8:	4621      	mov	r1, r4
 8004cea:	f7fb fb3d 	bl	8000368 <__aeabi_fmul>
 8004cee:	4621      	mov	r1, r4
 8004cf0:	f7fb fb3a 	bl	8000368 <__aeabi_fmul>
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	4630      	mov	r0, r6
 8004cfa:	f7fb fb35 	bl	8000368 <__aeabi_fmul>
 8004cfe:	4601      	mov	r1, r0
 8004d00:	4620      	mov	r0, r4
 8004d02:	f7fb fa27 	bl	8000154 <__aeabi_fsub>
 8004d06:	4b1a      	ldr	r3, [pc, #104]	@ (8004d70 <__kernel_cosf+0xf4>)
 8004d08:	4604      	mov	r4, r0
 8004d0a:	429d      	cmp	r5, r3
 8004d0c:	d80a      	bhi.n	8004d24 <__kernel_cosf+0xa8>
 8004d0e:	4601      	mov	r1, r0
 8004d10:	4638      	mov	r0, r7
 8004d12:	f7fb fa1f 	bl	8000154 <__aeabi_fsub>
 8004d16:	4601      	mov	r1, r0
 8004d18:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004d1c:	f7fb fa1a 	bl	8000154 <__aeabi_fsub>
 8004d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d24:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <__kernel_cosf+0xf8>)
 8004d26:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004d2a:	429d      	cmp	r5, r3
 8004d2c:	bf8c      	ite	hi
 8004d2e:	4d12      	ldrhi	r5, [pc, #72]	@ (8004d78 <__kernel_cosf+0xfc>)
 8004d30:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 8004d34:	4629      	mov	r1, r5
 8004d36:	f7fb fa0d 	bl	8000154 <__aeabi_fsub>
 8004d3a:	4629      	mov	r1, r5
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	4638      	mov	r0, r7
 8004d40:	f7fb fa08 	bl	8000154 <__aeabi_fsub>
 8004d44:	4621      	mov	r1, r4
 8004d46:	f7fb fa05 	bl	8000154 <__aeabi_fsub>
 8004d4a:	4601      	mov	r1, r0
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	e7e5      	b.n	8004d1c <__kernel_cosf+0xa0>
 8004d50:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8004d54:	e7e4      	b.n	8004d20 <__kernel_cosf+0xa4>
 8004d56:	bf00      	nop
 8004d58:	ad47d74e 	.word	0xad47d74e
 8004d5c:	310f74f6 	.word	0x310f74f6
 8004d60:	3493f27c 	.word	0x3493f27c
 8004d64:	37d00d01 	.word	0x37d00d01
 8004d68:	3ab60b61 	.word	0x3ab60b61
 8004d6c:	3d2aaaab 	.word	0x3d2aaaab
 8004d70:	3e999999 	.word	0x3e999999
 8004d74:	3f480000 	.word	0x3f480000
 8004d78:	3e900000 	.word	0x3e900000

08004d7c <__kernel_sinf>:
 8004d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d80:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004d84:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004d88:	4604      	mov	r4, r0
 8004d8a:	460f      	mov	r7, r1
 8004d8c:	4691      	mov	r9, r2
 8004d8e:	d203      	bcs.n	8004d98 <__kernel_sinf+0x1c>
 8004d90:	f7fb fcc6 	bl	8000720 <__aeabi_f2iz>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d035      	beq.n	8004e04 <__kernel_sinf+0x88>
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7fb fae4 	bl	8000368 <__aeabi_fmul>
 8004da0:	4605      	mov	r5, r0
 8004da2:	4601      	mov	r1, r0
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7fb fadf 	bl	8000368 <__aeabi_fmul>
 8004daa:	4929      	ldr	r1, [pc, #164]	@ (8004e50 <__kernel_sinf+0xd4>)
 8004dac:	4606      	mov	r6, r0
 8004dae:	4628      	mov	r0, r5
 8004db0:	f7fb fada 	bl	8000368 <__aeabi_fmul>
 8004db4:	4927      	ldr	r1, [pc, #156]	@ (8004e54 <__kernel_sinf+0xd8>)
 8004db6:	f7fb f9cd 	bl	8000154 <__aeabi_fsub>
 8004dba:	4629      	mov	r1, r5
 8004dbc:	f7fb fad4 	bl	8000368 <__aeabi_fmul>
 8004dc0:	4925      	ldr	r1, [pc, #148]	@ (8004e58 <__kernel_sinf+0xdc>)
 8004dc2:	f7fb f9c9 	bl	8000158 <__addsf3>
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb face 	bl	8000368 <__aeabi_fmul>
 8004dcc:	4923      	ldr	r1, [pc, #140]	@ (8004e5c <__kernel_sinf+0xe0>)
 8004dce:	f7fb f9c1 	bl	8000154 <__aeabi_fsub>
 8004dd2:	4629      	mov	r1, r5
 8004dd4:	f7fb fac8 	bl	8000368 <__aeabi_fmul>
 8004dd8:	4921      	ldr	r1, [pc, #132]	@ (8004e60 <__kernel_sinf+0xe4>)
 8004dda:	f7fb f9bd 	bl	8000158 <__addsf3>
 8004dde:	4680      	mov	r8, r0
 8004de0:	f1b9 0f00 	cmp.w	r9, #0
 8004de4:	d111      	bne.n	8004e0a <__kernel_sinf+0x8e>
 8004de6:	4601      	mov	r1, r0
 8004de8:	4628      	mov	r0, r5
 8004dea:	f7fb fabd 	bl	8000368 <__aeabi_fmul>
 8004dee:	491d      	ldr	r1, [pc, #116]	@ (8004e64 <__kernel_sinf+0xe8>)
 8004df0:	f7fb f9b0 	bl	8000154 <__aeabi_fsub>
 8004df4:	4631      	mov	r1, r6
 8004df6:	f7fb fab7 	bl	8000368 <__aeabi_fmul>
 8004dfa:	4601      	mov	r1, r0
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f7fb f9ab 	bl	8000158 <__addsf3>
 8004e02:	4604      	mov	r4, r0
 8004e04:	4620      	mov	r0, r4
 8004e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e0a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004e0e:	4638      	mov	r0, r7
 8004e10:	f7fb faaa 	bl	8000368 <__aeabi_fmul>
 8004e14:	4641      	mov	r1, r8
 8004e16:	4681      	mov	r9, r0
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f7fb faa5 	bl	8000368 <__aeabi_fmul>
 8004e1e:	4601      	mov	r1, r0
 8004e20:	4648      	mov	r0, r9
 8004e22:	f7fb f997 	bl	8000154 <__aeabi_fsub>
 8004e26:	4629      	mov	r1, r5
 8004e28:	f7fb fa9e 	bl	8000368 <__aeabi_fmul>
 8004e2c:	4639      	mov	r1, r7
 8004e2e:	f7fb f991 	bl	8000154 <__aeabi_fsub>
 8004e32:	490c      	ldr	r1, [pc, #48]	@ (8004e64 <__kernel_sinf+0xe8>)
 8004e34:	4605      	mov	r5, r0
 8004e36:	4630      	mov	r0, r6
 8004e38:	f7fb fa96 	bl	8000368 <__aeabi_fmul>
 8004e3c:	4601      	mov	r1, r0
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f7fb f98a 	bl	8000158 <__addsf3>
 8004e44:	4601      	mov	r1, r0
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7fb f984 	bl	8000154 <__aeabi_fsub>
 8004e4c:	e7d9      	b.n	8004e02 <__kernel_sinf+0x86>
 8004e4e:	bf00      	nop
 8004e50:	2f2ec9d3 	.word	0x2f2ec9d3
 8004e54:	32d72f34 	.word	0x32d72f34
 8004e58:	3638ef1b 	.word	0x3638ef1b
 8004e5c:	39500d01 	.word	0x39500d01
 8004e60:	3c088889 	.word	0x3c088889
 8004e64:	3e2aaaab 	.word	0x3e2aaaab

08004e68 <__ieee754_rem_pio2f>:
 8004e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6c:	4aa4      	ldr	r2, [pc, #656]	@ (8005100 <__ieee754_rem_pio2f+0x298>)
 8004e6e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8004e72:	4590      	cmp	r8, r2
 8004e74:	460c      	mov	r4, r1
 8004e76:	4682      	mov	sl, r0
 8004e78:	b087      	sub	sp, #28
 8004e7a:	d804      	bhi.n	8004e86 <__ieee754_rem_pio2f+0x1e>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6008      	str	r0, [r1, #0]
 8004e80:	604b      	str	r3, [r1, #4]
 8004e82:	2500      	movs	r5, #0
 8004e84:	e01d      	b.n	8004ec2 <__ieee754_rem_pio2f+0x5a>
 8004e86:	4a9f      	ldr	r2, [pc, #636]	@ (8005104 <__ieee754_rem_pio2f+0x29c>)
 8004e88:	4590      	cmp	r8, r2
 8004e8a:	d84f      	bhi.n	8004f2c <__ieee754_rem_pio2f+0xc4>
 8004e8c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004e90:	2800      	cmp	r0, #0
 8004e92:	499d      	ldr	r1, [pc, #628]	@ (8005108 <__ieee754_rem_pio2f+0x2a0>)
 8004e94:	4f9d      	ldr	r7, [pc, #628]	@ (800510c <__ieee754_rem_pio2f+0x2a4>)
 8004e96:	f025 050f 	bic.w	r5, r5, #15
 8004e9a:	dd24      	ble.n	8004ee6 <__ieee754_rem_pio2f+0x7e>
 8004e9c:	f7fb f95a 	bl	8000154 <__aeabi_fsub>
 8004ea0:	42bd      	cmp	r5, r7
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	d011      	beq.n	8004eca <__ieee754_rem_pio2f+0x62>
 8004ea6:	499a      	ldr	r1, [pc, #616]	@ (8005110 <__ieee754_rem_pio2f+0x2a8>)
 8004ea8:	f7fb f954 	bl	8000154 <__aeabi_fsub>
 8004eac:	4601      	mov	r1, r0
 8004eae:	4605      	mov	r5, r0
 8004eb0:	4630      	mov	r0, r6
 8004eb2:	f7fb f94f 	bl	8000154 <__aeabi_fsub>
 8004eb6:	4996      	ldr	r1, [pc, #600]	@ (8005110 <__ieee754_rem_pio2f+0x2a8>)
 8004eb8:	f7fb f94c 	bl	8000154 <__aeabi_fsub>
 8004ebc:	6025      	str	r5, [r4, #0]
 8004ebe:	2501      	movs	r5, #1
 8004ec0:	6060      	str	r0, [r4, #4]
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	b007      	add	sp, #28
 8004ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eca:	4992      	ldr	r1, [pc, #584]	@ (8005114 <__ieee754_rem_pio2f+0x2ac>)
 8004ecc:	f7fb f942 	bl	8000154 <__aeabi_fsub>
 8004ed0:	4991      	ldr	r1, [pc, #580]	@ (8005118 <__ieee754_rem_pio2f+0x2b0>)
 8004ed2:	4606      	mov	r6, r0
 8004ed4:	f7fb f93e 	bl	8000154 <__aeabi_fsub>
 8004ed8:	4601      	mov	r1, r0
 8004eda:	4605      	mov	r5, r0
 8004edc:	4630      	mov	r0, r6
 8004ede:	f7fb f939 	bl	8000154 <__aeabi_fsub>
 8004ee2:	498d      	ldr	r1, [pc, #564]	@ (8005118 <__ieee754_rem_pio2f+0x2b0>)
 8004ee4:	e7e8      	b.n	8004eb8 <__ieee754_rem_pio2f+0x50>
 8004ee6:	f7fb f937 	bl	8000158 <__addsf3>
 8004eea:	42bd      	cmp	r5, r7
 8004eec:	4606      	mov	r6, r0
 8004eee:	d00f      	beq.n	8004f10 <__ieee754_rem_pio2f+0xa8>
 8004ef0:	4987      	ldr	r1, [pc, #540]	@ (8005110 <__ieee754_rem_pio2f+0x2a8>)
 8004ef2:	f7fb f931 	bl	8000158 <__addsf3>
 8004ef6:	4601      	mov	r1, r0
 8004ef8:	4605      	mov	r5, r0
 8004efa:	4630      	mov	r0, r6
 8004efc:	f7fb f92a 	bl	8000154 <__aeabi_fsub>
 8004f00:	4983      	ldr	r1, [pc, #524]	@ (8005110 <__ieee754_rem_pio2f+0x2a8>)
 8004f02:	f7fb f929 	bl	8000158 <__addsf3>
 8004f06:	6025      	str	r5, [r4, #0]
 8004f08:	6060      	str	r0, [r4, #4]
 8004f0a:	f04f 35ff 	mov.w	r5, #4294967295
 8004f0e:	e7d8      	b.n	8004ec2 <__ieee754_rem_pio2f+0x5a>
 8004f10:	4980      	ldr	r1, [pc, #512]	@ (8005114 <__ieee754_rem_pio2f+0x2ac>)
 8004f12:	f7fb f921 	bl	8000158 <__addsf3>
 8004f16:	4980      	ldr	r1, [pc, #512]	@ (8005118 <__ieee754_rem_pio2f+0x2b0>)
 8004f18:	4606      	mov	r6, r0
 8004f1a:	f7fb f91d 	bl	8000158 <__addsf3>
 8004f1e:	4601      	mov	r1, r0
 8004f20:	4605      	mov	r5, r0
 8004f22:	4630      	mov	r0, r6
 8004f24:	f7fb f916 	bl	8000154 <__aeabi_fsub>
 8004f28:	497b      	ldr	r1, [pc, #492]	@ (8005118 <__ieee754_rem_pio2f+0x2b0>)
 8004f2a:	e7ea      	b.n	8004f02 <__ieee754_rem_pio2f+0x9a>
 8004f2c:	4a7b      	ldr	r2, [pc, #492]	@ (800511c <__ieee754_rem_pio2f+0x2b4>)
 8004f2e:	4590      	cmp	r8, r2
 8004f30:	f200 8095 	bhi.w	800505e <__ieee754_rem_pio2f+0x1f6>
 8004f34:	f000 f8fe 	bl	8005134 <fabsf>
 8004f38:	4979      	ldr	r1, [pc, #484]	@ (8005120 <__ieee754_rem_pio2f+0x2b8>)
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	f7fb fa14 	bl	8000368 <__aeabi_fmul>
 8004f40:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004f44:	f7fb f908 	bl	8000158 <__addsf3>
 8004f48:	f7fb fbea 	bl	8000720 <__aeabi_f2iz>
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	f7fb f9b7 	bl	80002c0 <__aeabi_i2f>
 8004f52:	496d      	ldr	r1, [pc, #436]	@ (8005108 <__ieee754_rem_pio2f+0x2a0>)
 8004f54:	4681      	mov	r9, r0
 8004f56:	f7fb fa07 	bl	8000368 <__aeabi_fmul>
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f7fb f8f9 	bl	8000154 <__aeabi_fsub>
 8004f62:	496b      	ldr	r1, [pc, #428]	@ (8005110 <__ieee754_rem_pio2f+0x2a8>)
 8004f64:	4607      	mov	r7, r0
 8004f66:	4648      	mov	r0, r9
 8004f68:	f7fb f9fe 	bl	8000368 <__aeabi_fmul>
 8004f6c:	2d1f      	cmp	r5, #31
 8004f6e:	4606      	mov	r6, r0
 8004f70:	dc0e      	bgt.n	8004f90 <__ieee754_rem_pio2f+0x128>
 8004f72:	4a6c      	ldr	r2, [pc, #432]	@ (8005124 <__ieee754_rem_pio2f+0x2bc>)
 8004f74:	1e69      	subs	r1, r5, #1
 8004f76:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004f7a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8004f7e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <__ieee754_rem_pio2f+0x128>
 8004f86:	4631      	mov	r1, r6
 8004f88:	4638      	mov	r0, r7
 8004f8a:	f7fb f8e3 	bl	8000154 <__aeabi_fsub>
 8004f8e:	e00b      	b.n	8004fa8 <__ieee754_rem_pio2f+0x140>
 8004f90:	4631      	mov	r1, r6
 8004f92:	4638      	mov	r0, r7
 8004f94:	f7fb f8de 	bl	8000154 <__aeabi_fsub>
 8004f98:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004f9c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8004fa6:	dc01      	bgt.n	8004fac <__ieee754_rem_pio2f+0x144>
 8004fa8:	6020      	str	r0, [r4, #0]
 8004faa:	e026      	b.n	8004ffa <__ieee754_rem_pio2f+0x192>
 8004fac:	4959      	ldr	r1, [pc, #356]	@ (8005114 <__ieee754_rem_pio2f+0x2ac>)
 8004fae:	4648      	mov	r0, r9
 8004fb0:	f7fb f9da 	bl	8000368 <__aeabi_fmul>
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	4601      	mov	r1, r0
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f7fb f8cb 	bl	8000154 <__aeabi_fsub>
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	4680      	mov	r8, r0
 8004fc2:	4638      	mov	r0, r7
 8004fc4:	f7fb f8c6 	bl	8000154 <__aeabi_fsub>
 8004fc8:	4631      	mov	r1, r6
 8004fca:	f7fb f8c3 	bl	8000154 <__aeabi_fsub>
 8004fce:	4606      	mov	r6, r0
 8004fd0:	4951      	ldr	r1, [pc, #324]	@ (8005118 <__ieee754_rem_pio2f+0x2b0>)
 8004fd2:	4648      	mov	r0, r9
 8004fd4:	f7fb f9c8 	bl	8000368 <__aeabi_fmul>
 8004fd8:	4631      	mov	r1, r6
 8004fda:	f7fb f8bb 	bl	8000154 <__aeabi_fsub>
 8004fde:	4601      	mov	r1, r0
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f7fb f8b6 	bl	8000154 <__aeabi_fsub>
 8004fe8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004fec:	ebab 0b03 	sub.w	fp, fp, r3
 8004ff0:	f1bb 0f19 	cmp.w	fp, #25
 8004ff4:	dc18      	bgt.n	8005028 <__ieee754_rem_pio2f+0x1c0>
 8004ff6:	4647      	mov	r7, r8
 8004ff8:	6020      	str	r0, [r4, #0]
 8004ffa:	f8d4 8000 	ldr.w	r8, [r4]
 8004ffe:	4638      	mov	r0, r7
 8005000:	4641      	mov	r1, r8
 8005002:	f7fb f8a7 	bl	8000154 <__aeabi_fsub>
 8005006:	4631      	mov	r1, r6
 8005008:	f7fb f8a4 	bl	8000154 <__aeabi_fsub>
 800500c:	f1ba 0f00 	cmp.w	sl, #0
 8005010:	6060      	str	r0, [r4, #4]
 8005012:	f6bf af56 	bge.w	8004ec2 <__ieee754_rem_pio2f+0x5a>
 8005016:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800501a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800501e:	f8c4 8000 	str.w	r8, [r4]
 8005022:	6060      	str	r0, [r4, #4]
 8005024:	426d      	negs	r5, r5
 8005026:	e74c      	b.n	8004ec2 <__ieee754_rem_pio2f+0x5a>
 8005028:	493f      	ldr	r1, [pc, #252]	@ (8005128 <__ieee754_rem_pio2f+0x2c0>)
 800502a:	4648      	mov	r0, r9
 800502c:	f7fb f99c 	bl	8000368 <__aeabi_fmul>
 8005030:	4606      	mov	r6, r0
 8005032:	4601      	mov	r1, r0
 8005034:	4640      	mov	r0, r8
 8005036:	f7fb f88d 	bl	8000154 <__aeabi_fsub>
 800503a:	4601      	mov	r1, r0
 800503c:	4607      	mov	r7, r0
 800503e:	4640      	mov	r0, r8
 8005040:	f7fb f888 	bl	8000154 <__aeabi_fsub>
 8005044:	4631      	mov	r1, r6
 8005046:	f7fb f885 	bl	8000154 <__aeabi_fsub>
 800504a:	4606      	mov	r6, r0
 800504c:	4937      	ldr	r1, [pc, #220]	@ (800512c <__ieee754_rem_pio2f+0x2c4>)
 800504e:	4648      	mov	r0, r9
 8005050:	f7fb f98a 	bl	8000368 <__aeabi_fmul>
 8005054:	4631      	mov	r1, r6
 8005056:	f7fb f87d 	bl	8000154 <__aeabi_fsub>
 800505a:	4606      	mov	r6, r0
 800505c:	e793      	b.n	8004f86 <__ieee754_rem_pio2f+0x11e>
 800505e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005062:	d305      	bcc.n	8005070 <__ieee754_rem_pio2f+0x208>
 8005064:	4601      	mov	r1, r0
 8005066:	f7fb f875 	bl	8000154 <__aeabi_fsub>
 800506a:	6060      	str	r0, [r4, #4]
 800506c:	6020      	str	r0, [r4, #0]
 800506e:	e708      	b.n	8004e82 <__ieee754_rem_pio2f+0x1a>
 8005070:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8005074:	3e86      	subs	r6, #134	@ 0x86
 8005076:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800507a:	4640      	mov	r0, r8
 800507c:	f7fb fb50 	bl	8000720 <__aeabi_f2iz>
 8005080:	f7fb f91e 	bl	80002c0 <__aeabi_i2f>
 8005084:	4601      	mov	r1, r0
 8005086:	9003      	str	r0, [sp, #12]
 8005088:	4640      	mov	r0, r8
 800508a:	f7fb f863 	bl	8000154 <__aeabi_fsub>
 800508e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005092:	f7fb f969 	bl	8000368 <__aeabi_fmul>
 8005096:	4607      	mov	r7, r0
 8005098:	f7fb fb42 	bl	8000720 <__aeabi_f2iz>
 800509c:	f7fb f910 	bl	80002c0 <__aeabi_i2f>
 80050a0:	4601      	mov	r1, r0
 80050a2:	9004      	str	r0, [sp, #16]
 80050a4:	4605      	mov	r5, r0
 80050a6:	4638      	mov	r0, r7
 80050a8:	f7fb f854 	bl	8000154 <__aeabi_fsub>
 80050ac:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 80050b0:	f7fb f95a 	bl	8000368 <__aeabi_fmul>
 80050b4:	2100      	movs	r1, #0
 80050b6:	9005      	str	r0, [sp, #20]
 80050b8:	f7fb faea 	bl	8000690 <__aeabi_fcmpeq>
 80050bc:	b1f0      	cbz	r0, 80050fc <__ieee754_rem_pio2f+0x294>
 80050be:	2100      	movs	r1, #0
 80050c0:	4628      	mov	r0, r5
 80050c2:	f7fb fae5 	bl	8000690 <__aeabi_fcmpeq>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	bf14      	ite	ne
 80050ca:	2301      	movne	r3, #1
 80050cc:	2302      	moveq	r3, #2
 80050ce:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <__ieee754_rem_pio2f+0x2c8>)
 80050d0:	4621      	mov	r1, r4
 80050d2:	9201      	str	r2, [sp, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	a803      	add	r0, sp, #12
 80050d8:	9200      	str	r2, [sp, #0]
 80050da:	4632      	mov	r2, r6
 80050dc:	f000 f82e 	bl	800513c <__kernel_rem_pio2f>
 80050e0:	f1ba 0f00 	cmp.w	sl, #0
 80050e4:	4605      	mov	r5, r0
 80050e6:	f6bf aeec 	bge.w	8004ec2 <__ieee754_rem_pio2f+0x5a>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80050f0:	6023      	str	r3, [r4, #0]
 80050f2:	6863      	ldr	r3, [r4, #4]
 80050f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80050f8:	6063      	str	r3, [r4, #4]
 80050fa:	e793      	b.n	8005024 <__ieee754_rem_pio2f+0x1bc>
 80050fc:	2303      	movs	r3, #3
 80050fe:	e7e6      	b.n	80050ce <__ieee754_rem_pio2f+0x266>
 8005100:	3f490fd8 	.word	0x3f490fd8
 8005104:	4016cbe3 	.word	0x4016cbe3
 8005108:	3fc90f80 	.word	0x3fc90f80
 800510c:	3fc90fd0 	.word	0x3fc90fd0
 8005110:	37354443 	.word	0x37354443
 8005114:	37354400 	.word	0x37354400
 8005118:	2e85a308 	.word	0x2e85a308
 800511c:	43490f80 	.word	0x43490f80
 8005120:	3f22f984 	.word	0x3f22f984
 8005124:	08005934 	.word	0x08005934
 8005128:	2e85a300 	.word	0x2e85a300
 800512c:	248d3132 	.word	0x248d3132
 8005130:	080059b4 	.word	0x080059b4

08005134 <fabsf>:
 8005134:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005138:	4770      	bx	lr
	...

0800513c <__kernel_rem_pio2f>:
 800513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	b0db      	sub	sp, #364	@ 0x16c
 8005142:	9202      	str	r2, [sp, #8]
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8005148:	4bac      	ldr	r3, [pc, #688]	@ (80053fc <__kernel_rem_pio2f+0x2c0>)
 800514a:	9005      	str	r0, [sp, #20]
 800514c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005150:	9100      	str	r1, [sp, #0]
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	9b04      	ldr	r3, [sp, #16]
 8005156:	3b01      	subs	r3, #1
 8005158:	9303      	str	r3, [sp, #12]
 800515a:	9b02      	ldr	r3, [sp, #8]
 800515c:	1d1a      	adds	r2, r3, #4
 800515e:	f2c0 8099 	blt.w	8005294 <__kernel_rem_pio2f+0x158>
 8005162:	1edc      	subs	r4, r3, #3
 8005164:	bf48      	it	mi
 8005166:	1d1c      	addmi	r4, r3, #4
 8005168:	10e4      	asrs	r4, r4, #3
 800516a:	2500      	movs	r5, #0
 800516c:	f04f 0b00 	mov.w	fp, #0
 8005170:	1c67      	adds	r7, r4, #1
 8005172:	00fb      	lsls	r3, r7, #3
 8005174:	9306      	str	r3, [sp, #24]
 8005176:	9b02      	ldr	r3, [sp, #8]
 8005178:	9a03      	ldr	r2, [sp, #12]
 800517a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	eba4 0802 	sub.w	r8, r4, r2
 8005184:	eb03 0902 	add.w	r9, r3, r2
 8005188:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800518a:	ae1e      	add	r6, sp, #120	@ 0x78
 800518c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8005190:	454d      	cmp	r5, r9
 8005192:	f340 8081 	ble.w	8005298 <__kernel_rem_pio2f+0x15c>
 8005196:	9a04      	ldr	r2, [sp, #16]
 8005198:	ab1e      	add	r3, sp, #120	@ 0x78
 800519a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800519e:	f04f 0900 	mov.w	r9, #0
 80051a2:	2300      	movs	r3, #0
 80051a4:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80051a8:	9a01      	ldr	r2, [sp, #4]
 80051aa:	4591      	cmp	r9, r2
 80051ac:	f340 809a 	ble.w	80052e4 <__kernel_rem_pio2f+0x1a8>
 80051b0:	4613      	mov	r3, r2
 80051b2:	aa0a      	add	r2, sp, #40	@ 0x28
 80051b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80051b8:	9308      	str	r3, [sp, #32]
 80051ba:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 80051bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051c0:	9c01      	ldr	r4, [sp, #4]
 80051c2:	9307      	str	r3, [sp, #28]
 80051c4:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 80051c8:	4646      	mov	r6, r8
 80051ca:	4625      	mov	r5, r4
 80051cc:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 80051d0:	ab5a      	add	r3, sp, #360	@ 0x168
 80051d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80051d6:	f853 bc50 	ldr.w	fp, [r3, #-80]
 80051da:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 80051de:	2d00      	cmp	r5, #0
 80051e0:	f300 8085 	bgt.w	80052ee <__kernel_rem_pio2f+0x1b2>
 80051e4:	4639      	mov	r1, r7
 80051e6:	4658      	mov	r0, fp
 80051e8:	f000 fa46 	bl	8005678 <scalbnf>
 80051ec:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80051f0:	4605      	mov	r5, r0
 80051f2:	f7fb f8b9 	bl	8000368 <__aeabi_fmul>
 80051f6:	f000 fa8b 	bl	8005710 <floorf>
 80051fa:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80051fe:	f7fb f8b3 	bl	8000368 <__aeabi_fmul>
 8005202:	4601      	mov	r1, r0
 8005204:	4628      	mov	r0, r5
 8005206:	f7fa ffa5 	bl	8000154 <__aeabi_fsub>
 800520a:	4605      	mov	r5, r0
 800520c:	f7fb fa88 	bl	8000720 <__aeabi_f2iz>
 8005210:	4606      	mov	r6, r0
 8005212:	f7fb f855 	bl	80002c0 <__aeabi_i2f>
 8005216:	4601      	mov	r1, r0
 8005218:	4628      	mov	r0, r5
 800521a:	f7fa ff9b 	bl	8000154 <__aeabi_fsub>
 800521e:	2f00      	cmp	r7, #0
 8005220:	4681      	mov	r9, r0
 8005222:	f340 8081 	ble.w	8005328 <__kernel_rem_pio2f+0x1ec>
 8005226:	1e62      	subs	r2, r4, #1
 8005228:	ab0a      	add	r3, sp, #40	@ 0x28
 800522a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800522e:	f1c7 0108 	rsb	r1, r7, #8
 8005232:	fa45 f301 	asr.w	r3, r5, r1
 8005236:	441e      	add	r6, r3
 8005238:	408b      	lsls	r3, r1
 800523a:	1aed      	subs	r5, r5, r3
 800523c:	ab0a      	add	r3, sp, #40	@ 0x28
 800523e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005242:	f1c7 0307 	rsb	r3, r7, #7
 8005246:	411d      	asrs	r5, r3
 8005248:	2d00      	cmp	r5, #0
 800524a:	dd7a      	ble.n	8005342 <__kernel_rem_pio2f+0x206>
 800524c:	2200      	movs	r2, #0
 800524e:	4692      	mov	sl, r2
 8005250:	3601      	adds	r6, #1
 8005252:	4294      	cmp	r4, r2
 8005254:	f300 80aa 	bgt.w	80053ac <__kernel_rem_pio2f+0x270>
 8005258:	2f00      	cmp	r7, #0
 800525a:	dd05      	ble.n	8005268 <__kernel_rem_pio2f+0x12c>
 800525c:	2f01      	cmp	r7, #1
 800525e:	f000 80b6 	beq.w	80053ce <__kernel_rem_pio2f+0x292>
 8005262:	2f02      	cmp	r7, #2
 8005264:	f000 80bd 	beq.w	80053e2 <__kernel_rem_pio2f+0x2a6>
 8005268:	2d02      	cmp	r5, #2
 800526a:	d16a      	bne.n	8005342 <__kernel_rem_pio2f+0x206>
 800526c:	4649      	mov	r1, r9
 800526e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005272:	f7fa ff6f 	bl	8000154 <__aeabi_fsub>
 8005276:	4681      	mov	r9, r0
 8005278:	f1ba 0f00 	cmp.w	sl, #0
 800527c:	d061      	beq.n	8005342 <__kernel_rem_pio2f+0x206>
 800527e:	4639      	mov	r1, r7
 8005280:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005284:	f000 f9f8 	bl	8005678 <scalbnf>
 8005288:	4601      	mov	r1, r0
 800528a:	4648      	mov	r0, r9
 800528c:	f7fa ff62 	bl	8000154 <__aeabi_fsub>
 8005290:	4681      	mov	r9, r0
 8005292:	e056      	b.n	8005342 <__kernel_rem_pio2f+0x206>
 8005294:	2400      	movs	r4, #0
 8005296:	e768      	b.n	800516a <__kernel_rem_pio2f+0x2e>
 8005298:	eb18 0f05 	cmn.w	r8, r5
 800529c:	d407      	bmi.n	80052ae <__kernel_rem_pio2f+0x172>
 800529e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 80052a2:	f7fb f80d 	bl	80002c0 <__aeabi_i2f>
 80052a6:	f846 0b04 	str.w	r0, [r6], #4
 80052aa:	3501      	adds	r5, #1
 80052ac:	e770      	b.n	8005190 <__kernel_rem_pio2f+0x54>
 80052ae:	4658      	mov	r0, fp
 80052b0:	e7f9      	b.n	80052a6 <__kernel_rem_pio2f+0x16a>
 80052b2:	9307      	str	r3, [sp, #28]
 80052b4:	9b05      	ldr	r3, [sp, #20]
 80052b6:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 80052ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80052be:	f7fb f853 	bl	8000368 <__aeabi_fmul>
 80052c2:	4601      	mov	r1, r0
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7fa ff47 	bl	8000158 <__addsf3>
 80052ca:	4606      	mov	r6, r0
 80052cc:	9b07      	ldr	r3, [sp, #28]
 80052ce:	f108 0801 	add.w	r8, r8, #1
 80052d2:	9a03      	ldr	r2, [sp, #12]
 80052d4:	4590      	cmp	r8, r2
 80052d6:	ddec      	ble.n	80052b2 <__kernel_rem_pio2f+0x176>
 80052d8:	f84a 6b04 	str.w	r6, [sl], #4
 80052dc:	f109 0901 	add.w	r9, r9, #1
 80052e0:	3504      	adds	r5, #4
 80052e2:	e761      	b.n	80051a8 <__kernel_rem_pio2f+0x6c>
 80052e4:	46ab      	mov	fp, r5
 80052e6:	461e      	mov	r6, r3
 80052e8:	f04f 0800 	mov.w	r8, #0
 80052ec:	e7f1      	b.n	80052d2 <__kernel_rem_pio2f+0x196>
 80052ee:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80052f2:	4658      	mov	r0, fp
 80052f4:	f7fb f838 	bl	8000368 <__aeabi_fmul>
 80052f8:	f7fb fa12 	bl	8000720 <__aeabi_f2iz>
 80052fc:	f7fa ffe0 	bl	80002c0 <__aeabi_i2f>
 8005300:	4649      	mov	r1, r9
 8005302:	9009      	str	r0, [sp, #36]	@ 0x24
 8005304:	f7fb f830 	bl	8000368 <__aeabi_fmul>
 8005308:	4601      	mov	r1, r0
 800530a:	4658      	mov	r0, fp
 800530c:	f7fa ff22 	bl	8000154 <__aeabi_fsub>
 8005310:	f7fb fa06 	bl	8000720 <__aeabi_f2iz>
 8005314:	3d01      	subs	r5, #1
 8005316:	f846 0b04 	str.w	r0, [r6], #4
 800531a:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800531e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005320:	f7fa ff1a 	bl	8000158 <__addsf3>
 8005324:	4683      	mov	fp, r0
 8005326:	e75a      	b.n	80051de <__kernel_rem_pio2f+0xa2>
 8005328:	d105      	bne.n	8005336 <__kernel_rem_pio2f+0x1fa>
 800532a:	1e63      	subs	r3, r4, #1
 800532c:	aa0a      	add	r2, sp, #40	@ 0x28
 800532e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8005332:	11ed      	asrs	r5, r5, #7
 8005334:	e788      	b.n	8005248 <__kernel_rem_pio2f+0x10c>
 8005336:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800533a:	f7fb f9c7 	bl	80006cc <__aeabi_fcmpge>
 800533e:	4605      	mov	r5, r0
 8005340:	bb90      	cbnz	r0, 80053a8 <__kernel_rem_pio2f+0x26c>
 8005342:	2100      	movs	r1, #0
 8005344:	4648      	mov	r0, r9
 8005346:	f7fb f9a3 	bl	8000690 <__aeabi_fcmpeq>
 800534a:	2800      	cmp	r0, #0
 800534c:	f000 8090 	beq.w	8005470 <__kernel_rem_pio2f+0x334>
 8005350:	2200      	movs	r2, #0
 8005352:	1e63      	subs	r3, r4, #1
 8005354:	9901      	ldr	r1, [sp, #4]
 8005356:	428b      	cmp	r3, r1
 8005358:	da4a      	bge.n	80053f0 <__kernel_rem_pio2f+0x2b4>
 800535a:	2a00      	cmp	r2, #0
 800535c:	d076      	beq.n	800544c <__kernel_rem_pio2f+0x310>
 800535e:	3c01      	subs	r4, #1
 8005360:	ab0a      	add	r3, sp, #40	@ 0x28
 8005362:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005366:	3f08      	subs	r7, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d0f8      	beq.n	800535e <__kernel_rem_pio2f+0x222>
 800536c:	4639      	mov	r1, r7
 800536e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005372:	f000 f981 	bl	8005678 <scalbnf>
 8005376:	46a2      	mov	sl, r4
 8005378:	4607      	mov	r7, r0
 800537a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800537e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8005382:	f1ba 0f00 	cmp.w	sl, #0
 8005386:	f280 80a1 	bge.w	80054cc <__kernel_rem_pio2f+0x390>
 800538a:	4627      	mov	r7, r4
 800538c:	2200      	movs	r2, #0
 800538e:	2f00      	cmp	r7, #0
 8005390:	f2c0 80cb 	blt.w	800552a <__kernel_rem_pio2f+0x3ee>
 8005394:	a946      	add	r1, sp, #280	@ 0x118
 8005396:	4690      	mov	r8, r2
 8005398:	f04f 0a00 	mov.w	sl, #0
 800539c:	4b18      	ldr	r3, [pc, #96]	@ (8005400 <__kernel_rem_pio2f+0x2c4>)
 800539e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 80053a2:	eba4 0907 	sub.w	r9, r4, r7
 80053a6:	e0b4      	b.n	8005512 <__kernel_rem_pio2f+0x3d6>
 80053a8:	2502      	movs	r5, #2
 80053aa:	e74f      	b.n	800524c <__kernel_rem_pio2f+0x110>
 80053ac:	f858 3b04 	ldr.w	r3, [r8], #4
 80053b0:	f1ba 0f00 	cmp.w	sl, #0
 80053b4:	d108      	bne.n	80053c8 <__kernel_rem_pio2f+0x28c>
 80053b6:	b123      	cbz	r3, 80053c2 <__kernel_rem_pio2f+0x286>
 80053b8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80053bc:	f848 3c04 	str.w	r3, [r8, #-4]
 80053c0:	2301      	movs	r3, #1
 80053c2:	469a      	mov	sl, r3
 80053c4:	3201      	adds	r2, #1
 80053c6:	e744      	b.n	8005252 <__kernel_rem_pio2f+0x116>
 80053c8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80053cc:	e7f6      	b.n	80053bc <__kernel_rem_pio2f+0x280>
 80053ce:	1e62      	subs	r2, r4, #1
 80053d0:	ab0a      	add	r3, sp, #40	@ 0x28
 80053d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053da:	a90a      	add	r1, sp, #40	@ 0x28
 80053dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80053e0:	e742      	b.n	8005268 <__kernel_rem_pio2f+0x12c>
 80053e2:	1e62      	subs	r2, r4, #1
 80053e4:	ab0a      	add	r3, sp, #40	@ 0x28
 80053e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ee:	e7f4      	b.n	80053da <__kernel_rem_pio2f+0x29e>
 80053f0:	a90a      	add	r1, sp, #40	@ 0x28
 80053f2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	430a      	orrs	r2, r1
 80053fa:	e7ab      	b.n	8005354 <__kernel_rem_pio2f+0x218>
 80053fc:	08005cf8 	.word	0x08005cf8
 8005400:	08005ccc 	.word	0x08005ccc
 8005404:	3301      	adds	r3, #1
 8005406:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800540a:	2900      	cmp	r1, #0
 800540c:	d0fa      	beq.n	8005404 <__kernel_rem_pio2f+0x2c8>
 800540e:	9a04      	ldr	r2, [sp, #16]
 8005410:	a91e      	add	r1, sp, #120	@ 0x78
 8005412:	18a2      	adds	r2, r4, r2
 8005414:	1c66      	adds	r6, r4, #1
 8005416:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800541a:	441c      	add	r4, r3
 800541c:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8005420:	42b4      	cmp	r4, r6
 8005422:	f6ff aecf 	blt.w	80051c4 <__kernel_rem_pio2f+0x88>
 8005426:	9b07      	ldr	r3, [sp, #28]
 8005428:	46ab      	mov	fp, r5
 800542a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800542e:	f7fa ff47 	bl	80002c0 <__aeabi_i2f>
 8005432:	f04f 0a00 	mov.w	sl, #0
 8005436:	f04f 0800 	mov.w	r8, #0
 800543a:	6028      	str	r0, [r5, #0]
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	459a      	cmp	sl, r3
 8005440:	dd07      	ble.n	8005452 <__kernel_rem_pio2f+0x316>
 8005442:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8005446:	3504      	adds	r5, #4
 8005448:	3601      	adds	r6, #1
 800544a:	e7e9      	b.n	8005420 <__kernel_rem_pio2f+0x2e4>
 800544c:	2301      	movs	r3, #1
 800544e:	9a08      	ldr	r2, [sp, #32]
 8005450:	e7d9      	b.n	8005406 <__kernel_rem_pio2f+0x2ca>
 8005452:	9b05      	ldr	r3, [sp, #20]
 8005454:	f85b 0904 	ldr.w	r0, [fp], #-4
 8005458:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800545c:	f7fa ff84 	bl	8000368 <__aeabi_fmul>
 8005460:	4601      	mov	r1, r0
 8005462:	4640      	mov	r0, r8
 8005464:	f7fa fe78 	bl	8000158 <__addsf3>
 8005468:	f10a 0a01 	add.w	sl, sl, #1
 800546c:	4680      	mov	r8, r0
 800546e:	e7e5      	b.n	800543c <__kernel_rem_pio2f+0x300>
 8005470:	9b06      	ldr	r3, [sp, #24]
 8005472:	9a02      	ldr	r2, [sp, #8]
 8005474:	4648      	mov	r0, r9
 8005476:	1a99      	subs	r1, r3, r2
 8005478:	f000 f8fe 	bl	8005678 <scalbnf>
 800547c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005480:	4680      	mov	r8, r0
 8005482:	f7fb f923 	bl	80006cc <__aeabi_fcmpge>
 8005486:	b1f8      	cbz	r0, 80054c8 <__kernel_rem_pio2f+0x38c>
 8005488:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800548c:	4640      	mov	r0, r8
 800548e:	f7fa ff6b 	bl	8000368 <__aeabi_fmul>
 8005492:	f7fb f945 	bl	8000720 <__aeabi_f2iz>
 8005496:	f7fa ff13 	bl	80002c0 <__aeabi_i2f>
 800549a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800549e:	4681      	mov	r9, r0
 80054a0:	f7fa ff62 	bl	8000368 <__aeabi_fmul>
 80054a4:	4601      	mov	r1, r0
 80054a6:	4640      	mov	r0, r8
 80054a8:	f7fa fe54 	bl	8000154 <__aeabi_fsub>
 80054ac:	f7fb f938 	bl	8000720 <__aeabi_f2iz>
 80054b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80054b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80054b6:	4648      	mov	r0, r9
 80054b8:	3401      	adds	r4, #1
 80054ba:	3708      	adds	r7, #8
 80054bc:	f7fb f930 	bl	8000720 <__aeabi_f2iz>
 80054c0:	ab0a      	add	r3, sp, #40	@ 0x28
 80054c2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80054c6:	e751      	b.n	800536c <__kernel_rem_pio2f+0x230>
 80054c8:	4640      	mov	r0, r8
 80054ca:	e7f7      	b.n	80054bc <__kernel_rem_pio2f+0x380>
 80054cc:	ab0a      	add	r3, sp, #40	@ 0x28
 80054ce:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80054d2:	f7fa fef5 	bl	80002c0 <__aeabi_i2f>
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fa ff46 	bl	8000368 <__aeabi_fmul>
 80054dc:	4649      	mov	r1, r9
 80054de:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 80054e2:	4638      	mov	r0, r7
 80054e4:	f7fa ff40 	bl	8000368 <__aeabi_fmul>
 80054e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ec:	4607      	mov	r7, r0
 80054ee:	e748      	b.n	8005382 <__kernel_rem_pio2f+0x246>
 80054f0:	f853 0b04 	ldr.w	r0, [r3], #4
 80054f4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80054f8:	9203      	str	r2, [sp, #12]
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	f7fa ff34 	bl	8000368 <__aeabi_fmul>
 8005500:	4601      	mov	r1, r0
 8005502:	4640      	mov	r0, r8
 8005504:	f7fa fe28 	bl	8000158 <__addsf3>
 8005508:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800550c:	4680      	mov	r8, r0
 800550e:	f10a 0a01 	add.w	sl, sl, #1
 8005512:	9901      	ldr	r1, [sp, #4]
 8005514:	458a      	cmp	sl, r1
 8005516:	dc01      	bgt.n	800551c <__kernel_rem_pio2f+0x3e0>
 8005518:	45ca      	cmp	sl, r9
 800551a:	dde9      	ble.n	80054f0 <__kernel_rem_pio2f+0x3b4>
 800551c:	ab5a      	add	r3, sp, #360	@ 0x168
 800551e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8005522:	f849 8ca0 	str.w	r8, [r9, #-160]
 8005526:	3f01      	subs	r7, #1
 8005528:	e731      	b.n	800538e <__kernel_rem_pio2f+0x252>
 800552a:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800552c:	2b02      	cmp	r3, #2
 800552e:	dc07      	bgt.n	8005540 <__kernel_rem_pio2f+0x404>
 8005530:	2b00      	cmp	r3, #0
 8005532:	dc4e      	bgt.n	80055d2 <__kernel_rem_pio2f+0x496>
 8005534:	d02e      	beq.n	8005594 <__kernel_rem_pio2f+0x458>
 8005536:	f006 0007 	and.w	r0, r6, #7
 800553a:	b05b      	add	sp, #364	@ 0x16c
 800553c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005540:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8005542:	2b03      	cmp	r3, #3
 8005544:	d1f7      	bne.n	8005536 <__kernel_rem_pio2f+0x3fa>
 8005546:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800554a:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800554e:	46b8      	mov	r8, r7
 8005550:	46a2      	mov	sl, r4
 8005552:	f1ba 0f00 	cmp.w	sl, #0
 8005556:	dc49      	bgt.n	80055ec <__kernel_rem_pio2f+0x4b0>
 8005558:	46a1      	mov	r9, r4
 800555a:	f1b9 0f01 	cmp.w	r9, #1
 800555e:	dc60      	bgt.n	8005622 <__kernel_rem_pio2f+0x4e6>
 8005560:	2000      	movs	r0, #0
 8005562:	2c01      	cmp	r4, #1
 8005564:	dc76      	bgt.n	8005654 <__kernel_rem_pio2f+0x518>
 8005566:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8005568:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800556a:	2d00      	cmp	r5, #0
 800556c:	d178      	bne.n	8005660 <__kernel_rem_pio2f+0x524>
 800556e:	9900      	ldr	r1, [sp, #0]
 8005570:	600a      	str	r2, [r1, #0]
 8005572:	460a      	mov	r2, r1
 8005574:	604b      	str	r3, [r1, #4]
 8005576:	6090      	str	r0, [r2, #8]
 8005578:	e7dd      	b.n	8005536 <__kernel_rem_pio2f+0x3fa>
 800557a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800557e:	f7fa fdeb 	bl	8000158 <__addsf3>
 8005582:	3c01      	subs	r4, #1
 8005584:	2c00      	cmp	r4, #0
 8005586:	daf8      	bge.n	800557a <__kernel_rem_pio2f+0x43e>
 8005588:	b10d      	cbz	r5, 800558e <__kernel_rem_pio2f+0x452>
 800558a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800558e:	9b00      	ldr	r3, [sp, #0]
 8005590:	6018      	str	r0, [r3, #0]
 8005592:	e7d0      	b.n	8005536 <__kernel_rem_pio2f+0x3fa>
 8005594:	2000      	movs	r0, #0
 8005596:	af32      	add	r7, sp, #200	@ 0xc8
 8005598:	e7f4      	b.n	8005584 <__kernel_rem_pio2f+0x448>
 800559a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800559e:	f7fa fddb 	bl	8000158 <__addsf3>
 80055a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80055a6:	f1b8 0f00 	cmp.w	r8, #0
 80055aa:	daf6      	bge.n	800559a <__kernel_rem_pio2f+0x45e>
 80055ac:	b1ad      	cbz	r5, 80055da <__kernel_rem_pio2f+0x49e>
 80055ae:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 80055b2:	9a00      	ldr	r2, [sp, #0]
 80055b4:	4601      	mov	r1, r0
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 80055ba:	f7fa fdcb 	bl	8000154 <__aeabi_fsub>
 80055be:	f04f 0801 	mov.w	r8, #1
 80055c2:	4544      	cmp	r4, r8
 80055c4:	da0b      	bge.n	80055de <__kernel_rem_pio2f+0x4a2>
 80055c6:	b10d      	cbz	r5, 80055cc <__kernel_rem_pio2f+0x490>
 80055c8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80055cc:	9b00      	ldr	r3, [sp, #0]
 80055ce:	6058      	str	r0, [r3, #4]
 80055d0:	e7b1      	b.n	8005536 <__kernel_rem_pio2f+0x3fa>
 80055d2:	46a0      	mov	r8, r4
 80055d4:	2000      	movs	r0, #0
 80055d6:	af32      	add	r7, sp, #200	@ 0xc8
 80055d8:	e7e5      	b.n	80055a6 <__kernel_rem_pio2f+0x46a>
 80055da:	4603      	mov	r3, r0
 80055dc:	e7e9      	b.n	80055b2 <__kernel_rem_pio2f+0x476>
 80055de:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80055e2:	f7fa fdb9 	bl	8000158 <__addsf3>
 80055e6:	f108 0801 	add.w	r8, r8, #1
 80055ea:	e7ea      	b.n	80055c2 <__kernel_rem_pio2f+0x486>
 80055ec:	f8d8 3000 	ldr.w	r3, [r8]
 80055f0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	9302      	str	r3, [sp, #8]
 80055fa:	9201      	str	r2, [sp, #4]
 80055fc:	f7fa fdac 	bl	8000158 <__addsf3>
 8005600:	9a01      	ldr	r2, [sp, #4]
 8005602:	4601      	mov	r1, r0
 8005604:	4681      	mov	r9, r0
 8005606:	4610      	mov	r0, r2
 8005608:	f7fa fda4 	bl	8000154 <__aeabi_fsub>
 800560c:	9b02      	ldr	r3, [sp, #8]
 800560e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005612:	4619      	mov	r1, r3
 8005614:	f7fa fda0 	bl	8000158 <__addsf3>
 8005618:	f848 0904 	str.w	r0, [r8], #-4
 800561c:	f8c8 9000 	str.w	r9, [r8]
 8005620:	e797      	b.n	8005552 <__kernel_rem_pio2f+0x416>
 8005622:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005626:	f8d7 a000 	ldr.w	sl, [r7]
 800562a:	4618      	mov	r0, r3
 800562c:	4651      	mov	r1, sl
 800562e:	9301      	str	r3, [sp, #4]
 8005630:	f7fa fd92 	bl	8000158 <__addsf3>
 8005634:	9b01      	ldr	r3, [sp, #4]
 8005636:	4601      	mov	r1, r0
 8005638:	4680      	mov	r8, r0
 800563a:	4618      	mov	r0, r3
 800563c:	f7fa fd8a 	bl	8000154 <__aeabi_fsub>
 8005640:	4651      	mov	r1, sl
 8005642:	f7fa fd89 	bl	8000158 <__addsf3>
 8005646:	f847 0904 	str.w	r0, [r7], #-4
 800564a:	f109 39ff 	add.w	r9, r9, #4294967295
 800564e:	f8c7 8000 	str.w	r8, [r7]
 8005652:	e782      	b.n	800555a <__kernel_rem_pio2f+0x41e>
 8005654:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8005658:	f7fa fd7e 	bl	8000158 <__addsf3>
 800565c:	3c01      	subs	r4, #1
 800565e:	e780      	b.n	8005562 <__kernel_rem_pio2f+0x426>
 8005660:	9900      	ldr	r1, [sp, #0]
 8005662:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8005666:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800566a:	600a      	str	r2, [r1, #0]
 800566c:	604b      	str	r3, [r1, #4]
 800566e:	460a      	mov	r2, r1
 8005670:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005674:	e77f      	b.n	8005576 <__kernel_rem_pio2f+0x43a>
 8005676:	bf00      	nop

08005678 <scalbnf>:
 8005678:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4603      	mov	r3, r0
 8005680:	460d      	mov	r5, r1
 8005682:	4604      	mov	r4, r0
 8005684:	d02e      	beq.n	80056e4 <scalbnf+0x6c>
 8005686:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800568a:	d304      	bcc.n	8005696 <scalbnf+0x1e>
 800568c:	4601      	mov	r1, r0
 800568e:	f7fa fd63 	bl	8000158 <__addsf3>
 8005692:	4603      	mov	r3, r0
 8005694:	e026      	b.n	80056e4 <scalbnf+0x6c>
 8005696:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800569a:	d118      	bne.n	80056ce <scalbnf+0x56>
 800569c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80056a0:	f7fa fe62 	bl	8000368 <__aeabi_fmul>
 80056a4:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <scalbnf+0x8c>)
 80056a6:	4603      	mov	r3, r0
 80056a8:	4295      	cmp	r5, r2
 80056aa:	db0c      	blt.n	80056c6 <scalbnf+0x4e>
 80056ac:	4604      	mov	r4, r0
 80056ae:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80056b2:	3a19      	subs	r2, #25
 80056b4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80056b8:	428d      	cmp	r5, r1
 80056ba:	dd0a      	ble.n	80056d2 <scalbnf+0x5a>
 80056bc:	4912      	ldr	r1, [pc, #72]	@ (8005708 <scalbnf+0x90>)
 80056be:	4618      	mov	r0, r3
 80056c0:	f361 001e 	bfi	r0, r1, #0, #31
 80056c4:	e000      	b.n	80056c8 <scalbnf+0x50>
 80056c6:	4911      	ldr	r1, [pc, #68]	@ (800570c <scalbnf+0x94>)
 80056c8:	f7fa fe4e 	bl	8000368 <__aeabi_fmul>
 80056cc:	e7e1      	b.n	8005692 <scalbnf+0x1a>
 80056ce:	0dd2      	lsrs	r2, r2, #23
 80056d0:	e7f0      	b.n	80056b4 <scalbnf+0x3c>
 80056d2:	1951      	adds	r1, r2, r5
 80056d4:	29fe      	cmp	r1, #254	@ 0xfe
 80056d6:	dcf1      	bgt.n	80056bc <scalbnf+0x44>
 80056d8:	2900      	cmp	r1, #0
 80056da:	dd05      	ble.n	80056e8 <scalbnf+0x70>
 80056dc:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80056e0:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 80056e4:	4618      	mov	r0, r3
 80056e6:	bd38      	pop	{r3, r4, r5, pc}
 80056e8:	f111 0f16 	cmn.w	r1, #22
 80056ec:	da01      	bge.n	80056f2 <scalbnf+0x7a>
 80056ee:	4907      	ldr	r1, [pc, #28]	@ (800570c <scalbnf+0x94>)
 80056f0:	e7e5      	b.n	80056be <scalbnf+0x46>
 80056f2:	f101 0019 	add.w	r0, r1, #25
 80056f6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 80056fa:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 80056fe:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8005702:	e7e1      	b.n	80056c8 <scalbnf+0x50>
 8005704:	ffff3cb0 	.word	0xffff3cb0
 8005708:	7149f2ca 	.word	0x7149f2ca
 800570c:	0da24260 	.word	0x0da24260

08005710 <floorf>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005716:	3d7f      	subs	r5, #127	@ 0x7f
 8005718:	2d16      	cmp	r5, #22
 800571a:	4601      	mov	r1, r0
 800571c:	4604      	mov	r4, r0
 800571e:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8005722:	dc26      	bgt.n	8005772 <floorf+0x62>
 8005724:	2d00      	cmp	r5, #0
 8005726:	da0f      	bge.n	8005748 <floorf+0x38>
 8005728:	4917      	ldr	r1, [pc, #92]	@ (8005788 <floorf+0x78>)
 800572a:	f7fa fd15 	bl	8000158 <__addsf3>
 800572e:	2100      	movs	r1, #0
 8005730:	f7fa ffd6 	bl	80006e0 <__aeabi_fcmpgt>
 8005734:	b130      	cbz	r0, 8005744 <floorf+0x34>
 8005736:	2c00      	cmp	r4, #0
 8005738:	da23      	bge.n	8005782 <floorf+0x72>
 800573a:	2e00      	cmp	r6, #0
 800573c:	4c13      	ldr	r4, [pc, #76]	@ (800578c <floorf+0x7c>)
 800573e:	bf08      	it	eq
 8005740:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005744:	4621      	mov	r1, r4
 8005746:	e01a      	b.n	800577e <floorf+0x6e>
 8005748:	4e11      	ldr	r6, [pc, #68]	@ (8005790 <floorf+0x80>)
 800574a:	412e      	asrs	r6, r5
 800574c:	4230      	tst	r0, r6
 800574e:	d016      	beq.n	800577e <floorf+0x6e>
 8005750:	490d      	ldr	r1, [pc, #52]	@ (8005788 <floorf+0x78>)
 8005752:	f7fa fd01 	bl	8000158 <__addsf3>
 8005756:	2100      	movs	r1, #0
 8005758:	f7fa ffc2 	bl	80006e0 <__aeabi_fcmpgt>
 800575c:	2800      	cmp	r0, #0
 800575e:	d0f1      	beq.n	8005744 <floorf+0x34>
 8005760:	2c00      	cmp	r4, #0
 8005762:	bfbe      	ittt	lt
 8005764:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8005768:	412b      	asrlt	r3, r5
 800576a:	18e4      	addlt	r4, r4, r3
 800576c:	ea24 0406 	bic.w	r4, r4, r6
 8005770:	e7e8      	b.n	8005744 <floorf+0x34>
 8005772:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8005776:	d302      	bcc.n	800577e <floorf+0x6e>
 8005778:	f7fa fcee 	bl	8000158 <__addsf3>
 800577c:	4601      	mov	r1, r0
 800577e:	4608      	mov	r0, r1
 8005780:	bd70      	pop	{r4, r5, r6, pc}
 8005782:	2400      	movs	r4, #0
 8005784:	e7de      	b.n	8005744 <floorf+0x34>
 8005786:	bf00      	nop
 8005788:	7149f2ca 	.word	0x7149f2ca
 800578c:	bf800000 	.word	0xbf800000
 8005790:	007fffff 	.word	0x007fffff

08005794 <_init>:
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	bf00      	nop
 8005798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579a:	bc08      	pop	{r3}
 800579c:	469e      	mov	lr, r3
 800579e:	4770      	bx	lr

080057a0 <_fini>:
 80057a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a2:	bf00      	nop
 80057a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057a6:	bc08      	pop	{r3}
 80057a8:	469e      	mov	lr, r3
 80057aa:	4770      	bx	lr
