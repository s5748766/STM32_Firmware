
PACMAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b58  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08004c64  08004c64  00005c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005118  08005118  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005118  08005118  0000705c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005118  08005118  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005118  08005118  00006118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800511c  0800511c  0000611c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005120  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  2000005c  0800517c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800517c  0000728c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb84  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195a  00000000  00000000  00012c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00014568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d5  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a5d  00000000  00000000  00015bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cba9  00000000  00000000  0002d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c570  00000000  00000000  0003a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039ac  00000000  00000000  000c6778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000ca124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c4c 	.word	0x08004c4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004c4c 	.word	0x08004c4c

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <LCD_CS_LOW>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ----------------------------- LCD low-level ----------------------------- */
static inline void LCD_CS_LOW(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <LCD_CS_LOW+0x14>)
 8000776:	f001 ffd6 	bl	8002726 <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010c00 	.word	0x40010c00

08000784 <LCD_CS_HIGH>:
static inline void LCD_CS_HIGH(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <LCD_CS_HIGH+0x14>)
 800078e:	f001 ffca 	bl	8002726 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010c00 	.word	0x40010c00

0800079c <LCD_RS_CMD>:
static inline void LCD_RS_CMD(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <LCD_RS_CMD+0x14>)
 80007a6:	f001 ffbe 	bl	8002726 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800

080007b4 <LCD_RS_DATA>:
static inline void LCD_RS_DATA(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2110      	movs	r1, #16
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <LCD_RS_DATA+0x14>)
 80007be:	f001 ffb2 	bl	8002726 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800

080007cc <LCD_WR_LOW>:
static inline void LCD_WR_LOW(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2102      	movs	r1, #2
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <LCD_WR_LOW+0x14>)
 80007d6:	f001 ffa6 	bl	8002726 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010800 	.word	0x40010800

080007e4 <LCD_WR_HIGH>:
static inline void LCD_WR_HIGH(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2102      	movs	r1, #2
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <LCD_WR_HIGH+0x14>)
 80007ee:	f001 ff9a 	bl	8002726 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010800 	.word	0x40010800

080007fc <LCD_RD_HIGH>:
static inline void LCD_RD_HIGH(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <LCD_RD_HIGH+0x14>)
 8000806:	f001 ff8e 	bl	8002726 <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <LCD_RST_LOW>:
static inline void LCD_RST_LOW(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <LCD_RST_LOW+0x14>)
 800081e:	f001 ff82 	bl	8002726 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40011000 	.word	0x40011000

0800082c <LCD_RST_HIGH>:
static inline void LCD_RST_HIGH(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <LCD_RST_HIGH+0x14>)
 8000836:	f001 ff76 	bl	8002726 <HAL_GPIO_WritePin>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40011000 	.word	0x40011000

08000844 <LCD_SET_DATA>:

/* 8-bit data bus */
static inline void LCD_SET_DATA(uint8_t d) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
			(d & (1 << 0)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
 8000856:	461a      	mov	r2, r3
 8000858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085c:	4829      	ldr	r0, [pc, #164]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800085e:	f001 ff62 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
			(d & (1 << 1)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	105b      	asrs	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
 800086e:	461a      	mov	r2, r3
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <LCD_SET_DATA+0xc4>)
 8000874:	f001 ff57 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
			(d & (1 << 2)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	109b      	asrs	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
 8000884:	461a      	mov	r2, r3
 8000886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088a:	481e      	ldr	r0, [pc, #120]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800088c:	f001 ff4b 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
			(d & (1 << 3)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	10db      	asrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
 800089c:	461a      	mov	r2, r3
 800089e:	2108      	movs	r1, #8
 80008a0:	481a      	ldr	r0, [pc, #104]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008a2:	f001 ff40 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
			(d & (1 << 4)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	111b      	asrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
 80008b2:	461a      	mov	r2, r3
 80008b4:	2120      	movs	r1, #32
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008b8:	f001 ff35 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
			(d & (1 << 5)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	115b      	asrs	r3, r3, #5
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
 80008c8:	461a      	mov	r2, r3
 80008ca:	2110      	movs	r1, #16
 80008cc:	480f      	ldr	r0, [pc, #60]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008ce:	f001 ff2a 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
			(d & (1 << 6)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	119b      	asrs	r3, r3, #6
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008e6:	f001 ff1e 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
			(d & (1 << 7)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	09db      	lsrs	r3, r3, #7
 80008ee:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <LCD_SET_DATA+0xc0>)
 80008f8:	f001 ff15 	bl	8002726 <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40010800 	.word	0x40010800
 8000908:	40011000 	.word	0x40011000
 800090c:	40010c00 	.word	0x40010c00

08000910 <LCD_WRITE_STROBE>:

static inline void LCD_WRITE_STROBE(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	LCD_WR_LOW();
 8000914:	f7ff ff5a 	bl	80007cc <LCD_WR_LOW>
	__NOP();
 8000918:	bf00      	nop
	__NOP();
 800091a:	bf00      	nop
	__NOP();
 800091c:	bf00      	nop
	LCD_WR_HIGH();
 800091e:	f7ff ff61 	bl	80007e4 <LCD_WR_HIGH>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}

08000926 <ILI9341_WriteCmd>:

static void ILI9341_WriteCmd(uint8_t cmd) {
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
	LCD_RS_CMD();
 8000930:	f7ff ff34 	bl	800079c <LCD_RS_CMD>
	LCD_SET_DATA(cmd);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff84 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 800093c:	f7ff ffe8 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}

08000948 <ILI9341_WriteData8>:
static void ILI9341_WriteData8(uint8_t d) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	71fb      	strb	r3, [r7, #7]
	LCD_RS_DATA();
 8000952:	f7ff ff2f 	bl	80007b4 <LCD_RS_DATA>
	LCD_SET_DATA(d);
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff73 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 800095e:	f7ff ffd7 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <ILI9341_WriteData16>:
static void ILI9341_WriteData16(uint16_t d) {
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
	ILI9341_WriteData8(d >> 8);
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	0a1b      	lsrs	r3, r3, #8
 8000978:	b29b      	uxth	r3, r3
 800097a:	b2db      	uxtb	r3, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ffe3 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(d & 0xFF);
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff ffde 	bl	8000948 <ILI9341_WriteData8>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ILI9341_SetWindow>:

static void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4604      	mov	r4, r0
 800099c:	4608      	mov	r0, r1
 800099e:	4611      	mov	r1, r2
 80009a0:	461a      	mov	r2, r3
 80009a2:	4623      	mov	r3, r4
 80009a4:	80fb      	strh	r3, [r7, #6]
 80009a6:	4603      	mov	r3, r0
 80009a8:	80bb      	strh	r3, [r7, #4]
 80009aa:	460b      	mov	r3, r1
 80009ac:	807b      	strh	r3, [r7, #2]
 80009ae:	4613      	mov	r3, r2
 80009b0:	803b      	strh	r3, [r7, #0]
	ILI9341_WriteCmd(0x2A);
 80009b2:	202a      	movs	r0, #42	@ 0x2a
 80009b4:	f7ff ffb7 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData16(x0);
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff ffd5 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteData16(x1);
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffd1 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2B);
 80009c8:	202b      	movs	r0, #43	@ 0x2b
 80009ca:	f7ff ffac 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData16(y0);
 80009ce:	88bb      	ldrh	r3, [r7, #4]
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ffca 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteData16(y1);
 80009d6:	883b      	ldrh	r3, [r7, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffc6 	bl	800096a <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2C);
 80009de:	202c      	movs	r0, #44	@ 0x2c
 80009e0:	f7ff ffa1 	bl	8000926 <ILI9341_WriteCmd>
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ILI9341_FillRect>:
		return;
	ILI9341_SetWindow(x, y, x, y);
	ILI9341_WriteData16(c);
}
void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t c) {
 80009ec:	b590      	push	{r4, r7, lr}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4604      	mov	r4, r0
 80009f4:	4608      	mov	r0, r1
 80009f6:	4611      	mov	r1, r2
 80009f8:	461a      	mov	r2, r3
 80009fa:	4623      	mov	r3, r4
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	4603      	mov	r3, r0
 8000a00:	80bb      	strh	r3, [r7, #4]
 8000a02:	460b      	mov	r3, r1
 8000a04:	807b      	strh	r3, [r7, #2]
 8000a06:	4613      	mov	r3, r2
 8000a08:	803b      	strh	r3, [r7, #0]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8000a0a:	88fb      	ldrh	r3, [r7, #6]
 8000a0c:	2bef      	cmp	r3, #239	@ 0xef
 8000a0e:	d834      	bhi.n	8000a7a <ILI9341_FillRect+0x8e>
 8000a10:	88bb      	ldrh	r3, [r7, #4]
 8000a12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a16:	d230      	bcs.n	8000a7a <ILI9341_FillRect+0x8e>
		return;
	uint16_t x1 = (x + w - 1 < LCD_WIDTH) ? (x + w - 1) : (LCD_WIDTH - 1);
 8000a18:	88fa      	ldrh	r2, [r7, #6]
 8000a1a:	887b      	ldrh	r3, [r7, #2]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a20:	bfa8      	it	ge
 8000a22:	23f0      	movge	r3, #240	@ 0xf0
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	3b01      	subs	r3, #1
 8000a28:	817b      	strh	r3, [r7, #10]
	uint16_t y1 = (y + h - 1 < LCD_HEIGHT) ? (y + h - 1) : (LCD_HEIGHT - 1);
 8000a2a:	88ba      	ldrh	r2, [r7, #4]
 8000a2c:	883b      	ldrh	r3, [r7, #0]
 8000a2e:	4413      	add	r3, r2
 8000a30:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a34:	bfa8      	it	ge
 8000a36:	f44f 73a0 	movge.w	r3, #320	@ 0x140
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	3b01      	subs	r3, #1
 8000a3e:	813b      	strh	r3, [r7, #8]
	ILI9341_SetWindow(x, y, x1, y1);
 8000a40:	893b      	ldrh	r3, [r7, #8]
 8000a42:	897a      	ldrh	r2, [r7, #10]
 8000a44:	88b9      	ldrh	r1, [r7, #4]
 8000a46:	88f8      	ldrh	r0, [r7, #6]
 8000a48:	f7ff ffa4 	bl	8000994 <ILI9341_SetWindow>
	uint32_t n = (uint32_t) (x1 - x + 1) * (uint32_t) (y1 - y + 1);
 8000a4c:	897a      	ldrh	r2, [r7, #10]
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	3301      	adds	r3, #1
 8000a54:	4619      	mov	r1, r3
 8000a56:	893a      	ldrh	r2, [r7, #8]
 8000a58:	88bb      	ldrh	r3, [r7, #4]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	fb01 f303 	mul.w	r3, r1, r3
 8000a62:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000a64:	e003      	b.n	8000a6e <ILI9341_FillRect+0x82>
		ILI9341_WriteData16(c);
 8000a66:	8c3b      	ldrh	r3, [r7, #32]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff7e 	bl	800096a <ILI9341_WriteData16>
	while (n--)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	1e5a      	subs	r2, r3, #1
 8000a72:	60fa      	str	r2, [r7, #12]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f6      	bne.n	8000a66 <ILI9341_FillRect+0x7a>
 8000a78:	e000      	b.n	8000a7c <ILI9341_FillRect+0x90>
		return;
 8000a7a:	bf00      	nop
}
 8000a7c:	3714      	adds	r7, #20
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd90      	pop	{r4, r7, pc}

08000a82 <ILI9341_FillScreen>:
void ILI9341_FillScreen(uint16_t c) {
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b084      	sub	sp, #16
 8000a86:	af02      	add	r7, sp, #8
 8000a88:	4603      	mov	r3, r0
 8000a8a:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, c);
 8000a8c:	88fb      	ldrh	r3, [r7, #6]
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a94:	22f0      	movs	r2, #240	@ 0xf0
 8000a96:	2100      	movs	r1, #0
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff ffa7 	bl	80009ec <ILI9341_FillRect>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <fidx>:
{ 0x01, 0x01, 0x7F, 0x01, 0x01 }, /* T */
{ 0x3E, 0x41, 0x49, 0x49, 0x3A }, /* G */
{ 0x07, 0x08, 0x70, 0x08, 0x07 }, /* Y */
{ 0x00, 0x00, 0x5F, 0x00, 0x00 }, /* ! */
};
static int fidx(char c) {
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
	if (c == ' ')
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b20      	cmp	r3, #32
 8000ab4:	d101      	bne.n	8000aba <fidx+0x14>
		return 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e02d      	b.n	8000b16 <fidx+0x70>
	if (c == 'A')
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b41      	cmp	r3, #65	@ 0x41
 8000abe:	d101      	bne.n	8000ac4 <fidx+0x1e>
		return 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e028      	b.n	8000b16 <fidx+0x70>
	if (c == 'E')
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b45      	cmp	r3, #69	@ 0x45
 8000ac8:	d101      	bne.n	8000ace <fidx+0x28>
		return 2;
 8000aca:	2302      	movs	r3, #2
 8000acc:	e023      	b.n	8000b16 <fidx+0x70>
	if (c == 'P')
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b50      	cmp	r3, #80	@ 0x50
 8000ad2:	d101      	bne.n	8000ad8 <fidx+0x32>
		return 3;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	e01e      	b.n	8000b16 <fidx+0x70>
	if (c == 'R')
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b52      	cmp	r3, #82	@ 0x52
 8000adc:	d101      	bne.n	8000ae2 <fidx+0x3c>
		return 4;
 8000ade:	2304      	movs	r3, #4
 8000ae0:	e019      	b.n	8000b16 <fidx+0x70>
	if (c == 'S')
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b53      	cmp	r3, #83	@ 0x53
 8000ae6:	d101      	bne.n	8000aec <fidx+0x46>
		return 5;
 8000ae8:	2305      	movs	r3, #5
 8000aea:	e014      	b.n	8000b16 <fidx+0x70>
	if (c == 'T')
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b54      	cmp	r3, #84	@ 0x54
 8000af0:	d101      	bne.n	8000af6 <fidx+0x50>
		return 6;
 8000af2:	2306      	movs	r3, #6
 8000af4:	e00f      	b.n	8000b16 <fidx+0x70>
	if (c == 'G')
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b47      	cmp	r3, #71	@ 0x47
 8000afa:	d101      	bne.n	8000b00 <fidx+0x5a>
		return 7;
 8000afc:	2307      	movs	r3, #7
 8000afe:	e00a      	b.n	8000b16 <fidx+0x70>
	if (c == 'Y')
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b59      	cmp	r3, #89	@ 0x59
 8000b04:	d101      	bne.n	8000b0a <fidx+0x64>
		return 8;
 8000b06:	2308      	movs	r3, #8
 8000b08:	e005      	b.n	8000b16 <fidx+0x70>
	if (c == '!')
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b21      	cmp	r3, #33	@ 0x21
 8000b0e:	d101      	bne.n	8000b14 <fidx+0x6e>
		return 9;
 8000b10:	2309      	movs	r3, #9
 8000b12:	e000      	b.n	8000b16 <fidx+0x70>
	return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <DrawChar5x7>:
static void DrawChar5x7(int x, int y, char c, uint16_t fg, uint16_t bg, int s) {
 8000b20:	b590      	push	{r4, r7, lr}
 8000b22:	b08b      	sub	sp, #44	@ 0x2c
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	460b      	mov	r3, r1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	4613      	mov	r3, r2
 8000b34:	80bb      	strh	r3, [r7, #4]
	int i = fidx(c);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffb4 	bl	8000aa6 <fidx>
 8000b3e:	6178      	str	r0, [r7, #20]
	for (int col = 0; col < 5; col++) {
 8000b40:	2300      	movs	r3, #0
 8000b42:	61fb      	str	r3, [r7, #28]
 8000b44:	e042      	b.n	8000bcc <DrawChar5x7+0xac>
		uint8_t bits = font5x7[i][col];
 8000b46:	4931      	ldr	r1, [pc, #196]	@ (8000c0c <DrawChar5x7+0xec>)
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	18ca      	adds	r2, r1, r3
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4413      	add	r3, r2
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	74fb      	strb	r3, [r7, #19]
		for (int row = 0; row < 7; row++) {
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	e02f      	b.n	8000bc0 <DrawChar5x7+0xa0>
			uint16_t color = (bits & (1 << (6 - row))) ? fg : bg;
 8000b60:	7cfa      	ldrb	r2, [r7, #19]
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	f1c3 0306 	rsb	r3, r3, #6
 8000b68:	fa42 f303 	asr.w	r3, r2, r3
 8000b6c:	f003 0301 	and.w	r3, r3, #1
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <DrawChar5x7+0x58>
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	e000      	b.n	8000b7a <DrawChar5x7+0x5a>
 8000b78:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000b7a:	823b      	strh	r3, [r7, #16]
			ILI9341_FillRect(x + col * s, y + row * s, s, s, color);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b82:	b292      	uxth	r2, r2
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4413      	add	r3, r2
 8000b90:	b298      	uxth	r0, r3
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b98:	b292      	uxth	r2, r2
 8000b9a:	fb02 f303 	mul.w	r3, r2, r3
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b299      	uxth	r1, r3
 8000ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bae:	b29c      	uxth	r4, r3
 8000bb0:	8a3b      	ldrh	r3, [r7, #16]
 8000bb2:	9300      	str	r3, [sp, #0]
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	f7ff ff19 	bl	80009ec <ILI9341_FillRect>
		for (int row = 0; row < 7; row++) {
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	2b06      	cmp	r3, #6
 8000bc4:	ddcc      	ble.n	8000b60 <DrawChar5x7+0x40>
	for (int col = 0; col < 5; col++) {
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	61fb      	str	r3, [r7, #28]
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	ddb9      	ble.n	8000b46 <DrawChar5x7+0x26>
		}
	}
	ILI9341_FillRect(x + 5 * s, y, s, 7 * s, bg);
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	4413      	add	r3, r2
 8000be4:	b298      	uxth	r0, r3
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	b299      	uxth	r1, r3
 8000bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	461c      	mov	r4, r3
 8000bf4:	00e4      	lsls	r4, r4, #3
 8000bf6:	1ae3      	subs	r3, r4, r3
 8000bf8:	b29c      	uxth	r4, r3
 8000bfa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4623      	mov	r3, r4
 8000c00:	f7ff fef4 	bl	80009ec <ILI9341_FillRect>
}
 8000c04:	bf00      	nop
 8000c06:	3724      	adds	r7, #36	@ 0x24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd90      	pop	{r4, r7, pc}
 8000c0c:	08004c8c 	.word	0x08004c8c

08000c10 <DrawText>:
static void DrawText(int x, int y, const char *s, uint16_t fg, uint16_t bg,
		int scale) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b088      	sub	sp, #32
 8000c14:	af02      	add	r7, sp, #8
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
 8000c1c:	807b      	strh	r3, [r7, #2]
	int cx = x;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	617b      	str	r3, [r7, #20]
	while (*s) {
 8000c22:	e016      	b.n	8000c52 <DrawText+0x42>
		DrawChar5x7(cx, y, *s++, fg, bg, scale);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	1c5a      	adds	r2, r3, #1
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	8879      	ldrh	r1, [r7, #2]
 8000c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c30:	9301      	str	r3, [sp, #4]
 8000c32:	8c3b      	ldrh	r3, [r7, #32]
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	460b      	mov	r3, r1
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff70 	bl	8000b20 <DrawChar5x7>
		cx += 6 * scale;
 8000c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	4413      	add	r3, r2
 8000c50:	617b      	str	r3, [r7, #20]
	while (*s) {
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1e4      	bne.n	8000c24 <DrawText+0x14>
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3718      	adds	r7, #24
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DrawFilledCircle>:

/* circles + pacman */
static void DrawFilledCircle(int xc, int yc, int r, uint16_t color) {
 8000c64:	b5b0      	push	{r4, r5, r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	807b      	strh	r3, [r7, #2]
	for (int y = -r; y <= r; y++) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	425b      	negs	r3, r3
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e042      	b.n	8000d00 <DrawFilledCircle+0x9c>
		int dx = (int) (sqrtf((float) r * r - (float) y * y));
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff fb20 	bl	80002c0 <__aeabi_i2f>
 8000c80:	4604      	mov	r4, r0
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f7ff fb1c 	bl	80002c0 <__aeabi_i2f>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fb6b 	bl	8000368 <__aeabi_fmul>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461d      	mov	r5, r3
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff fb12 	bl	80002c0 <__aeabi_i2f>
 8000c9c:	4604      	mov	r4, r0
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff fb0e 	bl	80002c0 <__aeabi_i2f>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f7ff fb5d 	bl	8000368 <__aeabi_fmul>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f7ff fa4e 	bl	8000154 <__aeabi_fsub>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 f93e 	bl	8003f3c <sqrtf>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fd2c 	bl	8000720 <__aeabi_f2iz>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	613b      	str	r3, [r7, #16]
		ILI9341_FillRect(xc - dx, yc + y, 2 * dx + 1, 1, color);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b298      	uxth	r0, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b299      	uxth	r1, r3
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	3301      	adds	r3, #1
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	887b      	ldrh	r3, [r7, #2]
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f7ff fe79 	bl	80009ec <ILI9341_FillRect>
	for (int y = -r; y <= r; y++) {
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	ddb8      	ble.n	8000c7a <DrawFilledCircle+0x16>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3718      	adds	r7, #24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000d14 <DrawPacman>:
static void DrawPacman(int xc, int yc, int r, float mouth_deg, uint16_t color,
		uint16_t bg) {
 8000d14:	b5b0      	push	{r4, r5, r7, lr}
 8000d16:	b098      	sub	sp, #96	@ 0x60
 8000d18:	af02      	add	r7, sp, #8
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	603b      	str	r3, [r7, #0]
	DrawFilledCircle(xc, yc, r, color);
 8000d22:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	68b9      	ldr	r1, [r7, #8]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	f7ff ff9a 	bl	8000c64 <DrawFilledCircle>
	float a = mouth_deg * 3.1415926f / 180.f;
 8000d30:	4989      	ldr	r1, [pc, #548]	@ (8000f58 <DrawPacman+0x244>)
 8000d32:	6838      	ldr	r0, [r7, #0]
 8000d34:	f7ff fb18 	bl	8000368 <__aeabi_fmul>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	4988      	ldr	r1, [pc, #544]	@ (8000f5c <DrawPacman+0x248>)
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fbc7 	bl	80004d0 <__aeabi_fdiv>
 8000d42:	4603      	mov	r3, r0
 8000d44:	647b      	str	r3, [r7, #68]	@ 0x44
	int x1 = xc, y1 = yc;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	643b      	str	r3, [r7, #64]	@ 0x40
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x2 = xc + (int) (r * cosf(a / 2)), y2 = yc - (int) (r * sinf(a / 2));
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff fab6 	bl	80002c0 <__aeabi_i2f>
 8000d54:	4604      	mov	r4, r0
 8000d56:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d5a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000d5c:	f7ff fbb8 	bl	80004d0 <__aeabi_fdiv>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f003 f904 	bl	8003f70 <cosf>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff fafb 	bl	8000368 <__aeabi_fmul>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fcd3 	bl	8000720 <__aeabi_f2iz>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	4413      	add	r3, r2
 8000d80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f7ff fa9c 	bl	80002c0 <__aeabi_i2f>
 8000d88:	4604      	mov	r4, r0
 8000d8a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d8e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000d90:	f7ff fb9e 	bl	80004d0 <__aeabi_fdiv>
 8000d94:	4603      	mov	r3, r0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 f922 	bl	8003fe0 <sinf>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4620      	mov	r0, r4
 8000da2:	f7ff fae1 	bl	8000368 <__aeabi_fmul>
 8000da6:	4603      	mov	r3, r0
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fcb9 	bl	8000720 <__aeabi_f2iz>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1a9b      	subs	r3, r3, r2
 8000db4:	637b      	str	r3, [r7, #52]	@ 0x34
	int x3 = xc + (int) (r * cosf(-a / 2)), y3 = yc - (int) (r * sinf(-a / 2));
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff fa82 	bl	80002c0 <__aeabi_i2f>
 8000dbc:	4604      	mov	r4, r0
 8000dbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dc0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000dc4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fb81 	bl	80004d0 <__aeabi_fdiv>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f003 f8cd 	bl	8003f70 <cosf>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4620      	mov	r0, r4
 8000ddc:	f7ff fac4 	bl	8000368 <__aeabi_fmul>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc9c 	bl	8000720 <__aeabi_f2iz>
 8000de8:	4602      	mov	r2, r0
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	4413      	add	r3, r2
 8000dee:	633b      	str	r3, [r7, #48]	@ 0x30
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fa65 	bl	80002c0 <__aeabi_i2f>
 8000df6:	4604      	mov	r4, r0
 8000df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000dfa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8000dfe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fb64 	bl	80004d0 <__aeabi_fdiv>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f003 f8e8 	bl	8003fe0 <sinf>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4619      	mov	r1, r3
 8000e14:	4620      	mov	r0, r4
 8000e16:	f7ff faa7 	bl	8000368 <__aeabi_fmul>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff fc7f 	bl	8000720 <__aeabi_f2iz>
 8000e22:	4602      	mov	r2, r0
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int miny = y1;
 8000e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e2c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y2 < miny)
 8000e2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e32:	429a      	cmp	r2, r3
 8000e34:	da01      	bge.n	8000e3a <DrawPacman+0x126>
		miny = y2;
 8000e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e38:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y3 < miny)
 8000e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	da01      	bge.n	8000e46 <DrawPacman+0x132>
		miny = y3;
 8000e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e44:	657b      	str	r3, [r7, #84]	@ 0x54
	int maxy = y1;
 8000e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e48:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y2 > maxy)
 8000e4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dd01      	ble.n	8000e56 <DrawPacman+0x142>
		maxy = y2;
 8000e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e54:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y3 > maxy)
 8000e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dd01      	ble.n	8000e62 <DrawPacman+0x14e>
		maxy = y3;
 8000e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e60:	653b      	str	r3, [r7, #80]	@ 0x50
	for (int y = miny; y <= maxy; y++) {
 8000e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e66:	e103      	b.n	8001070 <DrawPacman+0x35c>
		int xs[3], n = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
#define EDGE(xa,ya,xb,yb) if(!((ya<y&&yb<y)||(ya>y&&yb>y)||(ya==yb))){ float t=(ya==yb)?0.f:((float)(y-ya)/(float)(yb-ya)); xs[n++]=xa+(int)((xb-xa)*t); }
		EDGE(x1, y1, x2, y2);
 8000e6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e70:	429a      	cmp	r2, r3
 8000e72:	da03      	bge.n	8000e7c <DrawPacman+0x168>
 8000e74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	db40      	blt.n	8000efe <DrawPacman+0x1ea>
 8000e7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e80:	429a      	cmp	r2, r3
 8000e82:	dd03      	ble.n	8000e8c <DrawPacman+0x178>
 8000e84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dc38      	bgt.n	8000efe <DrawPacman+0x1ea>
 8000e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d034      	beq.n	8000efe <DrawPacman+0x1ea>
 8000e94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d013      	beq.n	8000ec4 <DrawPacman+0x1b0>
 8000e9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fa0c 	bl	80002c0 <__aeabi_i2f>
 8000ea8:	4604      	mov	r4, r0
 8000eaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fa05 	bl	80002c0 <__aeabi_i2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4620      	mov	r0, r4
 8000ebc:	f7ff fb08 	bl	80004d0 <__aeabi_fdiv>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	e001      	b.n	8000ec8 <DrawPacman+0x1b4>
 8000ec4:	f04f 0300 	mov.w	r3, #0
 8000ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000eca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ecc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff f9f5 	bl	80002c0 <__aeabi_i2f>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fa44 	bl	8000368 <__aeabi_fmul>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc1c 	bl	8000720 <__aeabi_f2iz>
 8000ee8:	4601      	mov	r1, r0
 8000eea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000ef0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ef2:	440a      	add	r2, r1
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	3358      	adds	r3, #88	@ 0x58
 8000ef8:	443b      	add	r3, r7
 8000efa:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x2, y2, x3, y3);
 8000efe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f02:	429a      	cmp	r2, r3
 8000f04:	da03      	bge.n	8000f0e <DrawPacman+0x1fa>
 8000f06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	db45      	blt.n	8000f9a <DrawPacman+0x286>
 8000f0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dd03      	ble.n	8000f1e <DrawPacman+0x20a>
 8000f16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dc3d      	bgt.n	8000f9a <DrawPacman+0x286>
 8000f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d039      	beq.n	8000f9a <DrawPacman+0x286>
 8000f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d018      	beq.n	8000f60 <DrawPacman+0x24c>
 8000f2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff f9c3 	bl	80002c0 <__aeabi_i2f>
 8000f3a:	4604      	mov	r4, r0
 8000f3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff f9bc 	bl	80002c0 <__aeabi_i2f>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	f7ff fabf 	bl	80004d0 <__aeabi_fdiv>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e006      	b.n	8000f64 <DrawPacman+0x250>
 8000f56:	bf00      	nop
 8000f58:	40490fda 	.word	0x40490fda
 8000f5c:	43340000 	.word	0x43340000
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff f9a7 	bl	80002c0 <__aeabi_i2f>
 8000f72:	4603      	mov	r3, r0
 8000f74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff f9f6 	bl	8000368 <__aeabi_fmul>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fbce 	bl	8000720 <__aeabi_f2iz>
 8000f84:	4601      	mov	r1, r0
 8000f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000f8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000f8e:	440a      	add	r2, r1
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	3358      	adds	r3, #88	@ 0x58
 8000f94:	443b      	add	r3, r7
 8000f96:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x3, y3, x1, y1);
 8000f9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	da03      	bge.n	8000faa <DrawPacman+0x296>
 8000fa2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	db40      	blt.n	800102c <DrawPacman+0x318>
 8000faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dd03      	ble.n	8000fba <DrawPacman+0x2a6>
 8000fb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dc38      	bgt.n	800102c <DrawPacman+0x318>
 8000fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d034      	beq.n	800102c <DrawPacman+0x318>
 8000fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d013      	beq.n	8000ff2 <DrawPacman+0x2de>
 8000fca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff f975 	bl	80002c0 <__aeabi_i2f>
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f96e 	bl	80002c0 <__aeabi_i2f>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f7ff fa71 	bl	80004d0 <__aeabi_fdiv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e001      	b.n	8000ff6 <DrawPacman+0x2e2>
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
 8000ff8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f95e 	bl	80002c0 <__aeabi_i2f>
 8001004:	4603      	mov	r3, r0
 8001006:	6a39      	ldr	r1, [r7, #32]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff f9ad 	bl	8000368 <__aeabi_fmul>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fb85 	bl	8000720 <__aeabi_f2iz>
 8001016:	4601      	mov	r1, r0
 8001018:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800101a:	1c5a      	adds	r2, r3, #1
 800101c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800101e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001020:	440a      	add	r2, r1
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	3358      	adds	r3, #88	@ 0x58
 8001026:	443b      	add	r3, r7
 8001028:	f843 2c48 	str.w	r2, [r3, #-72]
#undef EDGE
		if (n >= 2) {
 800102c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800102e:	2b01      	cmp	r3, #1
 8001030:	dd1b      	ble.n	800106a <DrawPacman+0x356>
			if (xs[0] > xs[1]) {
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	429a      	cmp	r2, r3
 8001038:	dd05      	ble.n	8001046 <DrawPacman+0x332>
				int t = xs[0];
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	61fb      	str	r3, [r7, #28]
				xs[0] = xs[1];
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	613b      	str	r3, [r7, #16]
				xs[1] = t;
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	617b      	str	r3, [r7, #20]
			}
			ILI9341_FillRect(xs[0], y, xs[1] - xs[0] + 1, 1, bg);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	b298      	uxth	r0, r3
 800104a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800104c:	b299      	uxth	r1, r3
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	b29a      	uxth	r2, r3
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	b29b      	uxth	r3, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	b29b      	uxth	r3, r3
 800105a:	3301      	adds	r3, #1
 800105c:	b29a      	uxth	r2, r3
 800105e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	f7ff fcc1 	bl	80009ec <ILI9341_FillRect>
	for (int y = miny; y <= maxy; y++) {
 800106a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800106c:	3301      	adds	r3, #1
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001074:	429a      	cmp	r2, r3
 8001076:	f77f aef7 	ble.w	8000e68 <DrawPacman+0x154>
		}
	}
	ILI9341_FillRect(xc + r / 4, yc - r / 3, r / 6, r / 6, COLOR_WHITE);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b00      	cmp	r3, #0
 800107e:	da00      	bge.n	8001082 <DrawPacman+0x36e>
 8001080:	3303      	adds	r3, #3
 8001082:	109b      	asrs	r3, r3, #2
 8001084:	b29a      	uxth	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	b29b      	uxth	r3, r3
 800108a:	4413      	add	r3, r2
 800108c:	b298      	uxth	r0, r3
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <DrawPacman+0x3c0>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	17db      	asrs	r3, r3, #31
 8001098:	1a9b      	subs	r3, r3, r2
 800109a:	b29a      	uxth	r2, r3
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	4413      	add	r3, r2
 80010a2:	b299      	uxth	r1, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a0c      	ldr	r2, [pc, #48]	@ (80010d8 <DrawPacman+0x3c4>)
 80010a8:	fb82 4203 	smull	r4, r2, r2, r3
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	b29c      	uxth	r4, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <DrawPacman+0x3c4>)
 80010b6:	fb82 5203 	smull	r5, r2, r2, r3
 80010ba:	17db      	asrs	r3, r3, #31
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	b29b      	uxth	r3, r3
 80010c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c4:	9200      	str	r2, [sp, #0]
 80010c6:	4622      	mov	r2, r4
 80010c8:	f7ff fc90 	bl	80009ec <ILI9341_FillRect>
}
 80010cc:	bf00      	nop
 80010ce:	3758      	adds	r7, #88	@ 0x58
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	55555556 	.word	0x55555556
 80010d8:	2aaaaaab 	.word	0x2aaaaaab

080010dc <DrawGhost>:

static void DrawGhost(int x, int y, int w, int h, uint16_t body, uint16_t eye) {
 80010dc:	b5b0      	push	{r4, r5, r7, lr}
 80010de:	b08e      	sub	sp, #56	@ 0x38
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
 80010e8:	603b      	str	r3, [r7, #0]

	/* 몸통 */
	ILI9341_FillRect(x, y + h / 4, w, 3 * h / 4, body);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	b298      	uxth	r0, r3
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	da00      	bge.n	80010f6 <DrawGhost+0x1a>
 80010f4:	3303      	adds	r3, #3
 80010f6:	109b      	asrs	r3, r3, #2
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	4413      	add	r3, r2
 8001100:	b299      	uxth	r1, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	b29c      	uxth	r4, r3
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4613      	mov	r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	4413      	add	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	da00      	bge.n	8001114 <DrawGhost+0x38>
 8001112:	3303      	adds	r3, #3
 8001114:	109b      	asrs	r3, r3, #2
 8001116:	b29a      	uxth	r2, r3
 8001118:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	4613      	mov	r3, r2
 8001120:	4622      	mov	r2, r4
 8001122:	f7ff fc63 	bl	80009ec <ILI9341_FillRect>
	/* 머리 반원 */
	int r = w / 2;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	0fda      	lsrs	r2, r3, #31
 800112a:	4413      	add	r3, r2
 800112c:	105b      	asrs	r3, r3, #1
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int yy = 0; yy < h / 2; yy++) {
 8001130:	2300      	movs	r3, #0
 8001132:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001134:	e04b      	b.n	80011ce <DrawGhost+0xf2>
		int dx = (int) sqrtf((float) r * r - (float) (r - yy) * (r - yy));
 8001136:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001138:	f7ff f8c2 	bl	80002c0 <__aeabi_i2f>
 800113c:	4604      	mov	r4, r0
 800113e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001140:	f7ff f8be 	bl	80002c0 <__aeabi_i2f>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff f90d 	bl	8000368 <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
 8001150:	461d      	mov	r5, r3
 8001152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f8b1 	bl	80002c0 <__aeabi_i2f>
 800115e:	4604      	mov	r4, r0
 8001160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f8aa 	bl	80002c0 <__aeabi_i2f>
 800116c:	4603      	mov	r3, r0
 800116e:	4619      	mov	r1, r3
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff f8f9 	bl	8000368 <__aeabi_fmul>
 8001176:	4603      	mov	r3, r0
 8001178:	4619      	mov	r1, r3
 800117a:	4628      	mov	r0, r5
 800117c:	f7fe ffea 	bl	8000154 <__aeabi_fsub>
 8001180:	4603      	mov	r3, r0
 8001182:	4618      	mov	r0, r3
 8001184:	f002 feda 	bl	8003f3c <sqrtf>
 8001188:	4603      	mov	r3, r0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fac8 	bl	8000720 <__aeabi_f2iz>
 8001190:	4603      	mov	r3, r0
 8001192:	617b      	str	r3, [r7, #20]
		ILI9341_FillRect(x + r - dx, y + yy, 2 * dx, 1, body);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	b29a      	uxth	r2, r3
 8001198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29a      	uxth	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b298      	uxth	r0, r3
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b299      	uxth	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80011c0:	9300      	str	r3, [sp, #0]
 80011c2:	2301      	movs	r3, #1
 80011c4:	f7ff fc12 	bl	80009ec <ILI9341_FillRect>
	for (int yy = 0; yy < h / 2; yy++) {
 80011c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ca:	3301      	adds	r3, #1
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	0fda      	lsrs	r2, r3, #31
 80011d2:	4413      	add	r3, r2
 80011d4:	105b      	asrs	r3, r3, #1
 80011d6:	461a      	mov	r2, r3
 80011d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011da:	4293      	cmp	r3, r2
 80011dc:	dbab      	blt.n	8001136 <DrawGhost+0x5a>
	}
	/* 밑단 톱니 */
	int tooth = w / 5;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a76      	ldr	r2, [pc, #472]	@ (80013bc <DrawGhost+0x2e0>)
 80011e2:	fb82 1203 	smull	r1, r2, r2, r3
 80011e6:	1052      	asrs	r2, r2, #1
 80011e8:	17db      	asrs	r3, r3, #31
 80011ea:	1ad3      	subs	r3, r2, r3
 80011ec:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 5; i++) {
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011f2:	e02d      	b.n	8001250 <DrawGhost+0x174>
		if (i % 2 == 0)
 80011f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d125      	bne.n	800124a <DrawGhost+0x16e>
			ILI9341_FillRect(x + i * tooth, y + h - (h / 8), tooth, h / 8,
 80011fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001200:	b29b      	uxth	r3, r3
 8001202:	6a3a      	ldr	r2, [r7, #32]
 8001204:	b292      	uxth	r2, r2
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b298      	uxth	r0, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	b29a      	uxth	r2, r3
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b29a      	uxth	r2, r3
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	da00      	bge.n	8001228 <DrawGhost+0x14c>
 8001226:	3307      	adds	r3, #7
 8001228:	10db      	asrs	r3, r3, #3
 800122a:	425b      	negs	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	4413      	add	r3, r2
 8001230:	b299      	uxth	r1, r3
 8001232:	6a3b      	ldr	r3, [r7, #32]
 8001234:	b29a      	uxth	r2, r3
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	da00      	bge.n	800123e <DrawGhost+0x162>
 800123c:	3307      	adds	r3, #7
 800123e:	10db      	asrs	r3, r3, #3
 8001240:	b29b      	uxth	r3, r3
 8001242:	2400      	movs	r4, #0
 8001244:	9400      	str	r4, [sp, #0]
 8001246:	f7ff fbd1 	bl	80009ec <ILI9341_FillRect>
	for (int i = 0; i < 5; i++) {
 800124a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800124c:	3301      	adds	r3, #1
 800124e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001252:	2b04      	cmp	r3, #4
 8001254:	ddce      	ble.n	80011f4 <DrawGhost+0x118>
			COLOR_BLACK);
	}
	/* 눈 */
	int ex = x + w / 4, ey = y + h / 3;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	da00      	bge.n	800125e <DrawGhost+0x182>
 800125c:	3303      	adds	r3, #3
 800125e:	109b      	asrs	r3, r3, #2
 8001260:	461a      	mov	r2, r3
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4413      	add	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	4a55      	ldr	r2, [pc, #340]	@ (80013c0 <DrawGhost+0x2e4>)
 800126c:	fb82 1203 	smull	r1, r2, r2, r3
 8001270:	17db      	asrs	r3, r3, #31
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	4413      	add	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
	ILI9341_FillRect(ex, ey, w / 6, h / 6, COLOR_WHITE);
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	b298      	uxth	r0, r3
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	b299      	uxth	r1, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a4f      	ldr	r2, [pc, #316]	@ (80013c4 <DrawGhost+0x2e8>)
 8001286:	fb82 4203 	smull	r4, r2, r2, r3
 800128a:	17db      	asrs	r3, r3, #31
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	b29c      	uxth	r4, r3
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4a4c      	ldr	r2, [pc, #304]	@ (80013c4 <DrawGhost+0x2e8>)
 8001294:	fb82 5203 	smull	r5, r2, r2, r3
 8001298:	17db      	asrs	r3, r3, #31
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	b29b      	uxth	r3, r3
 800129e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	4622      	mov	r2, r4
 80012a6:	f7ff fba1 	bl	80009ec <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2, ey, w / 6, h / 6, COLOR_WHITE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	0fda      	lsrs	r2, r3, #31
 80012ae:	4413      	add	r3, r2
 80012b0:	105b      	asrs	r3, r3, #1
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b298      	uxth	r0, r3
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	b299      	uxth	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	4a40      	ldr	r2, [pc, #256]	@ (80013c4 <DrawGhost+0x2e8>)
 80012c4:	fb82 4203 	smull	r4, r2, r2, r3
 80012c8:	17db      	asrs	r3, r3, #31
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	b29c      	uxth	r4, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	4a3c      	ldr	r2, [pc, #240]	@ (80013c4 <DrawGhost+0x2e8>)
 80012d2:	fb82 5203 	smull	r5, r2, r2, r3
 80012d6:	17db      	asrs	r3, r3, #31
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	4622      	mov	r2, r4
 80012e4:	f7ff fb82 	bl	80009ec <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 12, ey + h / 12, w / 12, h / 12, eye);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a36      	ldr	r2, [pc, #216]	@ (80013c4 <DrawGhost+0x2e8>)
 80012ec:	fb82 1203 	smull	r1, r2, r2, r3
 80012f0:	1052      	asrs	r2, r2, #1
 80012f2:	17db      	asrs	r3, r3, #31
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4413      	add	r3, r2
 80012fe:	b298      	uxth	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	4a30      	ldr	r2, [pc, #192]	@ (80013c4 <DrawGhost+0x2e8>)
 8001304:	fb82 1203 	smull	r1, r2, r2, r3
 8001308:	1052      	asrs	r2, r2, #1
 800130a:	17db      	asrs	r3, r3, #31
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29a      	uxth	r2, r3
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4413      	add	r3, r2
 8001316:	b299      	uxth	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <DrawGhost+0x2e8>)
 800131c:	fb82 4203 	smull	r4, r2, r2, r3
 8001320:	1052      	asrs	r2, r2, #1
 8001322:	17db      	asrs	r3, r3, #31
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b29c      	uxth	r4, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	4a26      	ldr	r2, [pc, #152]	@ (80013c4 <DrawGhost+0x2e8>)
 800132c:	fb82 5203 	smull	r5, r2, r2, r3
 8001330:	1052      	asrs	r2, r2, #1
 8001332:	17db      	asrs	r3, r3, #31
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	b29a      	uxth	r2, r3
 8001338:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4613      	mov	r3, r2
 8001340:	4622      	mov	r2, r4
 8001342:	f7ff fb53 	bl	80009ec <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2 + w / 12, ey + h / 12, w / 12, h / 12, eye);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	0fda      	lsrs	r2, r3, #31
 800134a:	4413      	add	r3, r2
 800134c:	105b      	asrs	r3, r3, #1
 800134e:	b29a      	uxth	r2, r3
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4413      	add	r3, r2
 8001356:	b29a      	uxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	491a      	ldr	r1, [pc, #104]	@ (80013c4 <DrawGhost+0x2e8>)
 800135c:	fb81 0103 	smull	r0, r1, r1, r3
 8001360:	1049      	asrs	r1, r1, #1
 8001362:	17db      	asrs	r3, r3, #31
 8001364:	1acb      	subs	r3, r1, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	4413      	add	r3, r2
 800136a:	b298      	uxth	r0, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <DrawGhost+0x2e8>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	1052      	asrs	r2, r2, #1
 8001376:	17db      	asrs	r3, r3, #31
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	b29a      	uxth	r2, r3
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b299      	uxth	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <DrawGhost+0x2e8>)
 8001388:	fb82 4203 	smull	r4, r2, r2, r3
 800138c:	1052      	asrs	r2, r2, #1
 800138e:	17db      	asrs	r3, r3, #31
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b29c      	uxth	r4, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <DrawGhost+0x2e8>)
 8001398:	fb82 5203 	smull	r5, r2, r2, r3
 800139c:	1052      	asrs	r2, r2, #1
 800139e:	17db      	asrs	r3, r3, #31
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4613      	mov	r3, r2
 80013ac:	4622      	mov	r2, r4
 80013ae:	f7ff fb1d 	bl	80009ec <ILI9341_FillRect>
}
 80013b2:	bf00      	nop
 80013b4:	3730      	adds	r7, #48	@ 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ba:	bf00      	nop
 80013bc:	66666667 	.word	0x66666667
 80013c0:	55555556 	.word	0x55555556
 80013c4:	2aaaaaab 	.word	0x2aaaaaab

080013c8 <Pacman_StartScreen>:

/* screens */
void Pacman_StartScreen(void) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
	/* 배경: 검정 */
	ILI9341_FillScreen(COLOR_BLACK);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff fb57 	bl	8000a82 <ILI9341_FillScreen>

	/* 미로 프레임 몇 줄만 포인트로 (전체 미로는 무거우니 라인 샘플) */
	ILI9341_FillRect(10, 40, 220, 4, COLOR_BLUE);
 80013d4:	231f      	movs	r3, #31
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2304      	movs	r3, #4
 80013da:	22dc      	movs	r2, #220	@ 0xdc
 80013dc:	2128      	movs	r1, #40	@ 0x28
 80013de:	200a      	movs	r0, #10
 80013e0:	f7ff fb04 	bl	80009ec <ILI9341_FillRect>
	ILI9341_FillRect(10, 80, 220, 4, COLOR_BLUE);
 80013e4:	231f      	movs	r3, #31
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2304      	movs	r3, #4
 80013ea:	22dc      	movs	r2, #220	@ 0xdc
 80013ec:	2150      	movs	r1, #80	@ 0x50
 80013ee:	200a      	movs	r0, #10
 80013f0:	f7ff fafc 	bl	80009ec <ILI9341_FillRect>
	ILI9341_FillRect(10, 120, 220, 4, COLOR_BLUE);
 80013f4:	231f      	movs	r3, #31
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	2304      	movs	r3, #4
 80013fa:	22dc      	movs	r2, #220	@ 0xdc
 80013fc:	2178      	movs	r1, #120	@ 0x78
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff faf4 	bl	80009ec <ILI9341_FillRect>
	ILI9341_FillRect(10, 160, 220, 4, COLOR_BLUE);
 8001404:	231f      	movs	r3, #31
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2304      	movs	r3, #4
 800140a:	22dc      	movs	r2, #220	@ 0xdc
 800140c:	21a0      	movs	r1, #160	@ 0xa0
 800140e:	200a      	movs	r0, #10
 8001410:	f7ff faec 	bl	80009ec <ILI9341_FillRect>

	/* PAC-MAN 로고풍 텍스트 (노란색, 3배 확대) */
	DrawText(20, 8, "PA  MAN", COLOR_YELLOW, COLOR_BLACK, 3); // 'PACMAN'을 폰트 제한 때문에 'PA'만 노랑+유령으로 대체
 8001414:	2303      	movs	r3, #3
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	2300      	movs	r3, #0
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001420:	4a3c      	ldr	r2, [pc, #240]	@ (8001514 <Pacman_StartScreen+0x14c>)
 8001422:	2108      	movs	r1, #8
 8001424:	2014      	movs	r0, #20
 8001426:	f7ff fbf3 	bl	8000c10 <DrawText>
	/* 'C' 대신 팩맨 아이콘으로 로고 느낌 내기 */
	DrawPacman(20 + 6 * 3 * 2 + 18, 20, 12, 60.f, COLOR_YELLOW,
 800142a:	2300      	movs	r3, #0
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <Pacman_StartScreen+0x150>)
 8001436:	220c      	movs	r2, #12
 8001438:	2114      	movs	r1, #20
 800143a:	204a      	movs	r0, #74	@ 0x4a
 800143c:	f7ff fc6a 	bl	8000d14 <DrawPacman>
	COLOR_BLACK); // 글자 옆에 팩맨

	/* 유령 4종 (핑크/빨강/하양(눈만)/파랑) */
	int gx = 30, gy = 190, gw = 36, gh = 28, gap = 8;
 8001440:	231e      	movs	r3, #30
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	23be      	movs	r3, #190	@ 0xbe
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	2324      	movs	r3, #36	@ 0x24
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	231c      	movs	r3, #28
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	2308      	movs	r3, #8
 8001452:	603b      	str	r3, [r7, #0]
	DrawGhost(gx + 0 * (gw + gap), gy, gw, gh, COLOR_MAGENTA, COLOR_BLUE); // Pinky
 8001454:	231f      	movs	r3, #31
 8001456:	9301      	str	r3, [sp, #4]
 8001458:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	68f9      	ldr	r1, [r7, #12]
 8001464:	6938      	ldr	r0, [r7, #16]
 8001466:	f7ff fe39 	bl	80010dc <DrawGhost>
	DrawGhost(gx + 1 * (gw + gap), gy, gw, gh, COLOR_RED, COLOR_BLUE); // Blinky
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	441a      	add	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	18d0      	adds	r0, r2, r3
 8001474:	231f      	movs	r3, #31
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	68f9      	ldr	r1, [r7, #12]
 8001484:	f7ff fe2a 	bl	80010dc <DrawGhost>
	DrawGhost(gx + 2 * (gw + gap), gy, gw, gh, COLOR_CYAN, COLOR_BLUE); // Inky (몸은 시안)
 8001488:	68ba      	ldr	r2, [r7, #8]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	005a      	lsls	r2, r3, #1
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	18d0      	adds	r0, r2, r3
 8001494:	231f      	movs	r3, #31
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800149c:	9300      	str	r3, [sp, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68ba      	ldr	r2, [r7, #8]
 80014a2:	68f9      	ldr	r1, [r7, #12]
 80014a4:	f7ff fe1a 	bl	80010dc <DrawGhost>
	DrawGhost(gx + 3 * (gw + gap), gy, gw, gh, COLOR_ORANGE, COLOR_BLUE); // Clyde
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	441a      	add	r2, r3
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	441a      	add	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	18d0      	adds	r0, r2, r3
 80014b8:	231f      	movs	r3, #31
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	68f9      	ldr	r1, [r7, #12]
 80014c8:	f7ff fe08 	bl	80010dc <DrawGhost>

	/* PRESS START */
	DrawText(30, 260, "PRESS START", COLOR_WHITE, COLOR_BLACK, 2);
 80014cc:	2302      	movs	r3, #2
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014d8:	4a10      	ldr	r2, [pc, #64]	@ (800151c <Pacman_StartScreen+0x154>)
 80014da:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80014de:	201e      	movs	r0, #30
 80014e0:	f7ff fb96 	bl	8000c10 <DrawText>

	/* 데모 도트(점) 몇 개 */
	for (int x = 16; x < 224; x += 12)
 80014e4:	2310      	movs	r3, #16
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00c      	b.n	8001504 <Pacman_StartScreen+0x13c>
		ILI9341_FillRect(x, 100, 3, 3, COLOR_WHITE);
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	b298      	uxth	r0, r3
 80014ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2303      	movs	r3, #3
 80014f6:	2203      	movs	r2, #3
 80014f8:	2164      	movs	r1, #100	@ 0x64
 80014fa:	f7ff fa77 	bl	80009ec <ILI9341_FillRect>
	for (int x = 16; x < 224; x += 12)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	330c      	adds	r3, #12
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2bdf      	cmp	r3, #223	@ 0xdf
 8001508:	ddef      	ble.n	80014ea <Pacman_StartScreen+0x122>
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	08004c64 	.word	0x08004c64
 8001518:	42700000 	.word	0x42700000
 800151c:	08004c6c 	.word	0x08004c6c

08001520 <Next_Step_Screen>:
void Next_Step_Screen(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af02      	add	r7, sp, #8
	ILI9341_FillScreen(COLOR_BLACK);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff faab 	bl	8000a82 <ILI9341_FillScreen>
	DrawText(32, 80, "GET READY!", COLOR_YELLOW, COLOR_BLACK, 3);
 800152c:	2303      	movs	r3, #3
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	2300      	movs	r3, #0
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001538:	4a12      	ldr	r2, [pc, #72]	@ (8001584 <Next_Step_Screen+0x64>)
 800153a:	2150      	movs	r1, #80	@ 0x50
 800153c:	2020      	movs	r0, #32
 800153e:	f7ff fb67 	bl	8000c10 <DrawText>
	DrawText(32, 120, "STAGE 1", COLOR_CYAN, COLOR_BLACK, 3);
 8001542:	2303      	movs	r3, #3
 8001544:	9301      	str	r3, [sp, #4]
 8001546:	2300      	movs	r3, #0
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <Next_Step_Screen+0x68>)
 8001550:	2178      	movs	r1, #120	@ 0x78
 8001552:	2020      	movs	r0, #32
 8001554:	f7ff fb5c 	bl	8000c10 <DrawText>
	DrawPacman(60, 200, 18, 40.f, COLOR_YELLOW, COLOR_BLACK);
 8001558:	2300      	movs	r3, #0
 800155a:	9301      	str	r3, [sp, #4]
 800155c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <Next_Step_Screen+0x6c>)
 8001564:	2212      	movs	r2, #18
 8001566:	21c8      	movs	r1, #200	@ 0xc8
 8001568:	203c      	movs	r0, #60	@ 0x3c
 800156a:	f7ff fbd3 	bl	8000d14 <DrawPacman>
	ILI9341_FillRect(10, 240, 220, 4, COLOR_BLUE);
 800156e:	231f      	movs	r3, #31
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2304      	movs	r3, #4
 8001574:	22dc      	movs	r2, #220	@ 0xdc
 8001576:	21f0      	movs	r1, #240	@ 0xf0
 8001578:	200a      	movs	r0, #10
 800157a:	f7ff fa37 	bl	80009ec <ILI9341_FillRect>
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	08004c78 	.word	0x08004c78
 8001588:	08004c84 	.word	0x08004c84
 800158c:	42200000 	.word	0x42200000

08001590 <any_button_now>:

/* 50ms debounce for any of UP/LEFT/RIGHT/DOWN */
static int any_button_now(void) {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	return BTN_PRESSED(UP_GPIO_Port, UP_Pin)
 8001594:	2104      	movs	r1, #4
 8001596:	4811      	ldr	r0, [pc, #68]	@ (80015dc <any_button_now+0x4c>)
 8001598:	f001 f8ae 	bl	80026f8 <HAL_GPIO_ReadPin>
 800159c:	4603      	mov	r3, r0
			|| BTN_PRESSED(LEFT_GPIO_Port, LEFT_Pin)
			|| BTN_PRESSED(RIGHT_GPIO_Port, RIGHT_Pin)
			|| BTN_PRESSED(DOWN_GPIO_Port, DOWN_Pin);
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d016      	beq.n	80015d0 <any_button_now+0x40>
			|| BTN_PRESSED(LEFT_GPIO_Port, LEFT_Pin)
 80015a2:	2108      	movs	r1, #8
 80015a4:	480d      	ldr	r0, [pc, #52]	@ (80015dc <any_button_now+0x4c>)
 80015a6:	f001 f8a7 	bl	80026f8 <HAL_GPIO_ReadPin>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d00f      	beq.n	80015d0 <any_button_now+0x40>
			|| BTN_PRESSED(RIGHT_GPIO_Port, RIGHT_Pin)
 80015b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015b4:	480a      	ldr	r0, [pc, #40]	@ (80015e0 <any_button_now+0x50>)
 80015b6:	f001 f89f 	bl	80026f8 <HAL_GPIO_ReadPin>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d007      	beq.n	80015d0 <any_button_now+0x40>
			|| BTN_PRESSED(DOWN_GPIO_Port, DOWN_Pin);
 80015c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015c4:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <any_button_now+0x50>)
 80015c6:	f001 f897 	bl	80026f8 <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <any_button_now+0x44>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <any_button_now+0x46>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40011000 	.word	0x40011000
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <wait_for_any_button_press>:
void wait_for_any_button_press(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	while (!any_button_now()) {
 80015e8:	e002      	b.n	80015f0 <wait_for_any_button_press+0xc>
		HAL_Delay(1);
 80015ea:	2001      	movs	r0, #1
 80015ec:	f000 fdce 	bl	800218c <HAL_Delay>
	while (!any_button_now()) {
 80015f0:	f7ff ffce 	bl	8001590 <any_button_now>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f7      	beq.n	80015ea <wait_for_any_button_press+0x6>
	}
	HAL_Delay(50);
 80015fa:	2032      	movs	r0, #50	@ 0x32
 80015fc:	f000 fdc6 	bl	800218c <HAL_Delay>
	if (!any_button_now())
 8001600:	f7ff ffc6 	bl	8001590 <any_button_now>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d010      	beq.n	800162c <wait_for_any_button_press+0x48>
		return;
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800160a:	2120      	movs	r1, #32
 800160c:	4808      	ldr	r0, [pc, #32]	@ (8001630 <wait_for_any_button_press+0x4c>)
 800160e:	f001 f8a2 	bl	8002756 <HAL_GPIO_TogglePin>
	while (any_button_now()) {
 8001612:	e002      	b.n	800161a <wait_for_any_button_press+0x36>
		HAL_Delay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f000 fdb9 	bl	800218c <HAL_Delay>
	while (any_button_now()) {
 800161a:	f7ff ffb9 	bl	8001590 <any_button_now>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1f7      	bne.n	8001614 <wait_for_any_button_press+0x30>
	}
	HAL_Delay(20);
 8001624:	2014      	movs	r0, #20
 8001626:	f000 fdb1 	bl	800218c <HAL_Delay>
 800162a:	e000      	b.n	800162e <wait_for_any_button_press+0x4a>
		return;
 800162c:	bf00      	nop
}
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40010800 	.word	0x40010800

08001634 <ILI9341_Init>:

/* ----------------------------- ILI9341 init ------------------------------ */
void ILI9341_Init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8001638:	f7ff f8a4 	bl	8000784 <LCD_CS_HIGH>
	LCD_WR_HIGH();
 800163c:	f7ff f8d2 	bl	80007e4 <LCD_WR_HIGH>
	LCD_RD_HIGH();
 8001640:	f7ff f8dc 	bl	80007fc <LCD_RD_HIGH>
	LCD_RST_LOW();
 8001644:	f7ff f8e6 	bl	8000814 <LCD_RST_LOW>
	HAL_Delay(20);
 8001648:	2014      	movs	r0, #20
 800164a:	f000 fd9f 	bl	800218c <HAL_Delay>
	LCD_RST_HIGH();
 800164e:	f7ff f8ed 	bl	800082c <LCD_RST_HIGH>
	HAL_Delay(120);
 8001652:	2078      	movs	r0, #120	@ 0x78
 8001654:	f000 fd9a 	bl	800218c <HAL_Delay>

	LCD_CS_LOW();
 8001658:	f7ff f888 	bl	800076c <LCD_CS_LOW>

	ILI9341_WriteCmd(0x01);
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff f962 	bl	8000926 <ILI9341_WriteCmd>
	HAL_Delay(5);
 8001662:	2005      	movs	r0, #5
 8001664:	f000 fd92 	bl	800218c <HAL_Delay>
	ILI9341_WriteCmd(0x28);
 8001668:	2028      	movs	r0, #40	@ 0x28
 800166a:	f7ff f95c 	bl	8000926 <ILI9341_WriteCmd>

	ILI9341_WriteCmd(0xCF);
 800166e:	20cf      	movs	r0, #207	@ 0xcf
 8001670:	f7ff f959 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff f967 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x83);
 800167a:	2083      	movs	r0, #131	@ 0x83
 800167c:	f7ff f964 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x30);
 8001680:	2030      	movs	r0, #48	@ 0x30
 8001682:	f7ff f961 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xED);
 8001686:	20ed      	movs	r0, #237	@ 0xed
 8001688:	f7ff f94d 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x64);
 800168c:	2064      	movs	r0, #100	@ 0x64
 800168e:	f7ff f95b 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x03);
 8001692:	2003      	movs	r0, #3
 8001694:	f7ff f958 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x12);
 8001698:	2012      	movs	r0, #18
 800169a:	f7ff f955 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x81);
 800169e:	2081      	movs	r0, #129	@ 0x81
 80016a0:	f7ff f952 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xE8);
 80016a4:	20e8      	movs	r0, #232	@ 0xe8
 80016a6:	f7ff f93e 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x85);
 80016aa:	2085      	movs	r0, #133	@ 0x85
 80016ac:	f7ff f94c 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x01);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff f949 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x79);
 80016b6:	2079      	movs	r0, #121	@ 0x79
 80016b8:	f7ff f946 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xCB);
 80016bc:	20cb      	movs	r0, #203	@ 0xcb
 80016be:	f7ff f932 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x39);
 80016c2:	2039      	movs	r0, #57	@ 0x39
 80016c4:	f7ff f940 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x2C);
 80016c8:	202c      	movs	r0, #44	@ 0x2c
 80016ca:	f7ff f93d 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f7ff f93a 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x34);
 80016d4:	2034      	movs	r0, #52	@ 0x34
 80016d6:	f7ff f937 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x02);
 80016da:	2002      	movs	r0, #2
 80016dc:	f7ff f934 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xF7);
 80016e0:	20f7      	movs	r0, #247	@ 0xf7
 80016e2:	f7ff f920 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x20);
 80016e6:	2020      	movs	r0, #32
 80016e8:	f7ff f92e 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xEA);
 80016ec:	20ea      	movs	r0, #234	@ 0xea
 80016ee:	f7ff f91a 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 80016f2:	2000      	movs	r0, #0
 80016f4:	f7ff f928 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 80016f8:	2000      	movs	r0, #0
 80016fa:	f7ff f925 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xC0);
 80016fe:	20c0      	movs	r0, #192	@ 0xc0
 8001700:	f7ff f911 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x26);
 8001704:	2026      	movs	r0, #38	@ 0x26
 8001706:	f7ff f91f 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC1);
 800170a:	20c1      	movs	r0, #193	@ 0xc1
 800170c:	f7ff f90b 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x11);
 8001710:	2011      	movs	r0, #17
 8001712:	f7ff f919 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC5);
 8001716:	20c5      	movs	r0, #197	@ 0xc5
 8001718:	f7ff f905 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x35);
 800171c:	2035      	movs	r0, #53	@ 0x35
 800171e:	f7ff f913 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x3E);
 8001722:	203e      	movs	r0, #62	@ 0x3e
 8001724:	f7ff f910 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC7);
 8001728:	20c7      	movs	r0, #199	@ 0xc7
 800172a:	f7ff f8fc 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0xBE);
 800172e:	20be      	movs	r0, #190	@ 0xbe
 8001730:	f7ff f90a 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x36);
 8001734:	2036      	movs	r0, #54	@ 0x36
 8001736:	f7ff f8f6 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x48); /* MY=1, BGR=1 */
 800173a:	2048      	movs	r0, #72	@ 0x48
 800173c:	f7ff f904 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x3A);
 8001740:	203a      	movs	r0, #58	@ 0x3a
 8001742:	f7ff f8f0 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x55); /* RGB565 */
 8001746:	2055      	movs	r0, #85	@ 0x55
 8001748:	f7ff f8fe 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xB1);
 800174c:	20b1      	movs	r0, #177	@ 0xb1
 800174e:	f7ff f8ea 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff f8f8 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x1B);
 8001758:	201b      	movs	r0, #27
 800175a:	f7ff f8f5 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xB6);
 800175e:	20b6      	movs	r0, #182	@ 0xb6
 8001760:	f7ff f8e1 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x0A);
 8001764:	200a      	movs	r0, #10
 8001766:	f7ff f8ef 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteData8(0xA2);
 800176a:	20a2      	movs	r0, #162	@ 0xa2
 800176c:	f7ff f8ec 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xF2);
 8001770:	20f2      	movs	r0, #242	@ 0xf2
 8001772:	f7ff f8d8 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8001776:	2000      	movs	r0, #0
 8001778:	f7ff f8e6 	bl	8000948 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x26);
 800177c:	2026      	movs	r0, #38	@ 0x26
 800177e:	f7ff f8d2 	bl	8000926 <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x01);
 8001782:	2001      	movs	r0, #1
 8001784:	f7ff f8e0 	bl	8000948 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x11);
 8001788:	2011      	movs	r0, #17
 800178a:	f7ff f8cc 	bl	8000926 <ILI9341_WriteCmd>
	HAL_Delay(120);
 800178e:	2078      	movs	r0, #120	@ 0x78
 8001790:	f000 fcfc 	bl	800218c <HAL_Delay>
	ILI9341_WriteCmd(0x29);
 8001794:	2029      	movs	r0, #41	@ 0x29
 8001796:	f7ff f8c6 	bl	8000926 <ILI9341_WriteCmd>
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <set_pwm_freq>:

/* ----------------------------- Buzzer (PWM) ------------------------------ */
/* duty 50% square: ARR = TIMER_TICK_HZ/freq - 1 , CCR = (ARR+1)/2 */
static void set_pwm_freq(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t hz) {
 80017a0:	b480      	push	{r7}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
	if (hz == 0) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d11c      	bne.n	80017ec <set_pwm_freq+0x4c>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d104      	bne.n	80017c2 <set_pwm_freq+0x22>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 80017c0:	e050      	b.n	8001864 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d104      	bne.n	80017d2 <set_pwm_freq+0x32>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	2300      	movs	r3, #0
 80017ce:	6393      	str	r3, [r2, #56]	@ 0x38
		return;
 80017d0:	e048      	b.n	8001864 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	d104      	bne.n	80017e2 <set_pwm_freq+0x42>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	63d3      	str	r3, [r2, #60]	@ 0x3c
		return;
 80017e0:	e040      	b.n	8001864 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	2300      	movs	r3, #0
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
		return;
 80017ea:	e03b      	b.n	8001864 <set_pwm_freq+0xc4>
	}
	uint32_t arr = (TIMER_TICK_HZ / hz);
 80017ec:	4a1f      	ldr	r2, [pc, #124]	@ (800186c <set_pwm_freq+0xcc>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	617b      	str	r3, [r7, #20]
	if (arr < 2)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d801      	bhi.n	8001800 <set_pwm_freq+0x60>
		arr = 2;
 80017fc:	2302      	movs	r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
	arr -= 1;
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	3b01      	subs	r3, #1
 8001804:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(htim, arr);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim, channel, (arr + 1) / 2);
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <set_pwm_freq+0x88>
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0852      	lsrs	r2, r2, #1
 8001824:	635a      	str	r2, [r3, #52]	@ 0x34
 8001826:	e019      	b.n	800185c <set_pwm_freq+0xbc>
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2b04      	cmp	r3, #4
 800182c:	d106      	bne.n	800183c <set_pwm_freq+0x9c>
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	085b      	lsrs	r3, r3, #1
 8001838:	6393      	str	r3, [r2, #56]	@ 0x38
 800183a:	e00f      	b.n	800185c <set_pwm_freq+0xbc>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b08      	cmp	r3, #8
 8001840:	d106      	bne.n	8001850 <set_pwm_freq+0xb0>
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800184e:	e005      	b.n	800185c <set_pwm_freq+0xbc>
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COUNTER(htim, 0);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001864:	371c      	adds	r7, #28
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	000f4240 	.word	0x000f4240

08001870 <BUZZ_Start>:

void BUZZ_Start(void) {
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); /* PA11 */
 8001874:	210c      	movs	r1, #12
 8001876:	4804      	ldr	r0, [pc, #16]	@ (8001888 <BUZZ_Start+0x18>)
 8001878:	f001 fc60 	bl	800313c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); /* PB1  */
 800187c:	210c      	movs	r1, #12
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <BUZZ_Start+0x1c>)
 8001880:	f001 fc5c 	bl	800313c <HAL_TIM_PWM_Start>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20000078 	.word	0x20000078
 800188c:	200000c0 	.word	0x200000c0

08001890 <BUZZ_Stop>:
void BUZZ_Stop(void) {
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8001894:	4b08      	ldr	r3, [pc, #32]	@ (80018b8 <BUZZ_Stop+0x28>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 800189c:	4b07      	ldr	r3, [pc, #28]	@ (80018bc <BUZZ_Stop+0x2c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2200      	movs	r2, #0
 80018a2:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80018a4:	210c      	movs	r1, #12
 80018a6:	4804      	ldr	r0, [pc, #16]	@ (80018b8 <BUZZ_Stop+0x28>)
 80018a8:	f001 fcea 	bl	8003280 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 80018ac:	210c      	movs	r1, #12
 80018ae:	4803      	ldr	r0, [pc, #12]	@ (80018bc <BUZZ_Stop+0x2c>)
 80018b0:	f001 fce6 	bl	8003280 <HAL_TIM_PWM_Stop>
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000078 	.word	0x20000078
 80018bc:	200000c0 	.word	0x200000c0

080018c0 <BUZZ_SetFreq_TIM1>:
void BUZZ_SetFreq_TIM1(uint32_t hz) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim1, TIM_CHANNEL_4, hz);
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	210c      	movs	r1, #12
 80018cc:	4803      	ldr	r0, [pc, #12]	@ (80018dc <BUZZ_SetFreq_TIM1+0x1c>)
 80018ce:	f7ff ff67 	bl	80017a0 <set_pwm_freq>
}
 80018d2:	bf00      	nop
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000078 	.word	0x20000078

080018e0 <BUZZ_SetFreq_TIM3>:
void BUZZ_SetFreq_TIM3(uint32_t hz) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim3, TIM_CHANNEL_4, hz);
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	210c      	movs	r1, #12
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <BUZZ_SetFreq_TIM3+0x1c>)
 80018ee:	f7ff ff57 	bl	80017a0 <set_pwm_freq>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200000c0 	.word	0x200000c0

08001900 <PLAY_PacmanIntro_Blocking>:
static const uint16_t voice_dur[] = { EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS),
		EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), QN(TEMPO_MS),
		EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), QN(TEMPO_MS) };
static const size_t VOICE_LEN = (sizeof(voice1_freq) / sizeof(voice1_freq[0]));

void PLAY_PacmanIntro_Blocking(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
	BUZZ_Start();
 8001906:	f7ff ffb3 	bl	8001870 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN; ++i) {
 800190a:	2300      	movs	r3, #0
 800190c:	607b      	str	r3, [r7, #4]
 800190e:	e021      	b.n	8001954 <PLAY_PacmanIntro_Blocking+0x54>
		BUZZ_SetFreq_TIM1(voice1_freq[i]); /* 멜로디 */
 8001910:	4a15      	ldr	r2, [pc, #84]	@ (8001968 <PLAY_PacmanIntro_Blocking+0x68>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffd1 	bl	80018c0 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice2_freq[i]); /* 하모니 */
 800191e:	4a13      	ldr	r2, [pc, #76]	@ (800196c <PLAY_PacmanIntro_Blocking+0x6c>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ffda 	bl	80018e0 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur[i] - 10);
 800192c:	4a10      	ldr	r2, [pc, #64]	@ (8001970 <PLAY_PacmanIntro_Blocking+0x70>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001934:	3b0a      	subs	r3, #10
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fc28 	bl	800218c <HAL_Delay>
		/* 짧은 스택카토 */
		BUZZ_SetFreq_TIM1(0);
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff ffbf 	bl	80018c0 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 8001942:	2000      	movs	r0, #0
 8001944:	f7ff ffcc 	bl	80018e0 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 8001948:	200a      	movs	r0, #10
 800194a:	f000 fc1f 	bl	800218c <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN; ++i) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3301      	adds	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	220d      	movs	r2, #13
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4293      	cmp	r3, r2
 800195a:	d3d9      	bcc.n	8001910 <PLAY_PacmanIntro_Blocking+0x10>
	}
	BUZZ_Stop();
 800195c:	f7ff ff98 	bl	8001890 <BUZZ_Stop>
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	08004cc0 	.word	0x08004cc0
 800196c:	08004cdc 	.word	0x08004cdc
 8001970:	08004cf8 	.word	0x08004cf8

08001974 <main>:
/* USER CODE END 0 */

/* ------------------------------- main ------------------------------------ */
int main(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	HAL_Init();
 8001978:	f000 fba6 	bl	80020c8 <HAL_Init>
	SystemClock_Config();
 800197c:	f000 f81a 	bl	80019b4 <SystemClock_Config>
	MX_GPIO_Init();
 8001980:	f000 f99c 	bl	8001cbc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001984:	f000 f970 	bl	8001c68 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001988:	f000 f856 	bl	8001a38 <MX_TIM1_Init>
	MX_TIM3_Init();
 800198c:	f000 f8f4 	bl	8001b78 <MX_TIM3_Init>

	/* LCD + Start screen */
	ILI9341_Init();
 8001990:	f7ff fe50 	bl	8001634 <ILI9341_Init>
	Pacman_StartScreen();
 8001994:	f7ff fd18 	bl	80013c8 <Pacman_StartScreen>

	/* 재생: 시작 화면이 뜨자마자 2성부 인트로 */
	PLAY_PacmanIntro_Blocking();
 8001998:	f7ff ffb2 	bl	8001900 <PLAY_PacmanIntro_Blocking>

	while (1) {
		/* 아무 방향 버튼을 누르면 다음 화면 */
		wait_for_any_button_press();
 800199c:	f7ff fe22 	bl	80015e4 <wait_for_any_button_press>
		Next_Step_Screen();
 80019a0:	f7ff fdbe 	bl	8001520 <Next_Step_Screen>

		/* 다시 아무 버튼 → 스타트로 복귀 */
		wait_for_any_button_press();
 80019a4:	f7ff fe1e 	bl	80015e4 <wait_for_any_button_press>
		Pacman_StartScreen();
 80019a8:	f7ff fd0e 	bl	80013c8 <Pacman_StartScreen>
		PLAY_PacmanIntro_Blocking();
 80019ac:	f7ff ffa8 	bl	8001900 <PLAY_PacmanIntro_Blocking>
		wait_for_any_button_press();
 80019b0:	bf00      	nop
 80019b2:	e7f3      	b.n	800199c <main+0x28>

080019b4 <SystemClock_Config>:
	}
}

/* ------------------------- CubeMX init blocks ---------------------------- */
void SystemClock_Config(void) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b090      	sub	sp, #64	@ 0x40
 80019b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	2228      	movs	r2, #40	@ 0x28
 80019c0:	2100      	movs	r1, #0
 80019c2:	4618      	mov	r0, r3
 80019c4:	f002 fa88 	bl	8003ed8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019d6:	2302      	movs	r3, #2
 80019d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019da:	2301      	movs	r3, #1
 80019dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019de:	2310      	movs	r3, #16
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e2:	2302      	movs	r3, #2
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80019e6:	2300      	movs	r3, #0
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019ea:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fee9 	bl	80027cc <HAL_RCC_OscConfig>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <SystemClock_Config+0x50>
		Error_Handler();
 8001a00:	f000 fa04 	bl	8001e0c <Error_Handler>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001a04:	230f      	movs	r3, #15
 8001a06:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a08:	2302      	movs	r3, #2
 8001a0a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2; /* TIM3 x2 -> 64MHz */
 8001a10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a14:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1; /* TIM1 = 64MHz     */
 8001a16:	2300      	movs	r3, #0
 8001a18:	617b      	str	r3, [r7, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f001 f956 	bl	8002cd0 <HAL_RCC_ClockConfig>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <SystemClock_Config+0x7a>
		Error_Handler();
 8001a2a:	f000 f9ef 	bl	8001e0c <Error_Handler>
}
 8001a2e:	bf00      	nop
 8001a30:	3740      	adds	r7, #64	@ 0x40
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b096      	sub	sp, #88	@ 0x58
 8001a3c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a3e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a4c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
 8001a64:	611a      	str	r2, [r3, #16]
 8001a66:	615a      	str	r2, [r3, #20]
 8001a68:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreak = { 0 };
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	2100      	movs	r1, #0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 fa31 	bl	8003ed8 <memset>

	htim1.Instance = TIM1;
 8001a76:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a78:	4a3e      	ldr	r2, [pc, #248]	@ (8001b74 <MX_TIM1_Init+0x13c>)
 8001a7a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1; /* 64MHz/64 = 1MHz tick */
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a7e:	223f      	movs	r2, #63	@ 0x3f
 8001a80:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1; /* dummy (will change per note) */
 8001a88:	4b39      	ldr	r3, [pc, #228]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a8a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a8e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a90:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a96:	4b36      	ldr	r3, [pc, #216]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b34      	ldr	r3, [pc, #208]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aa2:	4833      	ldr	r0, [pc, #204]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001aa4:	f001 faa2 	bl	8002fec <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001aae:	f000 f9ad 	bl	8001e0c <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001abc:	4619      	mov	r1, r3
 8001abe:	482c      	ldr	r0, [pc, #176]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001ac0:	f001 fd04 	bl	80034cc <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x96>
		Error_Handler();
 8001aca:	f000 f99f 	bl	8001e0c <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ace:	4828      	ldr	r0, [pc, #160]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001ad0:	f001 fadb 	bl	800308a <HAL_TIM_PWM_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0xa6>
		Error_Handler();
 8001ada:	f000 f997 	bl	8001e0c <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ae6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001aea:	4619      	mov	r1, r3
 8001aec:	4820      	ldr	r0, [pc, #128]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001aee:	f002 f865 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xc4>
		Error_Handler();
 8001af8:	f000 f988 	bl	8001e0c <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afc:	2360      	movs	r3, #96	@ 0x60
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 500; /* 50% (will be updated) */
 8001b00:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001b04:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4814      	ldr	r0, [pc, #80]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b20:	f001 fc12 	bl	8003348 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM1_Init+0xf6>
		Error_Handler();
 8001b2a:	f000 f96f 	bl	8001e0c <Error_Handler>
	sBreak.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
	sBreak.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60bb      	str	r3, [r7, #8]
	sBreak.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
	sBreak.DeadTime = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	613b      	str	r3, [r7, #16]
	sBreak.BreakState = TIM_BREAK_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
	sBreak.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b46:	61bb      	str	r3, [r7, #24]
	sBreak.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreak) != HAL_OK)
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4807      	ldr	r0, [pc, #28]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b52:	f002 f891 	bl	8003c78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM1_Init+0x128>
		Error_Handler();
 8001b5c:	f000 f956 	bl	8001e0c <Error_Handler>
	HAL_TIM_MspPostInit(&htim1);
 8001b60:	4803      	ldr	r0, [pc, #12]	@ (8001b70 <MX_TIM1_Init+0x138>)
 8001b62:	f000 f9bd 	bl	8001ee0 <HAL_TIM_MspPostInit>
}
 8001b66:	bf00      	nop
 8001b68:	3758      	adds	r7, #88	@ 0x58
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000078 	.word	0x20000078
 8001b74:	40012c00 	.word	0x40012c00

08001b78 <MX_TIM3_Init>:

static void MX_TIM3_Init(void) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08e      	sub	sp, #56	@ 0x38
 8001b7c:	af00      	add	r7, sp, #0
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	619a      	str	r2, [r3, #24]

	htim3.Instance = TIM3;
 8001ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001baa:	4a2e      	ldr	r2, [pc, #184]	@ (8001c64 <MX_TIM3_Init+0xec>)
 8001bac:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64 - 1; /* 1MHz tick */
 8001bae:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bb0:	223f      	movs	r2, #63	@ 0x3f
 8001bb2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1; /* dummy */
 8001bba:	4b29      	ldr	r3, [pc, #164]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bc0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc2:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bce:	4824      	ldr	r0, [pc, #144]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bd0:	f001 fa0c 	bl	8002fec <HAL_TIM_Base_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x66>
		Error_Handler();
 8001bda:	f000 f917 	bl	8001e0c <Error_Handler>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001be4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481d      	ldr	r0, [pc, #116]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bec:	f001 fc6e 	bl	80034cc <HAL_TIM_ConfigClockSource>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x82>
		Error_Handler();
 8001bf6:	f000 f909 	bl	8001e0c <Error_Handler>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001bfa:	4819      	ldr	r0, [pc, #100]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001bfc:	f001 fa45 	bl	800308a <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM3_Init+0x92>
		Error_Handler();
 8001c06:	f000 f901 	bl	8001e0c <Error_Handler>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c12:	f107 0320 	add.w	r3, r7, #32
 8001c16:	4619      	mov	r1, r3
 8001c18:	4811      	ldr	r0, [pc, #68]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001c1a:	f001 ffcf 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_TIM3_Init+0xb0>
		Error_Handler();
 8001c24:	f000 f8f2 	bl	8001e0c <Error_Handler>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c28:	2360      	movs	r3, #96	@ 0x60
 8001c2a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500;
 8001c2c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c30:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	220c      	movs	r2, #12
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4807      	ldr	r0, [pc, #28]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001c42:	f001 fb81 	bl	8003348 <HAL_TIM_PWM_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0xd8>
		Error_Handler();
 8001c4c:	f000 f8de 	bl	8001e0c <Error_Handler>
	HAL_TIM_MspPostInit(&htim3);
 8001c50:	4803      	ldr	r0, [pc, #12]	@ (8001c60 <MX_TIM3_Init+0xe8>)
 8001c52:	f000 f945 	bl	8001ee0 <HAL_TIM_MspPostInit>
}
 8001c56:	bf00      	nop
 8001c58:	3738      	adds	r7, #56	@ 0x38
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200000c0 	.word	0x200000c0
 8001c64:	40000400 	.word	0x40000400

08001c68 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	@ (8001cb8 <MX_USART2_UART_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	@ (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	f002 f83b 	bl	8003d1a <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001caa:	f000 f8af 	bl	8001e0c <Error_Handler>
}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000108 	.word	0x20000108
 8001cb8:	40004400 	.word	0x40004400

08001cbc <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd0:	4b49      	ldr	r3, [pc, #292]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a48      	ldr	r2, [pc, #288]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b46      	ldr	r3, [pc, #280]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0310 	and.w	r3, r3, #16
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce8:	4b43      	ldr	r3, [pc, #268]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a42      	ldr	r2, [pc, #264]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001cee:	f043 0320 	orr.w	r3, r3, #32
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b40      	ldr	r3, [pc, #256]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0320 	and.w	r3, r3, #32
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b3d      	ldr	r3, [pc, #244]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a3c      	ldr	r2, [pc, #240]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	4b37      	ldr	r3, [pc, #220]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a36      	ldr	r2, [pc, #216]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001d1e:	f043 0308 	orr.w	r3, r3, #8
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b34      	ldr	r3, [pc, #208]	@ (8001df8 <MX_GPIO_Init+0x13c>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0308 	and.w	r3, r3, #8
 8001d2c:	603b      	str	r3, [r7, #0]
 8001d2e:	683b      	ldr	r3, [r7, #0]

	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin | LCD_D1_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2182      	movs	r1, #130	@ 0x82
 8001d34:	4831      	ldr	r0, [pc, #196]	@ (8001dfc <MX_GPIO_Init+0x140>)
 8001d36:	f000 fcf6 	bl	8002726 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f240 7133 	movw	r1, #1843	@ 0x733
 8001d40:	482f      	ldr	r0, [pc, #188]	@ (8001e00 <MX_GPIO_Init+0x144>)
 8001d42:	f000 fcf0 	bl	8002726 <HAL_GPIO_WritePin>
			LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin | LCD_D7_Pin
					| LCD_D0_Pin | LCD_D2_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB,
 8001d46:	2200      	movs	r2, #0
 8001d48:	f240 4139 	movw	r1, #1081	@ 0x439
 8001d4c:	482d      	ldr	r0, [pc, #180]	@ (8001e04 <MX_GPIO_Init+0x148>)
 8001d4e:	f000 fcea 	bl	8002726 <HAL_GPIO_WritePin>
	LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin | LCD_D4_Pin,
			GPIO_PIN_RESET);

	/* B1 for EXTI (optional) */
	GPIO_InitStruct.Pin = B1_Pin;
 8001d52:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d58:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <MX_GPIO_Init+0x14c>)
 8001d5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	4825      	ldr	r0, [pc, #148]	@ (8001dfc <MX_GPIO_Init+0x140>)
 8001d68:	f000 fb42 	bl	80023f0 <HAL_GPIO_Init>

	/* LCD outputs */
	GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_D1_Pin;
 8001d6c:	2382      	movs	r3, #130	@ 0x82
 8001d6e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	481e      	ldr	r0, [pc, #120]	@ (8001dfc <MX_GPIO_Init+0x140>)
 8001d84:	f000 fb34 	bl	80023f0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin
 8001d88:	f240 7333 	movw	r3, #1843	@ 0x733
 8001d8c:	613b      	str	r3, [r7, #16]
			| LCD_D7_Pin | LCD_D0_Pin | LCD_D2_Pin;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4619      	mov	r1, r3
 8001d94:	481a      	ldr	r0, [pc, #104]	@ (8001e00 <MX_GPIO_Init+0x144>)
 8001d96:	f000 fb2b 	bl	80023f0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin
 8001d9a:	f240 4339 	movw	r3, #1081	@ 0x439
 8001d9e:	613b      	str	r3, [r7, #16]
			| LCD_D4_Pin;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0310 	add.w	r3, r7, #16
 8001da4:	4619      	mov	r1, r3
 8001da6:	4817      	ldr	r0, [pc, #92]	@ (8001e04 <MX_GPIO_Init+0x148>)
 8001da8:	f000 fb22 	bl	80023f0 <HAL_GPIO_Init>

	/* Direction buttons: PC2/PC3, PB15/PB13 (NOPULL) */
	GPIO_InitStruct.Pin = UP_Pin | LEFT_Pin;
 8001dac:	230c      	movs	r3, #12
 8001dae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	480f      	ldr	r0, [pc, #60]	@ (8001dfc <MX_GPIO_Init+0x140>)
 8001dc0:	f000 fb16 	bl	80023f0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = RIGHT_Pin | DOWN_Pin;
 8001dc4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001dc8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480a      	ldr	r0, [pc, #40]	@ (8001e04 <MX_GPIO_Init+0x148>)
 8001dda:	f000 fb09 	bl	80023f0 <HAL_GPIO_Init>

	/* EXTI prio (B1) */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2028      	movs	r0, #40	@ 0x28
 8001de4:	f000 facd 	bl	8002382 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001de8:	2028      	movs	r0, #40	@ 0x28
 8001dea:	f000 fae6 	bl	80023ba <HAL_NVIC_EnableIRQ>
}
 8001dee:	bf00      	nop
 8001df0:	3720      	adds	r7, #32
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	10110000 	.word	0x10110000

08001e0c <Error_Handler>:

/* Error handler */
void Error_Handler(void) {
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
}
 8001e12:	bf00      	nop
	__disable_irq();
	while (1) {
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <Error_Handler+0x8>

08001e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1e:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <HAL_MspInit+0x5c>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a14      	ldr	r2, [pc, #80]	@ (8001e74 <HAL_MspInit+0x5c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <HAL_MspInit+0x5c>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <HAL_MspInit+0x5c>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e74 <HAL_MspInit+0x5c>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <HAL_MspInit+0x5c>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <HAL_MspInit+0x60>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <HAL_MspInit+0x60>)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	3714      	adds	r7, #20
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40010000 	.word	0x40010000

08001e7c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a12      	ldr	r2, [pc, #72]	@ (8001ed4 <HAL_TIM_Base_MspInit+0x58>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8001e94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e98:	6193      	str	r3, [r2, #24]
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ea6:	e010      	b.n	8001eca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0b      	ldr	r2, [pc, #44]	@ (8001edc <HAL_TIM_Base_MspInit+0x60>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d10b      	bne.n	8001eca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	61d3      	str	r3, [r2, #28]
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	40012c00 	.word	0x40012c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40000400 	.word	0x40000400

08001ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_TIM_MspPostInit+0x98>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d119      	bne.n	8001f34 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <HAL_TIM_MspPostInit+0x9c>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_TIM_MspPostInit+0x9c>)
 8001f06:	f043 0304 	orr.w	r3, r3, #4
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f7c <HAL_TIM_MspPostInit+0x9c>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2302      	movs	r3, #2
 8001f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4814      	ldr	r0, [pc, #80]	@ (8001f80 <HAL_TIM_MspPostInit+0xa0>)
 8001f2e:	f000 fa5f 	bl	80023f0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f32:	e01c      	b.n	8001f6e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <HAL_TIM_MspPostInit+0xa4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d117      	bne.n	8001f6e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <HAL_TIM_MspPostInit+0x9c>)
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	4a0e      	ldr	r2, [pc, #56]	@ (8001f7c <HAL_TIM_MspPostInit+0x9c>)
 8001f44:	f043 0308 	orr.w	r3, r3, #8
 8001f48:	6193      	str	r3, [r2, #24]
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <HAL_TIM_MspPostInit+0x9c>)
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001f56:	2302      	movs	r3, #2
 8001f58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <HAL_TIM_MspPostInit+0xa8>)
 8001f6a:	f000 fa41 	bl	80023f0 <HAL_GPIO_Init>
}
 8001f6e:	bf00      	nop
 8001f70:	3720      	adds	r7, #32
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010800 	.word	0x40010800
 8001f84:	40000400 	.word	0x40000400
 8001f88:	40010c00 	.word	0x40010c00

08001f8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b088      	sub	sp, #32
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a15      	ldr	r2, [pc, #84]	@ (8001ffc <HAL_UART_MspInit+0x70>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d123      	bne.n	8001ff4 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fac:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_UART_MspInit+0x74>)
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	4a13      	ldr	r2, [pc, #76]	@ (8002000 <HAL_UART_MspInit+0x74>)
 8001fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fb6:	61d3      	str	r3, [r2, #28]
 8001fb8:	4b11      	ldr	r3, [pc, #68]	@ (8002000 <HAL_UART_MspInit+0x74>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <HAL_UART_MspInit+0x74>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002000 <HAL_UART_MspInit+0x74>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <HAL_UART_MspInit+0x74>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001fdc:	230c      	movs	r3, #12
 8001fde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 0310 	add.w	r3, r7, #16
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	@ (8002004 <HAL_UART_MspInit+0x78>)
 8001ff0:	f000 f9fe 	bl	80023f0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40004400 	.word	0x40004400
 8002000:	40021000 	.word	0x40021000
 8002004:	40010800 	.word	0x40010800

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	bc80      	pop	{r7}
 8002052:	4770      	bx	lr

08002054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002058:	f000 f87c 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002064:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002068:	f000 fb8e 	bl	8002788 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <Reset_Handler>:
 800207c:	f7ff fff8 	bl	8002070 <SystemInit>
 8002080:	480b      	ldr	r0, [pc, #44]	@ (80020b0 <LoopFillZerobss+0xe>)
 8002082:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <LoopFillZerobss+0x12>)
 8002084:	4a0c      	ldr	r2, [pc, #48]	@ (80020b8 <LoopFillZerobss+0x16>)
 8002086:	2300      	movs	r3, #0
 8002088:	e002      	b.n	8002090 <LoopCopyDataInit>

0800208a <CopyDataInit>:
 800208a:	58d4      	ldr	r4, [r2, r3]
 800208c:	50c4      	str	r4, [r0, r3]
 800208e:	3304      	adds	r3, #4

08002090 <LoopCopyDataInit>:
 8002090:	18c4      	adds	r4, r0, r3
 8002092:	428c      	cmp	r4, r1
 8002094:	d3f9      	bcc.n	800208a <CopyDataInit>
 8002096:	4a09      	ldr	r2, [pc, #36]	@ (80020bc <LoopFillZerobss+0x1a>)
 8002098:	4c09      	ldr	r4, [pc, #36]	@ (80020c0 <LoopFillZerobss+0x1e>)
 800209a:	2300      	movs	r3, #0
 800209c:	e001      	b.n	80020a2 <LoopFillZerobss>

0800209e <FillZerobss>:
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	3204      	adds	r2, #4

080020a2 <LoopFillZerobss>:
 80020a2:	42a2      	cmp	r2, r4
 80020a4:	d3fb      	bcc.n	800209e <FillZerobss>
 80020a6:	f001 ff25 	bl	8003ef4 <__libc_init_array>
 80020aa:	f7ff fc63 	bl	8001974 <main>
 80020ae:	4770      	bx	lr
 80020b0:	20000000 	.word	0x20000000
 80020b4:	2000005c 	.word	0x2000005c
 80020b8:	08005120 	.word	0x08005120
 80020bc:	2000005c 	.word	0x2000005c
 80020c0:	2000028c 	.word	0x2000028c

080020c4 <ADC1_2_IRQHandler>:
 80020c4:	e7fe      	b.n	80020c4 <ADC1_2_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	@ (80020f0 <HAL_Init+0x28>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	@ (80020f0 <HAL_Init+0x28>)
 80020d2:	f043 0310 	orr.w	r3, r3, #16
 80020d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 f947 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fe98 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f95f 	bl	80023d6 <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 f927 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	@ (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000000 	.word	0x20000000
 800214c:	20000008 	.word	0x20000008
 8002150:	20000004 	.word	0x20000004

08002154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <HAL_IncTick+0x1c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_IncTick+0x20>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a03      	ldr	r2, [pc, #12]	@ (8002174 <HAL_IncTick+0x20>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000008 	.word	0x20000008
 8002174:	20000150 	.word	0x20000150

08002178 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return uwTick;
 800217c:	4b02      	ldr	r3, [pc, #8]	@ (8002188 <HAL_GetTick+0x10>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	20000150 	.word	0x20000150

0800218c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002194:	f7ff fff0 	bl	8002178 <HAL_GetTick>
 8002198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d005      	beq.n	80021b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021a6:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <HAL_Delay+0x44>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	4413      	add	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021b2:	bf00      	nop
 80021b4:	f7ff ffe0 	bl	8002178 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d8f7      	bhi.n	80021b4 <HAL_Delay+0x28>
  {
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000008 	.word	0x20000008

080021d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f0:	4013      	ands	r3, r2
 80021f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002206:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <__NVIC_SetPriorityGrouping+0x44>)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002220:	4b04      	ldr	r3, [pc, #16]	@ (8002234 <__NVIC_GetPriorityGrouping+0x18>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	f003 0307 	and.w	r3, r3, #7
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	2b00      	cmp	r3, #0
 8002248:	db0b      	blt.n	8002262 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4906      	ldr	r1, [pc, #24]	@ (800226c <__NVIC_EnableIRQ+0x34>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	2001      	movs	r0, #1
 800225a:	fa00 f202 	lsl.w	r2, r0, r2
 800225e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100

08002270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	@ 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	f1c3 0307 	rsb	r3, r3, #7
 80022de:	2b04      	cmp	r3, #4
 80022e0:	bf28      	it	cs
 80022e2:	2304      	movcs	r3, #4
 80022e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3304      	adds	r3, #4
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d902      	bls.n	80022f4 <NVIC_EncodePriority+0x30>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3b03      	subs	r3, #3
 80022f2:	e000      	b.n	80022f6 <NVIC_EncodePriority+0x32>
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f8:	f04f 32ff 	mov.w	r2, #4294967295
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43da      	mvns	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	401a      	ands	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800230c:	f04f 31ff 	mov.w	r1, #4294967295
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43d9      	mvns	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	4313      	orrs	r3, r2
         );
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	@ 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	@ (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff90 	bl	8002270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff2d 	bl	80021d4 <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff42 	bl	800221c <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff90 	bl	80022c4 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5f 	bl	8002270 <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff35 	bl	8002238 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa2 	bl	8002328 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b08b      	sub	sp, #44	@ 0x2c
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fa:	2300      	movs	r3, #0
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002402:	e169      	b.n	80026d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002404:	2201      	movs	r2, #1
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	69fa      	ldr	r2, [r7, #28]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8158 	bne.w	80026d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	4a9a      	ldr	r2, [pc, #616]	@ (8002690 <HAL_GPIO_Init+0x2a0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d05e      	beq.n	80024ea <HAL_GPIO_Init+0xfa>
 800242c:	4a98      	ldr	r2, [pc, #608]	@ (8002690 <HAL_GPIO_Init+0x2a0>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d875      	bhi.n	800251e <HAL_GPIO_Init+0x12e>
 8002432:	4a98      	ldr	r2, [pc, #608]	@ (8002694 <HAL_GPIO_Init+0x2a4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d058      	beq.n	80024ea <HAL_GPIO_Init+0xfa>
 8002438:	4a96      	ldr	r2, [pc, #600]	@ (8002694 <HAL_GPIO_Init+0x2a4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d86f      	bhi.n	800251e <HAL_GPIO_Init+0x12e>
 800243e:	4a96      	ldr	r2, [pc, #600]	@ (8002698 <HAL_GPIO_Init+0x2a8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d052      	beq.n	80024ea <HAL_GPIO_Init+0xfa>
 8002444:	4a94      	ldr	r2, [pc, #592]	@ (8002698 <HAL_GPIO_Init+0x2a8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d869      	bhi.n	800251e <HAL_GPIO_Init+0x12e>
 800244a:	4a94      	ldr	r2, [pc, #592]	@ (800269c <HAL_GPIO_Init+0x2ac>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d04c      	beq.n	80024ea <HAL_GPIO_Init+0xfa>
 8002450:	4a92      	ldr	r2, [pc, #584]	@ (800269c <HAL_GPIO_Init+0x2ac>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d863      	bhi.n	800251e <HAL_GPIO_Init+0x12e>
 8002456:	4a92      	ldr	r2, [pc, #584]	@ (80026a0 <HAL_GPIO_Init+0x2b0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d046      	beq.n	80024ea <HAL_GPIO_Init+0xfa>
 800245c:	4a90      	ldr	r2, [pc, #576]	@ (80026a0 <HAL_GPIO_Init+0x2b0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d85d      	bhi.n	800251e <HAL_GPIO_Init+0x12e>
 8002462:	2b12      	cmp	r3, #18
 8002464:	d82a      	bhi.n	80024bc <HAL_GPIO_Init+0xcc>
 8002466:	2b12      	cmp	r3, #18
 8002468:	d859      	bhi.n	800251e <HAL_GPIO_Init+0x12e>
 800246a:	a201      	add	r2, pc, #4	@ (adr r2, 8002470 <HAL_GPIO_Init+0x80>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	080024eb 	.word	0x080024eb
 8002474:	080024c5 	.word	0x080024c5
 8002478:	080024d7 	.word	0x080024d7
 800247c:	08002519 	.word	0x08002519
 8002480:	0800251f 	.word	0x0800251f
 8002484:	0800251f 	.word	0x0800251f
 8002488:	0800251f 	.word	0x0800251f
 800248c:	0800251f 	.word	0x0800251f
 8002490:	0800251f 	.word	0x0800251f
 8002494:	0800251f 	.word	0x0800251f
 8002498:	0800251f 	.word	0x0800251f
 800249c:	0800251f 	.word	0x0800251f
 80024a0:	0800251f 	.word	0x0800251f
 80024a4:	0800251f 	.word	0x0800251f
 80024a8:	0800251f 	.word	0x0800251f
 80024ac:	0800251f 	.word	0x0800251f
 80024b0:	0800251f 	.word	0x0800251f
 80024b4:	080024cd 	.word	0x080024cd
 80024b8:	080024e1 	.word	0x080024e1
 80024bc:	4a79      	ldr	r2, [pc, #484]	@ (80026a4 <HAL_GPIO_Init+0x2b4>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024c2:	e02c      	b.n	800251e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	623b      	str	r3, [r7, #32]
          break;
 80024ca:	e029      	b.n	8002520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	3304      	adds	r3, #4
 80024d2:	623b      	str	r3, [r7, #32]
          break;
 80024d4:	e024      	b.n	8002520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	3308      	adds	r3, #8
 80024dc:	623b      	str	r3, [r7, #32]
          break;
 80024de:	e01f      	b.n	8002520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	330c      	adds	r3, #12
 80024e6:	623b      	str	r3, [r7, #32]
          break;
 80024e8:	e01a      	b.n	8002520 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d102      	bne.n	80024f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024f2:	2304      	movs	r3, #4
 80024f4:	623b      	str	r3, [r7, #32]
          break;
 80024f6:	e013      	b.n	8002520 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d105      	bne.n	800250c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002500:	2308      	movs	r3, #8
 8002502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	69fa      	ldr	r2, [r7, #28]
 8002508:	611a      	str	r2, [r3, #16]
          break;
 800250a:	e009      	b.n	8002520 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800250c:	2308      	movs	r3, #8
 800250e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	615a      	str	r2, [r3, #20]
          break;
 8002516:	e003      	b.n	8002520 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
          break;
 800251c:	e000      	b.n	8002520 <HAL_GPIO_Init+0x130>
          break;
 800251e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	2bff      	cmp	r3, #255	@ 0xff
 8002524:	d801      	bhi.n	800252a <HAL_GPIO_Init+0x13a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	e001      	b.n	800252e <HAL_GPIO_Init+0x13e>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3304      	adds	r3, #4
 800252e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2bff      	cmp	r3, #255	@ 0xff
 8002534:	d802      	bhi.n	800253c <HAL_GPIO_Init+0x14c>
 8002536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	e002      	b.n	8002542 <HAL_GPIO_Init+0x152>
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	3b08      	subs	r3, #8
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	210f      	movs	r1, #15
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	6a39      	ldr	r1, [r7, #32]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	fa01 f303 	lsl.w	r3, r1, r3
 800255c:	431a      	orrs	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 80b1 	beq.w	80026d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002570:	4b4d      	ldr	r3, [pc, #308]	@ (80026a8 <HAL_GPIO_Init+0x2b8>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	4a4c      	ldr	r2, [pc, #304]	@ (80026a8 <HAL_GPIO_Init+0x2b8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6193      	str	r3, [r2, #24]
 800257c:	4b4a      	ldr	r3, [pc, #296]	@ (80026a8 <HAL_GPIO_Init+0x2b8>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002588:	4a48      	ldr	r2, [pc, #288]	@ (80026ac <HAL_GPIO_Init+0x2bc>)
 800258a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002594:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	220f      	movs	r2, #15
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	43db      	mvns	r3, r3
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a40      	ldr	r2, [pc, #256]	@ (80026b0 <HAL_GPIO_Init+0x2c0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_GPIO_Init+0x1ec>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a3f      	ldr	r2, [pc, #252]	@ (80026b4 <HAL_GPIO_Init+0x2c4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d00d      	beq.n	80025d8 <HAL_GPIO_Init+0x1e8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a3e      	ldr	r2, [pc, #248]	@ (80026b8 <HAL_GPIO_Init+0x2c8>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d007      	beq.n	80025d4 <HAL_GPIO_Init+0x1e4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a3d      	ldr	r2, [pc, #244]	@ (80026bc <HAL_GPIO_Init+0x2cc>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_GPIO_Init+0x1e0>
 80025cc:	2303      	movs	r3, #3
 80025ce:	e006      	b.n	80025de <HAL_GPIO_Init+0x1ee>
 80025d0:	2304      	movs	r3, #4
 80025d2:	e004      	b.n	80025de <HAL_GPIO_Init+0x1ee>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e002      	b.n	80025de <HAL_GPIO_Init+0x1ee>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <HAL_GPIO_Init+0x1ee>
 80025dc:	2300      	movs	r3, #0
 80025de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e0:	f002 0203 	and.w	r2, r2, #3
 80025e4:	0092      	lsls	r2, r2, #2
 80025e6:	4093      	lsls	r3, r2
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025ee:	492f      	ldr	r1, [pc, #188]	@ (80026ac <HAL_GPIO_Init+0x2bc>)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d006      	beq.n	8002616 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002608:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	492c      	ldr	r1, [pc, #176]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	4313      	orrs	r3, r2
 8002612:	608b      	str	r3, [r1, #8]
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002616:	4b2a      	ldr	r3, [pc, #168]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	43db      	mvns	r3, r3
 800261e:	4928      	ldr	r1, [pc, #160]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002620:	4013      	ands	r3, r2
 8002622:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d006      	beq.n	800263e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002630:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4922      	ldr	r1, [pc, #136]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
 800263c:	e006      	b.n	800264c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800263e:	4b20      	ldr	r3, [pc, #128]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	43db      	mvns	r3, r3
 8002646:	491e      	ldr	r1, [pc, #120]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002648:	4013      	ands	r3, r2
 800264a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	4918      	ldr	r1, [pc, #96]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
 8002664:	e006      	b.n	8002674 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002666:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	43db      	mvns	r3, r3
 800266e:	4914      	ldr	r1, [pc, #80]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002670:	4013      	ands	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d021      	beq.n	80026c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002680:	4b0f      	ldr	r3, [pc, #60]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	490e      	ldr	r1, [pc, #56]	@ (80026c0 <HAL_GPIO_Init+0x2d0>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e021      	b.n	80026d2 <HAL_GPIO_Init+0x2e2>
 800268e:	bf00      	nop
 8002690:	10320000 	.word	0x10320000
 8002694:	10310000 	.word	0x10310000
 8002698:	10220000 	.word	0x10220000
 800269c:	10210000 	.word	0x10210000
 80026a0:	10120000 	.word	0x10120000
 80026a4:	10110000 	.word	0x10110000
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010000 	.word	0x40010000
 80026b0:	40010800 	.word	0x40010800
 80026b4:	40010c00 	.word	0x40010c00
 80026b8:	40011000 	.word	0x40011000
 80026bc:	40011400 	.word	0x40011400
 80026c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4909      	ldr	r1, [pc, #36]	@ (80026f4 <HAL_GPIO_Init+0x304>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	3301      	adds	r3, #1
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	fa22 f303 	lsr.w	r3, r2, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f47f ae8e 	bne.w	8002404 <HAL_GPIO_Init+0x14>
  }
}
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	372c      	adds	r7, #44	@ 0x2c
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr
 80026f4:	40010400 	.word	0x40010400

080026f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689a      	ldr	r2, [r3, #8]
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	4013      	ands	r3, r2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e001      	b.n	800271a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	807b      	strh	r3, [r7, #2]
 8002732:	4613      	mov	r3, r2
 8002734:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002736:	787b      	ldrb	r3, [r7, #1]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800273c:	887a      	ldrh	r2, [r7, #2]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002742:	e003      	b.n	800274c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	041a      	lsls	r2, r3, #16
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr

08002756 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002756:	b480      	push	{r7}
 8002758:	b085      	sub	sp, #20
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002768:	887a      	ldrh	r2, [r7, #2]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	041a      	lsls	r2, r3, #16
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43d9      	mvns	r1, r3
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	400b      	ands	r3, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]
}
 800277e:	bf00      	nop
 8002780:	3714      	adds	r7, #20
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002792:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	4013      	ands	r3, r2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	88fb      	ldrh	r3, [r7, #6]
 80027a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027a4:	88fb      	ldrh	r3, [r7, #6]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f806 	bl	80027b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40010400 	.word	0x40010400

080027b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr

080027cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e272      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f000 8087 	beq.w	80028fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027ec:	4b92      	ldr	r3, [pc, #584]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d00c      	beq.n	8002812 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027f8:	4b8f      	ldr	r3, [pc, #572]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 030c 	and.w	r3, r3, #12
 8002800:	2b08      	cmp	r3, #8
 8002802:	d112      	bne.n	800282a <HAL_RCC_OscConfig+0x5e>
 8002804:	4b8c      	ldr	r3, [pc, #560]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800280c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002810:	d10b      	bne.n	800282a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002812:	4b89      	ldr	r3, [pc, #548]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d06c      	beq.n	80028f8 <HAL_RCC_OscConfig+0x12c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d168      	bne.n	80028f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e24c      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x76>
 8002834:	4b80      	ldr	r3, [pc, #512]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a7f      	ldr	r2, [pc, #508]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800283a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	e02e      	b.n	80028a0 <HAL_RCC_OscConfig+0xd4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x98>
 800284a:	4b7b      	ldr	r3, [pc, #492]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a7a      	ldr	r2, [pc, #488]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b78      	ldr	r3, [pc, #480]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a77      	ldr	r2, [pc, #476]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800285c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	e01d      	b.n	80028a0 <HAL_RCC_OscConfig+0xd4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_OscConfig+0xbc>
 800286e:	4b72      	ldr	r3, [pc, #456]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a71      	ldr	r2, [pc, #452]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e00b      	b.n	80028a0 <HAL_RCC_OscConfig+0xd4>
 8002888:	4b6b      	ldr	r3, [pc, #428]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b68      	ldr	r3, [pc, #416]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a67      	ldr	r2, [pc, #412]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800289e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff fc66 	bl	8002178 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b0:	f7ff fc62 	bl	8002178 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b64      	cmp	r3, #100	@ 0x64
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e200      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0xe4>
 80028ce:	e014      	b.n	80028fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff fc52 	bl	8002178 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d8:	f7ff fc4e 	bl	8002178 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b64      	cmp	r3, #100	@ 0x64
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e1ec      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ea:	4b53      	ldr	r3, [pc, #332]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x10c>
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002906:	4b4c      	ldr	r3, [pc, #304]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 030c 	and.w	r3, r3, #12
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00b      	beq.n	800292a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002912:	4b49      	ldr	r3, [pc, #292]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	2b08      	cmp	r3, #8
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x18c>
 800291e:	4b46      	ldr	r3, [pc, #280]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d116      	bne.n	8002958 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	4b43      	ldr	r3, [pc, #268]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d005      	beq.n	8002942 <HAL_RCC_OscConfig+0x176>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d001      	beq.n	8002942 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e1c0      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002942:	4b3d      	ldr	r3, [pc, #244]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4939      	ldr	r1, [pc, #228]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002952:	4313      	orrs	r3, r2
 8002954:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	e03a      	b.n	80029ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d020      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002960:	4b36      	ldr	r3, [pc, #216]	@ (8002a3c <HAL_RCC_OscConfig+0x270>)
 8002962:	2201      	movs	r2, #1
 8002964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002966:	f7ff fc07 	bl	8002178 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800296e:	f7ff fc03 	bl	8002178 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e1a1      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002980:	4b2d      	ldr	r3, [pc, #180]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4927      	ldr	r1, [pc, #156]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 800299c:	4313      	orrs	r3, r2
 800299e:	600b      	str	r3, [r1, #0]
 80029a0:	e015      	b.n	80029ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a2:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <HAL_RCC_OscConfig+0x270>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7ff fbe6 	bl	8002178 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b0:	f7ff fbe2 	bl	8002178 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e180      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d03a      	beq.n	8002a50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d019      	beq.n	8002a16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e2:	4b17      	ldr	r3, [pc, #92]	@ (8002a40 <HAL_RCC_OscConfig+0x274>)
 80029e4:	2201      	movs	r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e8:	f7ff fbc6 	bl	8002178 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f0:	f7ff fbc2 	bl	8002178 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e160      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a02:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <HAL_RCC_OscConfig+0x26c>)
 8002a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f000 face 	bl	8002fb0 <RCC_Delay>
 8002a14:	e01c      	b.n	8002a50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a16:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <HAL_RCC_OscConfig+0x274>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7ff fbac 	bl	8002178 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a22:	e00f      	b.n	8002a44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a24:	f7ff fba8 	bl	8002178 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d908      	bls.n	8002a44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e146      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	42420000 	.word	0x42420000
 8002a40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b92      	ldr	r3, [pc, #584]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1e9      	bne.n	8002a24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 80a6 	beq.w	8002baa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b8b      	ldr	r3, [pc, #556]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10d      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	4b88      	ldr	r3, [pc, #544]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	69db      	ldr	r3, [r3, #28]
 8002a72:	4a87      	ldr	r2, [pc, #540]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	61d3      	str	r3, [r2, #28]
 8002a7a:	4b85      	ldr	r3, [pc, #532]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a86:	2301      	movs	r3, #1
 8002a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8a:	4b82      	ldr	r3, [pc, #520]	@ (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d118      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a96:	4b7f      	ldr	r3, [pc, #508]	@ (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa2:	f7ff fb69 	bl	8002178 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7ff fb65 	bl	8002178 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	@ 0x64
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e103      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	4b75      	ldr	r3, [pc, #468]	@ (8002c94 <HAL_RCC_OscConfig+0x4c8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x312>
 8002ad0:	4b6f      	ldr	r3, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a6e      	ldr	r2, [pc, #440]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6213      	str	r3, [r2, #32]
 8002adc:	e02d      	b.n	8002b3a <HAL_RCC_OscConfig+0x36e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x334>
 8002ae6:	4b6a      	ldr	r3, [pc, #424]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	4a69      	ldr	r2, [pc, #420]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002aec:	f023 0301 	bic.w	r3, r3, #1
 8002af0:	6213      	str	r3, [r2, #32]
 8002af2:	4b67      	ldr	r3, [pc, #412]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	4a66      	ldr	r2, [pc, #408]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002af8:	f023 0304 	bic.w	r3, r3, #4
 8002afc:	6213      	str	r3, [r2, #32]
 8002afe:	e01c      	b.n	8002b3a <HAL_RCC_OscConfig+0x36e>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d10c      	bne.n	8002b22 <HAL_RCC_OscConfig+0x356>
 8002b08:	4b61      	ldr	r3, [pc, #388]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	4a60      	ldr	r2, [pc, #384]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b0e:	f043 0304 	orr.w	r3, r3, #4
 8002b12:	6213      	str	r3, [r2, #32]
 8002b14:	4b5e      	ldr	r3, [pc, #376]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	4a5d      	ldr	r2, [pc, #372]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6213      	str	r3, [r2, #32]
 8002b20:	e00b      	b.n	8002b3a <HAL_RCC_OscConfig+0x36e>
 8002b22:	4b5b      	ldr	r3, [pc, #364]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	6a1b      	ldr	r3, [r3, #32]
 8002b26:	4a5a      	ldr	r2, [pc, #360]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f023 0301 	bic.w	r3, r3, #1
 8002b2c:	6213      	str	r3, [r2, #32]
 8002b2e:	4b58      	ldr	r3, [pc, #352]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a57      	ldr	r2, [pc, #348]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0304 	bic.w	r3, r3, #4
 8002b38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d015      	beq.n	8002b6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7ff fb19 	bl	8002178 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b48:	e00a      	b.n	8002b60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7ff fb15 	bl	8002178 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e0b1      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b60:	4b4b      	ldr	r3, [pc, #300]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0ee      	beq.n	8002b4a <HAL_RCC_OscConfig+0x37e>
 8002b6c:	e014      	b.n	8002b98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fb03 	bl	8002178 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7ff faff 	bl	8002178 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e09b      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8c:	4b40      	ldr	r3, [pc, #256]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1ee      	bne.n	8002b76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b98:	7dfb      	ldrb	r3, [r7, #23]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d105      	bne.n	8002baa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	69db      	ldr	r3, [r3, #28]
 8002ba2:	4a3b      	ldr	r2, [pc, #236]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002ba4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8087 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb4:	4b36      	ldr	r3, [pc, #216]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d061      	beq.n	8002c84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	2b02      	cmp	r3, #2
 8002bc6:	d146      	bne.n	8002c56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b33      	ldr	r3, [pc, #204]	@ (8002c98 <HAL_RCC_OscConfig+0x4cc>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7ff fad3 	bl	8002178 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7ff facf 	bl	8002178 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e06d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002be8:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bfc:	d108      	bne.n	8002c10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4921      	ldr	r1, [pc, #132]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c10:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a19      	ldr	r1, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	430b      	orrs	r3, r1
 8002c22:	491b      	ldr	r1, [pc, #108]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c28:	4b1b      	ldr	r3, [pc, #108]	@ (8002c98 <HAL_RCC_OscConfig+0x4cc>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7ff faa3 	bl	8002178 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c36:	f7ff fa9f 	bl	8002178 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e03d      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c48:	4b11      	ldr	r3, [pc, #68]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d0f0      	beq.n	8002c36 <HAL_RCC_OscConfig+0x46a>
 8002c54:	e035      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <HAL_RCC_OscConfig+0x4cc>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5c:	f7ff fa8c 	bl	8002178 <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c64:	f7ff fa88 	bl	8002178 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e026      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <HAL_RCC_OscConfig+0x4c4>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x498>
 8002c82:	e01e      	b.n	8002cc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e019      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
 8002c98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_OscConfig+0x500>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d106      	bne.n	8002cbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d0      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b67      	ldr	r3, [pc, #412]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	4965      	ldr	r1, [pc, #404]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b63      	ldr	r3, [pc, #396]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b8      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d2c:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d44:	4b53      	ldr	r3, [pc, #332]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b50      	ldr	r3, [pc, #320]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	494d      	ldr	r1, [pc, #308]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d040      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b47      	ldr	r3, [pc, #284]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e07f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b41      	ldr	r3, [pc, #260]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e073      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b39      	ldr	r3, [pc, #228]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4936      	ldr	r1, [pc, #216]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7ff f9da 	bl	8002178 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7ff f9d6 	bl	8002178 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e053      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2d      	ldr	r3, [pc, #180]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d210      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b24      	ldr	r3, [pc, #144]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	4922      	ldr	r1, [pc, #136]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b20      	ldr	r3, [pc, #128]	@ (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e032      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4916      	ldr	r1, [pc, #88]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4a:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490e      	ldr	r1, [pc, #56]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5e:	f000 f821 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0b      	ldr	r3, [pc, #44]	@ (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	490a      	ldr	r1, [pc, #40]	@ (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	5ccb      	ldrb	r3, [r1, r3]
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a09      	ldr	r2, [pc, #36]	@ (8002e9c <HAL_RCC_ClockConfig+0x1cc>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f938 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08004d14 	.word	0x08004d14
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d002      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x30>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_GetSysClockFreq+0x36>
 8002ed2:	e027      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ed4:	4b19      	ldr	r3, [pc, #100]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ed6:	613b      	str	r3, [r7, #16]
      break;
 8002ed8:	e027      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	0c9b      	lsrs	r3, r3, #18
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	4a17      	ldr	r2, [pc, #92]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ee4:	5cd3      	ldrb	r3, [r2, r3]
 8002ee6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d010      	beq.n	8002f14 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	0c5b      	lsrs	r3, r3, #17
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	4a11      	ldr	r2, [pc, #68]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a0d      	ldr	r2, [pc, #52]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f06:	fb03 f202 	mul.w	r2, r3, r2
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e004      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f18:	fb02 f303 	mul.w	r3, r2, r3
 8002f1c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	613b      	str	r3, [r7, #16]
      break;
 8002f22:	e002      	b.n	8002f2a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_RCC_GetSysClockFreq+0x98>)
 8002f26:	613b      	str	r3, [r7, #16]
      break;
 8002f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f2a:	693b      	ldr	r3, [r7, #16]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	007a1200 	.word	0x007a1200
 8002f40:	08004d2c 	.word	0x08004d2c
 8002f44:	08004d3c 	.word	0x08004d3c
 8002f48:	003d0900 	.word	0x003d0900

08002f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b02      	ldr	r3, [pc, #8]	@ (8002f5c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	20000000 	.word	0x20000000

08002f60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f64:	f7ff fff2 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b05      	ldr	r3, [pc, #20]	@ (8002f80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	4903      	ldr	r1, [pc, #12]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000
 8002f84:	08004d24 	.word	0x08004d24

08002f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f8c:	f7ff ffde 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f90:	4602      	mov	r2, r0
 8002f92:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0adb      	lsrs	r3, r3, #11
 8002f98:	f003 0307 	and.w	r3, r3, #7
 8002f9c:	4903      	ldr	r1, [pc, #12]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f9e:	5ccb      	ldrb	r3, [r1, r3]
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	08004d24 	.word	0x08004d24

08002fb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <RCC_Delay+0x34>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <RCC_Delay+0x38>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	0a5b      	lsrs	r3, r3, #9
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fcc:	bf00      	nop
  }
  while (Delay --);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1e5a      	subs	r2, r3, #1
 8002fd2:	60fa      	str	r2, [r7, #12]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f9      	bne.n	8002fcc <RCC_Delay+0x1c>
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr
 8002fe4:	20000000 	.word	0x20000000
 8002fe8:	10624dd3 	.word	0x10624dd3

08002fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e041      	b.n	8003082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe ff32 	bl	8001e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3304      	adds	r3, #4
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f000 fb16 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e041      	b.n	8003120 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d106      	bne.n	80030b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f839 	bl	8003128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	4619      	mov	r1, r3
 80030c8:	4610      	mov	r0, r2
 80030ca:	f000 fac7 	bl	800365c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
	...

0800313c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_TIM_PWM_Start+0x24>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b01      	cmp	r3, #1
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	e022      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b04      	cmp	r3, #4
 8003164:	d109      	bne.n	800317a <HAL_TIM_PWM_Start+0x3e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	bf14      	ite	ne
 8003172:	2301      	movne	r3, #1
 8003174:	2300      	moveq	r3, #0
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e015      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b08      	cmp	r3, #8
 800317e:	d109      	bne.n	8003194 <HAL_TIM_PWM_Start+0x58>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b01      	cmp	r3, #1
 800318a:	bf14      	ite	ne
 800318c:	2301      	movne	r3, #1
 800318e:	2300      	moveq	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e008      	b.n	80031a6 <HAL_TIM_PWM_Start+0x6a>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b01      	cmp	r3, #1
 800319e:	bf14      	ite	ne
 80031a0:	2301      	movne	r3, #1
 80031a2:	2300      	moveq	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e05e      	b.n	800326c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_TIM_PWM_Start+0x82>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	d104      	bne.n	80031ce <HAL_TIM_PWM_Start+0x92>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031cc:	e00b      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d104      	bne.n	80031de <HAL_TIM_PWM_Start+0xa2>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031dc:	e003      	b.n	80031e6 <HAL_TIM_PWM_Start+0xaa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2202      	movs	r2, #2
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2201      	movs	r2, #1
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 fcc0 	bl	8003b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003274 <HAL_TIM_PWM_Start+0x138>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d107      	bne.n	800320e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_TIM_PWM_Start+0x138>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00e      	beq.n	8003236 <HAL_TIM_PWM_Start+0xfa>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003220:	d009      	beq.n	8003236 <HAL_TIM_PWM_Start+0xfa>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a14      	ldr	r2, [pc, #80]	@ (8003278 <HAL_TIM_PWM_Start+0x13c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d004      	beq.n	8003236 <HAL_TIM_PWM_Start+0xfa>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a12      	ldr	r2, [pc, #72]	@ (800327c <HAL_TIM_PWM_Start+0x140>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d111      	bne.n	800325a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b06      	cmp	r3, #6
 8003246:	d010      	beq.n	800326a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003258:	e007      	b.n	800326a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f042 0201 	orr.w	r2, r2, #1
 8003268:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40012c00 	.word	0x40012c00
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800

08003280 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2200      	movs	r2, #0
 8003290:	6839      	ldr	r1, [r7, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fc6e 	bl	8003b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a29      	ldr	r2, [pc, #164]	@ (8003344 <HAL_TIM_PWM_Stop+0xc4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d117      	bne.n	80032d2 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_TIM_PWM_Stop+0x52>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d107      	bne.n	80032d2 <HAL_TIM_PWM_Stop+0x52>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032d0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80032dc:	4013      	ands	r3, r2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10f      	bne.n	8003302 <HAL_TIM_PWM_Stop+0x82>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d107      	bne.n	8003302 <HAL_TIM_PWM_Stop+0x82>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0201 	bic.w	r2, r2, #1
 8003300:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d104      	bne.n	8003312 <HAL_TIM_PWM_Stop+0x92>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003310:	e013      	b.n	800333a <HAL_TIM_PWM_Stop+0xba>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b04      	cmp	r3, #4
 8003316:	d104      	bne.n	8003322 <HAL_TIM_PWM_Stop+0xa2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003320:	e00b      	b.n	800333a <HAL_TIM_PWM_Stop+0xba>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b08      	cmp	r3, #8
 8003326:	d104      	bne.n	8003332 <HAL_TIM_PWM_Stop+0xb2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003330:	e003      	b.n	800333a <HAL_TIM_PWM_Stop+0xba>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	40012c00 	.word	0x40012c00

08003348 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003354:	2300      	movs	r3, #0
 8003356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003362:	2302      	movs	r3, #2
 8003364:	e0ae      	b.n	80034c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	f200 809f 	bhi.w	80034b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003376:	a201      	add	r2, pc, #4	@ (adr r2, 800337c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	080033b1 	.word	0x080033b1
 8003380:	080034b5 	.word	0x080034b5
 8003384:	080034b5 	.word	0x080034b5
 8003388:	080034b5 	.word	0x080034b5
 800338c:	080033f1 	.word	0x080033f1
 8003390:	080034b5 	.word	0x080034b5
 8003394:	080034b5 	.word	0x080034b5
 8003398:	080034b5 	.word	0x080034b5
 800339c:	08003433 	.word	0x08003433
 80033a0:	080034b5 	.word	0x080034b5
 80033a4:	080034b5 	.word	0x080034b5
 80033a8:	080034b5 	.word	0x080034b5
 80033ac:	08003473 	.word	0x08003473
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f9be 	bl	8003738 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0208 	orr.w	r2, r2, #8
 80033ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6999      	ldr	r1, [r3, #24]
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	619a      	str	r2, [r3, #24]
      break;
 80033ee:	e064      	b.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68b9      	ldr	r1, [r7, #8]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fa04 	bl	8003804 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800340a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800341a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6999      	ldr	r1, [r3, #24]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	021a      	lsls	r2, r3, #8
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	619a      	str	r2, [r3, #24]
      break;
 8003430:	e043      	b.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68b9      	ldr	r1, [r7, #8]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fa4d 	bl	80038d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f042 0208 	orr.w	r2, r2, #8
 800344c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0204 	bic.w	r2, r2, #4
 800345c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69d9      	ldr	r1, [r3, #28]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	61da      	str	r2, [r3, #28]
      break;
 8003470:	e023      	b.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68b9      	ldr	r1, [r7, #8]
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fa97 	bl	80039ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800348c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69da      	ldr	r2, [r3, #28]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800349c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	69d9      	ldr	r1, [r3, #28]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	021a      	lsls	r2, r3, #8
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	61da      	str	r2, [r3, #28]
      break;
 80034b2:	e002      	b.n	80034ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	75fb      	strb	r3, [r7, #23]
      break;
 80034b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_TIM_ConfigClockSource+0x1c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e0b4      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x186>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800350e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003520:	d03e      	beq.n	80035a0 <HAL_TIM_ConfigClockSource+0xd4>
 8003522:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003526:	f200 8087 	bhi.w	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352e:	f000 8086 	beq.w	800363e <HAL_TIM_ConfigClockSource+0x172>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003536:	d87f      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b70      	cmp	r3, #112	@ 0x70
 800353a:	d01a      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0xa6>
 800353c:	2b70      	cmp	r3, #112	@ 0x70
 800353e:	d87b      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b60      	cmp	r3, #96	@ 0x60
 8003542:	d050      	beq.n	80035e6 <HAL_TIM_ConfigClockSource+0x11a>
 8003544:	2b60      	cmp	r3, #96	@ 0x60
 8003546:	d877      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b50      	cmp	r3, #80	@ 0x50
 800354a:	d03c      	beq.n	80035c6 <HAL_TIM_ConfigClockSource+0xfa>
 800354c:	2b50      	cmp	r3, #80	@ 0x50
 800354e:	d873      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b40      	cmp	r3, #64	@ 0x40
 8003552:	d058      	beq.n	8003606 <HAL_TIM_ConfigClockSource+0x13a>
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d86f      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b30      	cmp	r3, #48	@ 0x30
 800355a:	d064      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x15a>
 800355c:	2b30      	cmp	r3, #48	@ 0x30
 800355e:	d86b      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b20      	cmp	r3, #32
 8003562:	d060      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	2b20      	cmp	r3, #32
 8003566:	d867      	bhi.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d05c      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x15a>
 800356c:	2b10      	cmp	r3, #16
 800356e:	d05a      	beq.n	8003626 <HAL_TIM_ConfigClockSource+0x15a>
 8003570:	e062      	b.n	8003638 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003582:	f000 fad8 	bl	8003b36 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003594:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	609a      	str	r2, [r3, #8]
      break;
 800359e:	e04f      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035b0:	f000 fac1 	bl	8003b36 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035c2:	609a      	str	r2, [r3, #8]
      break;
 80035c4:	e03c      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035d2:	461a      	mov	r2, r3
 80035d4:	f000 fa38 	bl	8003a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2150      	movs	r1, #80	@ 0x50
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fa8f 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 80035e4:	e02c      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035f2:	461a      	mov	r2, r3
 80035f4:	f000 fa56 	bl	8003aa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2160      	movs	r1, #96	@ 0x60
 80035fe:	4618      	mov	r0, r3
 8003600:	f000 fa7f 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 8003604:	e01c      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003612:	461a      	mov	r2, r3
 8003614:	f000 fa18 	bl	8003a48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2140      	movs	r1, #64	@ 0x40
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fa6f 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 8003624:	e00c      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4619      	mov	r1, r3
 8003630:	4610      	mov	r0, r2
 8003632:	f000 fa66 	bl	8003b02 <TIM_ITRx_SetConfig>
      break;
 8003636:	e003      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e000      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800363e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
	...

0800365c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a2f      	ldr	r2, [pc, #188]	@ (800372c <TIM_Base_SetConfig+0xd0>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d00b      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d007      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a2c      	ldr	r2, [pc, #176]	@ (8003730 <TIM_Base_SetConfig+0xd4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d003      	beq.n	800368c <TIM_Base_SetConfig+0x30>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a2b      	ldr	r2, [pc, #172]	@ (8003734 <TIM_Base_SetConfig+0xd8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d108      	bne.n	800369e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003692:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a22      	ldr	r2, [pc, #136]	@ (800372c <TIM_Base_SetConfig+0xd0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <TIM_Base_SetConfig+0xd4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0x62>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003734 <TIM_Base_SetConfig+0xd8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0d      	ldr	r2, [pc, #52]	@ (800372c <TIM_Base_SetConfig+0xd0>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d103      	bne.n	8003704 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f023 0201 	bic.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	611a      	str	r2, [r3, #16]
  }
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr
 800372c:	40012c00 	.word	0x40012c00
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800

08003738 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003738:	b480      	push	{r7}
 800373a:	b087      	sub	sp, #28
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f023 0201 	bic.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	699b      	ldr	r3, [r3, #24]
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0303 	bic.w	r3, r3, #3
 800376e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 0302 	bic.w	r3, r3, #2
 8003780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a1c      	ldr	r2, [pc, #112]	@ (8003800 <TIM_OC1_SetConfig+0xc8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10c      	bne.n	80037ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f023 0308 	bic.w	r3, r3, #8
 800379a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a13      	ldr	r2, [pc, #76]	@ (8003800 <TIM_OC1_SetConfig+0xc8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d111      	bne.n	80037da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40012c00 	.word	0x40012c00

08003804 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003804:	b480      	push	{r7}
 8003806:	b087      	sub	sp, #28
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 0210 	bic.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0320 	bic.w	r3, r3, #32
 800384e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4313      	orrs	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a1d      	ldr	r2, [pc, #116]	@ (80038d4 <TIM_OC2_SetConfig+0xd0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d10d      	bne.n	8003880 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800386a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800387e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a14      	ldr	r2, [pc, #80]	@ (80038d4 <TIM_OC2_SetConfig+0xd0>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d113      	bne.n	80038b0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800388e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bc80      	pop	{r7}
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00

080038d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <TIM_OC3_SetConfig+0xd0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a14      	ldr	r2, [pc, #80]	@ (80039a8 <TIM_OC3_SetConfig+0xd0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d113      	bne.n	8003982 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40012c00 	.word	0x40012c00

080039ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a0f      	ldr	r2, [pc, #60]	@ (8003a44 <TIM_OC4_SetConfig+0x98>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d109      	bne.n	8003a20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	019b      	lsls	r3, r3, #6
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00

08003a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	f023 0201 	bic.w	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f023 030a 	bic.w	r3, r3, #10
 8003a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	621a      	str	r2, [r3, #32]
}
 8003a9a:	bf00      	nop
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	f023 0210 	bic.w	r2, r3, #16
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	031b      	lsls	r3, r3, #12
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	621a      	str	r2, [r3, #32]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr

08003b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b085      	sub	sp, #20
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f043 0307 	orr.w	r3, r3, #7
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	609a      	str	r2, [r3, #8]
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b087      	sub	sp, #28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b50:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	431a      	orrs	r2, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	609a      	str	r2, [r3, #8]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr

08003b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	f003 031f 	and.w	r3, r3, #31
 8003b86:	2201      	movs	r2, #1
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1a      	ldr	r2, [r3, #32]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	43db      	mvns	r3, r3
 8003b96:	401a      	ands	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a1a      	ldr	r2, [r3, #32]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f003 031f 	and.w	r3, r3, #31
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bac:	431a      	orrs	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e046      	b.n	8003c62 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a16      	ldr	r2, [pc, #88]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c20:	d009      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a12      	ldr	r2, [pc, #72]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a10      	ldr	r2, [pc, #64]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d10c      	bne.n	8003c50 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bc80      	pop	{r7}
 8003c6a:	4770      	bx	lr
 8003c6c:	40012c00 	.word	0x40012c00
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800

08003c78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e03d      	b.n	8003d10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3714      	adds	r7, #20
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bc80      	pop	{r7}
 8003d18:	4770      	bx	lr

08003d1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e042      	b.n	8003db2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f7fe f923 	bl	8001f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2224      	movs	r2, #36	@ 0x24
 8003d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f82c 	bl	8003dbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695a      	ldr	r2, [r3, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68da      	ldr	r2, [r3, #12]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003df6:	f023 030c 	bic.w	r3, r3, #12
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699a      	ldr	r2, [r3, #24]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed0 <UART_SetConfig+0x114>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d103      	bne.n	8003e2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e24:	f7ff f8b0 	bl	8002f88 <HAL_RCC_GetPCLK2Freq>
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	e002      	b.n	8003e32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e2c:	f7ff f898 	bl	8002f60 <HAL_RCC_GetPCLK1Freq>
 8003e30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4613      	mov	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	4413      	add	r3, r2
 8003e3a:	009a      	lsls	r2, r3, #2
 8003e3c:	441a      	add	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e48:	4a22      	ldr	r2, [pc, #136]	@ (8003ed4 <UART_SetConfig+0x118>)
 8003e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	0119      	lsls	r1, r3, #4
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4613      	mov	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	009a      	lsls	r2, r3, #2
 8003e5c:	441a      	add	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e68:	4b1a      	ldr	r3, [pc, #104]	@ (8003ed4 <UART_SetConfig+0x118>)
 8003e6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2064      	movs	r0, #100	@ 0x64
 8003e72:	fb00 f303 	mul.w	r3, r0, r3
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	3332      	adds	r3, #50	@ 0x32
 8003e7c:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <UART_SetConfig+0x118>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e88:	4419      	add	r1, r3
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	009a      	lsls	r2, r3, #2
 8003e94:	441a      	add	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <UART_SetConfig+0x118>)
 8003ea2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	2064      	movs	r0, #100	@ 0x64
 8003eaa:	fb00 f303 	mul.w	r3, r0, r3
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	3332      	adds	r3, #50	@ 0x32
 8003eb4:	4a07      	ldr	r2, [pc, #28]	@ (8003ed4 <UART_SetConfig+0x118>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	095b      	lsrs	r3, r3, #5
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	440a      	add	r2, r1
 8003ec6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40013800 	.word	0x40013800
 8003ed4:	51eb851f 	.word	0x51eb851f

08003ed8 <memset>:
 8003ed8:	4603      	mov	r3, r0
 8003eda:	4402      	add	r2, r0
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d100      	bne.n	8003ee2 <memset+0xa>
 8003ee0:	4770      	bx	lr
 8003ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ee6:	e7f9      	b.n	8003edc <memset+0x4>

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	@ (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	4d0c      	ldr	r5, [pc, #48]	@ (8003f2c <__libc_init_array+0x38>)
 8003efa:	4c0d      	ldr	r4, [pc, #52]	@ (8003f30 <__libc_init_array+0x3c>)
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	f000 fea2 	bl	8004c4c <_init>
 8003f08:	2600      	movs	r6, #0
 8003f0a:	4d0a      	ldr	r5, [pc, #40]	@ (8003f34 <__libc_init_array+0x40>)
 8003f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f38 <__libc_init_array+0x44>)
 8003f0e:	1b64      	subs	r4, r4, r5
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08005118 	.word	0x08005118
 8003f30:	08005118 	.word	0x08005118
 8003f34:	08005118 	.word	0x08005118
 8003f38:	0800511c 	.word	0x0800511c

08003f3c <sqrtf>:
 8003f3c:	b538      	push	{r3, r4, r5, lr}
 8003f3e:	4605      	mov	r5, r0
 8003f40:	f000 f888 	bl	8004054 <__ieee754_sqrtf>
 8003f44:	4629      	mov	r1, r5
 8003f46:	4604      	mov	r4, r0
 8003f48:	4628      	mov	r0, r5
 8003f4a:	f7fc fbd3 	bl	80006f4 <__aeabi_fcmpun>
 8003f4e:	b968      	cbnz	r0, 8003f6c <sqrtf+0x30>
 8003f50:	2100      	movs	r1, #0
 8003f52:	4628      	mov	r0, r5
 8003f54:	f7fc fba6 	bl	80006a4 <__aeabi_fcmplt>
 8003f58:	b140      	cbz	r0, 8003f6c <sqrtf+0x30>
 8003f5a:	f7ff ffc5 	bl	8003ee8 <__errno>
 8003f5e:	2321      	movs	r3, #33	@ 0x21
 8003f60:	2100      	movs	r1, #0
 8003f62:	6003      	str	r3, [r0, #0]
 8003f64:	4608      	mov	r0, r1
 8003f66:	f7fc fab3 	bl	80004d0 <__aeabi_fdiv>
 8003f6a:	4604      	mov	r4, r0
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}

08003f70 <cosf>:
 8003f70:	b507      	push	{r0, r1, r2, lr}
 8003f72:	4a1a      	ldr	r2, [pc, #104]	@ (8003fdc <cosf+0x6c>)
 8003f74:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	4601      	mov	r1, r0
 8003f7c:	d805      	bhi.n	8003f8a <cosf+0x1a>
 8003f7e:	2100      	movs	r1, #0
 8003f80:	b003      	add	sp, #12
 8003f82:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f86:	f000 b8d5 	b.w	8004134 <__kernel_cosf>
 8003f8a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003f8e:	d304      	bcc.n	8003f9a <cosf+0x2a>
 8003f90:	f7fc f8e0 	bl	8000154 <__aeabi_fsub>
 8003f94:	b003      	add	sp, #12
 8003f96:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f9a:	4669      	mov	r1, sp
 8003f9c:	f000 f9c0 	bl	8004320 <__ieee754_rem_pio2f>
 8003fa0:	f000 0203 	and.w	r2, r0, #3
 8003fa4:	2a01      	cmp	r2, #1
 8003fa6:	d007      	beq.n	8003fb8 <cosf+0x48>
 8003fa8:	2a02      	cmp	r2, #2
 8003faa:	d00c      	beq.n	8003fc6 <cosf+0x56>
 8003fac:	b982      	cbnz	r2, 8003fd0 <cosf+0x60>
 8003fae:	9901      	ldr	r1, [sp, #4]
 8003fb0:	9800      	ldr	r0, [sp, #0]
 8003fb2:	f000 f8bf 	bl	8004134 <__kernel_cosf>
 8003fb6:	e7ed      	b.n	8003f94 <cosf+0x24>
 8003fb8:	9901      	ldr	r1, [sp, #4]
 8003fba:	9800      	ldr	r0, [sp, #0]
 8003fbc:	f000 f93a 	bl	8004234 <__kernel_sinf>
 8003fc0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8003fc4:	e7e6      	b.n	8003f94 <cosf+0x24>
 8003fc6:	9901      	ldr	r1, [sp, #4]
 8003fc8:	9800      	ldr	r0, [sp, #0]
 8003fca:	f000 f8b3 	bl	8004134 <__kernel_cosf>
 8003fce:	e7f7      	b.n	8003fc0 <cosf+0x50>
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	9901      	ldr	r1, [sp, #4]
 8003fd4:	9800      	ldr	r0, [sp, #0]
 8003fd6:	f000 f92d 	bl	8004234 <__kernel_sinf>
 8003fda:	e7db      	b.n	8003f94 <cosf+0x24>
 8003fdc:	3f490fd8 	.word	0x3f490fd8

08003fe0 <sinf>:
 8003fe0:	b507      	push	{r0, r1, r2, lr}
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <sinf+0x70>)
 8003fe4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	4601      	mov	r1, r0
 8003fec:	d806      	bhi.n	8003ffc <sinf+0x1c>
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	b003      	add	sp, #12
 8003ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ff8:	f000 b91c 	b.w	8004234 <__kernel_sinf>
 8003ffc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004000:	d304      	bcc.n	800400c <sinf+0x2c>
 8004002:	f7fc f8a7 	bl	8000154 <__aeabi_fsub>
 8004006:	b003      	add	sp, #12
 8004008:	f85d fb04 	ldr.w	pc, [sp], #4
 800400c:	4669      	mov	r1, sp
 800400e:	f000 f987 	bl	8004320 <__ieee754_rem_pio2f>
 8004012:	f000 0003 	and.w	r0, r0, #3
 8004016:	2801      	cmp	r0, #1
 8004018:	d008      	beq.n	800402c <sinf+0x4c>
 800401a:	2802      	cmp	r0, #2
 800401c:	d00b      	beq.n	8004036 <sinf+0x56>
 800401e:	b990      	cbnz	r0, 8004046 <sinf+0x66>
 8004020:	2201      	movs	r2, #1
 8004022:	9901      	ldr	r1, [sp, #4]
 8004024:	9800      	ldr	r0, [sp, #0]
 8004026:	f000 f905 	bl	8004234 <__kernel_sinf>
 800402a:	e7ec      	b.n	8004006 <sinf+0x26>
 800402c:	9901      	ldr	r1, [sp, #4]
 800402e:	9800      	ldr	r0, [sp, #0]
 8004030:	f000 f880 	bl	8004134 <__kernel_cosf>
 8004034:	e7e7      	b.n	8004006 <sinf+0x26>
 8004036:	2201      	movs	r2, #1
 8004038:	9901      	ldr	r1, [sp, #4]
 800403a:	9800      	ldr	r0, [sp, #0]
 800403c:	f000 f8fa 	bl	8004234 <__kernel_sinf>
 8004040:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004044:	e7df      	b.n	8004006 <sinf+0x26>
 8004046:	9901      	ldr	r1, [sp, #4]
 8004048:	9800      	ldr	r0, [sp, #0]
 800404a:	f000 f873 	bl	8004134 <__kernel_cosf>
 800404e:	e7f7      	b.n	8004040 <sinf+0x60>
 8004050:	3f490fd8 	.word	0x3f490fd8

08004054 <__ieee754_sqrtf>:
 8004054:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8004058:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800405c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004060:	4603      	mov	r3, r0
 8004062:	4604      	mov	r4, r0
 8004064:	d30a      	bcc.n	800407c <__ieee754_sqrtf+0x28>
 8004066:	4601      	mov	r1, r0
 8004068:	f7fc f97e 	bl	8000368 <__aeabi_fmul>
 800406c:	4601      	mov	r1, r0
 800406e:	4620      	mov	r0, r4
 8004070:	f7fc f872 	bl	8000158 <__addsf3>
 8004074:	4604      	mov	r4, r0
 8004076:	4620      	mov	r0, r4
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	2a00      	cmp	r2, #0
 800407e:	d0fa      	beq.n	8004076 <__ieee754_sqrtf+0x22>
 8004080:	2800      	cmp	r0, #0
 8004082:	da06      	bge.n	8004092 <__ieee754_sqrtf+0x3e>
 8004084:	4601      	mov	r1, r0
 8004086:	f7fc f865 	bl	8000154 <__aeabi_fsub>
 800408a:	4601      	mov	r1, r0
 800408c:	f7fc fa20 	bl	80004d0 <__aeabi_fdiv>
 8004090:	e7f0      	b.n	8004074 <__ieee754_sqrtf+0x20>
 8004092:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8004096:	d03c      	beq.n	8004112 <__ieee754_sqrtf+0xbe>
 8004098:	15c2      	asrs	r2, r0, #23
 800409a:	2400      	movs	r4, #0
 800409c:	2019      	movs	r0, #25
 800409e:	4626      	mov	r6, r4
 80040a0:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 80040a4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80040a8:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80040ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040b0:	07d2      	lsls	r2, r2, #31
 80040b2:	bf58      	it	pl
 80040b4:	005b      	lslpl	r3, r3, #1
 80040b6:	106d      	asrs	r5, r5, #1
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	1872      	adds	r2, r6, r1
 80040bc:	429a      	cmp	r2, r3
 80040be:	bfcf      	iteee	gt
 80040c0:	461a      	movgt	r2, r3
 80040c2:	1856      	addle	r6, r2, r1
 80040c4:	1864      	addle	r4, r4, r1
 80040c6:	1a9a      	suble	r2, r3, r2
 80040c8:	3801      	subs	r0, #1
 80040ca:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80040ce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80040d2:	d1f2      	bne.n	80040ba <__ieee754_sqrtf+0x66>
 80040d4:	b1ba      	cbz	r2, 8004106 <__ieee754_sqrtf+0xb2>
 80040d6:	4e15      	ldr	r6, [pc, #84]	@ (800412c <__ieee754_sqrtf+0xd8>)
 80040d8:	4f15      	ldr	r7, [pc, #84]	@ (8004130 <__ieee754_sqrtf+0xdc>)
 80040da:	6830      	ldr	r0, [r6, #0]
 80040dc:	6839      	ldr	r1, [r7, #0]
 80040de:	f7fc f839 	bl	8000154 <__aeabi_fsub>
 80040e2:	f8d6 8000 	ldr.w	r8, [r6]
 80040e6:	4601      	mov	r1, r0
 80040e8:	4640      	mov	r0, r8
 80040ea:	f7fc fae5 	bl	80006b8 <__aeabi_fcmple>
 80040ee:	b150      	cbz	r0, 8004106 <__ieee754_sqrtf+0xb2>
 80040f0:	6830      	ldr	r0, [r6, #0]
 80040f2:	6839      	ldr	r1, [r7, #0]
 80040f4:	f7fc f830 	bl	8000158 <__addsf3>
 80040f8:	6836      	ldr	r6, [r6, #0]
 80040fa:	4601      	mov	r1, r0
 80040fc:	4630      	mov	r0, r6
 80040fe:	f7fc fad1 	bl	80006a4 <__aeabi_fcmplt>
 8004102:	b170      	cbz	r0, 8004122 <__ieee754_sqrtf+0xce>
 8004104:	3402      	adds	r4, #2
 8004106:	1064      	asrs	r4, r4, #1
 8004108:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800410c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8004110:	e7b1      	b.n	8004076 <__ieee754_sqrtf+0x22>
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	0218      	lsls	r0, r3, #8
 8004116:	460a      	mov	r2, r1
 8004118:	f101 0101 	add.w	r1, r1, #1
 800411c:	d5f9      	bpl.n	8004112 <__ieee754_sqrtf+0xbe>
 800411e:	4252      	negs	r2, r2
 8004120:	e7bb      	b.n	800409a <__ieee754_sqrtf+0x46>
 8004122:	3401      	adds	r4, #1
 8004124:	f024 0401 	bic.w	r4, r4, #1
 8004128:	e7ed      	b.n	8004106 <__ieee754_sqrtf+0xb2>
 800412a:	bf00      	nop
 800412c:	08004d44 	.word	0x08004d44
 8004130:	08004d40 	.word	0x08004d40

08004134 <__kernel_cosf>:
 8004134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004138:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800413c:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8004140:	4606      	mov	r6, r0
 8004142:	4688      	mov	r8, r1
 8004144:	d203      	bcs.n	800414e <__kernel_cosf+0x1a>
 8004146:	f7fc faeb 	bl	8000720 <__aeabi_f2iz>
 800414a:	2800      	cmp	r0, #0
 800414c:	d05c      	beq.n	8004208 <__kernel_cosf+0xd4>
 800414e:	4631      	mov	r1, r6
 8004150:	4630      	mov	r0, r6
 8004152:	f7fc f909 	bl	8000368 <__aeabi_fmul>
 8004156:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800415a:	4604      	mov	r4, r0
 800415c:	f7fc f904 	bl	8000368 <__aeabi_fmul>
 8004160:	492b      	ldr	r1, [pc, #172]	@ (8004210 <__kernel_cosf+0xdc>)
 8004162:	4607      	mov	r7, r0
 8004164:	4620      	mov	r0, r4
 8004166:	f7fc f8ff 	bl	8000368 <__aeabi_fmul>
 800416a:	492a      	ldr	r1, [pc, #168]	@ (8004214 <__kernel_cosf+0xe0>)
 800416c:	f7fb fff4 	bl	8000158 <__addsf3>
 8004170:	4621      	mov	r1, r4
 8004172:	f7fc f8f9 	bl	8000368 <__aeabi_fmul>
 8004176:	4928      	ldr	r1, [pc, #160]	@ (8004218 <__kernel_cosf+0xe4>)
 8004178:	f7fb ffec 	bl	8000154 <__aeabi_fsub>
 800417c:	4621      	mov	r1, r4
 800417e:	f7fc f8f3 	bl	8000368 <__aeabi_fmul>
 8004182:	4926      	ldr	r1, [pc, #152]	@ (800421c <__kernel_cosf+0xe8>)
 8004184:	f7fb ffe8 	bl	8000158 <__addsf3>
 8004188:	4621      	mov	r1, r4
 800418a:	f7fc f8ed 	bl	8000368 <__aeabi_fmul>
 800418e:	4924      	ldr	r1, [pc, #144]	@ (8004220 <__kernel_cosf+0xec>)
 8004190:	f7fb ffe0 	bl	8000154 <__aeabi_fsub>
 8004194:	4621      	mov	r1, r4
 8004196:	f7fc f8e7 	bl	8000368 <__aeabi_fmul>
 800419a:	4922      	ldr	r1, [pc, #136]	@ (8004224 <__kernel_cosf+0xf0>)
 800419c:	f7fb ffdc 	bl	8000158 <__addsf3>
 80041a0:	4621      	mov	r1, r4
 80041a2:	f7fc f8e1 	bl	8000368 <__aeabi_fmul>
 80041a6:	4621      	mov	r1, r4
 80041a8:	f7fc f8de 	bl	8000368 <__aeabi_fmul>
 80041ac:	4641      	mov	r1, r8
 80041ae:	4604      	mov	r4, r0
 80041b0:	4630      	mov	r0, r6
 80041b2:	f7fc f8d9 	bl	8000368 <__aeabi_fmul>
 80041b6:	4601      	mov	r1, r0
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7fb ffcb 	bl	8000154 <__aeabi_fsub>
 80041be:	4b1a      	ldr	r3, [pc, #104]	@ (8004228 <__kernel_cosf+0xf4>)
 80041c0:	4604      	mov	r4, r0
 80041c2:	429d      	cmp	r5, r3
 80041c4:	d80a      	bhi.n	80041dc <__kernel_cosf+0xa8>
 80041c6:	4601      	mov	r1, r0
 80041c8:	4638      	mov	r0, r7
 80041ca:	f7fb ffc3 	bl	8000154 <__aeabi_fsub>
 80041ce:	4601      	mov	r1, r0
 80041d0:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80041d4:	f7fb ffbe 	bl	8000154 <__aeabi_fsub>
 80041d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041dc:	4b13      	ldr	r3, [pc, #76]	@ (800422c <__kernel_cosf+0xf8>)
 80041de:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80041e2:	429d      	cmp	r5, r3
 80041e4:	bf8c      	ite	hi
 80041e6:	4d12      	ldrhi	r5, [pc, #72]	@ (8004230 <__kernel_cosf+0xfc>)
 80041e8:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80041ec:	4629      	mov	r1, r5
 80041ee:	f7fb ffb1 	bl	8000154 <__aeabi_fsub>
 80041f2:	4629      	mov	r1, r5
 80041f4:	4606      	mov	r6, r0
 80041f6:	4638      	mov	r0, r7
 80041f8:	f7fb ffac 	bl	8000154 <__aeabi_fsub>
 80041fc:	4621      	mov	r1, r4
 80041fe:	f7fb ffa9 	bl	8000154 <__aeabi_fsub>
 8004202:	4601      	mov	r1, r0
 8004204:	4630      	mov	r0, r6
 8004206:	e7e5      	b.n	80041d4 <__kernel_cosf+0xa0>
 8004208:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800420c:	e7e4      	b.n	80041d8 <__kernel_cosf+0xa4>
 800420e:	bf00      	nop
 8004210:	ad47d74e 	.word	0xad47d74e
 8004214:	310f74f6 	.word	0x310f74f6
 8004218:	3493f27c 	.word	0x3493f27c
 800421c:	37d00d01 	.word	0x37d00d01
 8004220:	3ab60b61 	.word	0x3ab60b61
 8004224:	3d2aaaab 	.word	0x3d2aaaab
 8004228:	3e999999 	.word	0x3e999999
 800422c:	3f480000 	.word	0x3f480000
 8004230:	3e900000 	.word	0x3e900000

08004234 <__kernel_sinf>:
 8004234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004238:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800423c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8004240:	4604      	mov	r4, r0
 8004242:	460f      	mov	r7, r1
 8004244:	4691      	mov	r9, r2
 8004246:	d203      	bcs.n	8004250 <__kernel_sinf+0x1c>
 8004248:	f7fc fa6a 	bl	8000720 <__aeabi_f2iz>
 800424c:	2800      	cmp	r0, #0
 800424e:	d035      	beq.n	80042bc <__kernel_sinf+0x88>
 8004250:	4621      	mov	r1, r4
 8004252:	4620      	mov	r0, r4
 8004254:	f7fc f888 	bl	8000368 <__aeabi_fmul>
 8004258:	4605      	mov	r5, r0
 800425a:	4601      	mov	r1, r0
 800425c:	4620      	mov	r0, r4
 800425e:	f7fc f883 	bl	8000368 <__aeabi_fmul>
 8004262:	4929      	ldr	r1, [pc, #164]	@ (8004308 <__kernel_sinf+0xd4>)
 8004264:	4606      	mov	r6, r0
 8004266:	4628      	mov	r0, r5
 8004268:	f7fc f87e 	bl	8000368 <__aeabi_fmul>
 800426c:	4927      	ldr	r1, [pc, #156]	@ (800430c <__kernel_sinf+0xd8>)
 800426e:	f7fb ff71 	bl	8000154 <__aeabi_fsub>
 8004272:	4629      	mov	r1, r5
 8004274:	f7fc f878 	bl	8000368 <__aeabi_fmul>
 8004278:	4925      	ldr	r1, [pc, #148]	@ (8004310 <__kernel_sinf+0xdc>)
 800427a:	f7fb ff6d 	bl	8000158 <__addsf3>
 800427e:	4629      	mov	r1, r5
 8004280:	f7fc f872 	bl	8000368 <__aeabi_fmul>
 8004284:	4923      	ldr	r1, [pc, #140]	@ (8004314 <__kernel_sinf+0xe0>)
 8004286:	f7fb ff65 	bl	8000154 <__aeabi_fsub>
 800428a:	4629      	mov	r1, r5
 800428c:	f7fc f86c 	bl	8000368 <__aeabi_fmul>
 8004290:	4921      	ldr	r1, [pc, #132]	@ (8004318 <__kernel_sinf+0xe4>)
 8004292:	f7fb ff61 	bl	8000158 <__addsf3>
 8004296:	4680      	mov	r8, r0
 8004298:	f1b9 0f00 	cmp.w	r9, #0
 800429c:	d111      	bne.n	80042c2 <__kernel_sinf+0x8e>
 800429e:	4601      	mov	r1, r0
 80042a0:	4628      	mov	r0, r5
 80042a2:	f7fc f861 	bl	8000368 <__aeabi_fmul>
 80042a6:	491d      	ldr	r1, [pc, #116]	@ (800431c <__kernel_sinf+0xe8>)
 80042a8:	f7fb ff54 	bl	8000154 <__aeabi_fsub>
 80042ac:	4631      	mov	r1, r6
 80042ae:	f7fc f85b 	bl	8000368 <__aeabi_fmul>
 80042b2:	4601      	mov	r1, r0
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7fb ff4f 	bl	8000158 <__addsf3>
 80042ba:	4604      	mov	r4, r0
 80042bc:	4620      	mov	r0, r4
 80042be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042c2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80042c6:	4638      	mov	r0, r7
 80042c8:	f7fc f84e 	bl	8000368 <__aeabi_fmul>
 80042cc:	4641      	mov	r1, r8
 80042ce:	4681      	mov	r9, r0
 80042d0:	4630      	mov	r0, r6
 80042d2:	f7fc f849 	bl	8000368 <__aeabi_fmul>
 80042d6:	4601      	mov	r1, r0
 80042d8:	4648      	mov	r0, r9
 80042da:	f7fb ff3b 	bl	8000154 <__aeabi_fsub>
 80042de:	4629      	mov	r1, r5
 80042e0:	f7fc f842 	bl	8000368 <__aeabi_fmul>
 80042e4:	4639      	mov	r1, r7
 80042e6:	f7fb ff35 	bl	8000154 <__aeabi_fsub>
 80042ea:	490c      	ldr	r1, [pc, #48]	@ (800431c <__kernel_sinf+0xe8>)
 80042ec:	4605      	mov	r5, r0
 80042ee:	4630      	mov	r0, r6
 80042f0:	f7fc f83a 	bl	8000368 <__aeabi_fmul>
 80042f4:	4601      	mov	r1, r0
 80042f6:	4628      	mov	r0, r5
 80042f8:	f7fb ff2e 	bl	8000158 <__addsf3>
 80042fc:	4601      	mov	r1, r0
 80042fe:	4620      	mov	r0, r4
 8004300:	f7fb ff28 	bl	8000154 <__aeabi_fsub>
 8004304:	e7d9      	b.n	80042ba <__kernel_sinf+0x86>
 8004306:	bf00      	nop
 8004308:	2f2ec9d3 	.word	0x2f2ec9d3
 800430c:	32d72f34 	.word	0x32d72f34
 8004310:	3638ef1b 	.word	0x3638ef1b
 8004314:	39500d01 	.word	0x39500d01
 8004318:	3c088889 	.word	0x3c088889
 800431c:	3e2aaaab 	.word	0x3e2aaaab

08004320 <__ieee754_rem_pio2f>:
 8004320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004324:	4aa4      	ldr	r2, [pc, #656]	@ (80045b8 <__ieee754_rem_pio2f+0x298>)
 8004326:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800432a:	4590      	cmp	r8, r2
 800432c:	460c      	mov	r4, r1
 800432e:	4682      	mov	sl, r0
 8004330:	b087      	sub	sp, #28
 8004332:	d804      	bhi.n	800433e <__ieee754_rem_pio2f+0x1e>
 8004334:	2300      	movs	r3, #0
 8004336:	6008      	str	r0, [r1, #0]
 8004338:	604b      	str	r3, [r1, #4]
 800433a:	2500      	movs	r5, #0
 800433c:	e01d      	b.n	800437a <__ieee754_rem_pio2f+0x5a>
 800433e:	4a9f      	ldr	r2, [pc, #636]	@ (80045bc <__ieee754_rem_pio2f+0x29c>)
 8004340:	4590      	cmp	r8, r2
 8004342:	d84f      	bhi.n	80043e4 <__ieee754_rem_pio2f+0xc4>
 8004344:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8004348:	2800      	cmp	r0, #0
 800434a:	499d      	ldr	r1, [pc, #628]	@ (80045c0 <__ieee754_rem_pio2f+0x2a0>)
 800434c:	4f9d      	ldr	r7, [pc, #628]	@ (80045c4 <__ieee754_rem_pio2f+0x2a4>)
 800434e:	f025 050f 	bic.w	r5, r5, #15
 8004352:	dd24      	ble.n	800439e <__ieee754_rem_pio2f+0x7e>
 8004354:	f7fb fefe 	bl	8000154 <__aeabi_fsub>
 8004358:	42bd      	cmp	r5, r7
 800435a:	4606      	mov	r6, r0
 800435c:	d011      	beq.n	8004382 <__ieee754_rem_pio2f+0x62>
 800435e:	499a      	ldr	r1, [pc, #616]	@ (80045c8 <__ieee754_rem_pio2f+0x2a8>)
 8004360:	f7fb fef8 	bl	8000154 <__aeabi_fsub>
 8004364:	4601      	mov	r1, r0
 8004366:	4605      	mov	r5, r0
 8004368:	4630      	mov	r0, r6
 800436a:	f7fb fef3 	bl	8000154 <__aeabi_fsub>
 800436e:	4996      	ldr	r1, [pc, #600]	@ (80045c8 <__ieee754_rem_pio2f+0x2a8>)
 8004370:	f7fb fef0 	bl	8000154 <__aeabi_fsub>
 8004374:	6025      	str	r5, [r4, #0]
 8004376:	2501      	movs	r5, #1
 8004378:	6060      	str	r0, [r4, #4]
 800437a:	4628      	mov	r0, r5
 800437c:	b007      	add	sp, #28
 800437e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004382:	4992      	ldr	r1, [pc, #584]	@ (80045cc <__ieee754_rem_pio2f+0x2ac>)
 8004384:	f7fb fee6 	bl	8000154 <__aeabi_fsub>
 8004388:	4991      	ldr	r1, [pc, #580]	@ (80045d0 <__ieee754_rem_pio2f+0x2b0>)
 800438a:	4606      	mov	r6, r0
 800438c:	f7fb fee2 	bl	8000154 <__aeabi_fsub>
 8004390:	4601      	mov	r1, r0
 8004392:	4605      	mov	r5, r0
 8004394:	4630      	mov	r0, r6
 8004396:	f7fb fedd 	bl	8000154 <__aeabi_fsub>
 800439a:	498d      	ldr	r1, [pc, #564]	@ (80045d0 <__ieee754_rem_pio2f+0x2b0>)
 800439c:	e7e8      	b.n	8004370 <__ieee754_rem_pio2f+0x50>
 800439e:	f7fb fedb 	bl	8000158 <__addsf3>
 80043a2:	42bd      	cmp	r5, r7
 80043a4:	4606      	mov	r6, r0
 80043a6:	d00f      	beq.n	80043c8 <__ieee754_rem_pio2f+0xa8>
 80043a8:	4987      	ldr	r1, [pc, #540]	@ (80045c8 <__ieee754_rem_pio2f+0x2a8>)
 80043aa:	f7fb fed5 	bl	8000158 <__addsf3>
 80043ae:	4601      	mov	r1, r0
 80043b0:	4605      	mov	r5, r0
 80043b2:	4630      	mov	r0, r6
 80043b4:	f7fb fece 	bl	8000154 <__aeabi_fsub>
 80043b8:	4983      	ldr	r1, [pc, #524]	@ (80045c8 <__ieee754_rem_pio2f+0x2a8>)
 80043ba:	f7fb fecd 	bl	8000158 <__addsf3>
 80043be:	6025      	str	r5, [r4, #0]
 80043c0:	6060      	str	r0, [r4, #4]
 80043c2:	f04f 35ff 	mov.w	r5, #4294967295
 80043c6:	e7d8      	b.n	800437a <__ieee754_rem_pio2f+0x5a>
 80043c8:	4980      	ldr	r1, [pc, #512]	@ (80045cc <__ieee754_rem_pio2f+0x2ac>)
 80043ca:	f7fb fec5 	bl	8000158 <__addsf3>
 80043ce:	4980      	ldr	r1, [pc, #512]	@ (80045d0 <__ieee754_rem_pio2f+0x2b0>)
 80043d0:	4606      	mov	r6, r0
 80043d2:	f7fb fec1 	bl	8000158 <__addsf3>
 80043d6:	4601      	mov	r1, r0
 80043d8:	4605      	mov	r5, r0
 80043da:	4630      	mov	r0, r6
 80043dc:	f7fb feba 	bl	8000154 <__aeabi_fsub>
 80043e0:	497b      	ldr	r1, [pc, #492]	@ (80045d0 <__ieee754_rem_pio2f+0x2b0>)
 80043e2:	e7ea      	b.n	80043ba <__ieee754_rem_pio2f+0x9a>
 80043e4:	4a7b      	ldr	r2, [pc, #492]	@ (80045d4 <__ieee754_rem_pio2f+0x2b4>)
 80043e6:	4590      	cmp	r8, r2
 80043e8:	f200 8095 	bhi.w	8004516 <__ieee754_rem_pio2f+0x1f6>
 80043ec:	f000 f8fe 	bl	80045ec <fabsf>
 80043f0:	4979      	ldr	r1, [pc, #484]	@ (80045d8 <__ieee754_rem_pio2f+0x2b8>)
 80043f2:	4606      	mov	r6, r0
 80043f4:	f7fb ffb8 	bl	8000368 <__aeabi_fmul>
 80043f8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80043fc:	f7fb feac 	bl	8000158 <__addsf3>
 8004400:	f7fc f98e 	bl	8000720 <__aeabi_f2iz>
 8004404:	4605      	mov	r5, r0
 8004406:	f7fb ff5b 	bl	80002c0 <__aeabi_i2f>
 800440a:	496d      	ldr	r1, [pc, #436]	@ (80045c0 <__ieee754_rem_pio2f+0x2a0>)
 800440c:	4681      	mov	r9, r0
 800440e:	f7fb ffab 	bl	8000368 <__aeabi_fmul>
 8004412:	4601      	mov	r1, r0
 8004414:	4630      	mov	r0, r6
 8004416:	f7fb fe9d 	bl	8000154 <__aeabi_fsub>
 800441a:	496b      	ldr	r1, [pc, #428]	@ (80045c8 <__ieee754_rem_pio2f+0x2a8>)
 800441c:	4607      	mov	r7, r0
 800441e:	4648      	mov	r0, r9
 8004420:	f7fb ffa2 	bl	8000368 <__aeabi_fmul>
 8004424:	2d1f      	cmp	r5, #31
 8004426:	4606      	mov	r6, r0
 8004428:	dc0e      	bgt.n	8004448 <__ieee754_rem_pio2f+0x128>
 800442a:	4a6c      	ldr	r2, [pc, #432]	@ (80045dc <__ieee754_rem_pio2f+0x2bc>)
 800442c:	1e69      	subs	r1, r5, #1
 800442e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004432:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 8004436:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800443a:	4293      	cmp	r3, r2
 800443c:	d004      	beq.n	8004448 <__ieee754_rem_pio2f+0x128>
 800443e:	4631      	mov	r1, r6
 8004440:	4638      	mov	r0, r7
 8004442:	f7fb fe87 	bl	8000154 <__aeabi_fsub>
 8004446:	e00b      	b.n	8004460 <__ieee754_rem_pio2f+0x140>
 8004448:	4631      	mov	r1, r6
 800444a:	4638      	mov	r0, r7
 800444c:	f7fb fe82 	bl	8000154 <__aeabi_fsub>
 8004450:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004454:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8004458:	2b08      	cmp	r3, #8
 800445a:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800445e:	dc01      	bgt.n	8004464 <__ieee754_rem_pio2f+0x144>
 8004460:	6020      	str	r0, [r4, #0]
 8004462:	e026      	b.n	80044b2 <__ieee754_rem_pio2f+0x192>
 8004464:	4959      	ldr	r1, [pc, #356]	@ (80045cc <__ieee754_rem_pio2f+0x2ac>)
 8004466:	4648      	mov	r0, r9
 8004468:	f7fb ff7e 	bl	8000368 <__aeabi_fmul>
 800446c:	4606      	mov	r6, r0
 800446e:	4601      	mov	r1, r0
 8004470:	4638      	mov	r0, r7
 8004472:	f7fb fe6f 	bl	8000154 <__aeabi_fsub>
 8004476:	4601      	mov	r1, r0
 8004478:	4680      	mov	r8, r0
 800447a:	4638      	mov	r0, r7
 800447c:	f7fb fe6a 	bl	8000154 <__aeabi_fsub>
 8004480:	4631      	mov	r1, r6
 8004482:	f7fb fe67 	bl	8000154 <__aeabi_fsub>
 8004486:	4606      	mov	r6, r0
 8004488:	4951      	ldr	r1, [pc, #324]	@ (80045d0 <__ieee754_rem_pio2f+0x2b0>)
 800448a:	4648      	mov	r0, r9
 800448c:	f7fb ff6c 	bl	8000368 <__aeabi_fmul>
 8004490:	4631      	mov	r1, r6
 8004492:	f7fb fe5f 	bl	8000154 <__aeabi_fsub>
 8004496:	4601      	mov	r1, r0
 8004498:	4606      	mov	r6, r0
 800449a:	4640      	mov	r0, r8
 800449c:	f7fb fe5a 	bl	8000154 <__aeabi_fsub>
 80044a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80044a4:	ebab 0b03 	sub.w	fp, fp, r3
 80044a8:	f1bb 0f19 	cmp.w	fp, #25
 80044ac:	dc18      	bgt.n	80044e0 <__ieee754_rem_pio2f+0x1c0>
 80044ae:	4647      	mov	r7, r8
 80044b0:	6020      	str	r0, [r4, #0]
 80044b2:	f8d4 8000 	ldr.w	r8, [r4]
 80044b6:	4638      	mov	r0, r7
 80044b8:	4641      	mov	r1, r8
 80044ba:	f7fb fe4b 	bl	8000154 <__aeabi_fsub>
 80044be:	4631      	mov	r1, r6
 80044c0:	f7fb fe48 	bl	8000154 <__aeabi_fsub>
 80044c4:	f1ba 0f00 	cmp.w	sl, #0
 80044c8:	6060      	str	r0, [r4, #4]
 80044ca:	f6bf af56 	bge.w	800437a <__ieee754_rem_pio2f+0x5a>
 80044ce:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80044d2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80044d6:	f8c4 8000 	str.w	r8, [r4]
 80044da:	6060      	str	r0, [r4, #4]
 80044dc:	426d      	negs	r5, r5
 80044de:	e74c      	b.n	800437a <__ieee754_rem_pio2f+0x5a>
 80044e0:	493f      	ldr	r1, [pc, #252]	@ (80045e0 <__ieee754_rem_pio2f+0x2c0>)
 80044e2:	4648      	mov	r0, r9
 80044e4:	f7fb ff40 	bl	8000368 <__aeabi_fmul>
 80044e8:	4606      	mov	r6, r0
 80044ea:	4601      	mov	r1, r0
 80044ec:	4640      	mov	r0, r8
 80044ee:	f7fb fe31 	bl	8000154 <__aeabi_fsub>
 80044f2:	4601      	mov	r1, r0
 80044f4:	4607      	mov	r7, r0
 80044f6:	4640      	mov	r0, r8
 80044f8:	f7fb fe2c 	bl	8000154 <__aeabi_fsub>
 80044fc:	4631      	mov	r1, r6
 80044fe:	f7fb fe29 	bl	8000154 <__aeabi_fsub>
 8004502:	4606      	mov	r6, r0
 8004504:	4937      	ldr	r1, [pc, #220]	@ (80045e4 <__ieee754_rem_pio2f+0x2c4>)
 8004506:	4648      	mov	r0, r9
 8004508:	f7fb ff2e 	bl	8000368 <__aeabi_fmul>
 800450c:	4631      	mov	r1, r6
 800450e:	f7fb fe21 	bl	8000154 <__aeabi_fsub>
 8004512:	4606      	mov	r6, r0
 8004514:	e793      	b.n	800443e <__ieee754_rem_pio2f+0x11e>
 8004516:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800451a:	d305      	bcc.n	8004528 <__ieee754_rem_pio2f+0x208>
 800451c:	4601      	mov	r1, r0
 800451e:	f7fb fe19 	bl	8000154 <__aeabi_fsub>
 8004522:	6060      	str	r0, [r4, #4]
 8004524:	6020      	str	r0, [r4, #0]
 8004526:	e708      	b.n	800433a <__ieee754_rem_pio2f+0x1a>
 8004528:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800452c:	3e86      	subs	r6, #134	@ 0x86
 800452e:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 8004532:	4640      	mov	r0, r8
 8004534:	f7fc f8f4 	bl	8000720 <__aeabi_f2iz>
 8004538:	f7fb fec2 	bl	80002c0 <__aeabi_i2f>
 800453c:	4601      	mov	r1, r0
 800453e:	9003      	str	r0, [sp, #12]
 8004540:	4640      	mov	r0, r8
 8004542:	f7fb fe07 	bl	8000154 <__aeabi_fsub>
 8004546:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800454a:	f7fb ff0d 	bl	8000368 <__aeabi_fmul>
 800454e:	4607      	mov	r7, r0
 8004550:	f7fc f8e6 	bl	8000720 <__aeabi_f2iz>
 8004554:	f7fb feb4 	bl	80002c0 <__aeabi_i2f>
 8004558:	4601      	mov	r1, r0
 800455a:	9004      	str	r0, [sp, #16]
 800455c:	4605      	mov	r5, r0
 800455e:	4638      	mov	r0, r7
 8004560:	f7fb fdf8 	bl	8000154 <__aeabi_fsub>
 8004564:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004568:	f7fb fefe 	bl	8000368 <__aeabi_fmul>
 800456c:	2100      	movs	r1, #0
 800456e:	9005      	str	r0, [sp, #20]
 8004570:	f7fc f88e 	bl	8000690 <__aeabi_fcmpeq>
 8004574:	b1f0      	cbz	r0, 80045b4 <__ieee754_rem_pio2f+0x294>
 8004576:	2100      	movs	r1, #0
 8004578:	4628      	mov	r0, r5
 800457a:	f7fc f889 	bl	8000690 <__aeabi_fcmpeq>
 800457e:	2800      	cmp	r0, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2302      	moveq	r3, #2
 8004586:	4a18      	ldr	r2, [pc, #96]	@ (80045e8 <__ieee754_rem_pio2f+0x2c8>)
 8004588:	4621      	mov	r1, r4
 800458a:	9201      	str	r2, [sp, #4]
 800458c:	2202      	movs	r2, #2
 800458e:	a803      	add	r0, sp, #12
 8004590:	9200      	str	r2, [sp, #0]
 8004592:	4632      	mov	r2, r6
 8004594:	f000 f82e 	bl	80045f4 <__kernel_rem_pio2f>
 8004598:	f1ba 0f00 	cmp.w	sl, #0
 800459c:	4605      	mov	r5, r0
 800459e:	f6bf aeec 	bge.w	800437a <__ieee754_rem_pio2f+0x5a>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80045b0:	6063      	str	r3, [r4, #4]
 80045b2:	e793      	b.n	80044dc <__ieee754_rem_pio2f+0x1bc>
 80045b4:	2303      	movs	r3, #3
 80045b6:	e7e6      	b.n	8004586 <__ieee754_rem_pio2f+0x266>
 80045b8:	3f490fd8 	.word	0x3f490fd8
 80045bc:	4016cbe3 	.word	0x4016cbe3
 80045c0:	3fc90f80 	.word	0x3fc90f80
 80045c4:	3fc90fd0 	.word	0x3fc90fd0
 80045c8:	37354443 	.word	0x37354443
 80045cc:	37354400 	.word	0x37354400
 80045d0:	2e85a308 	.word	0x2e85a308
 80045d4:	43490f80 	.word	0x43490f80
 80045d8:	3f22f984 	.word	0x3f22f984
 80045dc:	08004d48 	.word	0x08004d48
 80045e0:	2e85a300 	.word	0x2e85a300
 80045e4:	248d3132 	.word	0x248d3132
 80045e8:	08004dc8 	.word	0x08004dc8

080045ec <fabsf>:
 80045ec:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80045f0:	4770      	bx	lr
	...

080045f4 <__kernel_rem_pio2f>:
 80045f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f8:	b0db      	sub	sp, #364	@ 0x16c
 80045fa:	9202      	str	r2, [sp, #8]
 80045fc:	9304      	str	r3, [sp, #16]
 80045fe:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8004600:	4bac      	ldr	r3, [pc, #688]	@ (80048b4 <__kernel_rem_pio2f+0x2c0>)
 8004602:	9005      	str	r0, [sp, #20]
 8004604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004608:	9100      	str	r1, [sp, #0]
 800460a:	9301      	str	r3, [sp, #4]
 800460c:	9b04      	ldr	r3, [sp, #16]
 800460e:	3b01      	subs	r3, #1
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	9b02      	ldr	r3, [sp, #8]
 8004614:	1d1a      	adds	r2, r3, #4
 8004616:	f2c0 8099 	blt.w	800474c <__kernel_rem_pio2f+0x158>
 800461a:	1edc      	subs	r4, r3, #3
 800461c:	bf48      	it	mi
 800461e:	1d1c      	addmi	r4, r3, #4
 8004620:	10e4      	asrs	r4, r4, #3
 8004622:	2500      	movs	r5, #0
 8004624:	f04f 0b00 	mov.w	fp, #0
 8004628:	1c67      	adds	r7, r4, #1
 800462a:	00fb      	lsls	r3, r7, #3
 800462c:	9306      	str	r3, [sp, #24]
 800462e:	9b02      	ldr	r3, [sp, #8]
 8004630:	9a03      	ldr	r2, [sp, #12]
 8004632:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	eba4 0802 	sub.w	r8, r4, r2
 800463c:	eb03 0902 	add.w	r9, r3, r2
 8004640:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004642:	ae1e      	add	r6, sp, #120	@ 0x78
 8004644:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8004648:	454d      	cmp	r5, r9
 800464a:	f340 8081 	ble.w	8004750 <__kernel_rem_pio2f+0x15c>
 800464e:	9a04      	ldr	r2, [sp, #16]
 8004650:	ab1e      	add	r3, sp, #120	@ 0x78
 8004652:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8004656:	f04f 0900 	mov.w	r9, #0
 800465a:	2300      	movs	r3, #0
 800465c:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004660:	9a01      	ldr	r2, [sp, #4]
 8004662:	4591      	cmp	r9, r2
 8004664:	f340 809a 	ble.w	800479c <__kernel_rem_pio2f+0x1a8>
 8004668:	4613      	mov	r3, r2
 800466a:	aa0a      	add	r2, sp, #40	@ 0x28
 800466c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004670:	9308      	str	r3, [sp, #32]
 8004672:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8004674:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004678:	9c01      	ldr	r4, [sp, #4]
 800467a:	9307      	str	r3, [sp, #28]
 800467c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8004680:	4646      	mov	r6, r8
 8004682:	4625      	mov	r5, r4
 8004684:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8004688:	ab5a      	add	r3, sp, #360	@ 0x168
 800468a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800468e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8004692:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8004696:	2d00      	cmp	r5, #0
 8004698:	f300 8085 	bgt.w	80047a6 <__kernel_rem_pio2f+0x1b2>
 800469c:	4639      	mov	r1, r7
 800469e:	4658      	mov	r0, fp
 80046a0:	f000 fa46 	bl	8004b30 <scalbnf>
 80046a4:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80046a8:	4605      	mov	r5, r0
 80046aa:	f7fb fe5d 	bl	8000368 <__aeabi_fmul>
 80046ae:	f000 fa8b 	bl	8004bc8 <floorf>
 80046b2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80046b6:	f7fb fe57 	bl	8000368 <__aeabi_fmul>
 80046ba:	4601      	mov	r1, r0
 80046bc:	4628      	mov	r0, r5
 80046be:	f7fb fd49 	bl	8000154 <__aeabi_fsub>
 80046c2:	4605      	mov	r5, r0
 80046c4:	f7fc f82c 	bl	8000720 <__aeabi_f2iz>
 80046c8:	4606      	mov	r6, r0
 80046ca:	f7fb fdf9 	bl	80002c0 <__aeabi_i2f>
 80046ce:	4601      	mov	r1, r0
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7fb fd3f 	bl	8000154 <__aeabi_fsub>
 80046d6:	2f00      	cmp	r7, #0
 80046d8:	4681      	mov	r9, r0
 80046da:	f340 8081 	ble.w	80047e0 <__kernel_rem_pio2f+0x1ec>
 80046de:	1e62      	subs	r2, r4, #1
 80046e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80046e2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80046e6:	f1c7 0108 	rsb	r1, r7, #8
 80046ea:	fa45 f301 	asr.w	r3, r5, r1
 80046ee:	441e      	add	r6, r3
 80046f0:	408b      	lsls	r3, r1
 80046f2:	1aed      	subs	r5, r5, r3
 80046f4:	ab0a      	add	r3, sp, #40	@ 0x28
 80046f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80046fa:	f1c7 0307 	rsb	r3, r7, #7
 80046fe:	411d      	asrs	r5, r3
 8004700:	2d00      	cmp	r5, #0
 8004702:	dd7a      	ble.n	80047fa <__kernel_rem_pio2f+0x206>
 8004704:	2200      	movs	r2, #0
 8004706:	4692      	mov	sl, r2
 8004708:	3601      	adds	r6, #1
 800470a:	4294      	cmp	r4, r2
 800470c:	f300 80aa 	bgt.w	8004864 <__kernel_rem_pio2f+0x270>
 8004710:	2f00      	cmp	r7, #0
 8004712:	dd05      	ble.n	8004720 <__kernel_rem_pio2f+0x12c>
 8004714:	2f01      	cmp	r7, #1
 8004716:	f000 80b6 	beq.w	8004886 <__kernel_rem_pio2f+0x292>
 800471a:	2f02      	cmp	r7, #2
 800471c:	f000 80bd 	beq.w	800489a <__kernel_rem_pio2f+0x2a6>
 8004720:	2d02      	cmp	r5, #2
 8004722:	d16a      	bne.n	80047fa <__kernel_rem_pio2f+0x206>
 8004724:	4649      	mov	r1, r9
 8004726:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800472a:	f7fb fd13 	bl	8000154 <__aeabi_fsub>
 800472e:	4681      	mov	r9, r0
 8004730:	f1ba 0f00 	cmp.w	sl, #0
 8004734:	d061      	beq.n	80047fa <__kernel_rem_pio2f+0x206>
 8004736:	4639      	mov	r1, r7
 8004738:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800473c:	f000 f9f8 	bl	8004b30 <scalbnf>
 8004740:	4601      	mov	r1, r0
 8004742:	4648      	mov	r0, r9
 8004744:	f7fb fd06 	bl	8000154 <__aeabi_fsub>
 8004748:	4681      	mov	r9, r0
 800474a:	e056      	b.n	80047fa <__kernel_rem_pio2f+0x206>
 800474c:	2400      	movs	r4, #0
 800474e:	e768      	b.n	8004622 <__kernel_rem_pio2f+0x2e>
 8004750:	eb18 0f05 	cmn.w	r8, r5
 8004754:	d407      	bmi.n	8004766 <__kernel_rem_pio2f+0x172>
 8004756:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800475a:	f7fb fdb1 	bl	80002c0 <__aeabi_i2f>
 800475e:	f846 0b04 	str.w	r0, [r6], #4
 8004762:	3501      	adds	r5, #1
 8004764:	e770      	b.n	8004648 <__kernel_rem_pio2f+0x54>
 8004766:	4658      	mov	r0, fp
 8004768:	e7f9      	b.n	800475e <__kernel_rem_pio2f+0x16a>
 800476a:	9307      	str	r3, [sp, #28]
 800476c:	9b05      	ldr	r3, [sp, #20]
 800476e:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 8004772:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004776:	f7fb fdf7 	bl	8000368 <__aeabi_fmul>
 800477a:	4601      	mov	r1, r0
 800477c:	4630      	mov	r0, r6
 800477e:	f7fb fceb 	bl	8000158 <__addsf3>
 8004782:	4606      	mov	r6, r0
 8004784:	9b07      	ldr	r3, [sp, #28]
 8004786:	f108 0801 	add.w	r8, r8, #1
 800478a:	9a03      	ldr	r2, [sp, #12]
 800478c:	4590      	cmp	r8, r2
 800478e:	ddec      	ble.n	800476a <__kernel_rem_pio2f+0x176>
 8004790:	f84a 6b04 	str.w	r6, [sl], #4
 8004794:	f109 0901 	add.w	r9, r9, #1
 8004798:	3504      	adds	r5, #4
 800479a:	e761      	b.n	8004660 <__kernel_rem_pio2f+0x6c>
 800479c:	46ab      	mov	fp, r5
 800479e:	461e      	mov	r6, r3
 80047a0:	f04f 0800 	mov.w	r8, #0
 80047a4:	e7f1      	b.n	800478a <__kernel_rem_pio2f+0x196>
 80047a6:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80047aa:	4658      	mov	r0, fp
 80047ac:	f7fb fddc 	bl	8000368 <__aeabi_fmul>
 80047b0:	f7fb ffb6 	bl	8000720 <__aeabi_f2iz>
 80047b4:	f7fb fd84 	bl	80002c0 <__aeabi_i2f>
 80047b8:	4649      	mov	r1, r9
 80047ba:	9009      	str	r0, [sp, #36]	@ 0x24
 80047bc:	f7fb fdd4 	bl	8000368 <__aeabi_fmul>
 80047c0:	4601      	mov	r1, r0
 80047c2:	4658      	mov	r0, fp
 80047c4:	f7fb fcc6 	bl	8000154 <__aeabi_fsub>
 80047c8:	f7fb ffaa 	bl	8000720 <__aeabi_f2iz>
 80047cc:	3d01      	subs	r5, #1
 80047ce:	f846 0b04 	str.w	r0, [r6], #4
 80047d2:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80047d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80047d8:	f7fb fcbe 	bl	8000158 <__addsf3>
 80047dc:	4683      	mov	fp, r0
 80047de:	e75a      	b.n	8004696 <__kernel_rem_pio2f+0xa2>
 80047e0:	d105      	bne.n	80047ee <__kernel_rem_pio2f+0x1fa>
 80047e2:	1e63      	subs	r3, r4, #1
 80047e4:	aa0a      	add	r2, sp, #40	@ 0x28
 80047e6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80047ea:	11ed      	asrs	r5, r5, #7
 80047ec:	e788      	b.n	8004700 <__kernel_rem_pio2f+0x10c>
 80047ee:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80047f2:	f7fb ff6b 	bl	80006cc <__aeabi_fcmpge>
 80047f6:	4605      	mov	r5, r0
 80047f8:	bb90      	cbnz	r0, 8004860 <__kernel_rem_pio2f+0x26c>
 80047fa:	2100      	movs	r1, #0
 80047fc:	4648      	mov	r0, r9
 80047fe:	f7fb ff47 	bl	8000690 <__aeabi_fcmpeq>
 8004802:	2800      	cmp	r0, #0
 8004804:	f000 8090 	beq.w	8004928 <__kernel_rem_pio2f+0x334>
 8004808:	2200      	movs	r2, #0
 800480a:	1e63      	subs	r3, r4, #1
 800480c:	9901      	ldr	r1, [sp, #4]
 800480e:	428b      	cmp	r3, r1
 8004810:	da4a      	bge.n	80048a8 <__kernel_rem_pio2f+0x2b4>
 8004812:	2a00      	cmp	r2, #0
 8004814:	d076      	beq.n	8004904 <__kernel_rem_pio2f+0x310>
 8004816:	3c01      	subs	r4, #1
 8004818:	ab0a      	add	r3, sp, #40	@ 0x28
 800481a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800481e:	3f08      	subs	r7, #8
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f8      	beq.n	8004816 <__kernel_rem_pio2f+0x222>
 8004824:	4639      	mov	r1, r7
 8004826:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800482a:	f000 f981 	bl	8004b30 <scalbnf>
 800482e:	46a2      	mov	sl, r4
 8004830:	4607      	mov	r7, r0
 8004832:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8004836:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800483a:	f1ba 0f00 	cmp.w	sl, #0
 800483e:	f280 80a1 	bge.w	8004984 <__kernel_rem_pio2f+0x390>
 8004842:	4627      	mov	r7, r4
 8004844:	2200      	movs	r2, #0
 8004846:	2f00      	cmp	r7, #0
 8004848:	f2c0 80cb 	blt.w	80049e2 <__kernel_rem_pio2f+0x3ee>
 800484c:	a946      	add	r1, sp, #280	@ 0x118
 800484e:	4690      	mov	r8, r2
 8004850:	f04f 0a00 	mov.w	sl, #0
 8004854:	4b18      	ldr	r3, [pc, #96]	@ (80048b8 <__kernel_rem_pio2f+0x2c4>)
 8004856:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800485a:	eba4 0907 	sub.w	r9, r4, r7
 800485e:	e0b4      	b.n	80049ca <__kernel_rem_pio2f+0x3d6>
 8004860:	2502      	movs	r5, #2
 8004862:	e74f      	b.n	8004704 <__kernel_rem_pio2f+0x110>
 8004864:	f858 3b04 	ldr.w	r3, [r8], #4
 8004868:	f1ba 0f00 	cmp.w	sl, #0
 800486c:	d108      	bne.n	8004880 <__kernel_rem_pio2f+0x28c>
 800486e:	b123      	cbz	r3, 800487a <__kernel_rem_pio2f+0x286>
 8004870:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004874:	f848 3c04 	str.w	r3, [r8, #-4]
 8004878:	2301      	movs	r3, #1
 800487a:	469a      	mov	sl, r3
 800487c:	3201      	adds	r2, #1
 800487e:	e744      	b.n	800470a <__kernel_rem_pio2f+0x116>
 8004880:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8004884:	e7f6      	b.n	8004874 <__kernel_rem_pio2f+0x280>
 8004886:	1e62      	subs	r2, r4, #1
 8004888:	ab0a      	add	r3, sp, #40	@ 0x28
 800488a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800488e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004892:	a90a      	add	r1, sp, #40	@ 0x28
 8004894:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004898:	e742      	b.n	8004720 <__kernel_rem_pio2f+0x12c>
 800489a:	1e62      	subs	r2, r4, #1
 800489c:	ab0a      	add	r3, sp, #40	@ 0x28
 800489e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048a6:	e7f4      	b.n	8004892 <__kernel_rem_pio2f+0x29e>
 80048a8:	a90a      	add	r1, sp, #40	@ 0x28
 80048aa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	430a      	orrs	r2, r1
 80048b2:	e7ab      	b.n	800480c <__kernel_rem_pio2f+0x218>
 80048b4:	0800510c 	.word	0x0800510c
 80048b8:	080050e0 	.word	0x080050e0
 80048bc:	3301      	adds	r3, #1
 80048be:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80048c2:	2900      	cmp	r1, #0
 80048c4:	d0fa      	beq.n	80048bc <__kernel_rem_pio2f+0x2c8>
 80048c6:	9a04      	ldr	r2, [sp, #16]
 80048c8:	a91e      	add	r1, sp, #120	@ 0x78
 80048ca:	18a2      	adds	r2, r4, r2
 80048cc:	1c66      	adds	r6, r4, #1
 80048ce:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80048d2:	441c      	add	r4, r3
 80048d4:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80048d8:	42b4      	cmp	r4, r6
 80048da:	f6ff aecf 	blt.w	800467c <__kernel_rem_pio2f+0x88>
 80048de:	9b07      	ldr	r3, [sp, #28]
 80048e0:	46ab      	mov	fp, r5
 80048e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048e6:	f7fb fceb 	bl	80002c0 <__aeabi_i2f>
 80048ea:	f04f 0a00 	mov.w	sl, #0
 80048ee:	f04f 0800 	mov.w	r8, #0
 80048f2:	6028      	str	r0, [r5, #0]
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	459a      	cmp	sl, r3
 80048f8:	dd07      	ble.n	800490a <__kernel_rem_pio2f+0x316>
 80048fa:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80048fe:	3504      	adds	r5, #4
 8004900:	3601      	adds	r6, #1
 8004902:	e7e9      	b.n	80048d8 <__kernel_rem_pio2f+0x2e4>
 8004904:	2301      	movs	r3, #1
 8004906:	9a08      	ldr	r2, [sp, #32]
 8004908:	e7d9      	b.n	80048be <__kernel_rem_pio2f+0x2ca>
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	f85b 0904 	ldr.w	r0, [fp], #-4
 8004910:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8004914:	f7fb fd28 	bl	8000368 <__aeabi_fmul>
 8004918:	4601      	mov	r1, r0
 800491a:	4640      	mov	r0, r8
 800491c:	f7fb fc1c 	bl	8000158 <__addsf3>
 8004920:	f10a 0a01 	add.w	sl, sl, #1
 8004924:	4680      	mov	r8, r0
 8004926:	e7e5      	b.n	80048f4 <__kernel_rem_pio2f+0x300>
 8004928:	9b06      	ldr	r3, [sp, #24]
 800492a:	9a02      	ldr	r2, [sp, #8]
 800492c:	4648      	mov	r0, r9
 800492e:	1a99      	subs	r1, r3, r2
 8004930:	f000 f8fe 	bl	8004b30 <scalbnf>
 8004934:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004938:	4680      	mov	r8, r0
 800493a:	f7fb fec7 	bl	80006cc <__aeabi_fcmpge>
 800493e:	b1f8      	cbz	r0, 8004980 <__kernel_rem_pio2f+0x38c>
 8004940:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8004944:	4640      	mov	r0, r8
 8004946:	f7fb fd0f 	bl	8000368 <__aeabi_fmul>
 800494a:	f7fb fee9 	bl	8000720 <__aeabi_f2iz>
 800494e:	f7fb fcb7 	bl	80002c0 <__aeabi_i2f>
 8004952:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8004956:	4681      	mov	r9, r0
 8004958:	f7fb fd06 	bl	8000368 <__aeabi_fmul>
 800495c:	4601      	mov	r1, r0
 800495e:	4640      	mov	r0, r8
 8004960:	f7fb fbf8 	bl	8000154 <__aeabi_fsub>
 8004964:	f7fb fedc 	bl	8000720 <__aeabi_f2iz>
 8004968:	ab0a      	add	r3, sp, #40	@ 0x28
 800496a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800496e:	4648      	mov	r0, r9
 8004970:	3401      	adds	r4, #1
 8004972:	3708      	adds	r7, #8
 8004974:	f7fb fed4 	bl	8000720 <__aeabi_f2iz>
 8004978:	ab0a      	add	r3, sp, #40	@ 0x28
 800497a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800497e:	e751      	b.n	8004824 <__kernel_rem_pio2f+0x230>
 8004980:	4640      	mov	r0, r8
 8004982:	e7f7      	b.n	8004974 <__kernel_rem_pio2f+0x380>
 8004984:	ab0a      	add	r3, sp, #40	@ 0x28
 8004986:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800498a:	f7fb fc99 	bl	80002c0 <__aeabi_i2f>
 800498e:	4639      	mov	r1, r7
 8004990:	f7fb fcea 	bl	8000368 <__aeabi_fmul>
 8004994:	4649      	mov	r1, r9
 8004996:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800499a:	4638      	mov	r0, r7
 800499c:	f7fb fce4 	bl	8000368 <__aeabi_fmul>
 80049a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a4:	4607      	mov	r7, r0
 80049a6:	e748      	b.n	800483a <__kernel_rem_pio2f+0x246>
 80049a8:	f853 0b04 	ldr.w	r0, [r3], #4
 80049ac:	f85b 1b04 	ldr.w	r1, [fp], #4
 80049b0:	9203      	str	r2, [sp, #12]
 80049b2:	9302      	str	r3, [sp, #8]
 80049b4:	f7fb fcd8 	bl	8000368 <__aeabi_fmul>
 80049b8:	4601      	mov	r1, r0
 80049ba:	4640      	mov	r0, r8
 80049bc:	f7fb fbcc 	bl	8000158 <__addsf3>
 80049c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80049c4:	4680      	mov	r8, r0
 80049c6:	f10a 0a01 	add.w	sl, sl, #1
 80049ca:	9901      	ldr	r1, [sp, #4]
 80049cc:	458a      	cmp	sl, r1
 80049ce:	dc01      	bgt.n	80049d4 <__kernel_rem_pio2f+0x3e0>
 80049d0:	45ca      	cmp	sl, r9
 80049d2:	dde9      	ble.n	80049a8 <__kernel_rem_pio2f+0x3b4>
 80049d4:	ab5a      	add	r3, sp, #360	@ 0x168
 80049d6:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80049da:	f849 8ca0 	str.w	r8, [r9, #-160]
 80049de:	3f01      	subs	r7, #1
 80049e0:	e731      	b.n	8004846 <__kernel_rem_pio2f+0x252>
 80049e2:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	dc07      	bgt.n	80049f8 <__kernel_rem_pio2f+0x404>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	dc4e      	bgt.n	8004a8a <__kernel_rem_pio2f+0x496>
 80049ec:	d02e      	beq.n	8004a4c <__kernel_rem_pio2f+0x458>
 80049ee:	f006 0007 	and.w	r0, r6, #7
 80049f2:	b05b      	add	sp, #364	@ 0x16c
 80049f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d1f7      	bne.n	80049ee <__kernel_rem_pio2f+0x3fa>
 80049fe:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8004a02:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8004a06:	46b8      	mov	r8, r7
 8004a08:	46a2      	mov	sl, r4
 8004a0a:	f1ba 0f00 	cmp.w	sl, #0
 8004a0e:	dc49      	bgt.n	8004aa4 <__kernel_rem_pio2f+0x4b0>
 8004a10:	46a1      	mov	r9, r4
 8004a12:	f1b9 0f01 	cmp.w	r9, #1
 8004a16:	dc60      	bgt.n	8004ada <__kernel_rem_pio2f+0x4e6>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	2c01      	cmp	r4, #1
 8004a1c:	dc76      	bgt.n	8004b0c <__kernel_rem_pio2f+0x518>
 8004a1e:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8004a20:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8004a22:	2d00      	cmp	r5, #0
 8004a24:	d178      	bne.n	8004b18 <__kernel_rem_pio2f+0x524>
 8004a26:	9900      	ldr	r1, [sp, #0]
 8004a28:	600a      	str	r2, [r1, #0]
 8004a2a:	460a      	mov	r2, r1
 8004a2c:	604b      	str	r3, [r1, #4]
 8004a2e:	6090      	str	r0, [r2, #8]
 8004a30:	e7dd      	b.n	80049ee <__kernel_rem_pio2f+0x3fa>
 8004a32:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8004a36:	f7fb fb8f 	bl	8000158 <__addsf3>
 8004a3a:	3c01      	subs	r4, #1
 8004a3c:	2c00      	cmp	r4, #0
 8004a3e:	daf8      	bge.n	8004a32 <__kernel_rem_pio2f+0x43e>
 8004a40:	b10d      	cbz	r5, 8004a46 <__kernel_rem_pio2f+0x452>
 8004a42:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004a46:	9b00      	ldr	r3, [sp, #0]
 8004a48:	6018      	str	r0, [r3, #0]
 8004a4a:	e7d0      	b.n	80049ee <__kernel_rem_pio2f+0x3fa>
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	af32      	add	r7, sp, #200	@ 0xc8
 8004a50:	e7f4      	b.n	8004a3c <__kernel_rem_pio2f+0x448>
 8004a52:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8004a56:	f7fb fb7f 	bl	8000158 <__addsf3>
 8004a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004a5e:	f1b8 0f00 	cmp.w	r8, #0
 8004a62:	daf6      	bge.n	8004a52 <__kernel_rem_pio2f+0x45e>
 8004a64:	b1ad      	cbz	r5, 8004a92 <__kernel_rem_pio2f+0x49e>
 8004a66:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8004a6a:	9a00      	ldr	r2, [sp, #0]
 8004a6c:	4601      	mov	r1, r0
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8004a72:	f7fb fb6f 	bl	8000154 <__aeabi_fsub>
 8004a76:	f04f 0801 	mov.w	r8, #1
 8004a7a:	4544      	cmp	r4, r8
 8004a7c:	da0b      	bge.n	8004a96 <__kernel_rem_pio2f+0x4a2>
 8004a7e:	b10d      	cbz	r5, 8004a84 <__kernel_rem_pio2f+0x490>
 8004a80:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004a84:	9b00      	ldr	r3, [sp, #0]
 8004a86:	6058      	str	r0, [r3, #4]
 8004a88:	e7b1      	b.n	80049ee <__kernel_rem_pio2f+0x3fa>
 8004a8a:	46a0      	mov	r8, r4
 8004a8c:	2000      	movs	r0, #0
 8004a8e:	af32      	add	r7, sp, #200	@ 0xc8
 8004a90:	e7e5      	b.n	8004a5e <__kernel_rem_pio2f+0x46a>
 8004a92:	4603      	mov	r3, r0
 8004a94:	e7e9      	b.n	8004a6a <__kernel_rem_pio2f+0x476>
 8004a96:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8004a9a:	f7fb fb5d 	bl	8000158 <__addsf3>
 8004a9e:	f108 0801 	add.w	r8, r8, #1
 8004aa2:	e7ea      	b.n	8004a7a <__kernel_rem_pio2f+0x486>
 8004aa4:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa8:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004aac:	4619      	mov	r1, r3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	9201      	str	r2, [sp, #4]
 8004ab4:	f7fb fb50 	bl	8000158 <__addsf3>
 8004ab8:	9a01      	ldr	r2, [sp, #4]
 8004aba:	4601      	mov	r1, r0
 8004abc:	4681      	mov	r9, r0
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f7fb fb48 	bl	8000154 <__aeabi_fsub>
 8004ac4:	9b02      	ldr	r3, [sp, #8]
 8004ac6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aca:	4619      	mov	r1, r3
 8004acc:	f7fb fb44 	bl	8000158 <__addsf3>
 8004ad0:	f848 0904 	str.w	r0, [r8], #-4
 8004ad4:	f8c8 9000 	str.w	r9, [r8]
 8004ad8:	e797      	b.n	8004a0a <__kernel_rem_pio2f+0x416>
 8004ada:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8004ade:	f8d7 a000 	ldr.w	sl, [r7]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	4651      	mov	r1, sl
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	f7fb fb36 	bl	8000158 <__addsf3>
 8004aec:	9b01      	ldr	r3, [sp, #4]
 8004aee:	4601      	mov	r1, r0
 8004af0:	4680      	mov	r8, r0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fb fb2e 	bl	8000154 <__aeabi_fsub>
 8004af8:	4651      	mov	r1, sl
 8004afa:	f7fb fb2d 	bl	8000158 <__addsf3>
 8004afe:	f847 0904 	str.w	r0, [r7], #-4
 8004b02:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b06:	f8c7 8000 	str.w	r8, [r7]
 8004b0a:	e782      	b.n	8004a12 <__kernel_rem_pio2f+0x41e>
 8004b0c:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8004b10:	f7fb fb22 	bl	8000158 <__addsf3>
 8004b14:	3c01      	subs	r4, #1
 8004b16:	e780      	b.n	8004a1a <__kernel_rem_pio2f+0x426>
 8004b18:	9900      	ldr	r1, [sp, #0]
 8004b1a:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8004b1e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8004b22:	600a      	str	r2, [r1, #0]
 8004b24:	604b      	str	r3, [r1, #4]
 8004b26:	460a      	mov	r2, r1
 8004b28:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004b2c:	e77f      	b.n	8004a2e <__kernel_rem_pio2f+0x43a>
 8004b2e:	bf00      	nop

08004b30 <scalbnf>:
 8004b30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4603      	mov	r3, r0
 8004b38:	460d      	mov	r5, r1
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	d02e      	beq.n	8004b9c <scalbnf+0x6c>
 8004b3e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8004b42:	d304      	bcc.n	8004b4e <scalbnf+0x1e>
 8004b44:	4601      	mov	r1, r0
 8004b46:	f7fb fb07 	bl	8000158 <__addsf3>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	e026      	b.n	8004b9c <scalbnf+0x6c>
 8004b4e:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8004b52:	d118      	bne.n	8004b86 <scalbnf+0x56>
 8004b54:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8004b58:	f7fb fc06 	bl	8000368 <__aeabi_fmul>
 8004b5c:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <scalbnf+0x8c>)
 8004b5e:	4603      	mov	r3, r0
 8004b60:	4295      	cmp	r5, r2
 8004b62:	db0c      	blt.n	8004b7e <scalbnf+0x4e>
 8004b64:	4604      	mov	r4, r0
 8004b66:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8004b6a:	3a19      	subs	r2, #25
 8004b6c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004b70:	428d      	cmp	r5, r1
 8004b72:	dd0a      	ble.n	8004b8a <scalbnf+0x5a>
 8004b74:	4912      	ldr	r1, [pc, #72]	@ (8004bc0 <scalbnf+0x90>)
 8004b76:	4618      	mov	r0, r3
 8004b78:	f361 001e 	bfi	r0, r1, #0, #31
 8004b7c:	e000      	b.n	8004b80 <scalbnf+0x50>
 8004b7e:	4911      	ldr	r1, [pc, #68]	@ (8004bc4 <scalbnf+0x94>)
 8004b80:	f7fb fbf2 	bl	8000368 <__aeabi_fmul>
 8004b84:	e7e1      	b.n	8004b4a <scalbnf+0x1a>
 8004b86:	0dd2      	lsrs	r2, r2, #23
 8004b88:	e7f0      	b.n	8004b6c <scalbnf+0x3c>
 8004b8a:	1951      	adds	r1, r2, r5
 8004b8c:	29fe      	cmp	r1, #254	@ 0xfe
 8004b8e:	dcf1      	bgt.n	8004b74 <scalbnf+0x44>
 8004b90:	2900      	cmp	r1, #0
 8004b92:	dd05      	ble.n	8004ba0 <scalbnf+0x70>
 8004b94:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004b98:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ba0:	f111 0f16 	cmn.w	r1, #22
 8004ba4:	da01      	bge.n	8004baa <scalbnf+0x7a>
 8004ba6:	4907      	ldr	r1, [pc, #28]	@ (8004bc4 <scalbnf+0x94>)
 8004ba8:	e7e5      	b.n	8004b76 <scalbnf+0x46>
 8004baa:	f101 0019 	add.w	r0, r1, #25
 8004bae:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8004bb2:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8004bb6:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8004bba:	e7e1      	b.n	8004b80 <scalbnf+0x50>
 8004bbc:	ffff3cb0 	.word	0xffff3cb0
 8004bc0:	7149f2ca 	.word	0x7149f2ca
 8004bc4:	0da24260 	.word	0x0da24260

08004bc8 <floorf>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8004bce:	3d7f      	subs	r5, #127	@ 0x7f
 8004bd0:	2d16      	cmp	r5, #22
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8004bda:	dc26      	bgt.n	8004c2a <floorf+0x62>
 8004bdc:	2d00      	cmp	r5, #0
 8004bde:	da0f      	bge.n	8004c00 <floorf+0x38>
 8004be0:	4917      	ldr	r1, [pc, #92]	@ (8004c40 <floorf+0x78>)
 8004be2:	f7fb fab9 	bl	8000158 <__addsf3>
 8004be6:	2100      	movs	r1, #0
 8004be8:	f7fb fd7a 	bl	80006e0 <__aeabi_fcmpgt>
 8004bec:	b130      	cbz	r0, 8004bfc <floorf+0x34>
 8004bee:	2c00      	cmp	r4, #0
 8004bf0:	da23      	bge.n	8004c3a <floorf+0x72>
 8004bf2:	2e00      	cmp	r6, #0
 8004bf4:	4c13      	ldr	r4, [pc, #76]	@ (8004c44 <floorf+0x7c>)
 8004bf6:	bf08      	it	eq
 8004bf8:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	e01a      	b.n	8004c36 <floorf+0x6e>
 8004c00:	4e11      	ldr	r6, [pc, #68]	@ (8004c48 <floorf+0x80>)
 8004c02:	412e      	asrs	r6, r5
 8004c04:	4230      	tst	r0, r6
 8004c06:	d016      	beq.n	8004c36 <floorf+0x6e>
 8004c08:	490d      	ldr	r1, [pc, #52]	@ (8004c40 <floorf+0x78>)
 8004c0a:	f7fb faa5 	bl	8000158 <__addsf3>
 8004c0e:	2100      	movs	r1, #0
 8004c10:	f7fb fd66 	bl	80006e0 <__aeabi_fcmpgt>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d0f1      	beq.n	8004bfc <floorf+0x34>
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	bfbe      	ittt	lt
 8004c1c:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8004c20:	412b      	asrlt	r3, r5
 8004c22:	18e4      	addlt	r4, r4, r3
 8004c24:	ea24 0406 	bic.w	r4, r4, r6
 8004c28:	e7e8      	b.n	8004bfc <floorf+0x34>
 8004c2a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8004c2e:	d302      	bcc.n	8004c36 <floorf+0x6e>
 8004c30:	f7fb fa92 	bl	8000158 <__addsf3>
 8004c34:	4601      	mov	r1, r0
 8004c36:	4608      	mov	r0, r1
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	2400      	movs	r4, #0
 8004c3c:	e7de      	b.n	8004bfc <floorf+0x34>
 8004c3e:	bf00      	nop
 8004c40:	7149f2ca 	.word	0x7149f2ca
 8004c44:	bf800000 	.word	0xbf800000
 8004c48:	007fffff 	.word	0x007fffff

08004c4c <_init>:
 8004c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c4e:	bf00      	nop
 8004c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c52:	bc08      	pop	{r3}
 8004c54:	469e      	mov	lr, r3
 8004c56:	4770      	bx	lr

08004c58 <_fini>:
 8004c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5a:	bf00      	nop
 8004c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c5e:	bc08      	pop	{r3}
 8004c60:	469e      	mov	lr, r3
 8004c62:	4770      	bx	lr
