
PACMAN_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  08005c5c  08005c5c  00006c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060dc  080060dc  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080060dc  080060dc  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080060dc  080060dc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060dc  080060dc  000070dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060e0  080060e0  000070e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080060e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000005c  08006140  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08006140  000082e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e5  00000000  00000000  00008085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd0  00000000  00000000  0001696a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  00018540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3f  00000000  00000000  000194a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017be2  00000000  00000000  0001a0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010da6  00000000  00000000  00031cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d188  00000000  00000000  00042a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfbef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004748  00000000  00000000  000cfc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000d437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005c44 	.word	0x08005c44

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005c44 	.word	0x08005c44

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpun>:
 80006f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000700:	d102      	bne.n	8000708 <__aeabi_fcmpun+0x14>
 8000702:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000706:	d108      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000708:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800070c:	d102      	bne.n	8000714 <__aeabi_fcmpun+0x20>
 800070e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000712:	d102      	bne.n	800071a <__aeabi_fcmpun+0x26>
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	4770      	bx	lr
 800071a:	f04f 0001 	mov.w	r0, #1
 800071e:	4770      	bx	lr

08000720 <__aeabi_f2iz>:
 8000720:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000724:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000728:	d30f      	bcc.n	800074a <__aeabi_f2iz+0x2a>
 800072a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800072e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000732:	d90d      	bls.n	8000750 <__aeabi_f2iz+0x30>
 8000734:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000738:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000740:	fa23 f002 	lsr.w	r0, r3, r2
 8000744:	bf18      	it	ne
 8000746:	4240      	negne	r0, r0
 8000748:	4770      	bx	lr
 800074a:	f04f 0000 	mov.w	r0, #0
 800074e:	4770      	bx	lr
 8000750:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000754:	d101      	bne.n	800075a <__aeabi_f2iz+0x3a>
 8000756:	0242      	lsls	r2, r0, #9
 8000758:	d105      	bne.n	8000766 <__aeabi_f2iz+0x46>
 800075a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800075e:	bf08      	it	eq
 8000760:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000764:	4770      	bx	lr
 8000766:	f04f 0000 	mov.w	r0, #0
 800076a:	4770      	bx	lr

0800076c <LCD_CS_LOW>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ---------- LCD low-level (핀은 CubeMX에서 설정된 그대로 사용) ---------- */
static inline void LCD_CS_LOW(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <LCD_CS_LOW+0x14>)
 8000776:	f002 fea6 	bl	80034c6 <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40010c00 	.word	0x40010c00

08000784 <LCD_CS_HIGH>:
static inline void LCD_CS_HIGH(void) {
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	4802      	ldr	r0, [pc, #8]	@ (8000798 <LCD_CS_HIGH+0x14>)
 800078e:	f002 fe9a 	bl	80034c6 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40010c00 	.word	0x40010c00

0800079c <LCD_RS_CMD>:
static inline void LCD_RS_CMD(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	4802      	ldr	r0, [pc, #8]	@ (80007b0 <LCD_RS_CMD+0x14>)
 80007a6:	f002 fe8e 	bl	80034c6 <HAL_GPIO_WritePin>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010800 	.word	0x40010800

080007b4 <LCD_RS_DATA>:
static inline void LCD_RS_DATA(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	2110      	movs	r1, #16
 80007bc:	4802      	ldr	r0, [pc, #8]	@ (80007c8 <LCD_RS_DATA+0x14>)
 80007be:	f002 fe82 	bl	80034c6 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40010800 	.word	0x40010800

080007cc <LCD_WR_LOW>:
static inline void LCD_WR_LOW(void) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2102      	movs	r1, #2
 80007d4:	4802      	ldr	r0, [pc, #8]	@ (80007e0 <LCD_WR_LOW+0x14>)
 80007d6:	f002 fe76 	bl	80034c6 <HAL_GPIO_WritePin>
}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40010800 	.word	0x40010800

080007e4 <LCD_WR_HIGH>:
static inline void LCD_WR_HIGH(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2102      	movs	r1, #2
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <LCD_WR_HIGH+0x14>)
 80007ee:	f002 fe6a 	bl	80034c6 <HAL_GPIO_WritePin>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40010800 	.word	0x40010800

080007fc <LCD_RD_HIGH>:
static inline void LCD_RD_HIGH(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2101      	movs	r1, #1
 8000804:	4802      	ldr	r0, [pc, #8]	@ (8000810 <LCD_RD_HIGH+0x14>)
 8000806:	f002 fe5e 	bl	80034c6 <HAL_GPIO_WritePin>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010800 	.word	0x40010800

08000814 <LCD_RST_LOW>:
static inline void LCD_RST_LOW(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2102      	movs	r1, #2
 800081c:	4802      	ldr	r0, [pc, #8]	@ (8000828 <LCD_RST_LOW+0x14>)
 800081e:	f002 fe52 	bl	80034c6 <HAL_GPIO_WritePin>
}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40011000 	.word	0x40011000

0800082c <LCD_RST_HIGH>:
static inline void LCD_RST_HIGH(void) {
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2102      	movs	r1, #2
 8000834:	4802      	ldr	r0, [pc, #8]	@ (8000840 <LCD_RST_HIGH+0x14>)
 8000836:	f002 fe46 	bl	80034c6 <HAL_GPIO_WritePin>
}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40011000 	.word	0x40011000

08000844 <LCD_SET_DATA>:

static inline void LCD_SET_DATA(uint8_t d) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
			(d & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin,
 8000856:	461a      	mov	r2, r3
 8000858:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800085c:	4829      	ldr	r0, [pc, #164]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800085e:	f002 fe32 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
			(d & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	105b      	asrs	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin,
 800086e:	461a      	mov	r2, r3
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	4825      	ldr	r0, [pc, #148]	@ (8000908 <LCD_SET_DATA+0xc4>)
 8000874:	f002 fe27 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
			(d & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	109b      	asrs	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin,
 8000884:	461a      	mov	r2, r3
 8000886:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800088a:	481e      	ldr	r0, [pc, #120]	@ (8000904 <LCD_SET_DATA+0xc0>)
 800088c:	f002 fe1b 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
			(d & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	10db      	asrs	r3, r3, #3
 8000894:	b2db      	uxtb	r3, r3
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin,
 800089c:	461a      	mov	r2, r3
 800089e:	2108      	movs	r1, #8
 80008a0:	481a      	ldr	r0, [pc, #104]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008a2:	f002 fe10 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
			(d & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	111b      	asrs	r3, r3, #4
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin,
 80008b2:	461a      	mov	r2, r3
 80008b4:	2120      	movs	r1, #32
 80008b6:	4815      	ldr	r0, [pc, #84]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008b8:	f002 fe05 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
			(d & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	115b      	asrs	r3, r3, #5
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin,
 80008c8:	461a      	mov	r2, r3
 80008ca:	2110      	movs	r1, #16
 80008cc:	480f      	ldr	r0, [pc, #60]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008ce:	f002 fdfa 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
			(d & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	119b      	asrs	r3, r3, #6
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin,
 80008de:	461a      	mov	r2, r3
 80008e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <LCD_SET_DATA+0xc8>)
 80008e6:	f002 fdee 	bl	80034c6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
			(d & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	09db      	lsrs	r3, r3, #7
 80008ee:	b2db      	uxtb	r3, r3
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin,
 80008f0:	461a      	mov	r2, r3
 80008f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f6:	4803      	ldr	r0, [pc, #12]	@ (8000904 <LCD_SET_DATA+0xc0>)
 80008f8:	f002 fde5 	bl	80034c6 <HAL_GPIO_WritePin>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40010800 	.word	0x40010800
 8000908:	40011000 	.word	0x40011000
 800090c:	40010c00 	.word	0x40010c00

08000910 <LCD_WRITE_STROBE>:
static inline void LCD_WRITE_STROBE(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	__NOP();
 8000914:	bf00      	nop
	__NOP();
 8000916:	bf00      	nop
	LCD_WR_LOW();
 8000918:	f7ff ff58 	bl	80007cc <LCD_WR_LOW>
	__NOP();
 800091c:	bf00      	nop
	__NOP();
 800091e:	bf00      	nop
	__NOP();
 8000920:	bf00      	nop
	__NOP();
 8000922:	bf00      	nop
	LCD_WR_HIGH();
 8000924:	f7ff ff5e 	bl	80007e4 <LCD_WR_HIGH>
	__NOP();
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}

0800092e <ILI9341_WriteCmd>:
static void ILI9341_WriteCmd(uint8_t cmd) {
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
	LCD_RS_CMD();
 8000938:	f7ff ff30 	bl	800079c <LCD_RS_CMD>
	LCD_SET_DATA(cmd);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff80 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 8000944:	f7ff ffe4 	bl	8000910 <LCD_WRITE_STROBE>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}

08000950 <ILI9341_WriteData8>:
static void ILI9341_WriteData8(uint8_t d) {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	LCD_RS_DATA();
 800095a:	f7ff ff2b 	bl	80007b4 <LCD_RS_DATA>
	LCD_SET_DATA(d);
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ff6f 	bl	8000844 <LCD_SET_DATA>
	LCD_WRITE_STROBE();
 8000966:	f7ff ffd3 	bl	8000910 <LCD_WRITE_STROBE>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <ILI9341_WriteData16>:
static void ILI9341_WriteData16(uint16_t d) {
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	80fb      	strh	r3, [r7, #6]
	ILI9341_WriteData8(d >> 8);
 800097c:	88fb      	ldrh	r3, [r7, #6]
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b29b      	uxth	r3, r3
 8000982:	b2db      	uxtb	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ffe3 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(d & 0xFF);
 800098a:	88fb      	ldrh	r3, [r7, #6]
 800098c:	b2db      	uxtb	r3, r3
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffde 	bl	8000950 <ILI9341_WriteData8>
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <ILI9341_SetWindow>:
static void ILI9341_SetWindow(uint16_t x0, uint16_t y0, uint16_t x1,
		uint16_t y1) {
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4604      	mov	r4, r0
 80009a4:	4608      	mov	r0, r1
 80009a6:	4611      	mov	r1, r2
 80009a8:	461a      	mov	r2, r3
 80009aa:	4623      	mov	r3, r4
 80009ac:	80fb      	strh	r3, [r7, #6]
 80009ae:	4603      	mov	r3, r0
 80009b0:	80bb      	strh	r3, [r7, #4]
 80009b2:	460b      	mov	r3, r1
 80009b4:	807b      	strh	r3, [r7, #2]
 80009b6:	4613      	mov	r3, r2
 80009b8:	803b      	strh	r3, [r7, #0]
	ILI9341_WriteCmd(0x2A);
 80009ba:	202a      	movs	r0, #42	@ 0x2a
 80009bc:	f7ff ffb7 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData16(x0);
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ffd5 	bl	8000972 <ILI9341_WriteData16>
	ILI9341_WriteData16(x1);
 80009c8:	887b      	ldrh	r3, [r7, #2]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffd1 	bl	8000972 <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2B);
 80009d0:	202b      	movs	r0, #43	@ 0x2b
 80009d2:	f7ff ffac 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData16(y0);
 80009d6:	88bb      	ldrh	r3, [r7, #4]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ffca 	bl	8000972 <ILI9341_WriteData16>
	ILI9341_WriteData16(y1);
 80009de:	883b      	ldrh	r3, [r7, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff ffc6 	bl	8000972 <ILI9341_WriteData16>
	ILI9341_WriteCmd(0x2C);
 80009e6:	202c      	movs	r0, #44	@ 0x2c
 80009e8:	f7ff ffa1 	bl	800092e <ILI9341_WriteCmd>
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd90      	pop	{r4, r7, pc}

080009f4 <ILI9341_FillRect>:
		return;
	ILI9341_SetWindow(x, y, x, y);
	ILI9341_WriteData16(c);
}
static void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h,
		uint16_t c) {
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4604      	mov	r4, r0
 80009fc:	4608      	mov	r0, r1
 80009fe:	4611      	mov	r1, r2
 8000a00:	461a      	mov	r2, r3
 8000a02:	4623      	mov	r3, r4
 8000a04:	80fb      	strh	r3, [r7, #6]
 8000a06:	4603      	mov	r3, r0
 8000a08:	80bb      	strh	r3, [r7, #4]
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	807b      	strh	r3, [r7, #2]
 8000a0e:	4613      	mov	r3, r2
 8000a10:	803b      	strh	r3, [r7, #0]
	if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8000a12:	88fb      	ldrh	r3, [r7, #6]
 8000a14:	2bef      	cmp	r3, #239	@ 0xef
 8000a16:	d834      	bhi.n	8000a82 <ILI9341_FillRect+0x8e>
 8000a18:	88bb      	ldrh	r3, [r7, #4]
 8000a1a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a1e:	d230      	bcs.n	8000a82 <ILI9341_FillRect+0x8e>
		return;
	uint16_t x1 = (x + w - 1 < LCD_WIDTH) ? (x + w - 1) : (LCD_WIDTH - 1);
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	4413      	add	r3, r2
 8000a26:	2bf0      	cmp	r3, #240	@ 0xf0
 8000a28:	bfa8      	it	ge
 8000a2a:	23f0      	movge	r3, #240	@ 0xf0
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	817b      	strh	r3, [r7, #10]
	uint16_t y1 = (y + h - 1 < LCD_HEIGHT) ? (y + h - 1) : (LCD_HEIGHT - 1);
 8000a32:	88ba      	ldrh	r2, [r7, #4]
 8000a34:	883b      	ldrh	r3, [r7, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a3c:	bfa8      	it	ge
 8000a3e:	f44f 73a0 	movge.w	r3, #320	@ 0x140
 8000a42:	b29b      	uxth	r3, r3
 8000a44:	3b01      	subs	r3, #1
 8000a46:	813b      	strh	r3, [r7, #8]
	ILI9341_SetWindow(x, y, x1, y1);
 8000a48:	893b      	ldrh	r3, [r7, #8]
 8000a4a:	897a      	ldrh	r2, [r7, #10]
 8000a4c:	88b9      	ldrh	r1, [r7, #4]
 8000a4e:	88f8      	ldrh	r0, [r7, #6]
 8000a50:	f7ff ffa4 	bl	800099c <ILI9341_SetWindow>
	uint32_t n = (uint32_t) (x1 - x + 1) * (uint32_t) (y1 - y + 1);
 8000a54:	897a      	ldrh	r2, [r7, #10]
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	893a      	ldrh	r2, [r7, #8]
 8000a60:	88bb      	ldrh	r3, [r7, #4]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	3301      	adds	r3, #1
 8000a66:	fb01 f303 	mul.w	r3, r1, r3
 8000a6a:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000a6c:	e003      	b.n	8000a76 <ILI9341_FillRect+0x82>
		ILI9341_WriteData16(c);
 8000a6e:	8c3b      	ldrh	r3, [r7, #32]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff7e 	bl	8000972 <ILI9341_WriteData16>
	while (n--)
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	1e5a      	subs	r2, r3, #1
 8000a7a:	60fa      	str	r2, [r7, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d1f6      	bne.n	8000a6e <ILI9341_FillRect+0x7a>
 8000a80:	e000      	b.n	8000a84 <ILI9341_FillRect+0x90>
		return;
 8000a82:	bf00      	nop
}
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd90      	pop	{r4, r7, pc}

08000a8a <ILI9341_FillScreen>:
static void ILI9341_FillScreen(uint16_t c) {
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b084      	sub	sp, #16
 8000a8e:	af02      	add	r7, sp, #8
 8000a90:	4603      	mov	r3, r0
 8000a92:	80fb      	strh	r3, [r7, #6]
	ILI9341_FillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, c);
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a9c:	22f0      	movs	r2, #240	@ 0xf0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f7ff ffa7 	bl	80009f4 <ILI9341_FillRect>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <ILI9341_SetRotation>:

/* ---- ILI9341 init & rotation (USER 영역 전용) ---- */
static void ILI9341_SetRotation(uint8_t rot) {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	71fb      	strb	r3, [r7, #7]
	/* 0: 세로 정상, 1: 가로(시계), 2: 180도, 3: 가로(반시계) */
	uint8_t madctl;
	switch (rot) {
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d00c      	beq.n	8000ad8 <ILI9341_SetRotation+0x2a>
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	dc0d      	bgt.n	8000ade <ILI9341_SetRotation+0x30>
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <ILI9341_SetRotation+0x1e>
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d003      	beq.n	8000ad2 <ILI9341_SetRotation+0x24>
 8000aca:	e008      	b.n	8000ade <ILI9341_SetRotation+0x30>
	case 0:
		madctl = 0x48;
 8000acc:	2348      	movs	r3, #72	@ 0x48
 8000ace:	73fb      	strb	r3, [r7, #15]
		break; /* MX|BGR */
 8000ad0:	e008      	b.n	8000ae4 <ILI9341_SetRotation+0x36>
	case 1:
		madctl = 0x28;
 8000ad2:	2328      	movs	r3, #40	@ 0x28
 8000ad4:	73fb      	strb	r3, [r7, #15]
		break; /* MV|BGR */
 8000ad6:	e005      	b.n	8000ae4 <ILI9341_SetRotation+0x36>
	case 2:
		madctl = 0xC8;
 8000ad8:	23c8      	movs	r3, #200	@ 0xc8
 8000ada:	73fb      	strb	r3, [r7, #15]
		break; /* MX|MY|BGR  -> 180° */
 8000adc:	e002      	b.n	8000ae4 <ILI9341_SetRotation+0x36>
	default:
		madctl = 0xE8;
 8000ade:	23e8      	movs	r3, #232	@ 0xe8
 8000ae0:	73fb      	strb	r3, [r7, #15]
		break;/* MX|MY|MV|BGR */
 8000ae2:	bf00      	nop
	}
	ILI9341_WriteCmd(0x36);
 8000ae4:	2036      	movs	r0, #54	@ 0x36
 8000ae6:	f7ff ff22 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(madctl);
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff2f 	bl	8000950 <ILI9341_WriteData8>
}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <ILI9341_Init>:
static void ILI9341_Init(void) {
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
	LCD_CS_HIGH();
 8000afe:	f7ff fe41 	bl	8000784 <LCD_CS_HIGH>
	LCD_WR_HIGH();
 8000b02:	f7ff fe6f 	bl	80007e4 <LCD_WR_HIGH>
	LCD_RD_HIGH();
 8000b06:	f7ff fe79 	bl	80007fc <LCD_RD_HIGH>
	LCD_RST_LOW();
 8000b0a:	f7ff fe83 	bl	8000814 <LCD_RST_LOW>
	HAL_Delay(20);
 8000b0e:	2014      	movs	r0, #20
 8000b10:	f002 fa0c 	bl	8002f2c <HAL_Delay>
	LCD_RST_HIGH();
 8000b14:	f7ff fe8a 	bl	800082c <LCD_RST_HIGH>
	HAL_Delay(120);
 8000b18:	2078      	movs	r0, #120	@ 0x78
 8000b1a:	f002 fa07 	bl	8002f2c <HAL_Delay>
	LCD_CS_LOW();
 8000b1e:	f7ff fe25 	bl	800076c <LCD_CS_LOW>

	ILI9341_WriteCmd(0x01);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff ff03 	bl	800092e <ILI9341_WriteCmd>
	HAL_Delay(5);
 8000b28:	2005      	movs	r0, #5
 8000b2a:	f002 f9ff 	bl	8002f2c <HAL_Delay>
	ILI9341_WriteCmd(0x28);
 8000b2e:	2028      	movs	r0, #40	@ 0x28
 8000b30:	f7ff fefd 	bl	800092e <ILI9341_WriteCmd>

	ILI9341_WriteCmd(0xCF);
 8000b34:	20cf      	movs	r0, #207	@ 0xcf
 8000b36:	f7ff fefa 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff ff08 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x83);
 8000b40:	2083      	movs	r0, #131	@ 0x83
 8000b42:	f7ff ff05 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x30);
 8000b46:	2030      	movs	r0, #48	@ 0x30
 8000b48:	f7ff ff02 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xED);
 8000b4c:	20ed      	movs	r0, #237	@ 0xed
 8000b4e:	f7ff feee 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x64);
 8000b52:	2064      	movs	r0, #100	@ 0x64
 8000b54:	f7ff fefc 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x03);
 8000b58:	2003      	movs	r0, #3
 8000b5a:	f7ff fef9 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x12);
 8000b5e:	2012      	movs	r0, #18
 8000b60:	f7ff fef6 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x81);
 8000b64:	2081      	movs	r0, #129	@ 0x81
 8000b66:	f7ff fef3 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xE8);
 8000b6a:	20e8      	movs	r0, #232	@ 0xe8
 8000b6c:	f7ff fedf 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x85);
 8000b70:	2085      	movs	r0, #133	@ 0x85
 8000b72:	f7ff feed 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x01);
 8000b76:	2001      	movs	r0, #1
 8000b78:	f7ff feea 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x79);
 8000b7c:	2079      	movs	r0, #121	@ 0x79
 8000b7e:	f7ff fee7 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xCB);
 8000b82:	20cb      	movs	r0, #203	@ 0xcb
 8000b84:	f7ff fed3 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x39);
 8000b88:	2039      	movs	r0, #57	@ 0x39
 8000b8a:	f7ff fee1 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x2C);
 8000b8e:	202c      	movs	r0, #44	@ 0x2c
 8000b90:	f7ff fede 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff fedb 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x34);
 8000b9a:	2034      	movs	r0, #52	@ 0x34
 8000b9c:	f7ff fed8 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x02);
 8000ba0:	2002      	movs	r0, #2
 8000ba2:	f7ff fed5 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xF7);
 8000ba6:	20f7      	movs	r0, #247	@ 0xf7
 8000ba8:	f7ff fec1 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x20);
 8000bac:	2020      	movs	r0, #32
 8000bae:	f7ff fecf 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xEA);
 8000bb2:	20ea      	movs	r0, #234	@ 0xea
 8000bb4:	f7ff febb 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fec9 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fec6 	bl	8000950 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xC0);
 8000bc4:	20c0      	movs	r0, #192	@ 0xc0
 8000bc6:	f7ff feb2 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x26);
 8000bca:	2026      	movs	r0, #38	@ 0x26
 8000bcc:	f7ff fec0 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC1);
 8000bd0:	20c1      	movs	r0, #193	@ 0xc1
 8000bd2:	f7ff feac 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x11);
 8000bd6:	2011      	movs	r0, #17
 8000bd8:	f7ff feba 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC5);
 8000bdc:	20c5      	movs	r0, #197	@ 0xc5
 8000bde:	f7ff fea6 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x35);
 8000be2:	2035      	movs	r0, #53	@ 0x35
 8000be4:	f7ff feb4 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x3E);
 8000be8:	203e      	movs	r0, #62	@ 0x3e
 8000bea:	f7ff feb1 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xC7);
 8000bee:	20c7      	movs	r0, #199	@ 0xc7
 8000bf0:	f7ff fe9d 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0xBE);
 8000bf4:	20be      	movs	r0, #190	@ 0xbe
 8000bf6:	f7ff feab 	bl	8000950 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x3A);
 8000bfa:	203a      	movs	r0, #58	@ 0x3a
 8000bfc:	f7ff fe97 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x55); /* RGB565 */
 8000c00:	2055      	movs	r0, #85	@ 0x55
 8000c02:	f7ff fea5 	bl	8000950 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xB1);
 8000c06:	20b1      	movs	r0, #177	@ 0xb1
 8000c08:	f7ff fe91 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f7ff fe9f 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0x1B);
 8000c12:	201b      	movs	r0, #27
 8000c14:	f7ff fe9c 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0xB6);
 8000c18:	20b6      	movs	r0, #182	@ 0xb6
 8000c1a:	f7ff fe88 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x0A);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f7ff fe96 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteData8(0xA2);
 8000c24:	20a2      	movs	r0, #162	@ 0xa2
 8000c26:	f7ff fe93 	bl	8000950 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0xF2);
 8000c2a:	20f2      	movs	r0, #242	@ 0xf2
 8000c2c:	f7ff fe7f 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x00);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff fe8d 	bl	8000950 <ILI9341_WriteData8>
	ILI9341_WriteCmd(0x26);
 8000c36:	2026      	movs	r0, #38	@ 0x26
 8000c38:	f7ff fe79 	bl	800092e <ILI9341_WriteCmd>
	ILI9341_WriteData8(0x01);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff fe87 	bl	8000950 <ILI9341_WriteData8>

	ILI9341_WriteCmd(0x11);
 8000c42:	2011      	movs	r0, #17
 8000c44:	f7ff fe73 	bl	800092e <ILI9341_WriteCmd>
	HAL_Delay(120);
 8000c48:	2078      	movs	r0, #120	@ 0x78
 8000c4a:	f002 f96f 	bl	8002f2c <HAL_Delay>
	ILI9341_WriteCmd(0x29);
 8000c4e:	2029      	movs	r0, #41	@ 0x29
 8000c50:	f7ff fe6d 	bl	800092e <ILI9341_WriteCmd>

	/* 모듈을 뒤집어 장착한 상황: 180° */
	ILI9341_SetRotation(2);
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff ff2a 	bl	8000aae <ILI9341_SetRotation>
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <fidx>:
{ 0x7C, 0x12, 0x11, 0x12, 0x7C }, /* A */
{ 0x3E, 0x41, 0x41, 0x41, 0x22 }, /* C */
{ 0x7F, 0x02, 0x0C, 0x02, 0x7F }, /* M */
{ 0x7F, 0x04, 0x08, 0x10, 0x7F }, /* N */
};
static int fidx(char c) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	71fb      	strb	r3, [r7, #7]
	switch (c) {
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	2b20      	cmp	r3, #32
 8000c6e:	d02b      	beq.n	8000cc8 <fidx+0x68>
 8000c70:	2b20      	cmp	r3, #32
 8000c72:	db35      	blt.n	8000ce0 <fidx+0x80>
 8000c74:	2b50      	cmp	r3, #80	@ 0x50
 8000c76:	dc33      	bgt.n	8000ce0 <fidx+0x80>
 8000c78:	2b41      	cmp	r3, #65	@ 0x41
 8000c7a:	db31      	blt.n	8000ce0 <fidx+0x80>
 8000c7c:	3b41      	subs	r3, #65	@ 0x41
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d82e      	bhi.n	8000ce0 <fidx+0x80>
 8000c82:	a201      	add	r2, pc, #4	@ (adr r2, 8000c88 <fidx+0x28>)
 8000c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c88:	08000cd1 	.word	0x08000cd1
 8000c8c:	08000ce1 	.word	0x08000ce1
 8000c90:	08000cd5 	.word	0x08000cd5
 8000c94:	08000ce1 	.word	0x08000ce1
 8000c98:	08000ce1 	.word	0x08000ce1
 8000c9c:	08000ce1 	.word	0x08000ce1
 8000ca0:	08000ce1 	.word	0x08000ce1
 8000ca4:	08000ce1 	.word	0x08000ce1
 8000ca8:	08000ce1 	.word	0x08000ce1
 8000cac:	08000ce1 	.word	0x08000ce1
 8000cb0:	08000ce1 	.word	0x08000ce1
 8000cb4:	08000ce1 	.word	0x08000ce1
 8000cb8:	08000cd9 	.word	0x08000cd9
 8000cbc:	08000cdd 	.word	0x08000cdd
 8000cc0:	08000ce1 	.word	0x08000ce1
 8000cc4:	08000ccd 	.word	0x08000ccd
	case ' ':
		return 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	e00a      	b.n	8000ce2 <fidx+0x82>
	case 'P':
		return 1;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e008      	b.n	8000ce2 <fidx+0x82>
	case 'A':
		return 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e006      	b.n	8000ce2 <fidx+0x82>
	case 'C':
		return 3;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e004      	b.n	8000ce2 <fidx+0x82>
	case 'M':
		return 4;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	e002      	b.n	8000ce2 <fidx+0x82>
	case 'N':
		return 5;
 8000cdc:	2305      	movs	r3, #5
 8000cde:	e000      	b.n	8000ce2 <fidx+0x82>
	default:
		return 0;
 8000ce0:	2300      	movs	r3, #0
	}
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <DrawChar5x7_FlipY>:
	}
}

/* ===== ★ 상하(위↔아래) 미러 전용 렌더러 ===== */
static void DrawChar5x7_FlipY(int x, int y, char c, uint16_t fg, uint16_t bg,
		int s) {
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b08d      	sub	sp, #52	@ 0x34
 8000cf0:	af02      	add	r7, sp, #8
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	71fb      	strb	r3, [r7, #7]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	80bb      	strh	r3, [r7, #4]
	int i = fidx(c);
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff ffab 	bl	8000c60 <fidx>
 8000d0a:	61f8      	str	r0, [r7, #28]
	for (int col = 0; col < 5; col++) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d10:	e040      	b.n	8000d94 <DrawChar5x7_FlipY+0xa8>
		uint8_t bits = font5x7[i][col];
 8000d12:	4930      	ldr	r1, [pc, #192]	@ (8000dd4 <DrawChar5x7_FlipY+0xe8>)
 8000d14:	69fa      	ldr	r2, [r7, #28]
 8000d16:	4613      	mov	r3, r2
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	18ca      	adds	r2, r1, r3
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	4413      	add	r3, r2
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	76fb      	strb	r3, [r7, #27]
		for (int row = 0; row < 7; row++) {
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
 8000d2a:	e02d      	b.n	8000d88 <DrawChar5x7_FlipY+0x9c>
			uint16_t color = (bits & (1 << (6 - row))) ? fg : bg;
 8000d2c:	7efa      	ldrb	r2, [r7, #27]
 8000d2e:	6a3b      	ldr	r3, [r7, #32]
 8000d30:	f1c3 0306 	rsb	r3, r3, #6
 8000d34:	fa42 f303 	asr.w	r3, r2, r3
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <DrawChar5x7_FlipY+0x58>
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	e000      	b.n	8000d46 <DrawChar5x7_FlipY+0x5a>
 8000d44:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000d46:	833b      	strh	r3, [r7, #24]
			int tx = x + col * s; /* 좌우는 그대로 */
 8000d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d4c:	fb02 f303 	mul.w	r3, r2, r3
 8000d50:	68fa      	ldr	r2, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	617b      	str	r3, [r7, #20]
			int ty = y + (6 - row) * s; /* 상하만 반전 */
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	f1c3 0306 	rsb	r3, r3, #6
 8000d5c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	68ba      	ldr	r2, [r7, #8]
 8000d64:	4413      	add	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
			ILI9341_FillRect(tx, ty, s, s, color);
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	b298      	uxth	r0, r3
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	b299      	uxth	r1, r3
 8000d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d76:	b29c      	uxth	r4, r3
 8000d78:	8b3b      	ldrh	r3, [r7, #24]
 8000d7a:	9300      	str	r3, [sp, #0]
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	f7ff fe39 	bl	80009f4 <ILI9341_FillRect>
		for (int row = 0; row < 7; row++) {
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	3301      	adds	r3, #1
 8000d86:	623b      	str	r3, [r7, #32]
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	2b06      	cmp	r3, #6
 8000d8c:	ddce      	ble.n	8000d2c <DrawChar5x7_FlipY+0x40>
	for (int col = 0; col < 5; col++) {
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d90:	3301      	adds	r3, #1
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	ddbb      	ble.n	8000d12 <DrawChar5x7_FlipY+0x26>
		}
	}
	ILI9341_FillRect(x + 5 * s, y, s, 7 * s, bg);
 8000d9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	4413      	add	r3, r2
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	4413      	add	r3, r2
 8000dac:	b298      	uxth	r0, r3
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	b299      	uxth	r1, r3
 8000db2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	461c      	mov	r4, r3
 8000dbc:	00e4      	lsls	r4, r4, #3
 8000dbe:	1ae3      	subs	r3, r4, r3
 8000dc0:	b29c      	uxth	r4, r3
 8000dc2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	4623      	mov	r3, r4
 8000dc8:	f7ff fe14 	bl	80009f4 <ILI9341_FillRect>
}
 8000dcc:	bf00      	nop
 8000dce:	372c      	adds	r7, #44	@ 0x2c
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	08005c64 	.word	0x08005c64

08000dd8 <DrawText_FlipY>:

static void DrawText_FlipY(int x, int y, const char *s, uint16_t fg,
		uint16_t bg, int scale) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	807b      	strh	r3, [r7, #2]
	int cx = x;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	617b      	str	r3, [r7, #20]
	while (*s) {
 8000dea:	e016      	b.n	8000e1a <DrawText_FlipY+0x42>
		DrawChar5x7_FlipY(cx, y, *s++, fg, bg, scale);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	781a      	ldrb	r2, [r3, #0]
 8000df4:	8879      	ldrh	r1, [r7, #2]
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	9301      	str	r3, [sp, #4]
 8000dfa:	8c3b      	ldrh	r3, [r7, #32]
 8000dfc:	9300      	str	r3, [sp, #0]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff72 	bl	8000cec <DrawChar5x7_FlipY>
		cx += 6 * scale;
 8000e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	4413      	add	r3, r2
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	461a      	mov	r2, r3
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	4413      	add	r3, r2
 8000e18:	617b      	str	r3, [r7, #20]
	while (*s) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1e4      	bne.n	8000dec <DrawText_FlipY+0x14>
	}
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <DrawFilledCircle>:
/* -------------------------- Primitives --------------------------- */
static void DrawFilledCircle(int xc, int yc, int r, uint16_t color) {
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af02      	add	r7, sp, #8
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	807b      	strh	r3, [r7, #2]
	for (int y = -r; y <= r; y++) {
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	425b      	negs	r3, r3
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e048      	b.n	8000ed4 <DrawFilledCircle+0xa8>
		int dx = (int) (sqrtf((float) r * r - (float) y * y) + 0.5f);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff fa3c 	bl	80002c0 <__aeabi_i2f>
 8000e48:	4604      	mov	r4, r0
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fa38 	bl	80002c0 <__aeabi_i2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4619      	mov	r1, r3
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff fa87 	bl	8000368 <__aeabi_fmul>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461d      	mov	r5, r3
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff fa2e 	bl	80002c0 <__aeabi_i2f>
 8000e64:	4604      	mov	r4, r0
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff fa2a 	bl	80002c0 <__aeabi_i2f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4620      	mov	r0, r4
 8000e72:	f7ff fa79 	bl	8000368 <__aeabi_fmul>
 8000e76:	4603      	mov	r3, r0
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	f7ff f96a 	bl	8000154 <__aeabi_fsub>
 8000e80:	4603      	mov	r3, r0
 8000e82:	4618      	mov	r0, r3
 8000e84:	f004 f856 	bl	8004f34 <sqrtf>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff f962 	bl	8000158 <__addsf3>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc42 	bl	8000720 <__aeabi_f2iz>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	613b      	str	r3, [r7, #16]
		ILI9341_FillRect(xc - dx, yc + y, 2 * dx + 1, 1, color);
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	b298      	uxth	r0, r3
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b299      	uxth	r1, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	887b      	ldrh	r3, [r7, #2]
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f7ff fd93 	bl	80009f4 <ILI9341_FillRect>
	for (int y = -r; y <= r; y++) {
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	ddb2      	ble.n	8000e42 <DrawFilledCircle+0x16>
	}
}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdb0      	pop	{r4, r5, r7, pc}

08000ee6 <DrawLineH>:
static void DrawLineH(int x, int y, int w, int t, uint16_t c) {
 8000ee6:	b590      	push	{r4, r7, lr}
 8000ee8:	b087      	sub	sp, #28
 8000eea:	af02      	add	r7, sp, #8
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x, y - t / 2, w, t, c);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	b298      	uxth	r0, r3
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	0fda      	lsrs	r2, r3, #31
 8000efc:	4413      	add	r3, r2
 8000efe:	105b      	asrs	r3, r3, #1
 8000f00:	425b      	negs	r3, r3
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b299      	uxth	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	b29a      	uxth	r2, r3
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b29c      	uxth	r4, r3
 8000f14:	8c3b      	ldrh	r3, [r7, #32]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	4623      	mov	r3, r4
 8000f1a:	f7ff fd6b 	bl	80009f4 <ILI9341_FillRect>
}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd90      	pop	{r4, r7, pc}

08000f26 <DrawLineV>:
static void DrawLineV(int x, int y, int h, int t, uint16_t c) {
 8000f26:	b590      	push	{r4, r7, lr}
 8000f28:	b087      	sub	sp, #28
 8000f2a:	af02      	add	r7, sp, #8
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x - t / 2, y, t, h, c);
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	0fda      	lsrs	r2, r3, #31
 8000f38:	4413      	add	r3, r2
 8000f3a:	105b      	asrs	r3, r3, #1
 8000f3c:	425b      	negs	r3, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	4413      	add	r3, r2
 8000f46:	b298      	uxth	r0, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	b299      	uxth	r1, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b29c      	uxth	r4, r3
 8000f54:	8c3b      	ldrh	r3, [r7, #32]
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	4623      	mov	r3, r4
 8000f5a:	f7ff fd4b 	bl	80009f4 <ILI9341_FillRect>
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd90      	pop	{r4, r7, pc}

08000f66 <DrawRoundRect>:
static void DrawRoundRect(int x, int y, int w, int h, int r, int t, uint16_t c) {
 8000f66:	b5b0      	push	{r4, r5, r7, lr}
 8000f68:	b08a      	sub	sp, #40	@ 0x28
 8000f6a:	af02      	add	r7, sp, #8
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	603b      	str	r3, [r7, #0]
	/* 외곽선을 두께 t로 근사 */
	for (int i = 0; i < t; i++) {
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	e100      	b.n	800117c <DrawRoundRect+0x216>
		int ri = r - i;
 8000f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	61bb      	str	r3, [r7, #24]
		if (ri < 0)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	da01      	bge.n	8000f8c <DrawRoundRect+0x26>
			ri = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
		/* 네 귀퉁이 호 */
		for (int yy = -ri; yy <= ri; yy++) {
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	425b      	negs	r3, r3
 8000f90:	617b      	str	r3, [r7, #20]
 8000f92:	e0a9      	b.n	80010e8 <DrawRoundRect+0x182>
			int dx = (int) (sqrtf((float) ri * ri - (float) yy * yy) + 0.5f);
 8000f94:	69b8      	ldr	r0, [r7, #24]
 8000f96:	f7ff f993 	bl	80002c0 <__aeabi_i2f>
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	69b8      	ldr	r0, [r7, #24]
 8000f9e:	f7ff f98f 	bl	80002c0 <__aeabi_i2f>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f7ff f9de 	bl	8000368 <__aeabi_fmul>
 8000fac:	4603      	mov	r3, r0
 8000fae:	461d      	mov	r5, r3
 8000fb0:	6978      	ldr	r0, [r7, #20]
 8000fb2:	f7ff f985 	bl	80002c0 <__aeabi_i2f>
 8000fb6:	4604      	mov	r4, r0
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff f981 	bl	80002c0 <__aeabi_i2f>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	f7ff f9d0 	bl	8000368 <__aeabi_fmul>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4628      	mov	r0, r5
 8000fce:	f7ff f8c1 	bl	8000154 <__aeabi_fsub>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f003 ffad 	bl	8004f34 <sqrtf>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8b9 	bl	8000158 <__addsf3>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fb99 	bl	8000720 <__aeabi_f2iz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	613b      	str	r3, [r7, #16]
			/* 상단 좌/우 */
			ILI9341_FillRect(x + r - dx, y + i, 2 * dx, 1, c);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	4413      	add	r3, r2
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	b29b      	uxth	r3, r3
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	b298      	uxth	r0, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	b29a      	uxth	r2, r3
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	b29b      	uxth	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	b299      	uxth	r1, r3
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	b29b      	uxth	r3, r3
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	b29a      	uxth	r2, r3
 800101a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	f7ff fce8 	bl	80009f4 <ILI9341_FillRect>
			ILI9341_FillRect(x + w - r - dx, y + i, 2 * dx, 1, c);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	b29b      	uxth	r3, r3
 800102c:	4413      	add	r3, r2
 800102e:	b29a      	uxth	r2, r3
 8001030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001032:	b29b      	uxth	r3, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b29a      	uxth	r2, r3
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	b29b      	uxth	r3, r3
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	b298      	uxth	r0, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	b29a      	uxth	r2, r3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	b29b      	uxth	r3, r3
 8001048:	4413      	add	r3, r2
 800104a:	b299      	uxth	r1, r3
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	b29b      	uxth	r3, r3
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	b29a      	uxth	r2, r3
 8001054:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	f7ff fccb 	bl	80009f4 <ILI9341_FillRect>
			/* 하단 좌/우 */
			ILI9341_FillRect(x + r - dx, y + h - 1 - i, 2 * dx, 1, c);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	b29a      	uxth	r2, r3
 8001062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001064:	b29b      	uxth	r3, r3
 8001066:	4413      	add	r3, r2
 8001068:	b29a      	uxth	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	b29b      	uxth	r3, r3
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	b298      	uxth	r0, r3
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	b29a      	uxth	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b29b      	uxth	r3, r3
 800107a:	4413      	add	r3, r2
 800107c:	b29a      	uxth	r2, r3
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	b29b      	uxth	r3, r3
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	b29b      	uxth	r3, r3
 8001086:	3b01      	subs	r3, #1
 8001088:	b299      	uxth	r1, r3
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	b29b      	uxth	r3, r3
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	b29a      	uxth	r2, r3
 8001092:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	f7ff fcac 	bl	80009f4 <ILI9341_FillRect>
			ILI9341_FillRect(x + w - r - dx, y + h - 1 - i, 2 * dx, 1, c);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	b29a      	uxth	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	b298      	uxth	r0, r3
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	3b01      	subs	r3, #1
 80010ce:	b299      	uxth	r1, r3
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	b29a      	uxth	r2, r3
 80010d8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	f7ff fc89 	bl	80009f4 <ILI9341_FillRect>
		for (int yy = -ri; yy <= ri; yy++) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f77f af51 	ble.w	8000f94 <DrawRoundRect+0x2e>
		}
		/* 직선 부분 */
		DrawLineH(x + r, y + i, w - 2 * r, 1, c);
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010f6:	18d0      	adds	r0, r2, r3
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	18d1      	adds	r1, r2, r3
 80010fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	1ad2      	subs	r2, r2, r3
 8001106:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2301      	movs	r3, #1
 800110c:	f7ff feeb 	bl	8000ee6 <DrawLineH>
		DrawLineH(x + r, y + h - 1 - i, w - 2 * r, 1, c);
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001114:	18d0      	adds	r0, r2, r3
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	1ad1      	subs	r1, r2, r3
 8001122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	1ad2      	subs	r2, r2, r3
 800112a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	f7ff fed9 	bl	8000ee6 <DrawLineH>
		DrawLineV(x + i, y + r, h - 2 * r, 1, c);
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	18d0      	adds	r0, r2, r3
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800113e:	18d1      	adds	r1, r2, r3
 8001140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	1ad2      	subs	r2, r2, r3
 8001148:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	f7ff feea 	bl	8000f26 <DrawLineV>
		DrawLineV(x + w - 1 - i, y + r, h - 2 * r, 1, c);
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4413      	add	r3, r2
 8001158:	1e5a      	subs	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	1ad0      	subs	r0, r2, r3
 800115e:	68ba      	ldr	r2, [r7, #8]
 8001160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001162:	18d1      	adds	r1, r2, r3
 8001164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	1ad2      	subs	r2, r2, r3
 800116c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	f7ff fed8 	bl	8000f26 <DrawLineV>
	for (int i = 0; i < t; i++) {
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3301      	adds	r3, #1
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001180:	429a      	cmp	r2, r3
 8001182:	f6ff aefa 	blt.w	8000f7a <DrawRoundRect+0x14>
	}
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bdb0      	pop	{r4, r5, r7, pc}

08001190 <DrawPacman_FlipX>:
	ILI9341_FillRect(xc + r / 5, yc - r / 2, r / 6, r / 6, COLOR_BLACK);
}

/* 오른쪽↔왼쪽 좌우 반전 팩맨 */
static void DrawPacman_FlipX(int xc, int yc, int r, float mouth_deg,
		uint16_t color, uint16_t bg) {
 8001190:	b5b0      	push	{r4, r5, r7, lr}
 8001192:	b098      	sub	sp, #96	@ 0x60
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
	/* 몸통 채우기 */
	DrawFilledCircle(xc, yc, r, color);
 800119e:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f7ff fe40 	bl	8000e2c <DrawFilledCircle>

	/* 입(왼쪽 방향으로 벌어지게): 중심각을 π(180°) 기준으로 ±a/2 */
	float a = mouth_deg * 3.1415926f / 180.f;
 80011ac:	4986      	ldr	r1, [pc, #536]	@ (80013c8 <DrawPacman_FlipX+0x238>)
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	f7ff f8da 	bl	8000368 <__aeabi_fmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4985      	ldr	r1, [pc, #532]	@ (80013cc <DrawPacman_FlipX+0x23c>)
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f989 	bl	80004d0 <__aeabi_fdiv>
 80011be:	4603      	mov	r3, r0
 80011c0:	647b      	str	r3, [r7, #68]	@ 0x44
	int x1 = xc, y1 = yc;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int x2 = xc - (int) (r * cosf(a / 2)), y2 = yc - (int) (r * sinf(a / 2));
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f878 	bl	80002c0 <__aeabi_i2f>
 80011d0:	4604      	mov	r4, r0
 80011d2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80011d6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011d8:	f7ff f97a 	bl	80004d0 <__aeabi_fdiv>
 80011dc:	4603      	mov	r3, r0
 80011de:	4618      	mov	r0, r3
 80011e0:	f003 fec2 	bl	8004f68 <cosf>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4619      	mov	r1, r3
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff f8bd 	bl	8000368 <__aeabi_fmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff fa95 	bl	8000720 <__aeabi_f2iz>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1a9b      	subs	r3, r3, r2
 80011fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff f85e 	bl	80002c0 <__aeabi_i2f>
 8001204:	4604      	mov	r4, r0
 8001206:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800120a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800120c:	f7ff f960 	bl	80004d0 <__aeabi_fdiv>
 8001210:	4603      	mov	r3, r0
 8001212:	4618      	mov	r0, r3
 8001214:	f003 fee0 	bl	8004fd8 <sinf>
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff f8a3 	bl	8000368 <__aeabi_fmul>
 8001222:	4603      	mov	r3, r0
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fa7b 	bl	8000720 <__aeabi_f2iz>
 800122a:	4602      	mov	r2, r0
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	1a9b      	subs	r3, r3, r2
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
	int x3 = xc - (int) (r * cosf(a / 2)), y3 = yc + (int) (r * sinf(a / 2));
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff f844 	bl	80002c0 <__aeabi_i2f>
 8001238:	4604      	mov	r4, r0
 800123a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800123e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001240:	f7ff f946 	bl	80004d0 <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	4618      	mov	r0, r3
 8001248:	f003 fe8e 	bl	8004f68 <cosf>
 800124c:	4603      	mov	r3, r0
 800124e:	4619      	mov	r1, r3
 8001250:	4620      	mov	r0, r4
 8001252:	f7ff f889 	bl	8000368 <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fa61 	bl	8000720 <__aeabi_f2iz>
 800125e:	4602      	mov	r2, r0
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	1a9b      	subs	r3, r3, r2
 8001264:	633b      	str	r3, [r7, #48]	@ 0x30
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff f82a 	bl	80002c0 <__aeabi_i2f>
 800126c:	4604      	mov	r4, r0
 800126e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001272:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001274:	f7ff f92c 	bl	80004d0 <__aeabi_fdiv>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f003 feac 	bl	8004fd8 <sinf>
 8001280:	4603      	mov	r3, r0
 8001282:	4619      	mov	r1, r3
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff f86f 	bl	8000368 <__aeabi_fmul>
 800128a:	4603      	mov	r3, r0
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fa47 	bl	8000720 <__aeabi_f2iz>
 8001292:	4602      	mov	r2, r0
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4413      	add	r3, r2
 8001298:	62fb      	str	r3, [r7, #44]	@ 0x2c

	int miny = y1;
 800129a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800129c:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y2 < miny)
 800129e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012a2:	429a      	cmp	r2, r3
 80012a4:	da01      	bge.n	80012aa <DrawPacman_FlipX+0x11a>
		miny = y2;
 80012a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012a8:	657b      	str	r3, [r7, #84]	@ 0x54
	if (y3 < miny)
 80012aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012ae:	429a      	cmp	r2, r3
 80012b0:	da01      	bge.n	80012b6 <DrawPacman_FlipX+0x126>
		miny = y3;
 80012b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
	int maxy = y1;
 80012b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012b8:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y2 > maxy)
 80012ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012be:	429a      	cmp	r2, r3
 80012c0:	dd01      	ble.n	80012c6 <DrawPacman_FlipX+0x136>
		maxy = y2;
 80012c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
	if (y3 > maxy)
 80012c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012ca:	429a      	cmp	r2, r3
 80012cc:	dd01      	ble.n	80012d2 <DrawPacman_FlipX+0x142>
		maxy = y3;
 80012ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012d0:	653b      	str	r3, [r7, #80]	@ 0x50

	for (int y = miny; y <= maxy; y++) {
 80012d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80012d6:	e102      	b.n	80014de <DrawPacman_FlipX+0x34e>
		int xs[3], n = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	64bb      	str	r3, [r7, #72]	@ 0x48
#define EDGE(xa,ya,xb,yb) \
            if (!((ya<y && yb<y) || (ya>y && yb>y) || (ya==yb))) { \
                float t = (ya==yb) ? 0.f : ((float)(y - ya) / (float)(yb - ya)); \
                xs[n++] = xa + (int)((xb - xa) * t); \
            }
		EDGE(x1, y1, x2, y2);
 80012dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	da03      	bge.n	80012ec <DrawPacman_FlipX+0x15c>
 80012e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e8:	429a      	cmp	r2, r3
 80012ea:	db40      	blt.n	800136e <DrawPacman_FlipX+0x1de>
 80012ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dd03      	ble.n	80012fc <DrawPacman_FlipX+0x16c>
 80012f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dc38      	bgt.n	800136e <DrawPacman_FlipX+0x1de>
 80012fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001300:	429a      	cmp	r2, r3
 8001302:	d034      	beq.n	800136e <DrawPacman_FlipX+0x1de>
 8001304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001308:	429a      	cmp	r2, r3
 800130a:	d013      	beq.n	8001334 <DrawPacman_FlipX+0x1a4>
 800130c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800130e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7fe ffd4 	bl	80002c0 <__aeabi_i2f>
 8001318:	4604      	mov	r4, r0
 800131a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800131c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7fe ffcd 	bl	80002c0 <__aeabi_i2f>
 8001326:	4603      	mov	r3, r0
 8001328:	4619      	mov	r1, r3
 800132a:	4620      	mov	r0, r4
 800132c:	f7ff f8d0 	bl	80004d0 <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	e001      	b.n	8001338 <DrawPacman_FlipX+0x1a8>
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	62bb      	str	r3, [r7, #40]	@ 0x28
 800133a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800133c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ffbd 	bl	80002c0 <__aeabi_i2f>
 8001346:	4603      	mov	r3, r0
 8001348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f80c 	bl	8000368 <__aeabi_fmul>
 8001350:	4603      	mov	r3, r0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f9e4 	bl	8000720 <__aeabi_f2iz>
 8001358:	4601      	mov	r1, r0
 800135a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8001360:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001362:	440a      	add	r2, r1
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	3358      	adds	r3, #88	@ 0x58
 8001368:	443b      	add	r3, r7
 800136a:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x2, y2, x3, y3);
 800136e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001372:	429a      	cmp	r2, r3
 8001374:	da03      	bge.n	800137e <DrawPacman_FlipX+0x1ee>
 8001376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800137a:	429a      	cmp	r2, r3
 800137c:	db45      	blt.n	800140a <DrawPacman_FlipX+0x27a>
 800137e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001382:	429a      	cmp	r2, r3
 8001384:	dd03      	ble.n	800138e <DrawPacman_FlipX+0x1fe>
 8001386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800138a:	429a      	cmp	r2, r3
 800138c:	dc3d      	bgt.n	800140a <DrawPacman_FlipX+0x27a>
 800138e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	429a      	cmp	r2, r3
 8001394:	d039      	beq.n	800140a <DrawPacman_FlipX+0x27a>
 8001396:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800139a:	429a      	cmp	r2, r3
 800139c:	d018      	beq.n	80013d0 <DrawPacman_FlipX+0x240>
 800139e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7fe ff8b 	bl	80002c0 <__aeabi_i2f>
 80013aa:	4604      	mov	r4, r0
 80013ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80013ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7fe ff84 	bl	80002c0 <__aeabi_i2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4619      	mov	r1, r3
 80013bc:	4620      	mov	r0, r4
 80013be:	f7ff f887 	bl	80004d0 <__aeabi_fdiv>
 80013c2:	4603      	mov	r3, r0
 80013c4:	e006      	b.n	80013d4 <DrawPacman_FlipX+0x244>
 80013c6:	bf00      	nop
 80013c8:	40490fda 	.word	0x40490fda
 80013cc:	43340000 	.word	0x43340000
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80013d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	4618      	mov	r0, r3
 80013de:	f7fe ff6f 	bl	80002c0 <__aeabi_i2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ffbe 	bl	8000368 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f996 	bl	8000720 <__aeabi_f2iz>
 80013f4:	4601      	mov	r1, r0
 80013f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	64ba      	str	r2, [r7, #72]	@ 0x48
 80013fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80013fe:	440a      	add	r2, r1
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	3358      	adds	r3, #88	@ 0x58
 8001404:	443b      	add	r3, r7
 8001406:	f843 2c48 	str.w	r2, [r3, #-72]
		EDGE(x3, y3, x1, y1);
 800140a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800140c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800140e:	429a      	cmp	r2, r3
 8001410:	da03      	bge.n	800141a <DrawPacman_FlipX+0x28a>
 8001412:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001416:	429a      	cmp	r2, r3
 8001418:	db40      	blt.n	800149c <DrawPacman_FlipX+0x30c>
 800141a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800141c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800141e:	429a      	cmp	r2, r3
 8001420:	dd03      	ble.n	800142a <DrawPacman_FlipX+0x29a>
 8001422:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001426:	429a      	cmp	r2, r3
 8001428:	dc38      	bgt.n	800149c <DrawPacman_FlipX+0x30c>
 800142a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800142c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800142e:	429a      	cmp	r2, r3
 8001430:	d034      	beq.n	800149c <DrawPacman_FlipX+0x30c>
 8001432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001436:	429a      	cmp	r2, r3
 8001438:	d013      	beq.n	8001462 <DrawPacman_FlipX+0x2d2>
 800143a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800143c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4618      	mov	r0, r3
 8001442:	f7fe ff3d 	bl	80002c0 <__aeabi_i2f>
 8001446:	4604      	mov	r4, r0
 8001448:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800144a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f7fe ff36 	bl	80002c0 <__aeabi_i2f>
 8001454:	4603      	mov	r3, r0
 8001456:	4619      	mov	r1, r3
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff f839 	bl	80004d0 <__aeabi_fdiv>
 800145e:	4603      	mov	r3, r0
 8001460:	e001      	b.n	8001466 <DrawPacman_FlipX+0x2d6>
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
 8001468:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800146a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ff26 	bl	80002c0 <__aeabi_i2f>
 8001474:	4603      	mov	r3, r0
 8001476:	6a39      	ldr	r1, [r7, #32]
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe ff75 	bl	8000368 <__aeabi_fmul>
 800147e:	4603      	mov	r3, r0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f94d 	bl	8000720 <__aeabi_f2iz>
 8001486:	4601      	mov	r1, r0
 8001488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800148e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001490:	440a      	add	r2, r1
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	3358      	adds	r3, #88	@ 0x58
 8001496:	443b      	add	r3, r7
 8001498:	f843 2c48 	str.w	r2, [r3, #-72]
#undef EDGE

		if (n >= 2) {
 800149c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800149e:	2b01      	cmp	r3, #1
 80014a0:	dd1a      	ble.n	80014d8 <DrawPacman_FlipX+0x348>
			if (xs[0] > xs[1]) {
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	dd05      	ble.n	80014b6 <DrawPacman_FlipX+0x326>
				int t = xs[0];
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	61fb      	str	r3, [r7, #28]
				xs[0] = xs[1];
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	613b      	str	r3, [r7, #16]
				xs[1] = t;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	617b      	str	r3, [r7, #20]
			}
			ILI9341_FillRect(xs[0], y, xs[1] - xs[0] + 1, 1, COLOR_BLACK);
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	b298      	uxth	r0, r3
 80014ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014bc:	b299      	uxth	r1, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	3301      	adds	r3, #1
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2301      	movs	r3, #1
 80014d4:	f7ff fa8e 	bl	80009f4 <ILI9341_FillRect>
	for (int y = miny; y <= maxy; y++) {
 80014d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014da:	3301      	adds	r3, #1
 80014dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80014e2:	429a      	cmp	r2, r3
 80014e4:	f77f aef8 	ble.w	80012d8 <DrawPacman_FlipX+0x148>
		}
	}

	/* 눈: 왼쪽에 위치하도록 이동 */
	ILI9341_FillRect(xc - r / 5 - r / 6, yc - r / 2, r / 6, r / 6, COLOR_BLACK);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <DrawPacman_FlipX+0x3c4>)
 80014ec:	fb82 1203 	smull	r1, r2, r2, r3
 80014f0:	1052      	asrs	r2, r2, #1
 80014f2:	17db      	asrs	r3, r3, #31
 80014f4:	1a9b      	subs	r3, r3, r2
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	4413      	add	r3, r2
 80014fe:	b29a      	uxth	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4915      	ldr	r1, [pc, #84]	@ (8001558 <DrawPacman_FlipX+0x3c8>)
 8001504:	fb81 0103 	smull	r0, r1, r1, r3
 8001508:	17db      	asrs	r3, r3, #31
 800150a:	1a5b      	subs	r3, r3, r1
 800150c:	b29b      	uxth	r3, r3
 800150e:	4413      	add	r3, r2
 8001510:	b298      	uxth	r0, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	0fda      	lsrs	r2, r3, #31
 8001516:	4413      	add	r3, r2
 8001518:	105b      	asrs	r3, r3, #1
 800151a:	425b      	negs	r3, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b299      	uxth	r1, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <DrawPacman_FlipX+0x3c8>)
 800152a:	fb82 4203 	smull	r4, r2, r2, r3
 800152e:	17db      	asrs	r3, r3, #31
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	b29c      	uxth	r4, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a08      	ldr	r2, [pc, #32]	@ (8001558 <DrawPacman_FlipX+0x3c8>)
 8001538:	fb82 5203 	smull	r5, r2, r2, r3
 800153c:	17db      	asrs	r3, r3, #31
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	b29b      	uxth	r3, r3
 8001542:	2200      	movs	r2, #0
 8001544:	9200      	str	r2, [sp, #0]
 8001546:	4622      	mov	r2, r4
 8001548:	f7ff fa54 	bl	80009f4 <ILI9341_FillRect>
}
 800154c:	bf00      	nop
 800154e:	3758      	adds	r7, #88	@ 0x58
 8001550:	46bd      	mov	sp, r7
 8001552:	bdb0      	pop	{r4, r5, r7, pc}
 8001554:	66666667 	.word	0x66666667
 8001558:	2aaaaaab 	.word	0x2aaaaaab

0800155c <DrawGhost>:

static void DrawGhost(int x, int y, int w, int h, uint16_t body, uint16_t eye) {
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b08e      	sub	sp, #56	@ 0x38
 8001560:	af02      	add	r7, sp, #8
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
	ILI9341_FillRect(x, y + h / 4, w, 3 * h / 4, body);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	b298      	uxth	r0, r3
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	da00      	bge.n	8001576 <DrawGhost+0x1a>
 8001574:	3303      	adds	r3, #3
 8001576:	109b      	asrs	r3, r3, #2
 8001578:	b29a      	uxth	r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	b29b      	uxth	r3, r3
 800157e:	4413      	add	r3, r2
 8001580:	b299      	uxth	r1, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	b29c      	uxth	r4, r3
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	da00      	bge.n	8001594 <DrawGhost+0x38>
 8001592:	3303      	adds	r3, #3
 8001594:	109b      	asrs	r3, r3, #2
 8001596:	b29a      	uxth	r2, r3
 8001598:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800159c:	9300      	str	r3, [sp, #0]
 800159e:	4613      	mov	r3, r2
 80015a0:	4622      	mov	r2, r4
 80015a2:	f7ff fa27 	bl	80009f4 <ILI9341_FillRect>
	int r = w / 2;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0fda      	lsrs	r2, r3, #31
 80015aa:	4413      	add	r3, r2
 80015ac:	105b      	asrs	r3, r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int yy = 0; yy < h / 2; yy++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015b4:	e04b      	b.n	800164e <DrawGhost+0xf2>
		int dx = (int) sqrtf((float) r * r - (float) (r - yy) * (r - yy));
 80015b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015b8:	f7fe fe82 	bl	80002c0 <__aeabi_i2f>
 80015bc:	4604      	mov	r4, r0
 80015be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015c0:	f7fe fe7e 	bl	80002c0 <__aeabi_i2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	4619      	mov	r1, r3
 80015c8:	4620      	mov	r0, r4
 80015ca:	f7fe fecd 	bl	8000368 <__aeabi_fmul>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461d      	mov	r5, r3
 80015d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe fe71 	bl	80002c0 <__aeabi_i2f>
 80015de:	4604      	mov	r4, r0
 80015e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fe6a 	bl	80002c0 <__aeabi_i2f>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4619      	mov	r1, r3
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7fe feb9 	bl	8000368 <__aeabi_fmul>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4628      	mov	r0, r5
 80015fc:	f7fe fdaa 	bl	8000154 <__aeabi_fsub>
 8001600:	4603      	mov	r3, r0
 8001602:	4618      	mov	r0, r3
 8001604:	f003 fc96 	bl	8004f34 <sqrtf>
 8001608:	4603      	mov	r3, r0
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff f888 	bl	8000720 <__aeabi_f2iz>
 8001610:	4603      	mov	r3, r0
 8001612:	617b      	str	r3, [r7, #20]
		ILI9341_FillRect(x + r - dx, y + yy, 2 * dx, 1, body);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	b29a      	uxth	r2, r3
 8001618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161a:	b29b      	uxth	r3, r3
 800161c:	4413      	add	r3, r2
 800161e:	b29a      	uxth	r2, r3
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	b29b      	uxth	r3, r3
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	b298      	uxth	r0, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	b29a      	uxth	r2, r3
 800162c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162e:	b29b      	uxth	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	b299      	uxth	r1, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	b29b      	uxth	r3, r3
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	b29a      	uxth	r2, r3
 800163c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2301      	movs	r3, #1
 8001644:	f7ff f9d6 	bl	80009f4 <ILI9341_FillRect>
	for (int yy = 0; yy < h / 2; yy++) {
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	3301      	adds	r3, #1
 800164c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	0fda      	lsrs	r2, r3, #31
 8001652:	4413      	add	r3, r2
 8001654:	105b      	asrs	r3, r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	4293      	cmp	r3, r2
 800165c:	dbab      	blt.n	80015b6 <DrawGhost+0x5a>
	}
	int tooth = w / 5;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a76      	ldr	r2, [pc, #472]	@ (800183c <DrawGhost+0x2e0>)
 8001662:	fb82 1203 	smull	r1, r2, r2, r3
 8001666:	1052      	asrs	r2, r2, #1
 8001668:	17db      	asrs	r3, r3, #31
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	623b      	str	r3, [r7, #32]
	for (int i = 0; i < 5; i++)
 800166e:	2300      	movs	r3, #0
 8001670:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001672:	e02d      	b.n	80016d0 <DrawGhost+0x174>
		if (i % 2 == 0)
 8001674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d125      	bne.n	80016ca <DrawGhost+0x16e>
			ILI9341_FillRect(x + i * tooth, y + h - (h / 8), tooth, h / 8,
 800167e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001680:	b29b      	uxth	r3, r3
 8001682:	6a3a      	ldr	r2, [r7, #32]
 8001684:	b292      	uxth	r2, r2
 8001686:	fb02 f303 	mul.w	r3, r2, r3
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	b29b      	uxth	r3, r3
 8001690:	4413      	add	r3, r2
 8001692:	b298      	uxth	r0, r3
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	b29a      	uxth	r2, r3
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4413      	add	r3, r2
 800169e:	b29a      	uxth	r2, r3
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	da00      	bge.n	80016a8 <DrawGhost+0x14c>
 80016a6:	3307      	adds	r3, #7
 80016a8:	10db      	asrs	r3, r3, #3
 80016aa:	425b      	negs	r3, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	b299      	uxth	r1, r3
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da00      	bge.n	80016be <DrawGhost+0x162>
 80016bc:	3307      	adds	r3, #7
 80016be:	10db      	asrs	r3, r3, #3
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2400      	movs	r4, #0
 80016c4:	9400      	str	r4, [sp, #0]
 80016c6:	f7ff f995 	bl	80009f4 <ILI9341_FillRect>
	for (int i = 0; i < 5; i++)
 80016ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016cc:	3301      	adds	r3, #1
 80016ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	ddce      	ble.n	8001674 <DrawGhost+0x118>
			COLOR_BLACK);
	int ex = x + w / 4, ey = y + h / 3;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	da00      	bge.n	80016de <DrawGhost+0x182>
 80016dc:	3303      	adds	r3, #3
 80016de:	109b      	asrs	r3, r3, #2
 80016e0:	461a      	mov	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	61fb      	str	r3, [r7, #28]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4a55      	ldr	r2, [pc, #340]	@ (8001840 <DrawGhost+0x2e4>)
 80016ec:	fb82 1203 	smull	r1, r2, r2, r3
 80016f0:	17db      	asrs	r3, r3, #31
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	4413      	add	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
	ILI9341_FillRect(ex, ey, w / 6, h / 6, COLOR_WHITE);
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	b298      	uxth	r0, r3
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	b299      	uxth	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4f      	ldr	r2, [pc, #316]	@ (8001844 <DrawGhost+0x2e8>)
 8001706:	fb82 4203 	smull	r4, r2, r2, r3
 800170a:	17db      	asrs	r3, r3, #31
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29c      	uxth	r4, r3
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	4a4c      	ldr	r2, [pc, #304]	@ (8001844 <DrawGhost+0x2e8>)
 8001714:	fb82 5203 	smull	r5, r2, r2, r3
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b29b      	uxth	r3, r3
 800171e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001722:	9200      	str	r2, [sp, #0]
 8001724:	4622      	mov	r2, r4
 8001726:	f7ff f965 	bl	80009f4 <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2, ey, w / 6, h / 6, COLOR_WHITE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	0fda      	lsrs	r2, r3, #31
 800172e:	4413      	add	r3, r2
 8001730:	105b      	asrs	r3, r3, #1
 8001732:	b29a      	uxth	r2, r3
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4413      	add	r3, r2
 800173a:	b298      	uxth	r0, r3
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	b299      	uxth	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	4a40      	ldr	r2, [pc, #256]	@ (8001844 <DrawGhost+0x2e8>)
 8001744:	fb82 4203 	smull	r4, r2, r2, r3
 8001748:	17db      	asrs	r3, r3, #31
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b29c      	uxth	r4, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	4a3c      	ldr	r2, [pc, #240]	@ (8001844 <DrawGhost+0x2e8>)
 8001752:	fb82 5203 	smull	r5, r2, r2, r3
 8001756:	17db      	asrs	r3, r3, #31
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	b29b      	uxth	r3, r3
 800175c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001760:	9200      	str	r2, [sp, #0]
 8001762:	4622      	mov	r2, r4
 8001764:	f7ff f946 	bl	80009f4 <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 12, ey + h / 12, w / 12, w / 12, eye);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a36      	ldr	r2, [pc, #216]	@ (8001844 <DrawGhost+0x2e8>)
 800176c:	fb82 1203 	smull	r1, r2, r2, r3
 8001770:	1052      	asrs	r2, r2, #1
 8001772:	17db      	asrs	r3, r3, #31
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	b29a      	uxth	r2, r3
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4413      	add	r3, r2
 800177e:	b298      	uxth	r0, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <DrawGhost+0x2e8>)
 8001784:	fb82 1203 	smull	r1, r2, r2, r3
 8001788:	1052      	asrs	r2, r2, #1
 800178a:	17db      	asrs	r3, r3, #31
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	b29a      	uxth	r2, r3
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	b299      	uxth	r1, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a2a      	ldr	r2, [pc, #168]	@ (8001844 <DrawGhost+0x2e8>)
 800179c:	fb82 4203 	smull	r4, r2, r2, r3
 80017a0:	1052      	asrs	r2, r2, #1
 80017a2:	17db      	asrs	r3, r3, #31
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29c      	uxth	r4, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a26      	ldr	r2, [pc, #152]	@ (8001844 <DrawGhost+0x2e8>)
 80017ac:	fb82 5203 	smull	r5, r2, r2, r3
 80017b0:	1052      	asrs	r2, r2, #1
 80017b2:	17db      	asrs	r3, r3, #31
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	4622      	mov	r2, r4
 80017c2:	f7ff f917 	bl	80009f4 <ILI9341_FillRect>
	ILI9341_FillRect(ex + w / 2 + w / 12, ey + h / 12, w / 12, w / 12, eye);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0fda      	lsrs	r2, r3, #31
 80017ca:	4413      	add	r3, r2
 80017cc:	105b      	asrs	r3, r3, #1
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4413      	add	r3, r2
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	491a      	ldr	r1, [pc, #104]	@ (8001844 <DrawGhost+0x2e8>)
 80017dc:	fb81 0103 	smull	r0, r1, r1, r3
 80017e0:	1049      	asrs	r1, r1, #1
 80017e2:	17db      	asrs	r3, r3, #31
 80017e4:	1acb      	subs	r3, r1, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	b298      	uxth	r0, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4a15      	ldr	r2, [pc, #84]	@ (8001844 <DrawGhost+0x2e8>)
 80017f0:	fb82 1203 	smull	r1, r2, r2, r3
 80017f4:	1052      	asrs	r2, r2, #1
 80017f6:	17db      	asrs	r3, r3, #31
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	b29b      	uxth	r3, r3
 8001800:	4413      	add	r3, r2
 8001802:	b299      	uxth	r1, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a0f      	ldr	r2, [pc, #60]	@ (8001844 <DrawGhost+0x2e8>)
 8001808:	fb82 4203 	smull	r4, r2, r2, r3
 800180c:	1052      	asrs	r2, r2, #1
 800180e:	17db      	asrs	r3, r3, #31
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	b29c      	uxth	r4, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a0b      	ldr	r2, [pc, #44]	@ (8001844 <DrawGhost+0x2e8>)
 8001818:	fb82 5203 	smull	r5, r2, r2, r3
 800181c:	1052      	asrs	r2, r2, #1
 800181e:	17db      	asrs	r3, r3, #31
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29a      	uxth	r2, r3
 8001824:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	4613      	mov	r3, r2
 800182c:	4622      	mov	r2, r4
 800182e:	f7ff f8e1 	bl	80009f4 <ILI9341_FillRect>
}
 8001832:	bf00      	nop
 8001834:	3730      	adds	r7, #48	@ 0x30
 8001836:	46bd      	mov	sp, r7
 8001838:	bdb0      	pop	{r4, r5, r7, pc}
 800183a:	bf00      	nop
 800183c:	66666667 	.word	0x66666667
 8001840:	55555556 	.word	0x55555556
 8001844:	2aaaaaab 	.word	0x2aaaaaab

08001848 <StartScreen_Draw>:

/* --------------------------- Start Screen ------------------------------ */
/* 원본 참고 이미지를 가상의 기준 캔버스(가로 360, 세로 210)로 설계한 뒤
 LCD(240x320)에 비율 유지로 축소하여 중앙 배치. 위/아래 레터박스는 자동으로 검정. */
static void StartScreen_Draw(void) {
 8001848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800184c:	b096      	sub	sp, #88	@ 0x58
 800184e:	af04      	add	r7, sp, #16
	ILI9341_FillScreen(COLOR_BLACK);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff f91a 	bl	8000a8a <ILI9341_FillScreen>

	/* 기준 사이즈(원본 비율 유사) */
	const float W_REF = 360.0f;
 8001856:	4bac      	ldr	r3, [pc, #688]	@ (8001b08 <StartScreen_Draw+0x2c0>)
 8001858:	62fb      	str	r3, [r7, #44]	@ 0x2c
	const float H_REF = 210.0f;
 800185a:	4bac      	ldr	r3, [pc, #688]	@ (8001b0c <StartScreen_Draw+0x2c4>)
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* 스케일 및 오프셋 (가로를 기준으로 맞추면 오른쪽이 잘리지 않음) */
	float s = (float) LCD_WIDTH / W_REF;
 800185e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001860:	48ab      	ldr	r0, [pc, #684]	@ (8001b10 <StartScreen_Draw+0x2c8>)
 8001862:	f7fe fe35 	bl	80004d0 <__aeabi_fdiv>
 8001866:	4603      	mov	r3, r0
 8001868:	627b      	str	r3, [r7, #36]	@ 0x24
	int scene_w = (int) (W_REF * s + 0.5f); /* == LCD_WIDTH */
 800186a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800186c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800186e:	f7fe fd7b 	bl	8000368 <__aeabi_fmul>
 8001872:	4603      	mov	r3, r0
 8001874:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fc6d 	bl	8000158 <__addsf3>
 800187e:	4603      	mov	r3, r0
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe ff4d 	bl	8000720 <__aeabi_f2iz>
 8001886:	4603      	mov	r3, r0
 8001888:	623b      	str	r3, [r7, #32]
	int scene_h = (int) (H_REF * s + 0.5f);
 800188a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800188c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800188e:	f7fe fd6b 	bl	8000368 <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
 8001894:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fc5d 	bl	8000158 <__addsf3>
 800189e:	4603      	mov	r3, r0
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe ff3d 	bl	8000720 <__aeabi_f2iz>
 80018a6:	4603      	mov	r3, r0
 80018a8:	61fb      	str	r3, [r7, #28]
	int x0 = (LCD_WIDTH - scene_w) / 2; /* 보통 0 */
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018b0:	0fda      	lsrs	r2, r3, #31
 80018b2:	4413      	add	r3, r2
 80018b4:	105b      	asrs	r3, r3, #1
 80018b6:	61bb      	str	r3, [r7, #24]
	int y0 = (LCD_HEIGHT - scene_h) / 2; /* 위/아래 검정 여백 */
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80018be:	0fda      	lsrs	r2, r3, #31
 80018c0:	4413      	add	r3, r2
 80018c2:	105b      	asrs	r3, r3, #1
 80018c4:	617b      	str	r3, [r7, #20]

	/* ----- 상단 미로 라인/캡슐들 ----- */
	int stroke = (int) (3 * s);
 80018c6:	4993      	ldr	r1, [pc, #588]	@ (8001b14 <StartScreen_Draw+0x2cc>)
 80018c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018ca:	f7fe fd4d 	bl	8000368 <__aeabi_fmul>
 80018ce:	4603      	mov	r3, r0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7fe ff25 	bl	8000720 <__aeabi_f2iz>
 80018d6:	4603      	mov	r3, r0
 80018d8:	647b      	str	r3, [r7, #68]	@ 0x44
	if (stroke < 2)
 80018da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018dc:	2b01      	cmp	r3, #1
 80018de:	dc01      	bgt.n	80018e4 <StartScreen_Draw+0x9c>
		stroke = 2;
 80018e0:	2302      	movs	r3, #2
 80018e2:	647b      	str	r3, [r7, #68]	@ 0x44
	/* 좌/우 큰 둥근 사각 프레임 */
	DrawRoundRect(x0 + (20 * s), y0 + (15 * s), (70 * s), (70 * s), (18 * s),
 80018e4:	69b8      	ldr	r0, [r7, #24]
 80018e6:	f7fe fceb 	bl	80002c0 <__aeabi_i2f>
 80018ea:	4604      	mov	r4, r0
 80018ec:	498a      	ldr	r1, [pc, #552]	@ (8001b18 <StartScreen_Draw+0x2d0>)
 80018ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80018f0:	f7fe fd3a 	bl	8000368 <__aeabi_fmul>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4619      	mov	r1, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7fe fc2d 	bl	8000158 <__addsf3>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe ff0d 	bl	8000720 <__aeabi_f2iz>
 8001906:	4604      	mov	r4, r0
 8001908:	6978      	ldr	r0, [r7, #20]
 800190a:	f7fe fcd9 	bl	80002c0 <__aeabi_i2f>
 800190e:	4605      	mov	r5, r0
 8001910:	4982      	ldr	r1, [pc, #520]	@ (8001b1c <StartScreen_Draw+0x2d4>)
 8001912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001914:	f7fe fd28 	bl	8000368 <__aeabi_fmul>
 8001918:	4603      	mov	r3, r0
 800191a:	4619      	mov	r1, r3
 800191c:	4628      	mov	r0, r5
 800191e:	f7fe fc1b 	bl	8000158 <__addsf3>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fefb 	bl	8000720 <__aeabi_f2iz>
 800192a:	4605      	mov	r5, r0
 800192c:	497c      	ldr	r1, [pc, #496]	@ (8001b20 <StartScreen_Draw+0x2d8>)
 800192e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001930:	f7fe fd1a 	bl	8000368 <__aeabi_fmul>
 8001934:	4603      	mov	r3, r0
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe fef2 	bl	8000720 <__aeabi_f2iz>
 800193c:	4606      	mov	r6, r0
 800193e:	4978      	ldr	r1, [pc, #480]	@ (8001b20 <StartScreen_Draw+0x2d8>)
 8001940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001942:	f7fe fd11 	bl	8000368 <__aeabi_fmul>
 8001946:	4603      	mov	r3, r0
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fee9 	bl	8000720 <__aeabi_f2iz>
 800194e:	4680      	mov	r8, r0
 8001950:	4974      	ldr	r1, [pc, #464]	@ (8001b24 <StartScreen_Draw+0x2dc>)
 8001952:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001954:	f7fe fd08 	bl	8000368 <__aeabi_fmul>
 8001958:	4603      	mov	r3, r0
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fee0 	bl	8000720 <__aeabi_f2iz>
 8001960:	4602      	mov	r2, r0
 8001962:	231f      	movs	r3, #31
 8001964:	9302      	str	r3, [sp, #8]
 8001966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	4643      	mov	r3, r8
 800196e:	4632      	mov	r2, r6
 8001970:	4629      	mov	r1, r5
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff faf7 	bl	8000f66 <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (270 * s), y0 + (135 * s), (70 * s), (70 * s), (18 * s),
 8001978:	69b8      	ldr	r0, [r7, #24]
 800197a:	f7fe fca1 	bl	80002c0 <__aeabi_i2f>
 800197e:	4604      	mov	r4, r0
 8001980:	4969      	ldr	r1, [pc, #420]	@ (8001b28 <StartScreen_Draw+0x2e0>)
 8001982:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001984:	f7fe fcf0 	bl	8000368 <__aeabi_fmul>
 8001988:	4603      	mov	r3, r0
 800198a:	4619      	mov	r1, r3
 800198c:	4620      	mov	r0, r4
 800198e:	f7fe fbe3 	bl	8000158 <__addsf3>
 8001992:	4603      	mov	r3, r0
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fec3 	bl	8000720 <__aeabi_f2iz>
 800199a:	4604      	mov	r4, r0
 800199c:	6978      	ldr	r0, [r7, #20]
 800199e:	f7fe fc8f 	bl	80002c0 <__aeabi_i2f>
 80019a2:	4605      	mov	r5, r0
 80019a4:	4961      	ldr	r1, [pc, #388]	@ (8001b2c <StartScreen_Draw+0x2e4>)
 80019a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019a8:	f7fe fcde 	bl	8000368 <__aeabi_fmul>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4619      	mov	r1, r3
 80019b0:	4628      	mov	r0, r5
 80019b2:	f7fe fbd1 	bl	8000158 <__addsf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe feb1 	bl	8000720 <__aeabi_f2iz>
 80019be:	4605      	mov	r5, r0
 80019c0:	4957      	ldr	r1, [pc, #348]	@ (8001b20 <StartScreen_Draw+0x2d8>)
 80019c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019c4:	f7fe fcd0 	bl	8000368 <__aeabi_fmul>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fea8 	bl	8000720 <__aeabi_f2iz>
 80019d0:	4606      	mov	r6, r0
 80019d2:	4953      	ldr	r1, [pc, #332]	@ (8001b20 <StartScreen_Draw+0x2d8>)
 80019d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019d6:	f7fe fcc7 	bl	8000368 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fe9f 	bl	8000720 <__aeabi_f2iz>
 80019e2:	4680      	mov	r8, r0
 80019e4:	494f      	ldr	r1, [pc, #316]	@ (8001b24 <StartScreen_Draw+0x2dc>)
 80019e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019e8:	f7fe fcbe 	bl	8000368 <__aeabi_fmul>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fe96 	bl	8000720 <__aeabi_f2iz>
 80019f4:	4602      	mov	r2, r0
 80019f6:	231f      	movs	r3, #31
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	9200      	str	r2, [sp, #0]
 8001a00:	4643      	mov	r3, r8
 8001a02:	4632      	mov	r2, r6
 8001a04:	4629      	mov	r1, r5
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff faad 	bl	8000f66 <DrawRoundRect>
			stroke, COLOR_BLUE);
	/* 세로 T자 */
	DrawRoundRect(x0 + (328 * s), y0 + (20 * s), (28 * s), (110 * s), (14 * s),
 8001a0c:	69b8      	ldr	r0, [r7, #24]
 8001a0e:	f7fe fc57 	bl	80002c0 <__aeabi_i2f>
 8001a12:	4604      	mov	r4, r0
 8001a14:	4946      	ldr	r1, [pc, #280]	@ (8001b30 <StartScreen_Draw+0x2e8>)
 8001a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a18:	f7fe fca6 	bl	8000368 <__aeabi_fmul>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7fe fb99 	bl	8000158 <__addsf3>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7fe fe79 	bl	8000720 <__aeabi_f2iz>
 8001a2e:	4604      	mov	r4, r0
 8001a30:	6978      	ldr	r0, [r7, #20]
 8001a32:	f7fe fc45 	bl	80002c0 <__aeabi_i2f>
 8001a36:	4605      	mov	r5, r0
 8001a38:	4937      	ldr	r1, [pc, #220]	@ (8001b18 <StartScreen_Draw+0x2d0>)
 8001a3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a3c:	f7fe fc94 	bl	8000368 <__aeabi_fmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4628      	mov	r0, r5
 8001a46:	f7fe fb87 	bl	8000158 <__addsf3>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fe67 	bl	8000720 <__aeabi_f2iz>
 8001a52:	4605      	mov	r5, r0
 8001a54:	4937      	ldr	r1, [pc, #220]	@ (8001b34 <StartScreen_Draw+0x2ec>)
 8001a56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a58:	f7fe fc86 	bl	8000368 <__aeabi_fmul>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7fe fe5e 	bl	8000720 <__aeabi_f2iz>
 8001a64:	4606      	mov	r6, r0
 8001a66:	4934      	ldr	r1, [pc, #208]	@ (8001b38 <StartScreen_Draw+0x2f0>)
 8001a68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a6a:	f7fe fc7d 	bl	8000368 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7fe fe55 	bl	8000720 <__aeabi_f2iz>
 8001a76:	4680      	mov	r8, r0
 8001a78:	4930      	ldr	r1, [pc, #192]	@ (8001b3c <StartScreen_Draw+0x2f4>)
 8001a7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001a7c:	f7fe fc74 	bl	8000368 <__aeabi_fmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fe4c 	bl	8000720 <__aeabi_f2iz>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	231f      	movs	r3, #31
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	4643      	mov	r3, r8
 8001a96:	4632      	mov	r2, r6
 8001a98:	4629      	mov	r1, r5
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f7ff fa63 	bl	8000f66 <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (20 * s), y0 + (120 * s), (28 * s), (110 * s), (14 * s),
 8001aa0:	69b8      	ldr	r0, [r7, #24]
 8001aa2:	f7fe fc0d 	bl	80002c0 <__aeabi_i2f>
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	491b      	ldr	r1, [pc, #108]	@ (8001b18 <StartScreen_Draw+0x2d0>)
 8001aaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001aac:	f7fe fc5c 	bl	8000368 <__aeabi_fmul>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f7fe fb4f 	bl	8000158 <__addsf3>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fe2f 	bl	8000720 <__aeabi_f2iz>
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	6978      	ldr	r0, [r7, #20]
 8001ac6:	f7fe fbfb 	bl	80002c0 <__aeabi_i2f>
 8001aca:	4605      	mov	r5, r0
 8001acc:	491c      	ldr	r1, [pc, #112]	@ (8001b40 <StartScreen_Draw+0x2f8>)
 8001ace:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ad0:	f7fe fc4a 	bl	8000368 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4628      	mov	r0, r5
 8001ada:	f7fe fb3d 	bl	8000158 <__addsf3>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fe1d 	bl	8000720 <__aeabi_f2iz>
 8001ae6:	4605      	mov	r5, r0
 8001ae8:	4912      	ldr	r1, [pc, #72]	@ (8001b34 <StartScreen_Draw+0x2ec>)
 8001aea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001aec:	f7fe fc3c 	bl	8000368 <__aeabi_fmul>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fe14 	bl	8000720 <__aeabi_f2iz>
 8001af8:	4606      	mov	r6, r0
 8001afa:	490f      	ldr	r1, [pc, #60]	@ (8001b38 <StartScreen_Draw+0x2f0>)
 8001afc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001afe:	f7fe fc33 	bl	8000368 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	e01d      	b.n	8001b44 <StartScreen_Draw+0x2fc>
 8001b08:	43b40000 	.word	0x43b40000
 8001b0c:	43520000 	.word	0x43520000
 8001b10:	43700000 	.word	0x43700000
 8001b14:	40400000 	.word	0x40400000
 8001b18:	41a00000 	.word	0x41a00000
 8001b1c:	41700000 	.word	0x41700000
 8001b20:	428c0000 	.word	0x428c0000
 8001b24:	41900000 	.word	0x41900000
 8001b28:	43870000 	.word	0x43870000
 8001b2c:	43070000 	.word	0x43070000
 8001b30:	43a40000 	.word	0x43a40000
 8001b34:	41e00000 	.word	0x41e00000
 8001b38:	42dc0000 	.word	0x42dc0000
 8001b3c:	41600000 	.word	0x41600000
 8001b40:	42f00000 	.word	0x42f00000
 8001b44:	f7fe fdec 	bl	8000720 <__aeabi_f2iz>
 8001b48:	4680      	mov	r8, r0
 8001b4a:	49af      	ldr	r1, [pc, #700]	@ (8001e08 <StartScreen_Draw+0x5c0>)
 8001b4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b4e:	f7fe fc0b 	bl	8000368 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fde3 	bl	8000720 <__aeabi_f2iz>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	231f      	movs	r3, #31
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	9200      	str	r2, [sp, #0]
 8001b66:	4643      	mov	r3, r8
 8001b68:	4632      	mov	r2, r6
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff f9fa 	bl	8000f66 <DrawRoundRect>
			stroke, COLOR_BLUE);
	/* 상단 가로 캡슐 2개 */
	DrawRoundRect(x0 + (120 * s), y0 + (38 * s), (85 * s), (22 * s), (11 * s),
 8001b72:	69b8      	ldr	r0, [r7, #24]
 8001b74:	f7fe fba4 	bl	80002c0 <__aeabi_i2f>
 8001b78:	4604      	mov	r4, r0
 8001b7a:	49a4      	ldr	r1, [pc, #656]	@ (8001e0c <StartScreen_Draw+0x5c4>)
 8001b7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b7e:	f7fe fbf3 	bl	8000368 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7fe fae6 	bl	8000158 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe fdc6 	bl	8000720 <__aeabi_f2iz>
 8001b94:	4604      	mov	r4, r0
 8001b96:	6978      	ldr	r0, [r7, #20]
 8001b98:	f7fe fb92 	bl	80002c0 <__aeabi_i2f>
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	499c      	ldr	r1, [pc, #624]	@ (8001e10 <StartScreen_Draw+0x5c8>)
 8001ba0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ba2:	f7fe fbe1 	bl	8000368 <__aeabi_fmul>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4628      	mov	r0, r5
 8001bac:	f7fe fad4 	bl	8000158 <__addsf3>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fdb4 	bl	8000720 <__aeabi_f2iz>
 8001bb8:	4605      	mov	r5, r0
 8001bba:	4996      	ldr	r1, [pc, #600]	@ (8001e14 <StartScreen_Draw+0x5cc>)
 8001bbc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bbe:	f7fe fbd3 	bl	8000368 <__aeabi_fmul>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fdab 	bl	8000720 <__aeabi_f2iz>
 8001bca:	4606      	mov	r6, r0
 8001bcc:	4992      	ldr	r1, [pc, #584]	@ (8001e18 <StartScreen_Draw+0x5d0>)
 8001bce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001bd0:	f7fe fbca 	bl	8000368 <__aeabi_fmul>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7fe fda2 	bl	8000720 <__aeabi_f2iz>
 8001bdc:	4680      	mov	r8, r0
 8001bde:	498f      	ldr	r1, [pc, #572]	@ (8001e1c <StartScreen_Draw+0x5d4>)
 8001be0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001be2:	f7fe fbc1 	bl	8000368 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fd99 	bl	8000720 <__aeabi_f2iz>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	231f      	movs	r3, #31
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	4643      	mov	r3, r8
 8001bfc:	4632      	mov	r2, r6
 8001bfe:	4629      	mov	r1, r5
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7ff f9b0 	bl	8000f66 <DrawRoundRect>
			stroke, COLOR_BLUE);
	DrawRoundRect(x0 + (215 * s), y0 + (38 * s), (85 * s), (22 * s), (11 * s),
 8001c06:	69b8      	ldr	r0, [r7, #24]
 8001c08:	f7fe fb5a 	bl	80002c0 <__aeabi_i2f>
 8001c0c:	4604      	mov	r4, r0
 8001c0e:	4984      	ldr	r1, [pc, #528]	@ (8001e20 <StartScreen_Draw+0x5d8>)
 8001c10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c12:	f7fe fba9 	bl	8000368 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7fe fa9c 	bl	8000158 <__addsf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fd7c 	bl	8000720 <__aeabi_f2iz>
 8001c28:	4604      	mov	r4, r0
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f7fe fb48 	bl	80002c0 <__aeabi_i2f>
 8001c30:	4605      	mov	r5, r0
 8001c32:	4977      	ldr	r1, [pc, #476]	@ (8001e10 <StartScreen_Draw+0x5c8>)
 8001c34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c36:	f7fe fb97 	bl	8000368 <__aeabi_fmul>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4628      	mov	r0, r5
 8001c40:	f7fe fa8a 	bl	8000158 <__addsf3>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fd6a 	bl	8000720 <__aeabi_f2iz>
 8001c4c:	4605      	mov	r5, r0
 8001c4e:	4971      	ldr	r1, [pc, #452]	@ (8001e14 <StartScreen_Draw+0x5cc>)
 8001c50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c52:	f7fe fb89 	bl	8000368 <__aeabi_fmul>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fd61 	bl	8000720 <__aeabi_f2iz>
 8001c5e:	4606      	mov	r6, r0
 8001c60:	496d      	ldr	r1, [pc, #436]	@ (8001e18 <StartScreen_Draw+0x5d0>)
 8001c62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c64:	f7fe fb80 	bl	8000368 <__aeabi_fmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fd58 	bl	8000720 <__aeabi_f2iz>
 8001c70:	4680      	mov	r8, r0
 8001c72:	496a      	ldr	r1, [pc, #424]	@ (8001e1c <StartScreen_Draw+0x5d4>)
 8001c74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c76:	f7fe fb77 	bl	8000368 <__aeabi_fmul>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fd4f 	bl	8000720 <__aeabi_f2iz>
 8001c82:	4602      	mov	r2, r0
 8001c84:	231f      	movs	r3, #31
 8001c86:	9302      	str	r3, [sp, #8]
 8001c88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	9200      	str	r2, [sp, #0]
 8001c8e:	4643      	mov	r3, r8
 8001c90:	4632      	mov	r2, r6
 8001c92:	4629      	mov	r1, r5
 8001c94:	4620      	mov	r0, r4
 8001c96:	f7ff f966 	bl	8000f66 <DrawRoundRect>
			stroke, COLOR_BLUE);

	/* ----- 과일 아이콘(단순 원) ----- */
	DrawFilledCircle(x0 + (210 * s), y0 + (30 * s), (5 * s), COLOR_RED); /* 사과 */
 8001c9a:	69b8      	ldr	r0, [r7, #24]
 8001c9c:	f7fe fb10 	bl	80002c0 <__aeabi_i2f>
 8001ca0:	4604      	mov	r4, r0
 8001ca2:	4960      	ldr	r1, [pc, #384]	@ (8001e24 <StartScreen_Draw+0x5dc>)
 8001ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ca6:	f7fe fb5f 	bl	8000368 <__aeabi_fmul>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4620      	mov	r0, r4
 8001cb0:	f7fe fa52 	bl	8000158 <__addsf3>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fd32 	bl	8000720 <__aeabi_f2iz>
 8001cbc:	4604      	mov	r4, r0
 8001cbe:	6978      	ldr	r0, [r7, #20]
 8001cc0:	f7fe fafe 	bl	80002c0 <__aeabi_i2f>
 8001cc4:	4605      	mov	r5, r0
 8001cc6:	4958      	ldr	r1, [pc, #352]	@ (8001e28 <StartScreen_Draw+0x5e0>)
 8001cc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cca:	f7fe fb4d 	bl	8000368 <__aeabi_fmul>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f7fe fa40 	bl	8000158 <__addsf3>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fd20 	bl	8000720 <__aeabi_f2iz>
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	4952      	ldr	r1, [pc, #328]	@ (8001e2c <StartScreen_Draw+0x5e4>)
 8001ce4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ce6:	f7fe fb3f 	bl	8000368 <__aeabi_fmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fd17 	bl	8000720 <__aeabi_f2iz>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	f7ff f896 	bl	8000e2c <DrawFilledCircle>
	DrawFilledCircle(x0 + (165 * s), y0 + (30 * s), (5 * s), COLOR_RED); /* 딸기 */
 8001d00:	69b8      	ldr	r0, [r7, #24]
 8001d02:	f7fe fadd 	bl	80002c0 <__aeabi_i2f>
 8001d06:	4604      	mov	r4, r0
 8001d08:	4949      	ldr	r1, [pc, #292]	@ (8001e30 <StartScreen_Draw+0x5e8>)
 8001d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d0c:	f7fe fb2c 	bl	8000368 <__aeabi_fmul>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4620      	mov	r0, r4
 8001d16:	f7fe fa1f 	bl	8000158 <__addsf3>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fcff 	bl	8000720 <__aeabi_f2iz>
 8001d22:	4604      	mov	r4, r0
 8001d24:	6978      	ldr	r0, [r7, #20]
 8001d26:	f7fe facb 	bl	80002c0 <__aeabi_i2f>
 8001d2a:	4605      	mov	r5, r0
 8001d2c:	493e      	ldr	r1, [pc, #248]	@ (8001e28 <StartScreen_Draw+0x5e0>)
 8001d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d30:	f7fe fb1a 	bl	8000368 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4619      	mov	r1, r3
 8001d38:	4628      	mov	r0, r5
 8001d3a:	f7fe fa0d 	bl	8000158 <__addsf3>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fced 	bl	8000720 <__aeabi_f2iz>
 8001d46:	4605      	mov	r5, r0
 8001d48:	4938      	ldr	r1, [pc, #224]	@ (8001e2c <StartScreen_Draw+0x5e4>)
 8001d4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d4c:	f7fe fb0c 	bl	8000368 <__aeabi_fmul>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fce4 	bl	8000720 <__aeabi_f2iz>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001d5e:	4629      	mov	r1, r5
 8001d60:	4620      	mov	r0, r4
 8001d62:	f7ff f863 	bl	8000e2c <DrawFilledCircle>
	DrawFilledCircle(x0 + (58 * s), y0 + (172 * s), (6 * s), COLOR_RED); /* 체리 */
 8001d66:	69b8      	ldr	r0, [r7, #24]
 8001d68:	f7fe faaa 	bl	80002c0 <__aeabi_i2f>
 8001d6c:	4604      	mov	r4, r0
 8001d6e:	4931      	ldr	r1, [pc, #196]	@ (8001e34 <StartScreen_Draw+0x5ec>)
 8001d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d72:	f7fe faf9 	bl	8000368 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7fe f9ec 	bl	8000158 <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fccc 	bl	8000720 <__aeabi_f2iz>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7fe fa98 	bl	80002c0 <__aeabi_i2f>
 8001d90:	4605      	mov	r5, r0
 8001d92:	4929      	ldr	r1, [pc, #164]	@ (8001e38 <StartScreen_Draw+0x5f0>)
 8001d94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d96:	f7fe fae7 	bl	8000368 <__aeabi_fmul>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f7fe f9da 	bl	8000158 <__addsf3>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fcba 	bl	8000720 <__aeabi_f2iz>
 8001dac:	4605      	mov	r5, r0
 8001dae:	4923      	ldr	r1, [pc, #140]	@ (8001e3c <StartScreen_Draw+0x5f4>)
 8001db0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001db2:	f7fe fad9 	bl	8000368 <__aeabi_fmul>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fcb1 	bl	8000720 <__aeabi_f2iz>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001dc4:	4629      	mov	r1, r5
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff f830 	bl	8000e2c <DrawFilledCircle>

	/* ----- 중앙 로고 "PAC MAN" (노란색) ----- */
	int logo_scale = (int) (5 * s);
 8001dcc:	4917      	ldr	r1, [pc, #92]	@ (8001e2c <StartScreen_Draw+0x5e4>)
 8001dce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dd0:	f7fe faca 	bl	8000368 <__aeabi_fmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fca2 	bl	8000720 <__aeabi_f2iz>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	643b      	str	r3, [r7, #64]	@ 0x40
	if (logo_scale < 2)
 8001de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	dc01      	bgt.n	8001dea <StartScreen_Draw+0x5a2>
		logo_scale = 2;
 8001de6:	2302      	movs	r3, #2
 8001de8:	643b      	str	r3, [r7, #64]	@ 0x40
	int text_y = y0 + (80 * s);
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7fe fa68 	bl	80002c0 <__aeabi_i2f>
 8001df0:	4604      	mov	r4, r0
 8001df2:	4913      	ldr	r1, [pc, #76]	@ (8001e40 <StartScreen_Draw+0x5f8>)
 8001df4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001df6:	f7fe fab7 	bl	8000368 <__aeabi_fmul>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4620      	mov	r0, r4
 8001e00:	f7fe f9aa 	bl	8000158 <__addsf3>
 8001e04:	e01e      	b.n	8001e44 <StartScreen_Draw+0x5fc>
 8001e06:	bf00      	nop
 8001e08:	41600000 	.word	0x41600000
 8001e0c:	42f00000 	.word	0x42f00000
 8001e10:	42180000 	.word	0x42180000
 8001e14:	42aa0000 	.word	0x42aa0000
 8001e18:	41b00000 	.word	0x41b00000
 8001e1c:	41300000 	.word	0x41300000
 8001e20:	43570000 	.word	0x43570000
 8001e24:	43520000 	.word	0x43520000
 8001e28:	41f00000 	.word	0x41f00000
 8001e2c:	40a00000 	.word	0x40a00000
 8001e30:	43250000 	.word	0x43250000
 8001e34:	42680000 	.word	0x42680000
 8001e38:	432c0000 	.word	0x432c0000
 8001e3c:	40c00000 	.word	0x40c00000
 8001e40:	42a00000 	.word	0x42a00000
 8001e44:	4603      	mov	r3, r0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fc6a 	bl	8000720 <__aeabi_f2iz>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	613b      	str	r3, [r7, #16]
	/* "PAC" */
	DrawText_FlipY(x0 + (110 * s), text_y, "PAC", COLOR_YELLOW, COLOR_BLACK,
 8001e50:	69b8      	ldr	r0, [r7, #24]
 8001e52:	f7fe fa35 	bl	80002c0 <__aeabi_i2f>
 8001e56:	4604      	mov	r4, r0
 8001e58:	4995      	ldr	r1, [pc, #596]	@ (80020b0 <StartScreen_Draw+0x868>)
 8001e5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e5c:	f7fe fa84 	bl	8000368 <__aeabi_fmul>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4619      	mov	r1, r3
 8001e64:	4620      	mov	r0, r4
 8001e66:	f7fe f977 	bl	8000158 <__addsf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe fc57 	bl	8000720 <__aeabi_f2iz>
 8001e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	2300      	movs	r3, #0
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e7e:	4a8d      	ldr	r2, [pc, #564]	@ (80020b4 <StartScreen_Draw+0x86c>)
 8001e80:	6939      	ldr	r1, [r7, #16]
 8001e82:	f7fe ffa9 	bl	8000dd8 <DrawText_FlipY>
			logo_scale);

	/* 공백 조금 */
	DrawText_FlipY(x0 + (110 * s) + 3 * (6 * logo_scale) + (8 * s), text_y,
 8001e86:	69b8      	ldr	r0, [r7, #24]
 8001e88:	f7fe fa1a 	bl	80002c0 <__aeabi_i2f>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	4988      	ldr	r1, [pc, #544]	@ (80020b0 <StartScreen_Draw+0x868>)
 8001e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e92:	f7fe fa69 	bl	8000368 <__aeabi_fmul>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7fe f95c 	bl	8000158 <__addsf3>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	461c      	mov	r4, r3
 8001ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fa06 	bl	80002c0 <__aeabi_i2f>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4620      	mov	r0, r4
 8001eba:	f7fe f94d 	bl	8000158 <__addsf3>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8001ec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ec8:	f7fe fa4e 	bl	8000368 <__aeabi_fmul>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f7fe f941 	bl	8000158 <__addsf3>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fc21 	bl	8000720 <__aeabi_f2iz>
 8001ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001eea:	4a73      	ldr	r2, [pc, #460]	@ (80020b8 <StartScreen_Draw+0x870>)
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	f7fe ff73 	bl	8000dd8 <DrawText_FlipY>
			"MAN", COLOR_YELLOW, COLOR_BLACK, logo_scale);

	/* ----- 하단 경로 점(펠릿) & 팩맨 ----- */
	int dot_r = (int) (3 * s);
 8001ef2:	4972      	ldr	r1, [pc, #456]	@ (80020bc <StartScreen_Draw+0x874>)
 8001ef4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ef6:	f7fe fa37 	bl	8000368 <__aeabi_fmul>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe fc0f 	bl	8000720 <__aeabi_f2iz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (dot_r < 2)
 8001f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	dc01      	bgt.n	8001f10 <StartScreen_Draw+0x6c8>
		dot_r = 2;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int big_r = (int) (7 * s);
 8001f10:	496b      	ldr	r1, [pc, #428]	@ (80020c0 <StartScreen_Draw+0x878>)
 8001f12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f14:	f7fe fa28 	bl	8000368 <__aeabi_fmul>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fc00 	bl	8000720 <__aeabi_f2iz>
 8001f20:	4603      	mov	r3, r0
 8001f22:	60fb      	str	r3, [r7, #12]
	int base_y = y0 + (140 * s);
 8001f24:	6978      	ldr	r0, [r7, #20]
 8001f26:	f7fe f9cb 	bl	80002c0 <__aeabi_i2f>
 8001f2a:	4604      	mov	r4, r0
 8001f2c:	4965      	ldr	r1, [pc, #404]	@ (80020c4 <StartScreen_Draw+0x87c>)
 8001f2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f30:	f7fe fa1a 	bl	8000368 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4619      	mov	r1, r3
 8001f38:	4620      	mov	r0, r4
 8001f3a:	f7fe f90d 	bl	8000158 <__addsf3>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fbed 	bl	8000720 <__aeabi_f2iz>
 8001f46:	4603      	mov	r3, r0
 8001f48:	60bb      	str	r3, [r7, #8]
	int base_x = x0 + (100 * s);
 8001f4a:	69b8      	ldr	r0, [r7, #24]
 8001f4c:	f7fe f9b8 	bl	80002c0 <__aeabi_i2f>
 8001f50:	4604      	mov	r4, r0
 8001f52:	495d      	ldr	r1, [pc, #372]	@ (80020c8 <StartScreen_Draw+0x880>)
 8001f54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f56:	f7fe fa07 	bl	8000368 <__aeabi_fmul>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f7fe f8fa 	bl	8000158 <__addsf3>
 8001f64:	4603      	mov	r3, r0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fbda 	bl	8000720 <__aeabi_f2iz>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	607b      	str	r3, [r7, #4]

	/* L자 도트 */
	for (int i = 0; i < 7; i++)
 8001f70:	2300      	movs	r3, #0
 8001f72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f74:	e022      	b.n	8001fbc <StartScreen_Draw+0x774>
		DrawFilledCircle(base_x + i * (12 * s), base_y, dot_r, COLOR_ORANGE);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe f9a2 	bl	80002c0 <__aeabi_i2f>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001f80:	f7fe f99e 	bl	80002c0 <__aeabi_i2f>
 8001f84:	4605      	mov	r5, r0
 8001f86:	4951      	ldr	r1, [pc, #324]	@ (80020cc <StartScreen_Draw+0x884>)
 8001f88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f8a:	f7fe f9ed 	bl	8000368 <__aeabi_fmul>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4628      	mov	r0, r5
 8001f94:	f7fe f9e8 	bl	8000368 <__aeabi_fmul>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f7fe f8db 	bl	8000158 <__addsf3>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fbbb 	bl	8000720 <__aeabi_f2iz>
 8001faa:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8001fae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	f7fe ff3b 	bl	8000e2c <DrawFilledCircle>
	for (int i = 0; i < 7; i++)
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb8:	3301      	adds	r3, #1
 8001fba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	ddd9      	ble.n	8001f76 <StartScreen_Draw+0x72e>
	for (int i = 1; i < 8; i++)
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc6:	e023      	b.n	8002010 <StartScreen_Draw+0x7c8>
		DrawFilledCircle(base_x, base_y + i * (12 * s), dot_r, COLOR_ORANGE);
 8001fc8:	68b8      	ldr	r0, [r7, #8]
 8001fca:	f7fe f979 	bl	80002c0 <__aeabi_i2f>
 8001fce:	4604      	mov	r4, r0
 8001fd0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001fd2:	f7fe f975 	bl	80002c0 <__aeabi_i2f>
 8001fd6:	4605      	mov	r5, r0
 8001fd8:	493c      	ldr	r1, [pc, #240]	@ (80020cc <StartScreen_Draw+0x884>)
 8001fda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fdc:	f7fe f9c4 	bl	8000368 <__aeabi_fmul>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4628      	mov	r0, r5
 8001fe6:	f7fe f9bf 	bl	8000368 <__aeabi_fmul>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	4620      	mov	r0, r4
 8001ff0:	f7fe f8b2 	bl	8000158 <__addsf3>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fb92 	bl	8000720 <__aeabi_f2iz>
 8001ffc:	4601      	mov	r1, r0
 8001ffe:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002002:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f7fe ff11 	bl	8000e2c <DrawFilledCircle>
	for (int i = 1; i < 8; i++)
 800200a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800200c:	3301      	adds	r3, #1
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002012:	2b07      	cmp	r3, #7
 8002014:	ddd8      	ble.n	8001fc8 <StartScreen_Draw+0x780>

	/* 굵은 파워 펠릿 2개 + 오렌지 */
	DrawFilledCircle(base_x + (8 * 12 * s), base_y, big_r, COLOR_ORANGE);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe f952 	bl	80002c0 <__aeabi_i2f>
 800201c:	4604      	mov	r4, r0
 800201e:	492c      	ldr	r1, [pc, #176]	@ (80020d0 <StartScreen_Draw+0x888>)
 8002020:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002022:	f7fe f9a1 	bl	8000368 <__aeabi_fmul>
 8002026:	4603      	mov	r3, r0
 8002028:	4619      	mov	r1, r3
 800202a:	4620      	mov	r0, r4
 800202c:	f7fe f894 	bl	8000158 <__addsf3>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fb74 	bl	8000720 <__aeabi_f2iz>
 8002038:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	68b9      	ldr	r1, [r7, #8]
 8002040:	f7fe fef4 	bl	8000e2c <DrawFilledCircle>
	DrawFilledCircle(base_x + (4 * 12 * s), base_y - (12 * s), (int) (5 * s),
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe f93b 	bl	80002c0 <__aeabi_i2f>
 800204a:	4604      	mov	r4, r0
 800204c:	4921      	ldr	r1, [pc, #132]	@ (80020d4 <StartScreen_Draw+0x88c>)
 800204e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002050:	f7fe f98a 	bl	8000368 <__aeabi_fmul>
 8002054:	4603      	mov	r3, r0
 8002056:	4619      	mov	r1, r3
 8002058:	4620      	mov	r0, r4
 800205a:	f7fe f87d 	bl	8000158 <__addsf3>
 800205e:	4603      	mov	r3, r0
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fb5d 	bl	8000720 <__aeabi_f2iz>
 8002066:	4604      	mov	r4, r0
 8002068:	68b8      	ldr	r0, [r7, #8]
 800206a:	f7fe f929 	bl	80002c0 <__aeabi_i2f>
 800206e:	4605      	mov	r5, r0
 8002070:	4916      	ldr	r1, [pc, #88]	@ (80020cc <StartScreen_Draw+0x884>)
 8002072:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002074:	f7fe f978 	bl	8000368 <__aeabi_fmul>
 8002078:	4603      	mov	r3, r0
 800207a:	4619      	mov	r1, r3
 800207c:	4628      	mov	r0, r5
 800207e:	f7fe f869 	bl	8000154 <__aeabi_fsub>
 8002082:	4603      	mov	r3, r0
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fb4b 	bl	8000720 <__aeabi_f2iz>
 800208a:	4605      	mov	r5, r0
 800208c:	4912      	ldr	r1, [pc, #72]	@ (80020d8 <StartScreen_Draw+0x890>)
 800208e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002090:	f7fe f96a 	bl	8000368 <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe fb42 	bl	8000720 <__aeabi_f2iz>
 800209c:	4602      	mov	r2, r0
 800209e:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80020a2:	4629      	mov	r1, r5
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7fe fec1 	bl	8000e2c <DrawFilledCircle>
	COLOR_ORANGE);

	/* 오른쪽으로 이어지는 도트 열 */
	for (int i = 1; i <= 10; i++)
 80020aa:	2301      	movs	r3, #1
 80020ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ae:	e056      	b.n	800215e <StartScreen_Draw+0x916>
 80020b0:	42dc0000 	.word	0x42dc0000
 80020b4:	08005c5c 	.word	0x08005c5c
 80020b8:	08005c60 	.word	0x08005c60
 80020bc:	40400000 	.word	0x40400000
 80020c0:	40e00000 	.word	0x40e00000
 80020c4:	430c0000 	.word	0x430c0000
 80020c8:	42c80000 	.word	0x42c80000
 80020cc:	41400000 	.word	0x41400000
 80020d0:	42c00000 	.word	0x42c00000
 80020d4:	42400000 	.word	0x42400000
 80020d8:	40a00000 	.word	0x40a00000
		DrawFilledCircle(base_x + (8 * 12 * s) + i * (11 * s),
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7fe f8ef 	bl	80002c0 <__aeabi_i2f>
 80020e2:	4604      	mov	r4, r0
 80020e4:	49a3      	ldr	r1, [pc, #652]	@ (8002374 <StartScreen_Draw+0xb2c>)
 80020e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e8:	f7fe f93e 	bl	8000368 <__aeabi_fmul>
 80020ec:	4603      	mov	r3, r0
 80020ee:	4619      	mov	r1, r3
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7fe f831 	bl	8000158 <__addsf3>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461d      	mov	r5, r3
 80020fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020fc:	f7fe f8e0 	bl	80002c0 <__aeabi_i2f>
 8002100:	4604      	mov	r4, r0
 8002102:	499d      	ldr	r1, [pc, #628]	@ (8002378 <StartScreen_Draw+0xb30>)
 8002104:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002106:	f7fe f92f 	bl	8000368 <__aeabi_fmul>
 800210a:	4603      	mov	r3, r0
 800210c:	4619      	mov	r1, r3
 800210e:	4620      	mov	r0, r4
 8002110:	f7fe f92a 	bl	8000368 <__aeabi_fmul>
 8002114:	4603      	mov	r3, r0
 8002116:	4619      	mov	r1, r3
 8002118:	4628      	mov	r0, r5
 800211a:	f7fe f81d 	bl	8000158 <__addsf3>
 800211e:	4603      	mov	r3, r0
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fafd 	bl	8000720 <__aeabi_f2iz>
 8002126:	4604      	mov	r4, r0
				base_y + (12 * s), dot_r, COLOR_ORANGE);
 8002128:	68b8      	ldr	r0, [r7, #8]
 800212a:	f7fe f8c9 	bl	80002c0 <__aeabi_i2f>
 800212e:	4605      	mov	r5, r0
 8002130:	4992      	ldr	r1, [pc, #584]	@ (800237c <StartScreen_Draw+0xb34>)
 8002132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002134:	f7fe f918 	bl	8000368 <__aeabi_fmul>
 8002138:	4603      	mov	r3, r0
 800213a:	4619      	mov	r1, r3
 800213c:	4628      	mov	r0, r5
 800213e:	f7fe f80b 	bl	8000158 <__addsf3>
 8002142:	4603      	mov	r3, r0
		DrawFilledCircle(base_x + (8 * 12 * s) + i * (11 * s),
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe faeb 	bl	8000720 <__aeabi_f2iz>
 800214a:	4601      	mov	r1, r0
 800214c:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8002150:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002152:	4620      	mov	r0, r4
 8002154:	f7fe fe6a 	bl	8000e2c <DrawFilledCircle>
	for (int i = 1; i <= 10; i++)
 8002158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215a:	3301      	adds	r3, #1
 800215c:	633b      	str	r3, [r7, #48]	@ 0x30
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	2b0a      	cmp	r3, #10
 8002162:	ddbb      	ble.n	80020dc <StartScreen_Draw+0x894>

	/* 팩맨 (오른쪽 끝) */
	DrawPacman_FlipX(base_x + (8 * 12 * s) + (11 * 11 * s), base_y + (12 * s),
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7fe f8ab 	bl	80002c0 <__aeabi_i2f>
 800216a:	4604      	mov	r4, r0
 800216c:	4981      	ldr	r1, [pc, #516]	@ (8002374 <StartScreen_Draw+0xb2c>)
 800216e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002170:	f7fe f8fa 	bl	8000368 <__aeabi_fmul>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	4620      	mov	r0, r4
 800217a:	f7fd ffed 	bl	8000158 <__addsf3>
 800217e:	4603      	mov	r3, r0
 8002180:	461c      	mov	r4, r3
 8002182:	497f      	ldr	r1, [pc, #508]	@ (8002380 <StartScreen_Draw+0xb38>)
 8002184:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002186:	f7fe f8ef 	bl	8000368 <__aeabi_fmul>
 800218a:	4603      	mov	r3, r0
 800218c:	4619      	mov	r1, r3
 800218e:	4620      	mov	r0, r4
 8002190:	f7fd ffe2 	bl	8000158 <__addsf3>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe fac2 	bl	8000720 <__aeabi_f2iz>
 800219c:	4604      	mov	r4, r0
 800219e:	68b8      	ldr	r0, [r7, #8]
 80021a0:	f7fe f88e 	bl	80002c0 <__aeabi_i2f>
 80021a4:	4605      	mov	r5, r0
 80021a6:	4975      	ldr	r1, [pc, #468]	@ (800237c <StartScreen_Draw+0xb34>)
 80021a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021aa:	f7fe f8dd 	bl	8000368 <__aeabi_fmul>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4619      	mov	r1, r3
 80021b2:	4628      	mov	r0, r5
 80021b4:	f7fd ffd0 	bl	8000158 <__addsf3>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fab0 	bl	8000720 <__aeabi_f2iz>
 80021c0:	4605      	mov	r5, r0
			(int) (10 * s), 45.f, COLOR_YELLOW, COLOR_BLACK);
 80021c2:	4970      	ldr	r1, [pc, #448]	@ (8002384 <StartScreen_Draw+0xb3c>)
 80021c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021c6:	f7fe f8cf 	bl	8000368 <__aeabi_fmul>
 80021ca:	4603      	mov	r3, r0
	DrawPacman_FlipX(base_x + (8 * 12 * s) + (11 * 11 * s), base_y + (12 * s),
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe faa7 	bl	8000720 <__aeabi_f2iz>
 80021d2:	4602      	mov	r2, r0
 80021d4:	2300      	movs	r3, #0
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	4b6a      	ldr	r3, [pc, #424]	@ (8002388 <StartScreen_Draw+0xb40>)
 80021e0:	4629      	mov	r1, r5
 80021e2:	4620      	mov	r0, r4
 80021e4:	f7fe ffd4 	bl	8001190 <DrawPacman_FlipX>

	/* ----- 유령 3개 ----- */
	DrawGhost(x0 + (75 * s), y0 + (120 * s), (24 * s), (18 * s), COLOR_CYAN,
 80021e8:	69b8      	ldr	r0, [r7, #24]
 80021ea:	f7fe f869 	bl	80002c0 <__aeabi_i2f>
 80021ee:	4604      	mov	r4, r0
 80021f0:	4966      	ldr	r1, [pc, #408]	@ (800238c <StartScreen_Draw+0xb44>)
 80021f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021f4:	f7fe f8b8 	bl	8000368 <__aeabi_fmul>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fd ffab 	bl	8000158 <__addsf3>
 8002202:	4603      	mov	r3, r0
 8002204:	4618      	mov	r0, r3
 8002206:	f7fe fa8b 	bl	8000720 <__aeabi_f2iz>
 800220a:	4604      	mov	r4, r0
 800220c:	6978      	ldr	r0, [r7, #20]
 800220e:	f7fe f857 	bl	80002c0 <__aeabi_i2f>
 8002212:	4605      	mov	r5, r0
 8002214:	495e      	ldr	r1, [pc, #376]	@ (8002390 <StartScreen_Draw+0xb48>)
 8002216:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002218:	f7fe f8a6 	bl	8000368 <__aeabi_fmul>
 800221c:	4603      	mov	r3, r0
 800221e:	4619      	mov	r1, r3
 8002220:	4628      	mov	r0, r5
 8002222:	f7fd ff99 	bl	8000158 <__addsf3>
 8002226:	4603      	mov	r3, r0
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fa79 	bl	8000720 <__aeabi_f2iz>
 800222e:	4605      	mov	r5, r0
 8002230:	4958      	ldr	r1, [pc, #352]	@ (8002394 <StartScreen_Draw+0xb4c>)
 8002232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002234:	f7fe f898 	bl	8000368 <__aeabi_fmul>
 8002238:	4603      	mov	r3, r0
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fa70 	bl	8000720 <__aeabi_f2iz>
 8002240:	4606      	mov	r6, r0
 8002242:	4955      	ldr	r1, [pc, #340]	@ (8002398 <StartScreen_Draw+0xb50>)
 8002244:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002246:	f7fe f88f 	bl	8000368 <__aeabi_fmul>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fa67 	bl	8000720 <__aeabi_f2iz>
 8002252:	4603      	mov	r3, r0
 8002254:	2200      	movs	r2, #0
 8002256:	9201      	str	r2, [sp, #4]
 8002258:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800225c:	9200      	str	r2, [sp, #0]
 800225e:	4632      	mov	r2, r6
 8002260:	4629      	mov	r1, r5
 8002262:	4620      	mov	r0, r4
 8002264:	f7ff f97a 	bl	800155c <DrawGhost>
	COLOR_BLACK);
	DrawGhost(x0 + (180 * s), y0 + (185 * s), (24 * s), (18 * s), COLOR_RED,
 8002268:	69b8      	ldr	r0, [r7, #24]
 800226a:	f7fe f829 	bl	80002c0 <__aeabi_i2f>
 800226e:	4604      	mov	r4, r0
 8002270:	494a      	ldr	r1, [pc, #296]	@ (800239c <StartScreen_Draw+0xb54>)
 8002272:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002274:	f7fe f878 	bl	8000368 <__aeabi_fmul>
 8002278:	4603      	mov	r3, r0
 800227a:	4619      	mov	r1, r3
 800227c:	4620      	mov	r0, r4
 800227e:	f7fd ff6b 	bl	8000158 <__addsf3>
 8002282:	4603      	mov	r3, r0
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe fa4b 	bl	8000720 <__aeabi_f2iz>
 800228a:	4604      	mov	r4, r0
 800228c:	6978      	ldr	r0, [r7, #20]
 800228e:	f7fe f817 	bl	80002c0 <__aeabi_i2f>
 8002292:	4605      	mov	r5, r0
 8002294:	4942      	ldr	r1, [pc, #264]	@ (80023a0 <StartScreen_Draw+0xb58>)
 8002296:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002298:	f7fe f866 	bl	8000368 <__aeabi_fmul>
 800229c:	4603      	mov	r3, r0
 800229e:	4619      	mov	r1, r3
 80022a0:	4628      	mov	r0, r5
 80022a2:	f7fd ff59 	bl	8000158 <__addsf3>
 80022a6:	4603      	mov	r3, r0
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe fa39 	bl	8000720 <__aeabi_f2iz>
 80022ae:	4605      	mov	r5, r0
 80022b0:	4938      	ldr	r1, [pc, #224]	@ (8002394 <StartScreen_Draw+0xb4c>)
 80022b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022b4:	f7fe f858 	bl	8000368 <__aeabi_fmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe fa30 	bl	8000720 <__aeabi_f2iz>
 80022c0:	4606      	mov	r6, r0
 80022c2:	4935      	ldr	r1, [pc, #212]	@ (8002398 <StartScreen_Draw+0xb50>)
 80022c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022c6:	f7fe f84f 	bl	8000368 <__aeabi_fmul>
 80022ca:	4603      	mov	r3, r0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe fa27 	bl	8000720 <__aeabi_f2iz>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2200      	movs	r2, #0
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	4632      	mov	r2, r6
 80022e0:	4629      	mov	r1, r5
 80022e2:	4620      	mov	r0, r4
 80022e4:	f7ff f93a 	bl	800155c <DrawGhost>
	COLOR_BLACK);
	DrawGhost(x0 + (315 * s), y0 + (115 * s), (24 * s), (18 * s), COLOR_PINK,
 80022e8:	69b8      	ldr	r0, [r7, #24]
 80022ea:	f7fd ffe9 	bl	80002c0 <__aeabi_i2f>
 80022ee:	4604      	mov	r4, r0
 80022f0:	492c      	ldr	r1, [pc, #176]	@ (80023a4 <StartScreen_Draw+0xb5c>)
 80022f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022f4:	f7fe f838 	bl	8000368 <__aeabi_fmul>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4619      	mov	r1, r3
 80022fc:	4620      	mov	r0, r4
 80022fe:	f7fd ff2b 	bl	8000158 <__addsf3>
 8002302:	4603      	mov	r3, r0
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fa0b 	bl	8000720 <__aeabi_f2iz>
 800230a:	4604      	mov	r4, r0
 800230c:	6978      	ldr	r0, [r7, #20]
 800230e:	f7fd ffd7 	bl	80002c0 <__aeabi_i2f>
 8002312:	4605      	mov	r5, r0
 8002314:	4924      	ldr	r1, [pc, #144]	@ (80023a8 <StartScreen_Draw+0xb60>)
 8002316:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002318:	f7fe f826 	bl	8000368 <__aeabi_fmul>
 800231c:	4603      	mov	r3, r0
 800231e:	4619      	mov	r1, r3
 8002320:	4628      	mov	r0, r5
 8002322:	f7fd ff19 	bl	8000158 <__addsf3>
 8002326:	4603      	mov	r3, r0
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f9f9 	bl	8000720 <__aeabi_f2iz>
 800232e:	4605      	mov	r5, r0
 8002330:	4918      	ldr	r1, [pc, #96]	@ (8002394 <StartScreen_Draw+0xb4c>)
 8002332:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002334:	f7fe f818 	bl	8000368 <__aeabi_fmul>
 8002338:	4603      	mov	r3, r0
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe f9f0 	bl	8000720 <__aeabi_f2iz>
 8002340:	4606      	mov	r6, r0
 8002342:	4915      	ldr	r1, [pc, #84]	@ (8002398 <StartScreen_Draw+0xb50>)
 8002344:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002346:	f7fe f80f 	bl	8000368 <__aeabi_fmul>
 800234a:	4603      	mov	r3, r0
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f9e7 	bl	8000720 <__aeabi_f2iz>
 8002352:	4603      	mov	r3, r0
 8002354:	2200      	movs	r2, #0
 8002356:	9201      	str	r2, [sp, #4]
 8002358:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800235c:	9200      	str	r2, [sp, #0]
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f7ff f8fa 	bl	800155c <DrawGhost>
	COLOR_BLACK);
}
 8002368:	bf00      	nop
 800236a:	3748      	adds	r7, #72	@ 0x48
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002372:	bf00      	nop
 8002374:	42c00000 	.word	0x42c00000
 8002378:	41300000 	.word	0x41300000
 800237c:	41400000 	.word	0x41400000
 8002380:	42f20000 	.word	0x42f20000
 8002384:	41200000 	.word	0x41200000
 8002388:	42340000 	.word	0x42340000
 800238c:	42960000 	.word	0x42960000
 8002390:	42f00000 	.word	0x42f00000
 8002394:	41c00000 	.word	0x41c00000
 8002398:	41900000 	.word	0x41900000
 800239c:	43340000 	.word	0x43340000
 80023a0:	43390000 	.word	0x43390000
 80023a4:	439d8000 	.word	0x439d8000
 80023a8:	42e60000 	.word	0x42e60000

080023ac <any_button_now>:

/* 버튼 50ms 디바운스 */
static int any_button_now(void) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	return BTN_PRESSED(UP_GPIO_Port, UP_Pin)
 80023b0:	2104      	movs	r1, #4
 80023b2:	4811      	ldr	r0, [pc, #68]	@ (80023f8 <any_button_now+0x4c>)
 80023b4:	f001 f870 	bl	8003498 <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
			|| BTN_PRESSED(LEFT_GPIO_Port, LEFT_Pin)
			|| BTN_PRESSED(RIGHT_GPIO_Port, RIGHT_Pin)
			|| BTN_PRESSED(DOWN_GPIO_Port, DOWN_Pin);
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d016      	beq.n	80023ec <any_button_now+0x40>
			|| BTN_PRESSED(LEFT_GPIO_Port, LEFT_Pin)
 80023be:	2108      	movs	r1, #8
 80023c0:	480d      	ldr	r0, [pc, #52]	@ (80023f8 <any_button_now+0x4c>)
 80023c2:	f001 f869 	bl	8003498 <HAL_GPIO_ReadPin>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d00f      	beq.n	80023ec <any_button_now+0x40>
			|| BTN_PRESSED(RIGHT_GPIO_Port, RIGHT_Pin)
 80023cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023d0:	480a      	ldr	r0, [pc, #40]	@ (80023fc <any_button_now+0x50>)
 80023d2:	f001 f861 	bl	8003498 <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d007      	beq.n	80023ec <any_button_now+0x40>
			|| BTN_PRESSED(DOWN_GPIO_Port, DOWN_Pin);
 80023dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80023e0:	4806      	ldr	r0, [pc, #24]	@ (80023fc <any_button_now+0x50>)
 80023e2:	f001 f859 	bl	8003498 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d101      	bne.n	80023f0 <any_button_now+0x44>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <any_button_now+0x46>
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40010c00 	.word	0x40010c00

08002400 <wait_for_any_button_press>:
static void wait_for_any_button_press(void) {
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
	while (!any_button_now())
 8002404:	e002      	b.n	800240c <wait_for_any_button_press+0xc>
		HAL_Delay(1);
 8002406:	2001      	movs	r0, #1
 8002408:	f000 fd90 	bl	8002f2c <HAL_Delay>
	while (!any_button_now())
 800240c:	f7ff ffce 	bl	80023ac <any_button_now>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f7      	beq.n	8002406 <wait_for_any_button_press+0x6>
	HAL_Delay(50);
 8002416:	2032      	movs	r0, #50	@ 0x32
 8002418:	f000 fd88 	bl	8002f2c <HAL_Delay>
	while (any_button_now())
 800241c:	e002      	b.n	8002424 <wait_for_any_button_press+0x24>
		HAL_Delay(1);
 800241e:	2001      	movs	r0, #1
 8002420:	f000 fd84 	bl	8002f2c <HAL_Delay>
	while (any_button_now())
 8002424:	f7ff ffc2 	bl	80023ac <any_button_now>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f7      	bne.n	800241e <wait_for_any_button_press+0x1e>
}
 800242e:	bf00      	nop
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}

08002434 <set_pwm_freq>:

/* ----------------------------- Buzzer (PWM) ------------------------------ */
/* duty 50% square: ARR = TIMER_TICK_HZ/freq - 1 , CCR = (ARR+1)/2 */
static void set_pwm_freq(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t hz) {
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
	if (hz == 0) {
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11c      	bne.n	8002480 <set_pwm_freq+0x4c>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <set_pwm_freq+0x22>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2200      	movs	r2, #0
 8002452:	635a      	str	r2, [r3, #52]	@ 0x34
		return;
 8002454:	e050      	b.n	80024f8 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b04      	cmp	r3, #4
 800245a:	d104      	bne.n	8002466 <set_pwm_freq+0x32>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2300      	movs	r3, #0
 8002462:	6393      	str	r3, [r2, #56]	@ 0x38
		return;
 8002464:	e048      	b.n	80024f8 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b08      	cmp	r3, #8
 800246a:	d104      	bne.n	8002476 <set_pwm_freq+0x42>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	63d3      	str	r3, [r2, #60]	@ 0x3c
		return;
 8002474:	e040      	b.n	80024f8 <set_pwm_freq+0xc4>
		__HAL_TIM_SET_COMPARE(htim, channel, 0); /* mute */
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
		return;
 800247e:	e03b      	b.n	80024f8 <set_pwm_freq+0xc4>
	}
	uint32_t arr = (TIMER_TICK_HZ / hz);
 8002480:	4a1f      	ldr	r2, [pc, #124]	@ (8002500 <set_pwm_freq+0xcc>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
	if (arr < 2)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d801      	bhi.n	8002494 <set_pwm_freq+0x60>
		arr = 2;
 8002490:	2302      	movs	r3, #2
 8002492:	617b      	str	r3, [r7, #20]
	arr -= 1;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3b01      	subs	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_AUTORELOAD(htim, arr);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(htim, channel, (arr + 1) / 2);
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <set_pwm_freq+0x88>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0852      	lsrs	r2, r2, #1
 80024b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024ba:	e019      	b.n	80024f0 <set_pwm_freq+0xbc>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d106      	bne.n	80024d0 <set_pwm_freq+0x9c>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	085b      	lsrs	r3, r3, #1
 80024cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80024ce:	e00f      	b.n	80024f0 <set_pwm_freq+0xbc>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d106      	bne.n	80024e4 <set_pwm_freq+0xb0>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80024e2:	e005      	b.n	80024f0 <set_pwm_freq+0xbc>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	3301      	adds	r3, #1
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	6812      	ldr	r2, [r2, #0]
 80024ec:	085b      	lsrs	r3, r3, #1
 80024ee:	6413      	str	r3, [r2, #64]	@ 0x40
	__HAL_TIM_SET_COUNTER(htim, 0);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2200      	movs	r2, #0
 80024f6:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80024f8:	371c      	adds	r7, #28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	000f4240 	.word	0x000f4240

08002504 <BUZZ_Start>:

void BUZZ_Start(void) {
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); /* PA11 */
 8002508:	210c      	movs	r1, #12
 800250a:	4804      	ldr	r0, [pc, #16]	@ (800251c <BUZZ_Start+0x18>)
 800250c:	f001 fe12 	bl	8004134 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); /* PB1  */
 8002510:	210c      	movs	r1, #12
 8002512:	4803      	ldr	r0, [pc, #12]	@ (8002520 <BUZZ_Start+0x1c>)
 8002514:	f001 fe0e 	bl	8004134 <HAL_TIM_PWM_Start>
}
 8002518:	bf00      	nop
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200000cc 	.word	0x200000cc
 8002520:	20000114 	.word	0x20000114

08002524 <BUZZ_Stop>:
void BUZZ_Stop(void) {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 0);
 8002528:	4b08      	ldr	r3, [pc, #32]	@ (800254c <BUZZ_Stop+0x28>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2200      	movs	r2, #0
 800252e:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8002530:	4b07      	ldr	r3, [pc, #28]	@ (8002550 <BUZZ_Stop+0x2c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2200      	movs	r2, #0
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8002538:	210c      	movs	r1, #12
 800253a:	4804      	ldr	r0, [pc, #16]	@ (800254c <BUZZ_Stop+0x28>)
 800253c:	f001 fe9c 	bl	8004278 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8002540:	210c      	movs	r1, #12
 8002542:	4803      	ldr	r0, [pc, #12]	@ (8002550 <BUZZ_Stop+0x2c>)
 8002544:	f001 fe98 	bl	8004278 <HAL_TIM_PWM_Stop>
}
 8002548:	bf00      	nop
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200000cc 	.word	0x200000cc
 8002550:	20000114 	.word	0x20000114

08002554 <BUZZ_SetFreq_TIM1>:
void BUZZ_SetFreq_TIM1(uint32_t hz) {
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim1, TIM_CHANNEL_4, hz);
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	210c      	movs	r1, #12
 8002560:	4803      	ldr	r0, [pc, #12]	@ (8002570 <BUZZ_SetFreq_TIM1+0x1c>)
 8002562:	f7ff ff67 	bl	8002434 <set_pwm_freq>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	200000cc 	.word	0x200000cc

08002574 <BUZZ_SetFreq_TIM3>:
void BUZZ_SetFreq_TIM3(uint32_t hz) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	set_pwm_freq(&htim3, TIM_CHANNEL_4, hz);
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	210c      	movs	r1, #12
 8002580:	4803      	ldr	r0, [pc, #12]	@ (8002590 <BUZZ_SetFreq_TIM3+0x1c>)
 8002582:	f7ff ff57 	bl	8002434 <set_pwm_freq>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000114 	.word	0x20000114

08002594 <PLAY_PacmanIntro_Blocking>:
		G4, B4, D4 };
static const uint16_t voice_dur[] = { EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS),
		EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), QN(TEMPO_MS),
		EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), EN(TEMPO_MS), QN(TEMPO_MS) };
static const size_t VOICE_LEN = (sizeof(voice1_freq) / sizeof(voice1_freq[0]));
void PLAY_PacmanIntro_Blocking(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
	BUZZ_Start();
 800259a:	f7ff ffb3 	bl	8002504 <BUZZ_Start>
	for (size_t i = 0; i < VOICE_LEN; ++i) {
 800259e:	2300      	movs	r3, #0
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	e021      	b.n	80025e8 <PLAY_PacmanIntro_Blocking+0x54>
		BUZZ_SetFreq_TIM1(voice1_freq[i]);
 80025a4:	4a15      	ldr	r2, [pc, #84]	@ (80025fc <PLAY_PacmanIntro_Blocking+0x68>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffd1 	bl	8002554 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(voice2_freq[i]);
 80025b2:	4a13      	ldr	r2, [pc, #76]	@ (8002600 <PLAY_PacmanIntro_Blocking+0x6c>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff ffda 	bl	8002574 <BUZZ_SetFreq_TIM3>
		HAL_Delay(voice_dur[i] - 10);
 80025c0:	4a10      	ldr	r2, [pc, #64]	@ (8002604 <PLAY_PacmanIntro_Blocking+0x70>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025c8:	3b0a      	subs	r3, #10
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 fcae 	bl	8002f2c <HAL_Delay>
		BUZZ_SetFreq_TIM1(0);
 80025d0:	2000      	movs	r0, #0
 80025d2:	f7ff ffbf 	bl	8002554 <BUZZ_SetFreq_TIM1>
		BUZZ_SetFreq_TIM3(0);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff ffcc 	bl	8002574 <BUZZ_SetFreq_TIM3>
		HAL_Delay(10);
 80025dc:	200a      	movs	r0, #10
 80025de:	f000 fca5 	bl	8002f2c <HAL_Delay>
	for (size_t i = 0; i < VOICE_LEN; ++i) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	3301      	adds	r3, #1
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	220d      	movs	r2, #13
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d3d9      	bcc.n	80025a4 <PLAY_PacmanIntro_Blocking+0x10>
	}
	BUZZ_Stop();
 80025f0:	f7ff ff98 	bl	8002524 <BUZZ_Stop>
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	08005c84 	.word	0x08005c84
 8002600:	08005ca0 	.word	0x08005ca0
 8002604:	08005cbc 	.word	0x08005cbc

08002608 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800260c:	f000 fc2c 	bl	8002e68 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002610:	f000 f816 	bl	8002640 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002614:	f000 f9c6 	bl	80029a4 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002618:	f000 f99a 	bl	8002950 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800261c:	f000 f880 	bl	8002720 <MX_TIM1_Init>
	MX_TIM3_Init();
 8002620:	f000 f91e 	bl	8002860 <MX_TIM3_Init>
	MX_I2C1_Init();
 8002624:	f000 f84e 	bl	80026c4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	ILI9341_Init();
 8002628:	f7fe fa67 	bl	8000afa <ILI9341_Init>
	StartScreen_Draw();
 800262c:	f7ff f90c 	bl	8001848 <StartScreen_Draw>
	PLAY_PacmanIntro_Blocking();
 8002630:	f7ff ffb0 	bl	8002594 <PLAY_PacmanIntro_Blocking>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		wait_for_any_button_press();
 8002634:	f7ff fee4 	bl	8002400 <wait_for_any_button_press>
		StartScreen_Draw();  // 버튼 누르면 다시 그리기
 8002638:	f7ff f906 	bl	8001848 <StartScreen_Draw>
		wait_for_any_button_press();
 800263c:	bf00      	nop
 800263e:	e7f9      	b.n	8002634 <main+0x2c>

08002640 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b090      	sub	sp, #64	@ 0x40
 8002644:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002646:	f107 0318 	add.w	r3, r7, #24
 800264a:	2228      	movs	r2, #40	@ 0x28
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f002 fc3e 	bl	8004ed0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002666:	2301      	movs	r3, #1
 8002668:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800266a:	2310      	movs	r3, #16
 800266c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800266e:	2302      	movs	r3, #2
 8002670:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002672:	2300      	movs	r3, #0
 8002674:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8002676:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800267c:	f107 0318 	add.w	r3, r7, #24
 8002680:	4618      	mov	r0, r3
 8002682:	f001 f89f 	bl	80037c4 <HAL_RCC_OscConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <SystemClock_Config+0x50>
		Error_Handler();
 800268c:	f000 fa3e 	bl	8002b0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002690:	230f      	movs	r3, #15
 8002692:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002694:	2302      	movs	r3, #2
 8002696:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800269c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	2102      	movs	r1, #2
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 fb0c 	bl	8003cc8 <HAL_RCC_ClockConfig>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <SystemClock_Config+0x7a>
		Error_Handler();
 80026b6:	f000 fa29 	bl	8002b0c <Error_Handler>
	}
}
 80026ba:	bf00      	nop
 80026bc:	3740      	adds	r7, #64	@ 0x40
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80026c8:	4b12      	ldr	r3, [pc, #72]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026ca:	4a13      	ldr	r2, [pc, #76]	@ (8002718 <MX_I2C1_Init+0x54>)
 80026cc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80026ce:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026d0:	4a12      	ldr	r2, [pc, #72]	@ (800271c <MX_I2C1_Init+0x58>)
 80026d2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80026da:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026dc:	2200      	movs	r2, #0
 80026de:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80026e6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <MX_I2C1_Init+0x50>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002700:	4804      	ldr	r0, [pc, #16]	@ (8002714 <MX_I2C1_Init+0x50>)
 8002702:	f000 ff1b 	bl	800353c <HAL_I2C_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_I2C1_Init+0x4c>
		Error_Handler();
 800270c:	f000 f9fe 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000078 	.word	0x20000078
 8002718:	40005400 	.word	0x40005400
 800271c:	000186a0 	.word	0x000186a0

08002720 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8002720:	b580      	push	{r7, lr}
 8002722:	b096      	sub	sp, #88	@ 0x58
 8002724:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002726:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002734:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800273e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	609a      	str	r2, [r3, #8]
 800274a:	60da      	str	r2, [r3, #12]
 800274c:	611a      	str	r2, [r3, #16]
 800274e:	615a      	str	r2, [r3, #20]
 8002750:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002752:	1d3b      	adds	r3, r7, #4
 8002754:	2220      	movs	r2, #32
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f002 fbb9 	bl	8004ed0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800275e:	4b3e      	ldr	r3, [pc, #248]	@ (8002858 <MX_TIM1_Init+0x138>)
 8002760:	4a3e      	ldr	r2, [pc, #248]	@ (800285c <MX_TIM1_Init+0x13c>)
 8002762:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 64 - 1;
 8002764:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <MX_TIM1_Init+0x138>)
 8002766:	223f      	movs	r2, #63	@ 0x3f
 8002768:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <MX_TIM1_Init+0x138>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002770:	4b39      	ldr	r3, [pc, #228]	@ (8002858 <MX_TIM1_Init+0x138>)
 8002772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002776:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002778:	4b37      	ldr	r3, [pc, #220]	@ (8002858 <MX_TIM1_Init+0x138>)
 800277a:	2200      	movs	r2, #0
 800277c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800277e:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <MX_TIM1_Init+0x138>)
 8002780:	2200      	movs	r2, #0
 8002782:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <MX_TIM1_Init+0x138>)
 8002786:	2200      	movs	r2, #0
 8002788:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800278a:	4833      	ldr	r0, [pc, #204]	@ (8002858 <MX_TIM1_Init+0x138>)
 800278c:	f001 fc2a 	bl	8003fe4 <HAL_TIM_Base_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_TIM1_Init+0x7a>
		Error_Handler();
 8002796:	f000 f9b9 	bl	8002b0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800279a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800279e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80027a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80027a4:	4619      	mov	r1, r3
 80027a6:	482c      	ldr	r0, [pc, #176]	@ (8002858 <MX_TIM1_Init+0x138>)
 80027a8:	f001 fe8c 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM1_Init+0x96>
		Error_Handler();
 80027b2:	f000 f9ab 	bl	8002b0c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80027b6:	4828      	ldr	r0, [pc, #160]	@ (8002858 <MX_TIM1_Init+0x138>)
 80027b8:	f001 fc63 	bl	8004082 <HAL_TIM_PWM_Init>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <MX_TIM1_Init+0xa6>
		Error_Handler();
 80027c2:	f000 f9a3 	bl	8002b0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c6:	2300      	movs	r3, #0
 80027c8:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ca:	2300      	movs	r3, #0
 80027cc:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80027ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027d2:	4619      	mov	r1, r3
 80027d4:	4820      	ldr	r0, [pc, #128]	@ (8002858 <MX_TIM1_Init+0x138>)
 80027d6:	f002 f9ed 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80027e0:	f000 f994 	bl	8002b0c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e4:	2360      	movs	r3, #96	@ 0x60
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 500;
 80027e8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80027ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4)
 80027fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002802:	220c      	movs	r2, #12
 8002804:	4619      	mov	r1, r3
 8002806:	4814      	ldr	r0, [pc, #80]	@ (8002858 <MX_TIM1_Init+0x138>)
 8002808:	f001 fd9a 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <MX_TIM1_Init+0xf6>
			!= HAL_OK) {
		Error_Handler();
 8002812:	f000 f97b 	bl	8002b0c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800282a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002834:	1d3b      	adds	r3, r7, #4
 8002836:	4619      	mov	r1, r3
 8002838:	4807      	ldr	r0, [pc, #28]	@ (8002858 <MX_TIM1_Init+0x138>)
 800283a:	f002 fa19 	bl	8004c70 <HAL_TIMEx_ConfigBreakDeadTime>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_TIM1_Init+0x128>
			!= HAL_OK) {
		Error_Handler();
 8002844:	f000 f962 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8002848:	4803      	ldr	r0, [pc, #12]	@ (8002858 <MX_TIM1_Init+0x138>)
 800284a:	f000 fa19 	bl	8002c80 <HAL_TIM_MspPostInit>

}
 800284e:	bf00      	nop
 8002850:	3758      	adds	r7, #88	@ 0x58
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200000cc 	.word	0x200000cc
 800285c:	40012c00 	.word	0x40012c00

08002860 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	b08e      	sub	sp, #56	@ 0x38
 8002864:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002866:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	605a      	str	r2, [r3, #4]
 8002870:	609a      	str	r2, [r3, #8]
 8002872:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002874:	f107 0320 	add.w	r3, r7, #32
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
 800288c:	615a      	str	r2, [r3, #20]
 800288e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002890:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <MX_TIM3_Init+0xe8>)
 8002892:	4a2e      	ldr	r2, [pc, #184]	@ (800294c <MX_TIM3_Init+0xec>)
 8002894:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 64 - 1;
 8002896:	4b2c      	ldr	r3, [pc, #176]	@ (8002948 <MX_TIM3_Init+0xe8>)
 8002898:	223f      	movs	r2, #63	@ 0x3f
 800289a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800289c:	4b2a      	ldr	r3, [pc, #168]	@ (8002948 <MX_TIM3_Init+0xe8>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80028a2:	4b29      	ldr	r3, [pc, #164]	@ (8002948 <MX_TIM3_Init+0xe8>)
 80028a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028a8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028aa:	4b27      	ldr	r3, [pc, #156]	@ (8002948 <MX_TIM3_Init+0xe8>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028b0:	4b25      	ldr	r3, [pc, #148]	@ (8002948 <MX_TIM3_Init+0xe8>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80028b6:	4824      	ldr	r0, [pc, #144]	@ (8002948 <MX_TIM3_Init+0xe8>)
 80028b8:	f001 fb94 	bl	8003fe4 <HAL_TIM_Base_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM3_Init+0x66>
		Error_Handler();
 80028c2:	f000 f923 	bl	8002b0c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80028cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028d0:	4619      	mov	r1, r3
 80028d2:	481d      	ldr	r0, [pc, #116]	@ (8002948 <MX_TIM3_Init+0xe8>)
 80028d4:	f001 fdf6 	bl	80044c4 <HAL_TIM_ConfigClockSource>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM3_Init+0x82>
		Error_Handler();
 80028de:	f000 f915 	bl	8002b0c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80028e2:	4819      	ldr	r0, [pc, #100]	@ (8002948 <MX_TIM3_Init+0xe8>)
 80028e4:	f001 fbcd 	bl	8004082 <HAL_TIM_PWM_Init>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM3_Init+0x92>
		Error_Handler();
 80028ee:	f000 f90d 	bl	8002b0c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80028fa:	f107 0320 	add.w	r3, r7, #32
 80028fe:	4619      	mov	r1, r3
 8002900:	4811      	ldr	r0, [pc, #68]	@ (8002948 <MX_TIM3_Init+0xe8>)
 8002902:	f002 f957 	bl	8004bb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 800290c:	f000 f8fe 	bl	8002b0c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002910:	2360      	movs	r3, #96	@ 0x60
 8002912:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 500;
 8002914:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002918:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	220c      	movs	r2, #12
 8002926:	4619      	mov	r1, r3
 8002928:	4807      	ldr	r0, [pc, #28]	@ (8002948 <MX_TIM3_Init+0xe8>)
 800292a:	f001 fd09 	bl	8004340 <HAL_TIM_PWM_ConfigChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8002934:	f000 f8ea 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002938:	4803      	ldr	r0, [pc, #12]	@ (8002948 <MX_TIM3_Init+0xe8>)
 800293a:	f000 f9a1 	bl	8002c80 <HAL_TIM_MspPostInit>

}
 800293e:	bf00      	nop
 8002940:	3738      	adds	r7, #56	@ 0x38
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000114 	.word	0x20000114
 800294c:	40000400 	.word	0x40000400

08002950 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002954:	4b11      	ldr	r3, [pc, #68]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <MX_USART2_UART_Init+0x50>)
 8002958:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800295a:	4b10      	ldr	r3, [pc, #64]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800295c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002960:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002964:	2200      	movs	r2, #0
 8002966:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800296a:	2200      	movs	r2, #0
 800296c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800296e:	4b0b      	ldr	r3, [pc, #44]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002970:	2200      	movs	r2, #0
 8002972:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002974:	4b09      	ldr	r3, [pc, #36]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002976:	220c      	movs	r2, #12
 8002978:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002980:	4b06      	ldr	r3, [pc, #24]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002986:	4805      	ldr	r0, [pc, #20]	@ (800299c <MX_USART2_UART_Init+0x4c>)
 8002988:	f002 f9c3 	bl	8004d12 <HAL_UART_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002992:	f000 f8bb 	bl	8002b0c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002996:	bf00      	nop
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	2000015c 	.word	0x2000015c
 80029a0:	40004400 	.word	0x40004400

080029a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80029aa:	f107 0310 	add.w	r3, r7, #16
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80029b8:	4b4f      	ldr	r3, [pc, #316]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	4a4e      	ldr	r2, [pc, #312]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6193      	str	r3, [r2, #24]
 80029c4:	4b4c      	ldr	r3, [pc, #304]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80029d0:	4b49      	ldr	r3, [pc, #292]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a48      	ldr	r2, [pc, #288]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b46      	ldr	r3, [pc, #280]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b43      	ldr	r3, [pc, #268]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a42      	ldr	r2, [pc, #264]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b40      	ldr	r3, [pc, #256]	@ (8002af8 <MX_GPIO_Init+0x154>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002a00:	4b3d      	ldr	r3, [pc, #244]	@ (8002af8 <MX_GPIO_Init+0x154>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a3c      	ldr	r2, [pc, #240]	@ (8002af8 <MX_GPIO_Init+0x154>)
 8002a06:	f043 0308 	orr.w	r3, r3, #8
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002af8 <MX_GPIO_Init+0x154>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0308 	and.w	r3, r3, #8
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin | LCD_D1_Pin, GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2182      	movs	r1, #130	@ 0x82
 8002a1c:	4837      	ldr	r0, [pc, #220]	@ (8002afc <MX_GPIO_Init+0x158>)
 8002a1e:	f000 fd52 	bl	80034c6 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8002a22:	2200      	movs	r2, #0
 8002a24:	f240 7133 	movw	r1, #1843	@ 0x733
 8002a28:	4835      	ldr	r0, [pc, #212]	@ (8002b00 <MX_GPIO_Init+0x15c>)
 8002a2a:	f000 fd4c 	bl	80034c6 <HAL_GPIO_WritePin>
			LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin | LCD_D7_Pin
					| LCD_D0_Pin | LCD_D2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f240 4139 	movw	r1, #1081	@ 0x439
 8002a34:	4833      	ldr	r0, [pc, #204]	@ (8002b04 <MX_GPIO_Init+0x160>)
 8002a36:	f000 fd46 	bl	80034c6 <HAL_GPIO_WritePin>
	LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin | LCD_D4_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a40:	4b31      	ldr	r3, [pc, #196]	@ (8002b08 <MX_GPIO_Init+0x164>)
 8002a42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 0310 	add.w	r3, r7, #16
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	482b      	ldr	r0, [pc, #172]	@ (8002afc <MX_GPIO_Init+0x158>)
 8002a50:	f000 fb9e 	bl	8003190 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_D1_Pin;
 8002a54:	2382      	movs	r3, #130	@ 0x82
 8002a56:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4824      	ldr	r0, [pc, #144]	@ (8002afc <MX_GPIO_Init+0x158>)
 8002a6c:	f000 fb90 	bl	8003190 <HAL_GPIO_Init>

	/*Configure GPIO pins : UP_Pin LEFT_Pin */
	GPIO_InitStruct.Pin = UP_Pin | LEFT_Pin;
 8002a70:	230c      	movs	r3, #12
 8002a72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a74:	2300      	movs	r3, #0
 8002a76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	f107 0310 	add.w	r3, r7, #16
 8002a80:	4619      	mov	r1, r3
 8002a82:	481e      	ldr	r0, [pc, #120]	@ (8002afc <MX_GPIO_Init+0x158>)
 8002a84:	f000 fb84 	bl	8003190 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LD2_Pin
	 LCD_D7_Pin LCD_D0_Pin LCD_D2_Pin */
	GPIO_InitStruct.Pin = LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin
 8002a88:	f240 7333 	movw	r3, #1843	@ 0x733
 8002a8c:	613b      	str	r3, [r7, #16]
			| LCD_D7_Pin | LCD_D0_Pin | LCD_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2302      	movs	r3, #2
 8002a98:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9a:	f107 0310 	add.w	r3, r7, #16
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4817      	ldr	r0, [pc, #92]	@ (8002b00 <MX_GPIO_Init+0x15c>)
 8002aa2:	f000 fb75 	bl	8003190 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D5_Pin
	 LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D5_Pin
 8002aa6:	f240 4339 	movw	r3, #1081	@ 0x439
 8002aaa:	613b      	str	r3, [r7, #16]
			| LCD_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002aac:	2301      	movs	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab8:	f107 0310 	add.w	r3, r7, #16
 8002abc:	4619      	mov	r1, r3
 8002abe:	4811      	ldr	r0, [pc, #68]	@ (8002b04 <MX_GPIO_Init+0x160>)
 8002ac0:	f000 fb66 	bl	8003190 <HAL_GPIO_Init>

	/*Configure GPIO pins : DOWN_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = DOWN_Pin | RIGHT_Pin;
 8002ac4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002ac8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad2:	f107 0310 	add.w	r3, r7, #16
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	480a      	ldr	r0, [pc, #40]	@ (8002b04 <MX_GPIO_Init+0x160>)
 8002ada:	f000 fb59 	bl	8003190 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002ade:	2200      	movs	r2, #0
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2028      	movs	r0, #40	@ 0x28
 8002ae4:	f000 fb1d 	bl	8003122 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ae8:	2028      	movs	r0, #40	@ 0x28
 8002aea:	f000 fb36 	bl	800315a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002aee:	bf00      	nop
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40011000 	.word	0x40011000
 8002b00:	40010800 	.word	0x40010800
 8002b04:	40010c00 	.word	0x40010c00
 8002b08:	10110000 	.word	0x10110000

08002b0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b10:	b672      	cpsid	i
}
 8002b12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();
	while (1) {
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <Error_Handler+0x8>

08002b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4a14      	ldr	r2, [pc, #80]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6193      	str	r3, [r2, #24]
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	4b0f      	ldr	r3, [pc, #60]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b40:	61d3      	str	r3, [r2, #28]
 8002b42:	4b0c      	ldr	r3, [pc, #48]	@ (8002b74 <HAL_MspInit+0x5c>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b78 <HAL_MspInit+0x60>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	4a04      	ldr	r2, [pc, #16]	@ (8002b78 <HAL_MspInit+0x60>)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bc80      	pop	{r7}
 8002b72:	4770      	bx	lr
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40010000 	.word	0x40010000

08002b7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	@ 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	2200      	movs	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
 8002b90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	@ (8002c0c <HAL_I2C_MspInit+0x90>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d132      	bne.n	8002c02 <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <HAL_I2C_MspInit+0x94>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8002c10 <HAL_I2C_MspInit+0x94>)
 8002ba2:	f043 0308 	orr.w	r3, r3, #8
 8002ba6:	6193      	str	r3, [r2, #24]
 8002ba8:	4b19      	ldr	r3, [pc, #100]	@ (8002c10 <HAL_I2C_MspInit+0x94>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002bba:	2312      	movs	r3, #18
 8002bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bc2:	f107 0314 	add.w	r3, r7, #20
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4812      	ldr	r0, [pc, #72]	@ (8002c14 <HAL_I2C_MspInit+0x98>)
 8002bca:	f000 fae1 	bl	8003190 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002bce:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <HAL_I2C_MspInit+0x9c>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bde:	f043 0302 	orr.w	r3, r3, #2
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be4:	4a0c      	ldr	r2, [pc, #48]	@ (8002c18 <HAL_I2C_MspInit+0x9c>)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bea:	4b09      	ldr	r3, [pc, #36]	@ (8002c10 <HAL_I2C_MspInit+0x94>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4a08      	ldr	r2, [pc, #32]	@ (8002c10 <HAL_I2C_MspInit+0x94>)
 8002bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bf4:	61d3      	str	r3, [r2, #28]
 8002bf6:	4b06      	ldr	r3, [pc, #24]	@ (8002c10 <HAL_I2C_MspInit+0x94>)
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002c02:	bf00      	nop
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40005400 	.word	0x40005400
 8002c10:	40021000 	.word	0x40021000
 8002c14:	40010c00 	.word	0x40010c00
 8002c18:	40010000 	.word	0x40010000

08002c1c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a12      	ldr	r2, [pc, #72]	@ (8002c74 <HAL_TIM_Base_MspInit+0x58>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10c      	bne.n	8002c48 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c2e:	4b12      	ldr	r3, [pc, #72]	@ (8002c78 <HAL_TIM_Base_MspInit+0x5c>)
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	4a11      	ldr	r2, [pc, #68]	@ (8002c78 <HAL_TIM_Base_MspInit+0x5c>)
 8002c34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c38:	6193      	str	r3, [r2, #24]
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_TIM_Base_MspInit+0x5c>)
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c46:	e010      	b.n	8002c6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a0b      	ldr	r2, [pc, #44]	@ (8002c7c <HAL_TIM_Base_MspInit+0x60>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d10b      	bne.n	8002c6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c52:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <HAL_TIM_Base_MspInit+0x5c>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a08      	ldr	r2, [pc, #32]	@ (8002c78 <HAL_TIM_Base_MspInit+0x5c>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	61d3      	str	r3, [r2, #28]
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_TIM_Base_MspInit+0x5c>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
}
 8002c6a:	bf00      	nop
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40000400 	.word	0x40000400

08002c80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c88:	f107 0310 	add.w	r3, r7, #16
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
 8002c92:	609a      	str	r2, [r3, #8]
 8002c94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002d18 <HAL_TIM_MspPostInit+0x98>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d119      	bne.n	8002cd4 <HAL_TIM_MspPostInit+0x54>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <HAL_TIM_MspPostInit+0x9c>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d1c <HAL_TIM_MspPostInit+0x9c>)
 8002ca6:	f043 0304 	orr.w	r3, r3, #4
 8002caa:	6193      	str	r3, [r2, #24]
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <HAL_TIM_MspPostInit+0x9c>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002cb8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc6:	f107 0310 	add.w	r3, r7, #16
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4814      	ldr	r0, [pc, #80]	@ (8002d20 <HAL_TIM_MspPostInit+0xa0>)
 8002cce:	f000 fa5f 	bl	8003190 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cd2:	e01c      	b.n	8002d0e <HAL_TIM_MspPostInit+0x8e>
  else if(htim->Instance==TIM3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <HAL_TIM_MspPostInit+0xa4>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d117      	bne.n	8002d0e <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	4b0f      	ldr	r3, [pc, #60]	@ (8002d1c <HAL_TIM_MspPostInit+0x9c>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	4a0e      	ldr	r2, [pc, #56]	@ (8002d1c <HAL_TIM_MspPostInit+0x9c>)
 8002ce4:	f043 0308 	orr.w	r3, r3, #8
 8002ce8:	6193      	str	r3, [r2, #24]
 8002cea:	4b0c      	ldr	r3, [pc, #48]	@ (8002d1c <HAL_TIM_MspPostInit+0x9c>)
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	60bb      	str	r3, [r7, #8]
 8002cf4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfe:	2302      	movs	r3, #2
 8002d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d02:	f107 0310 	add.w	r3, r7, #16
 8002d06:	4619      	mov	r1, r3
 8002d08:	4807      	ldr	r0, [pc, #28]	@ (8002d28 <HAL_TIM_MspPostInit+0xa8>)
 8002d0a:	f000 fa41 	bl	8003190 <HAL_GPIO_Init>
}
 8002d0e:	bf00      	nop
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	40010800 	.word	0x40010800
 8002d24:	40000400 	.word	0x40000400
 8002d28:	40010c00 	.word	0x40010c00

08002d2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d34:	f107 0310 	add.w	r3, r7, #16
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	609a      	str	r2, [r3, #8]
 8002d40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a15      	ldr	r2, [pc, #84]	@ (8002d9c <HAL_UART_MspInit+0x70>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d123      	bne.n	8002d94 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4c:	4b14      	ldr	r3, [pc, #80]	@ (8002da0 <HAL_UART_MspInit+0x74>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <HAL_UART_MspInit+0x74>)
 8002d52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d56:	61d3      	str	r3, [r2, #28]
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <HAL_UART_MspInit+0x74>)
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d64:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <HAL_UART_MspInit+0x74>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	4a0d      	ldr	r2, [pc, #52]	@ (8002da0 <HAL_UART_MspInit+0x74>)
 8002d6a:	f043 0304 	orr.w	r3, r3, #4
 8002d6e:	6193      	str	r3, [r2, #24]
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_UART_MspInit+0x74>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d7c:	230c      	movs	r3, #12
 8002d7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d80:	2302      	movs	r3, #2
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4805      	ldr	r0, [pc, #20]	@ (8002da4 <HAL_UART_MspInit+0x78>)
 8002d90:	f000 f9fe 	bl	8003190 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002d94:	bf00      	nop
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40004400 	.word	0x40004400
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40010800 	.word	0x40010800

08002da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <NMI_Handler+0x4>

08002db0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <MemManage_Handler+0x4>

08002dc0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <BusFault_Handler+0x4>

08002dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <UsageFault_Handler+0x4>

08002dd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de0:	bf00      	nop
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df8:	f000 f87c 	bl	8002ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dfc:	bf00      	nop
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e04:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e08:	f000 fb76 	bl	80034f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <Reset_Handler>:
 8002e1c:	f7ff fff8 	bl	8002e10 <SystemInit>
 8002e20:	480b      	ldr	r0, [pc, #44]	@ (8002e50 <LoopFillZerobss+0xe>)
 8002e22:	490c      	ldr	r1, [pc, #48]	@ (8002e54 <LoopFillZerobss+0x12>)
 8002e24:	4a0c      	ldr	r2, [pc, #48]	@ (8002e58 <LoopFillZerobss+0x16>)
 8002e26:	2300      	movs	r3, #0
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:
 8002e2a:	58d4      	ldr	r4, [r2, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:
 8002e30:	18c4      	adds	r4, r0, r3
 8002e32:	428c      	cmp	r4, r1
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
 8002e36:	4a09      	ldr	r2, [pc, #36]	@ (8002e5c <LoopFillZerobss+0x1a>)
 8002e38:	4c09      	ldr	r4, [pc, #36]	@ (8002e60 <LoopFillZerobss+0x1e>)
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:
 8002e3e:	6013      	str	r3, [r2, #0]
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:
 8002e42:	42a2      	cmp	r2, r4
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>
 8002e46:	f002 f851 	bl	8004eec <__libc_init_array>
 8002e4a:	f7ff fbdd 	bl	8002608 <main>
 8002e4e:	4770      	bx	lr
 8002e50:	20000000 	.word	0x20000000
 8002e54:	2000005c 	.word	0x2000005c
 8002e58:	080060e4 	.word	0x080060e4
 8002e5c:	2000005c 	.word	0x2000005c
 8002e60:	200002e0 	.word	0x200002e0

08002e64 <ADC1_2_IRQHandler>:
 8002e64:	e7fe      	b.n	8002e64 <ADC1_2_IRQHandler>
	...

08002e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e6c:	4b08      	ldr	r3, [pc, #32]	@ (8002e90 <HAL_Init+0x28>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <HAL_Init+0x28>)
 8002e72:	f043 0310 	orr.w	r3, r3, #16
 8002e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e78:	2003      	movs	r0, #3
 8002e7a:	f000 f947 	bl	800310c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f000 f808 	bl	8002e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e84:	f7ff fe48 	bl	8002b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40022000 	.word	0x40022000

08002e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e9c:	4b12      	ldr	r3, [pc, #72]	@ (8002ee8 <HAL_InitTick+0x54>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	4b12      	ldr	r3, [pc, #72]	@ (8002eec <HAL_InitTick+0x58>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f95f 	bl	8003176 <HAL_SYSTICK_Config>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e00e      	b.n	8002ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b0f      	cmp	r3, #15
 8002ec6:	d80a      	bhi.n	8002ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	f000 f927 	bl	8003122 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ed4:	4a06      	ldr	r2, [pc, #24]	@ (8002ef0 <HAL_InitTick+0x5c>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	20000000 	.word	0x20000000
 8002eec:	20000008 	.word	0x20000008
 8002ef0:	20000004 	.word	0x20000004

08002ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_IncTick+0x1c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b05      	ldr	r3, [pc, #20]	@ (8002f14 <HAL_IncTick+0x20>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4413      	add	r3, r2
 8002f04:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <HAL_IncTick+0x20>)
 8002f06:	6013      	str	r3, [r2, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bc80      	pop	{r7}
 8002f0e:	4770      	bx	lr
 8002f10:	20000008 	.word	0x20000008
 8002f14:	200001a4 	.word	0x200001a4

08002f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f1c:	4b02      	ldr	r3, [pc, #8]	@ (8002f28 <HAL_GetTick+0x10>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bc80      	pop	{r7}
 8002f26:	4770      	bx	lr
 8002f28:	200001a4 	.word	0x200001a4

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff fff0 	bl	8002f18 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	@ (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffe0 	bl	8002f18 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000008 	.word	0x20000008

08002f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f90:	4013      	ands	r3, r2
 8002f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa6:	4a04      	ldr	r2, [pc, #16]	@ (8002fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	60d3      	str	r3, [r2, #12]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc0:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	0a1b      	lsrs	r3, r3, #8
 8002fc6:	f003 0307 	and.w	r3, r3, #7
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	db0b      	blt.n	8003002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	f003 021f 	and.w	r2, r3, #31
 8002ff0:	4906      	ldr	r1, [pc, #24]	@ (800300c <__NVIC_EnableIRQ+0x34>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	095b      	lsrs	r3, r3, #5
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	@ (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	@ (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bc80      	pop	{r7}
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030d8:	d301      	bcc.n	80030de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030da:	2301      	movs	r3, #1
 80030dc:	e00f      	b.n	80030fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030de:	4a0a      	ldr	r2, [pc, #40]	@ (8003108 <SysTick_Config+0x40>)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030e6:	210f      	movs	r1, #15
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ec:	f7ff ff90 	bl	8003010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030f0:	4b05      	ldr	r3, [pc, #20]	@ (8003108 <SysTick_Config+0x40>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030f6:	4b04      	ldr	r3, [pc, #16]	@ (8003108 <SysTick_Config+0x40>)
 80030f8:	2207      	movs	r2, #7
 80030fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	e000e010 	.word	0xe000e010

0800310c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ff2d 	bl	8002f74 <__NVIC_SetPriorityGrouping>
}
 800311a:	bf00      	nop
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
 800312e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003134:	f7ff ff42 	bl	8002fbc <__NVIC_GetPriorityGrouping>
 8003138:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	6978      	ldr	r0, [r7, #20]
 8003140:	f7ff ff90 	bl	8003064 <NVIC_EncodePriority>
 8003144:	4602      	mov	r2, r0
 8003146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800314a:	4611      	mov	r1, r2
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff ff5f 	bl	8003010 <__NVIC_SetPriority>
}
 8003152:	bf00      	nop
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	4603      	mov	r3, r0
 8003162:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff35 	bl	8002fd8 <__NVIC_EnableIRQ>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b082      	sub	sp, #8
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ffa2 	bl	80030c8 <SysTick_Config>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003190:	b480      	push	{r7}
 8003192:	b08b      	sub	sp, #44	@ 0x2c
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800319a:	2300      	movs	r3, #0
 800319c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031a2:	e169      	b.n	8003478 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031a4:	2201      	movs	r2, #1
 80031a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	4013      	ands	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	429a      	cmp	r2, r3
 80031be:	f040 8158 	bne.w	8003472 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	4a9a      	ldr	r2, [pc, #616]	@ (8003430 <HAL_GPIO_Init+0x2a0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d05e      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031cc:	4a98      	ldr	r2, [pc, #608]	@ (8003430 <HAL_GPIO_Init+0x2a0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d875      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031d2:	4a98      	ldr	r2, [pc, #608]	@ (8003434 <HAL_GPIO_Init+0x2a4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d058      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031d8:	4a96      	ldr	r2, [pc, #600]	@ (8003434 <HAL_GPIO_Init+0x2a4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d86f      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031de:	4a96      	ldr	r2, [pc, #600]	@ (8003438 <HAL_GPIO_Init+0x2a8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d052      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031e4:	4a94      	ldr	r2, [pc, #592]	@ (8003438 <HAL_GPIO_Init+0x2a8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d869      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031ea:	4a94      	ldr	r2, [pc, #592]	@ (800343c <HAL_GPIO_Init+0x2ac>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d04c      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031f0:	4a92      	ldr	r2, [pc, #584]	@ (800343c <HAL_GPIO_Init+0x2ac>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d863      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 80031f6:	4a92      	ldr	r2, [pc, #584]	@ (8003440 <HAL_GPIO_Init+0x2b0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d046      	beq.n	800328a <HAL_GPIO_Init+0xfa>
 80031fc:	4a90      	ldr	r2, [pc, #576]	@ (8003440 <HAL_GPIO_Init+0x2b0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d85d      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 8003202:	2b12      	cmp	r3, #18
 8003204:	d82a      	bhi.n	800325c <HAL_GPIO_Init+0xcc>
 8003206:	2b12      	cmp	r3, #18
 8003208:	d859      	bhi.n	80032be <HAL_GPIO_Init+0x12e>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <HAL_GPIO_Init+0x80>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	0800328b 	.word	0x0800328b
 8003214:	08003265 	.word	0x08003265
 8003218:	08003277 	.word	0x08003277
 800321c:	080032b9 	.word	0x080032b9
 8003220:	080032bf 	.word	0x080032bf
 8003224:	080032bf 	.word	0x080032bf
 8003228:	080032bf 	.word	0x080032bf
 800322c:	080032bf 	.word	0x080032bf
 8003230:	080032bf 	.word	0x080032bf
 8003234:	080032bf 	.word	0x080032bf
 8003238:	080032bf 	.word	0x080032bf
 800323c:	080032bf 	.word	0x080032bf
 8003240:	080032bf 	.word	0x080032bf
 8003244:	080032bf 	.word	0x080032bf
 8003248:	080032bf 	.word	0x080032bf
 800324c:	080032bf 	.word	0x080032bf
 8003250:	080032bf 	.word	0x080032bf
 8003254:	0800326d 	.word	0x0800326d
 8003258:	08003281 	.word	0x08003281
 800325c:	4a79      	ldr	r2, [pc, #484]	@ (8003444 <HAL_GPIO_Init+0x2b4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003262:	e02c      	b.n	80032be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	623b      	str	r3, [r7, #32]
          break;
 800326a:	e029      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	3304      	adds	r3, #4
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e024      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	3308      	adds	r3, #8
 800327c:	623b      	str	r3, [r7, #32]
          break;
 800327e:	e01f      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	330c      	adds	r3, #12
 8003286:	623b      	str	r3, [r7, #32]
          break;
 8003288:	e01a      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d102      	bne.n	8003298 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003292:	2304      	movs	r3, #4
 8003294:	623b      	str	r3, [r7, #32]
          break;
 8003296:	e013      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032a0:	2308      	movs	r3, #8
 80032a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	611a      	str	r2, [r3, #16]
          break;
 80032aa:	e009      	b.n	80032c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	615a      	str	r2, [r3, #20]
          break;
 80032b6:	e003      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
          break;
 80032bc:	e000      	b.n	80032c0 <HAL_GPIO_Init+0x130>
          break;
 80032be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	2bff      	cmp	r3, #255	@ 0xff
 80032c4:	d801      	bhi.n	80032ca <HAL_GPIO_Init+0x13a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e001      	b.n	80032ce <HAL_GPIO_Init+0x13e>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3304      	adds	r3, #4
 80032ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2bff      	cmp	r3, #255	@ 0xff
 80032d4:	d802      	bhi.n	80032dc <HAL_GPIO_Init+0x14c>
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_Init+0x152>
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	3b08      	subs	r3, #8
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	210f      	movs	r1, #15
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	fa01 f303 	lsl.w	r3, r1, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	401a      	ands	r2, r3
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	431a      	orrs	r2, r3
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80b1 	beq.w	8003472 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003310:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <HAL_GPIO_Init+0x2b8>)
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	4a4c      	ldr	r2, [pc, #304]	@ (8003448 <HAL_GPIO_Init+0x2b8>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6193      	str	r3, [r2, #24]
 800331c:	4b4a      	ldr	r3, [pc, #296]	@ (8003448 <HAL_GPIO_Init+0x2b8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003328:	4a48      	ldr	r2, [pc, #288]	@ (800344c <HAL_GPIO_Init+0x2bc>)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	089b      	lsrs	r3, r3, #2
 800332e:	3302      	adds	r3, #2
 8003330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003334:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	220f      	movs	r2, #15
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4013      	ands	r3, r2
 800334a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a40      	ldr	r2, [pc, #256]	@ (8003450 <HAL_GPIO_Init+0x2c0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d013      	beq.n	800337c <HAL_GPIO_Init+0x1ec>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a3f      	ldr	r2, [pc, #252]	@ (8003454 <HAL_GPIO_Init+0x2c4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00d      	beq.n	8003378 <HAL_GPIO_Init+0x1e8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a3e      	ldr	r2, [pc, #248]	@ (8003458 <HAL_GPIO_Init+0x2c8>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <HAL_GPIO_Init+0x1e4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a3d      	ldr	r2, [pc, #244]	@ (800345c <HAL_GPIO_Init+0x2cc>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d101      	bne.n	8003370 <HAL_GPIO_Init+0x1e0>
 800336c:	2303      	movs	r3, #3
 800336e:	e006      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 8003370:	2304      	movs	r3, #4
 8003372:	e004      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 8003374:	2302      	movs	r3, #2
 8003376:	e002      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <HAL_GPIO_Init+0x1ee>
 800337c:	2300      	movs	r3, #0
 800337e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003380:	f002 0203 	and.w	r2, r2, #3
 8003384:	0092      	lsls	r2, r2, #2
 8003386:	4093      	lsls	r3, r2
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4313      	orrs	r3, r2
 800338c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800338e:	492f      	ldr	r1, [pc, #188]	@ (800344c <HAL_GPIO_Init+0x2bc>)
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3302      	adds	r3, #2
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	492c      	ldr	r1, [pc, #176]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	608b      	str	r3, [r1, #8]
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	43db      	mvns	r3, r3
 80033be:	4928      	ldr	r1, [pc, #160]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d006      	beq.n	80033de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033d0:	4b23      	ldr	r3, [pc, #140]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4922      	ldr	r1, [pc, #136]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4313      	orrs	r3, r2
 80033da:	60cb      	str	r3, [r1, #12]
 80033dc:	e006      	b.n	80033ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033de:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	491e      	ldr	r1, [pc, #120]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d006      	beq.n	8003406 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033f8:	4b19      	ldr	r3, [pc, #100]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	4918      	ldr	r1, [pc, #96]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003406:	4b16      	ldr	r3, [pc, #88]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	43db      	mvns	r3, r3
 800340e:	4914      	ldr	r1, [pc, #80]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003410:	4013      	ands	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d021      	beq.n	8003464 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003420:	4b0f      	ldr	r3, [pc, #60]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	490e      	ldr	r1, [pc, #56]	@ (8003460 <HAL_GPIO_Init+0x2d0>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	4313      	orrs	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
 800342c:	e021      	b.n	8003472 <HAL_GPIO_Init+0x2e2>
 800342e:	bf00      	nop
 8003430:	10320000 	.word	0x10320000
 8003434:	10310000 	.word	0x10310000
 8003438:	10220000 	.word	0x10220000
 800343c:	10210000 	.word	0x10210000
 8003440:	10120000 	.word	0x10120000
 8003444:	10110000 	.word	0x10110000
 8003448:	40021000 	.word	0x40021000
 800344c:	40010000 	.word	0x40010000
 8003450:	40010800 	.word	0x40010800
 8003454:	40010c00 	.word	0x40010c00
 8003458:	40011000 	.word	0x40011000
 800345c:	40011400 	.word	0x40011400
 8003460:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_GPIO_Init+0x304>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	43db      	mvns	r3, r3
 800346c:	4909      	ldr	r1, [pc, #36]	@ (8003494 <HAL_GPIO_Init+0x304>)
 800346e:	4013      	ands	r3, r2
 8003470:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003474:	3301      	adds	r3, #1
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347e:	fa22 f303 	lsr.w	r3, r2, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	f47f ae8e 	bne.w	80031a4 <HAL_GPIO_Init+0x14>
  }
}
 8003488:	bf00      	nop
 800348a:	bf00      	nop
 800348c:	372c      	adds	r7, #44	@ 0x2c
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr
 8003494:	40010400 	.word	0x40010400

08003498 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689a      	ldr	r2, [r3, #8]
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034b0:	2301      	movs	r3, #1
 80034b2:	73fb      	strb	r3, [r7, #15]
 80034b4:	e001      	b.n	80034ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
 80034ce:	460b      	mov	r3, r1
 80034d0:	807b      	strh	r3, [r7, #2]
 80034d2:	4613      	mov	r3, r2
 80034d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d6:	787b      	ldrb	r3, [r7, #1]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034dc:	887a      	ldrh	r2, [r7, #2]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034e2:	e003      	b.n	80034ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	041a      	lsls	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	611a      	str	r2, [r3, #16]
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003502:	4b08      	ldr	r3, [pc, #32]	@ (8003524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800350e:	4a05      	ldr	r2, [pc, #20]	@ (8003524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f806 	bl	8003528 <HAL_GPIO_EXTI_Callback>
  }
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40010400 	.word	0x40010400

08003528 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d101      	bne.n	800354e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e12b      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d106      	bne.n	8003568 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fb0a 	bl	8002b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2224      	movs	r2, #36	@ 0x24
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0201 	bic.w	r2, r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800358e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800359e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035a0:	f000 fcda 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 80035a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a81      	ldr	r2, [pc, #516]	@ (80037b0 <HAL_I2C_Init+0x274>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d807      	bhi.n	80035c0 <HAL_I2C_Init+0x84>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4a80      	ldr	r2, [pc, #512]	@ (80037b4 <HAL_I2C_Init+0x278>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	bf94      	ite	ls
 80035b8:	2301      	movls	r3, #1
 80035ba:	2300      	movhi	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	e006      	b.n	80035ce <HAL_I2C_Init+0x92>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4a7d      	ldr	r2, [pc, #500]	@ (80037b8 <HAL_I2C_Init+0x27c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	bf94      	ite	ls
 80035c8:	2301      	movls	r3, #1
 80035ca:	2300      	movhi	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e0e7      	b.n	80037a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a78      	ldr	r2, [pc, #480]	@ (80037bc <HAL_I2C_Init+0x280>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	0c9b      	lsrs	r3, r3, #18
 80035e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	4a6a      	ldr	r2, [pc, #424]	@ (80037b0 <HAL_I2C_Init+0x274>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d802      	bhi.n	8003610 <HAL_I2C_Init+0xd4>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	e009      	b.n	8003624 <HAL_I2C_Init+0xe8>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	4a69      	ldr	r2, [pc, #420]	@ (80037c0 <HAL_I2C_Init+0x284>)
 800361c:	fba2 2303 	umull	r2, r3, r2, r3
 8003620:	099b      	lsrs	r3, r3, #6
 8003622:	3301      	adds	r3, #1
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003636:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	495c      	ldr	r1, [pc, #368]	@ (80037b0 <HAL_I2C_Init+0x274>)
 8003640:	428b      	cmp	r3, r1
 8003642:	d819      	bhi.n	8003678 <HAL_I2C_Init+0x13c>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	1e59      	subs	r1, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003652:	1c59      	adds	r1, r3, #1
 8003654:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003658:	400b      	ands	r3, r1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_I2C_Init+0x138>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1e59      	subs	r1, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	fbb1 f3f3 	udiv	r3, r1, r3
 800366c:	3301      	adds	r3, #1
 800366e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003672:	e051      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003674:	2304      	movs	r3, #4
 8003676:	e04f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_I2C_Init+0x168>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	440b      	add	r3, r1
 800368e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e012      	b.n	80036ca <HAL_I2C_Init+0x18e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	1e58      	subs	r0, r3, #1
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	0099      	lsls	r1, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Init+0x196>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e022      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10e      	bne.n	80036f8 <HAL_I2C_Init+0x1bc>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	1e58      	subs	r0, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	460b      	mov	r3, r1
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	440b      	add	r3, r1
 80036e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ec:	3301      	adds	r3, #1
 80036ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036f6:	e00f      	b.n	8003718 <HAL_I2C_Init+0x1dc>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	0099      	lsls	r1, r3, #2
 8003708:	440b      	add	r3, r1
 800370a:	fbb0 f3f3 	udiv	r3, r0, r3
 800370e:	3301      	adds	r3, #1
 8003710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	4313      	orrs	r3, r2
 800371e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	69da      	ldr	r2, [r3, #28]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003746:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6911      	ldr	r1, [r2, #16]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68d2      	ldr	r2, [r2, #12]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6812      	ldr	r2, [r2, #0]
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	000186a0 	.word	0x000186a0
 80037b4:	001e847f 	.word	0x001e847f
 80037b8:	003d08ff 	.word	0x003d08ff
 80037bc:	431bde83 	.word	0x431bde83
 80037c0:	10624dd3 	.word	0x10624dd3

080037c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e272      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 8087 	beq.w	80038f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037e4:	4b92      	ldr	r3, [pc, #584]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f003 030c 	and.w	r3, r3, #12
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d00c      	beq.n	800380a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037f0:	4b8f      	ldr	r3, [pc, #572]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d112      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
 80037fc:	4b8c      	ldr	r3, [pc, #560]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003808:	d10b      	bne.n	8003822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380a:	4b89      	ldr	r3, [pc, #548]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d06c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x12c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d168      	bne.n	80038f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e24c      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x76>
 800382c:	4b80      	ldr	r3, [pc, #512]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a7f      	ldr	r2, [pc, #508]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e02e      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x98>
 8003842:	4b7b      	ldr	r3, [pc, #492]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a7a      	ldr	r2, [pc, #488]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b78      	ldr	r3, [pc, #480]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a77      	ldr	r2, [pc, #476]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003854:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e01d      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003864:	d10c      	bne.n	8003880 <HAL_RCC_OscConfig+0xbc>
 8003866:	4b72      	ldr	r3, [pc, #456]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a71      	ldr	r2, [pc, #452]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800386c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	4b6f      	ldr	r3, [pc, #444]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6e      	ldr	r2, [pc, #440]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0xd4>
 8003880:	4b6b      	ldr	r3, [pc, #428]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a6a      	ldr	r2, [pc, #424]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800388a:	6013      	str	r3, [r2, #0]
 800388c:	4b68      	ldr	r3, [pc, #416]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a67      	ldr	r2, [pc, #412]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003892:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a0:	f7ff fb3a 	bl	8002f18 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a8:	f7ff fb36 	bl	8002f18 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b64      	cmp	r3, #100	@ 0x64
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e200      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f0      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe4>
 80038c6:	e014      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff fb26 	bl	8002f18 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038d0:	f7ff fb22 	bl	8002f18 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e1ec      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038e2:	4b53      	ldr	r3, [pc, #332]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x10c>
 80038ee:	e000      	b.n	80038f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d063      	beq.n	80039c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038fe:	4b4c      	ldr	r3, [pc, #304]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00b      	beq.n	8003922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800390a:	4b49      	ldr	r3, [pc, #292]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b08      	cmp	r3, #8
 8003914:	d11c      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
 8003916:	4b46      	ldr	r3, [pc, #280]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d116      	bne.n	8003950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003922:	4b43      	ldr	r3, [pc, #268]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d005      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e1c0      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800393a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4939      	ldr	r1, [pc, #228]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800394a:	4313      	orrs	r3, r2
 800394c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394e:	e03a      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003958:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <HAL_RCC_OscConfig+0x270>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7ff fadb 	bl	8002f18 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003966:	f7ff fad7 	bl	8002f18 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e1a1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003978:	4b2d      	ldr	r3, [pc, #180]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003984:	4b2a      	ldr	r3, [pc, #168]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	4927      	ldr	r1, [pc, #156]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 8003994:	4313      	orrs	r3, r2
 8003996:	600b      	str	r3, [r1, #0]
 8003998:	e015      	b.n	80039c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800399a:	4b26      	ldr	r3, [pc, #152]	@ (8003a34 <HAL_RCC_OscConfig+0x270>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7ff faba 	bl	8002f18 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039a8:	f7ff fab6 	bl	8002f18 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e180      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ba:	4b1d      	ldr	r3, [pc, #116]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d03a      	beq.n	8003a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d019      	beq.n	8003a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039da:	4b17      	ldr	r3, [pc, #92]	@ (8003a38 <HAL_RCC_OscConfig+0x274>)
 80039dc:	2201      	movs	r2, #1
 80039de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e0:	f7ff fa9a 	bl	8002f18 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039e8:	f7ff fa96 	bl	8002f18 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e160      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003a30 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a06:	2001      	movs	r0, #1
 8003a08:	f000 face 	bl	8003fa8 <RCC_Delay>
 8003a0c:	e01c      	b.n	8003a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a38 <HAL_RCC_OscConfig+0x274>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a14:	f7ff fa80 	bl	8002f18 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a1a:	e00f      	b.n	8003a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a1c:	f7ff fa7c 	bl	8002f18 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d908      	bls.n	8003a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e146      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
 8003a34:	42420000 	.word	0x42420000
 8003a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	4b92      	ldr	r3, [pc, #584]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e9      	bne.n	8003a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 80a6 	beq.w	8003ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a66:	4b88      	ldr	r3, [pc, #544]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a87      	ldr	r2, [pc, #540]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]
 8003a72:	4b85      	ldr	r3, [pc, #532]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	60bb      	str	r3, [r7, #8]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a82:	4b82      	ldr	r3, [pc, #520]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d118      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a7e      	ldr	r2, [pc, #504]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a9a:	f7ff fa3d 	bl	8002f18 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aa2:	f7ff fa39 	bl	8002f18 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b64      	cmp	r3, #100	@ 0x64
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e103      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab4:	4b75      	ldr	r3, [pc, #468]	@ (8003c8c <HAL_RCC_OscConfig+0x4c8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d106      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x312>
 8003ac8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	4a6e      	ldr	r2, [pc, #440]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6213      	str	r3, [r2, #32]
 8003ad4:	e02d      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10c      	bne.n	8003af8 <HAL_RCC_OscConfig+0x334>
 8003ade:	4b6a      	ldr	r3, [pc, #424]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	4a69      	ldr	r2, [pc, #420]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	6213      	str	r3, [r2, #32]
 8003aea:	4b67      	ldr	r3, [pc, #412]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a66      	ldr	r2, [pc, #408]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f023 0304 	bic.w	r3, r3, #4
 8003af4:	6213      	str	r3, [r2, #32]
 8003af6:	e01c      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d10c      	bne.n	8003b1a <HAL_RCC_OscConfig+0x356>
 8003b00:	4b61      	ldr	r3, [pc, #388]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	4a60      	ldr	r2, [pc, #384]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	f043 0304 	orr.w	r3, r3, #4
 8003b0a:	6213      	str	r3, [r2, #32]
 8003b0c:	4b5e      	ldr	r3, [pc, #376]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4a5d      	ldr	r2, [pc, #372]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6213      	str	r3, [r2, #32]
 8003b18:	e00b      	b.n	8003b32 <HAL_RCC_OscConfig+0x36e>
 8003b1a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	4a5a      	ldr	r2, [pc, #360]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b20:	f023 0301 	bic.w	r3, r3, #1
 8003b24:	6213      	str	r3, [r2, #32]
 8003b26:	4b58      	ldr	r3, [pc, #352]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	4a57      	ldr	r2, [pc, #348]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b2c:	f023 0304 	bic.w	r3, r3, #4
 8003b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d015      	beq.n	8003b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3a:	f7ff f9ed 	bl	8002f18 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b40:	e00a      	b.n	8003b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b42:	f7ff f9e9 	bl	8002f18 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0b1      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b58:	4b4b      	ldr	r3, [pc, #300]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ee      	beq.n	8003b42 <HAL_RCC_OscConfig+0x37e>
 8003b64:	e014      	b.n	8003b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b66:	f7ff f9d7 	bl	8002f18 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	e00a      	b.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6e:	f7ff f9d3 	bl	8002f18 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e09b      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b84:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d105      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b96:	4b3c      	ldr	r3, [pc, #240]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4a3b      	ldr	r2, [pc, #236]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8087 	beq.w	8003cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bac:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d061      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d146      	bne.n	8003c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc0:	4b33      	ldr	r3, [pc, #204]	@ (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc6:	f7ff f9a7 	bl	8002f18 <HAL_GetTick>
 8003bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bce:	f7ff f9a3 	bl	8002f18 <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e06d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be0:	4b29      	ldr	r3, [pc, #164]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1f0      	bne.n	8003bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf4:	d108      	bne.n	8003c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	4921      	ldr	r1, [pc, #132]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	4b1f      	ldr	r3, [pc, #124]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a19      	ldr	r1, [r3, #32]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	491b      	ldr	r1, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c20:	4b1b      	ldr	r3, [pc, #108]	@ (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c26:	f7ff f977 	bl	8002f18 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2e:	f7ff f973 	bl	8002f18 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e03d      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x46a>
 8003c4c:	e035      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b10      	ldr	r3, [pc, #64]	@ (8003c90 <HAL_RCC_OscConfig+0x4cc>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c54:	f7ff f960 	bl	8002f18 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c5c:	f7ff f95c 	bl	8002f18 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e026      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RCC_OscConfig+0x4c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x498>
 8003c7a:	e01e      	b.n	8003cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e019      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40007000 	.word	0x40007000
 8003c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c94:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc4 <HAL_RCC_OscConfig+0x500>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d001      	beq.n	8003cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0d0      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b67      	ldr	r3, [pc, #412]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4965      	ldr	r1, [pc, #404]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0b8      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0302 	and.w	r3, r3, #2
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d020      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d24:	4b59      	ldr	r3, [pc, #356]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	4a58      	ldr	r2, [pc, #352]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0308 	and.w	r3, r3, #8
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d3c:	4b53      	ldr	r3, [pc, #332]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a52      	ldr	r2, [pc, #328]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b50      	ldr	r3, [pc, #320]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	494d      	ldr	r1, [pc, #308]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d040      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b47      	ldr	r3, [pc, #284]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d115      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e07f      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d107      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d86:	4b41      	ldr	r3, [pc, #260]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e073      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d96:	4b3d      	ldr	r3, [pc, #244]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e06b      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003da6:	4b39      	ldr	r3, [pc, #228]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f023 0203 	bic.w	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4936      	ldr	r1, [pc, #216]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db8:	f7ff f8ae 	bl	8002f18 <HAL_GetTick>
 8003dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7ff f8aa 	bl	8002f18 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e053      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 020c 	and.w	r2, r3, #12
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d1eb      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003de8:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d210      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b24      	ldr	r3, [pc, #144]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 0207 	bic.w	r2, r3, #7
 8003dfe:	4922      	ldr	r1, [pc, #136]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b20      	ldr	r3, [pc, #128]	@ (8003e88 <HAL_RCC_ClockConfig+0x1c0>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e032      	b.n	8003e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b19      	ldr	r3, [pc, #100]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4916      	ldr	r1, [pc, #88]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e42:	4b12      	ldr	r3, [pc, #72]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490e      	ldr	r1, [pc, #56]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e56:	f000 f821 	bl	8003e9c <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_ClockConfig+0x1c4>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490a      	ldr	r1, [pc, #40]	@ (8003e90 <HAL_RCC_ClockConfig+0x1c8>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e6e:	4a09      	ldr	r2, [pc, #36]	@ (8003e94 <HAL_RCC_ClockConfig+0x1cc>)
 8003e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_ClockConfig+0x1d0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f80c 	bl	8002e94 <HAL_InitTick>

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	08005cd8 	.word	0x08005cd8
 8003e94:	20000000 	.word	0x20000000
 8003e98:	20000004 	.word	0x20000004

08003e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x30>
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8003eca:	e027      	b.n	8003f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ece:	613b      	str	r3, [r7, #16]
      break;
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0c9b      	lsrs	r3, r3, #18
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003edc:	5cd3      	ldrb	r3, [r2, r3]
 8003ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d010      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	0c5b      	lsrs	r3, r3, #17
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	4a11      	ldr	r2, [pc, #68]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ef6:	5cd3      	ldrb	r3, [r2, r3]
 8003ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003efe:	fb03 f202 	mul.w	r2, r3, r2
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
 8003f0a:	e004      	b.n	8003f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003f10:	fb02 f303 	mul.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	613b      	str	r3, [r7, #16]
      break;
 8003f1a:	e002      	b.n	8003f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f1c:	4b05      	ldr	r3, [pc, #20]	@ (8003f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f1e:	613b      	str	r3, [r7, #16]
      break;
 8003f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f22:	693b      	ldr	r3, [r7, #16]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	007a1200 	.word	0x007a1200
 8003f38:	08005cf0 	.word	0x08005cf0
 8003f3c:	08005d00 	.word	0x08005d00
 8003f40:	003d0900 	.word	0x003d0900

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b02      	ldr	r3, [pc, #8]	@ (8003f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	20000000 	.word	0x20000000

08003f58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f5c:	f7ff fff2 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f60:	4602      	mov	r2, r0
 8003f62:	4b05      	ldr	r3, [pc, #20]	@ (8003f78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	0a1b      	lsrs	r3, r3, #8
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	4903      	ldr	r1, [pc, #12]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f6e:	5ccb      	ldrb	r3, [r1, r3]
 8003f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	08005ce8 	.word	0x08005ce8

08003f80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f84:	f7ff ffde 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b05      	ldr	r3, [pc, #20]	@ (8003fa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	0adb      	lsrs	r3, r3, #11
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4903      	ldr	r1, [pc, #12]	@ (8003fa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	08005ce8 	.word	0x08005ce8

08003fa8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fdc <RCC_Delay+0x34>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <RCC_Delay+0x38>)
 8003fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fba:	0a5b      	lsrs	r3, r3, #9
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	fb02 f303 	mul.w	r3, r2, r3
 8003fc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fc4:	bf00      	nop
  }
  while (Delay --);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	60fa      	str	r2, [r7, #12]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f9      	bne.n	8003fc4 <RCC_Delay+0x1c>
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	10624dd3 	.word	0x10624dd3

08003fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e041      	b.n	800407a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fe fe06 	bl	8002c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3304      	adds	r3, #4
 8004020:	4619      	mov	r1, r3
 8004022:	4610      	mov	r0, r2
 8004024:	f000 fb16 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b082      	sub	sp, #8
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e041      	b.n	8004118 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f839 	bl	8004120 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2202      	movs	r2, #2
 80040b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f000 fac7 	bl	8004654 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	bc80      	pop	{r7}
 8004130:	4770      	bx	lr
	...

08004134 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_TIM_PWM_Start+0x24>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b01      	cmp	r3, #1
 800414e:	bf14      	ite	ne
 8004150:	2301      	movne	r3, #1
 8004152:	2300      	moveq	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	e022      	b.n	800419e <HAL_TIM_PWM_Start+0x6a>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b04      	cmp	r3, #4
 800415c:	d109      	bne.n	8004172 <HAL_TIM_PWM_Start+0x3e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b01      	cmp	r3, #1
 8004168:	bf14      	ite	ne
 800416a:	2301      	movne	r3, #1
 800416c:	2300      	moveq	r3, #0
 800416e:	b2db      	uxtb	r3, r3
 8004170:	e015      	b.n	800419e <HAL_TIM_PWM_Start+0x6a>
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b08      	cmp	r3, #8
 8004176:	d109      	bne.n	800418c <HAL_TIM_PWM_Start+0x58>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b01      	cmp	r3, #1
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e008      	b.n	800419e <HAL_TIM_PWM_Start+0x6a>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e05e      	b.n	8004264 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <HAL_TIM_PWM_Start+0x82>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2202      	movs	r2, #2
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041b4:	e013      	b.n	80041de <HAL_TIM_PWM_Start+0xaa>
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d104      	bne.n	80041c6 <HAL_TIM_PWM_Start+0x92>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2202      	movs	r2, #2
 80041c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041c4:	e00b      	b.n	80041de <HAL_TIM_PWM_Start+0xaa>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d104      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xa2>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041d4:	e003      	b.n	80041de <HAL_TIM_PWM_Start+0xaa>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2201      	movs	r2, #1
 80041e4:	6839      	ldr	r1, [r7, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fcc0 	bl	8004b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a1e      	ldr	r2, [pc, #120]	@ (800426c <HAL_TIM_PWM_Start+0x138>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d107      	bne.n	8004206 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a18      	ldr	r2, [pc, #96]	@ (800426c <HAL_TIM_PWM_Start+0x138>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <HAL_TIM_PWM_Start+0xfa>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004218:	d009      	beq.n	800422e <HAL_TIM_PWM_Start+0xfa>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a14      	ldr	r2, [pc, #80]	@ (8004270 <HAL_TIM_PWM_Start+0x13c>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d004      	beq.n	800422e <HAL_TIM_PWM_Start+0xfa>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a12      	ldr	r2, [pc, #72]	@ (8004274 <HAL_TIM_PWM_Start+0x140>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d111      	bne.n	8004252 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d010      	beq.n	8004262 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0201 	orr.w	r2, r2, #1
 800424e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004250:	e007      	b.n	8004262 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f042 0201 	orr.w	r2, r2, #1
 8004260:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40000400 	.word	0x40000400
 8004274:	40000800 	.word	0x40000800

08004278 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2200      	movs	r2, #0
 8004288:	6839      	ldr	r1, [r7, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f000 fc6e 	bl	8004b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a29      	ldr	r2, [pc, #164]	@ (800433c <HAL_TIM_PWM_Stop+0xc4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d117      	bne.n	80042ca <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a1a      	ldr	r2, [r3, #32]
 80042a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042a4:	4013      	ands	r3, r2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d10f      	bne.n	80042ca <HAL_TIM_PWM_Stop+0x52>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_PWM_Stop+0x52>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <HAL_TIM_PWM_Stop+0x82>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a1a      	ldr	r2, [r3, #32]
 80042e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d107      	bne.n	80042fa <HAL_TIM_PWM_Stop+0x82>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d104      	bne.n	800430a <HAL_TIM_PWM_Stop+0x92>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004308:	e013      	b.n	8004332 <HAL_TIM_PWM_Stop+0xba>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	2b04      	cmp	r3, #4
 800430e:	d104      	bne.n	800431a <HAL_TIM_PWM_Stop+0xa2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004318:	e00b      	b.n	8004332 <HAL_TIM_PWM_Stop+0xba>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b08      	cmp	r3, #8
 800431e:	d104      	bne.n	800432a <HAL_TIM_PWM_Stop+0xb2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004328:	e003      	b.n	8004332 <HAL_TIM_PWM_Stop+0xba>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40012c00 	.word	0x40012c00

08004340 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004356:	2b01      	cmp	r3, #1
 8004358:	d101      	bne.n	800435e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800435a:	2302      	movs	r3, #2
 800435c:	e0ae      	b.n	80044bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	f200 809f 	bhi.w	80044ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800436e:	a201      	add	r2, pc, #4	@ (adr r2, 8004374 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080044ad 	.word	0x080044ad
 800437c:	080044ad 	.word	0x080044ad
 8004380:	080044ad 	.word	0x080044ad
 8004384:	080043e9 	.word	0x080043e9
 8004388:	080044ad 	.word	0x080044ad
 800438c:	080044ad 	.word	0x080044ad
 8004390:	080044ad 	.word	0x080044ad
 8004394:	0800442b 	.word	0x0800442b
 8004398:	080044ad 	.word	0x080044ad
 800439c:	080044ad 	.word	0x080044ad
 80043a0:	080044ad 	.word	0x080044ad
 80043a4:	0800446b 	.word	0x0800446b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f9be 	bl	8004730 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0208 	orr.w	r2, r2, #8
 80043c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0204 	bic.w	r2, r2, #4
 80043d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6999      	ldr	r1, [r3, #24]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691a      	ldr	r2, [r3, #16]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	619a      	str	r2, [r3, #24]
      break;
 80043e6:	e064      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 fa04 	bl	80047fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6999      	ldr	r1, [r3, #24]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	619a      	str	r2, [r3, #24]
      break;
 8004428:	e043      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fa4d 	bl	80048d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f042 0208 	orr.w	r2, r2, #8
 8004444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0204 	bic.w	r2, r2, #4
 8004454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69d9      	ldr	r1, [r3, #28]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691a      	ldr	r2, [r3, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
      break;
 8004468:	e023      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	4618      	mov	r0, r3
 8004472:	f000 fa97 	bl	80049a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69da      	ldr	r2, [r3, #28]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69d9      	ldr	r1, [r3, #28]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	021a      	lsls	r2, r3, #8
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	61da      	str	r2, [r3, #28]
      break;
 80044aa:	e002      	b.n	80044b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
      break;
 80044b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ce:	2300      	movs	r3, #0
 80044d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_TIM_ConfigClockSource+0x1c>
 80044dc:	2302      	movs	r3, #2
 80044de:	e0b4      	b.n	800464a <HAL_TIM_ConfigClockSource+0x186>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004506:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004518:	d03e      	beq.n	8004598 <HAL_TIM_ConfigClockSource+0xd4>
 800451a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800451e:	f200 8087 	bhi.w	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004526:	f000 8086 	beq.w	8004636 <HAL_TIM_ConfigClockSource+0x172>
 800452a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452e:	d87f      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004530:	2b70      	cmp	r3, #112	@ 0x70
 8004532:	d01a      	beq.n	800456a <HAL_TIM_ConfigClockSource+0xa6>
 8004534:	2b70      	cmp	r3, #112	@ 0x70
 8004536:	d87b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004538:	2b60      	cmp	r3, #96	@ 0x60
 800453a:	d050      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x11a>
 800453c:	2b60      	cmp	r3, #96	@ 0x60
 800453e:	d877      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004540:	2b50      	cmp	r3, #80	@ 0x50
 8004542:	d03c      	beq.n	80045be <HAL_TIM_ConfigClockSource+0xfa>
 8004544:	2b50      	cmp	r3, #80	@ 0x50
 8004546:	d873      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b40      	cmp	r3, #64	@ 0x40
 800454a:	d058      	beq.n	80045fe <HAL_TIM_ConfigClockSource+0x13a>
 800454c:	2b40      	cmp	r3, #64	@ 0x40
 800454e:	d86f      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b30      	cmp	r3, #48	@ 0x30
 8004552:	d064      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004554:	2b30      	cmp	r3, #48	@ 0x30
 8004556:	d86b      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b20      	cmp	r3, #32
 800455a:	d060      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	2b20      	cmp	r3, #32
 800455e:	d867      	bhi.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05c      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004564:	2b10      	cmp	r3, #16
 8004566:	d05a      	beq.n	800461e <HAL_TIM_ConfigClockSource+0x15a>
 8004568:	e062      	b.n	8004630 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800457a:	f000 fad8 	bl	8004b2e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800458c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	609a      	str	r2, [r3, #8]
      break;
 8004596:	e04f      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045a8:	f000 fac1 	bl	8004b2e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ba:	609a      	str	r2, [r3, #8]
      break;
 80045bc:	e03c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045ca:	461a      	mov	r2, r3
 80045cc:	f000 fa38 	bl	8004a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2150      	movs	r1, #80	@ 0x50
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 fa8f 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 80045dc:	e02c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045ea:	461a      	mov	r2, r3
 80045ec:	f000 fa56 	bl	8004a9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2160      	movs	r1, #96	@ 0x60
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fa7f 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 80045fc:	e01c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800460a:	461a      	mov	r2, r3
 800460c:	f000 fa18 	bl	8004a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2140      	movs	r1, #64	@ 0x40
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fa6f 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 800461c:	e00c      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4619      	mov	r1, r3
 8004628:	4610      	mov	r0, r2
 800462a:	f000 fa66 	bl	8004afa <TIM_ITRx_SetConfig>
      break;
 800462e:	e003      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e000      	b.n	8004638 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004636:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004648:	7bfb      	ldrb	r3, [r7, #15]
}
 800464a:	4618      	mov	r0, r3
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a2f      	ldr	r2, [pc, #188]	@ (8004724 <TIM_Base_SetConfig+0xd0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_Base_SetConfig+0x30>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004672:	d007      	beq.n	8004684 <TIM_Base_SetConfig+0x30>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <TIM_Base_SetConfig+0xd4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_Base_SetConfig+0x30>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a2b      	ldr	r2, [pc, #172]	@ (800472c <TIM_Base_SetConfig+0xd8>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d108      	bne.n	8004696 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800468a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4313      	orrs	r3, r2
 8004694:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a22      	ldr	r2, [pc, #136]	@ (8004724 <TIM_Base_SetConfig+0xd0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d00b      	beq.n	80046b6 <TIM_Base_SetConfig+0x62>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046a4:	d007      	beq.n	80046b6 <TIM_Base_SetConfig+0x62>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <TIM_Base_SetConfig+0xd4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_Base_SetConfig+0x62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <TIM_Base_SetConfig+0xd8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d108      	bne.n	80046c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a0d      	ldr	r2, [pc, #52]	@ (8004724 <TIM_Base_SetConfig+0xd0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d103      	bne.n	80046fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f023 0201 	bic.w	r2, r3, #1
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	611a      	str	r2, [r3, #16]
  }
}
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	40012c00 	.word	0x40012c00
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800

08004730 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f023 0201 	bic.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 0302 	bic.w	r3, r3, #2
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <TIM_OC1_SetConfig+0xc8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d10c      	bne.n	80047a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f023 0308 	bic.w	r3, r3, #8
 8004792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	4313      	orrs	r3, r2
 800479c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f023 0304 	bic.w	r3, r3, #4
 80047a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a13      	ldr	r2, [pc, #76]	@ (80047f8 <TIM_OC1_SetConfig+0xc8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d111      	bne.n	80047d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	621a      	str	r2, [r3, #32]
}
 80047ec:	bf00      	nop
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00

080047fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f023 0210 	bic.w	r2, r3, #16
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800482a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	021b      	lsls	r3, r3, #8
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0320 	bic.w	r3, r3, #32
 8004846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a1d      	ldr	r2, [pc, #116]	@ (80048cc <TIM_OC2_SetConfig+0xd0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10d      	bne.n	8004878 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a14      	ldr	r2, [pc, #80]	@ (80048cc <TIM_OC2_SetConfig+0xd0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d113      	bne.n	80048a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40012c00 	.word	0x40012c00

080048d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0303 	bic.w	r3, r3, #3
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004918:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	021b      	lsls	r3, r3, #8
 8004920:	697a      	ldr	r2, [r7, #20]
 8004922:	4313      	orrs	r3, r2
 8004924:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a1d      	ldr	r2, [pc, #116]	@ (80049a0 <TIM_OC3_SetConfig+0xd0>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10d      	bne.n	800494a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a14      	ldr	r2, [pc, #80]	@ (80049a0 <TIM_OC3_SetConfig+0xd0>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d113      	bne.n	800497a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	011b      	lsls	r3, r3, #4
 8004968:	693a      	ldr	r2, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	621a      	str	r2, [r3, #32]
}
 8004994:	bf00      	nop
 8004996:	371c      	adds	r7, #28
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40012c00 	.word	0x40012c00

080049a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	021b      	lsls	r3, r3, #8
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	031b      	lsls	r3, r3, #12
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a0f      	ldr	r2, [pc, #60]	@ (8004a3c <TIM_OC4_SetConfig+0x98>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d109      	bne.n	8004a18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	019b      	lsls	r3, r3, #6
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	697a      	ldr	r2, [r7, #20]
 8004a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	621a      	str	r2, [r3, #32]
}
 8004a32:	bf00      	nop
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr
 8004a3c:	40012c00 	.word	0x40012c00

08004a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 030a 	bic.w	r3, r3, #10
 8004a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bc80      	pop	{r7}
 8004a9a:	4770      	bx	lr

08004a9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0210 	bic.w	r2, r3, #16
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	031b      	lsls	r3, r3, #12
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004ad8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr

08004afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b085      	sub	sp, #20
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f043 0307 	orr.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	609a      	str	r2, [r3, #8]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr

08004b2e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	60f8      	str	r0, [r7, #12]
 8004b36:	60b9      	str	r1, [r7, #8]
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b48:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	609a      	str	r2, [r3, #8]
}
 8004b62:	bf00      	nop
 8004b64:	371c      	adds	r7, #28
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bc80      	pop	{r7}
 8004b6a:	4770      	bx	lr

08004b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2201      	movs	r2, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e046      	b.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d00e      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c18:	d009      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	@ (8004c68 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d004      	beq.n	8004c2e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a10      	ldr	r2, [pc, #64]	@ (8004c6c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d10c      	bne.n	8004c48 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bc80      	pop	{r7}
 8004c62:	4770      	bx	lr
 8004c64:	40012c00 	.word	0x40012c00
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800

08004c70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e03d      	b.n	8004d08 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bc80      	pop	{r7}
 8004d10:	4770      	bx	lr

08004d12 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e042      	b.n	8004daa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fd fff7 	bl	8002d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2224      	movs	r2, #36	@ 0x24
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68da      	ldr	r2, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d54:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f82c 	bl	8004db4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d6a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d7a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004d8a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	431a      	orrs	r2, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004dee:	f023 030c 	bic.w	r3, r3, #12
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6812      	ldr	r2, [r2, #0]
 8004df6:	68b9      	ldr	r1, [r7, #8]
 8004df8:	430b      	orrs	r3, r1
 8004dfa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec8 <UART_SetConfig+0x114>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d103      	bne.n	8004e24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e1c:	f7ff f8b0 	bl	8003f80 <HAL_RCC_GetPCLK2Freq>
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	e002      	b.n	8004e2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e24:	f7ff f898 	bl	8003f58 <HAL_RCC_GetPCLK1Freq>
 8004e28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009a      	lsls	r2, r3, #2
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	4a22      	ldr	r2, [pc, #136]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	095b      	lsrs	r3, r3, #5
 8004e48:	0119      	lsls	r1, r3, #4
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009a      	lsls	r2, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e60:	4b1a      	ldr	r3, [pc, #104]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e62:	fba3 0302 	umull	r0, r3, r3, r2
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	2064      	movs	r0, #100	@ 0x64
 8004e6a:	fb00 f303 	mul.w	r3, r0, r3
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	3332      	adds	r3, #50	@ 0x32
 8004e74:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	095b      	lsrs	r3, r3, #5
 8004e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004e80:	4419      	add	r1, r3
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009a      	lsls	r2, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e98:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <UART_SetConfig+0x118>)
 8004e9a:	fba3 0302 	umull	r0, r3, r3, r2
 8004e9e:	095b      	lsrs	r3, r3, #5
 8004ea0:	2064      	movs	r0, #100	@ 0x64
 8004ea2:	fb00 f303 	mul.w	r3, r0, r3
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	3332      	adds	r3, #50	@ 0x32
 8004eac:	4a07      	ldr	r2, [pc, #28]	@ (8004ecc <UART_SetConfig+0x118>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	095b      	lsrs	r3, r3, #5
 8004eb4:	f003 020f 	and.w	r2, r3, #15
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ec0:	bf00      	nop
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40013800 	.word	0x40013800
 8004ecc:	51eb851f 	.word	0x51eb851f

08004ed0 <memset>:
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	4402      	add	r2, r0
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d100      	bne.n	8004eda <memset+0xa>
 8004ed8:	4770      	bx	lr
 8004eda:	f803 1b01 	strb.w	r1, [r3], #1
 8004ede:	e7f9      	b.n	8004ed4 <memset+0x4>

08004ee0 <__errno>:
 8004ee0:	4b01      	ldr	r3, [pc, #4]	@ (8004ee8 <__errno+0x8>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	2000000c 	.word	0x2000000c

08004eec <__libc_init_array>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	2600      	movs	r6, #0
 8004ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8004f24 <__libc_init_array+0x38>)
 8004ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8004f28 <__libc_init_array+0x3c>)
 8004ef4:	1b64      	subs	r4, r4, r5
 8004ef6:	10a4      	asrs	r4, r4, #2
 8004ef8:	42a6      	cmp	r6, r4
 8004efa:	d109      	bne.n	8004f10 <__libc_init_array+0x24>
 8004efc:	f000 fea2 	bl	8005c44 <_init>
 8004f00:	2600      	movs	r6, #0
 8004f02:	4d0a      	ldr	r5, [pc, #40]	@ (8004f2c <__libc_init_array+0x40>)
 8004f04:	4c0a      	ldr	r4, [pc, #40]	@ (8004f30 <__libc_init_array+0x44>)
 8004f06:	1b64      	subs	r4, r4, r5
 8004f08:	10a4      	asrs	r4, r4, #2
 8004f0a:	42a6      	cmp	r6, r4
 8004f0c:	d105      	bne.n	8004f1a <__libc_init_array+0x2e>
 8004f0e:	bd70      	pop	{r4, r5, r6, pc}
 8004f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f14:	4798      	blx	r3
 8004f16:	3601      	adds	r6, #1
 8004f18:	e7ee      	b.n	8004ef8 <__libc_init_array+0xc>
 8004f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f1e:	4798      	blx	r3
 8004f20:	3601      	adds	r6, #1
 8004f22:	e7f2      	b.n	8004f0a <__libc_init_array+0x1e>
 8004f24:	080060dc 	.word	0x080060dc
 8004f28:	080060dc 	.word	0x080060dc
 8004f2c:	080060dc 	.word	0x080060dc
 8004f30:	080060e0 	.word	0x080060e0

08004f34 <sqrtf>:
 8004f34:	b538      	push	{r3, r4, r5, lr}
 8004f36:	4605      	mov	r5, r0
 8004f38:	f000 f888 	bl	800504c <__ieee754_sqrtf>
 8004f3c:	4629      	mov	r1, r5
 8004f3e:	4604      	mov	r4, r0
 8004f40:	4628      	mov	r0, r5
 8004f42:	f7fb fbd7 	bl	80006f4 <__aeabi_fcmpun>
 8004f46:	b968      	cbnz	r0, 8004f64 <sqrtf+0x30>
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	f7fb fbaa 	bl	80006a4 <__aeabi_fcmplt>
 8004f50:	b140      	cbz	r0, 8004f64 <sqrtf+0x30>
 8004f52:	f7ff ffc5 	bl	8004ee0 <__errno>
 8004f56:	2321      	movs	r3, #33	@ 0x21
 8004f58:	2100      	movs	r1, #0
 8004f5a:	6003      	str	r3, [r0, #0]
 8004f5c:	4608      	mov	r0, r1
 8004f5e:	f7fb fab7 	bl	80004d0 <__aeabi_fdiv>
 8004f62:	4604      	mov	r4, r0
 8004f64:	4620      	mov	r0, r4
 8004f66:	bd38      	pop	{r3, r4, r5, pc}

08004f68 <cosf>:
 8004f68:	b507      	push	{r0, r1, r2, lr}
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <cosf+0x6c>)
 8004f6c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004f70:	4293      	cmp	r3, r2
 8004f72:	4601      	mov	r1, r0
 8004f74:	d805      	bhi.n	8004f82 <cosf+0x1a>
 8004f76:	2100      	movs	r1, #0
 8004f78:	b003      	add	sp, #12
 8004f7a:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f7e:	f000 b8d5 	b.w	800512c <__kernel_cosf>
 8004f82:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004f86:	d304      	bcc.n	8004f92 <cosf+0x2a>
 8004f88:	f7fb f8e4 	bl	8000154 <__aeabi_fsub>
 8004f8c:	b003      	add	sp, #12
 8004f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f92:	4669      	mov	r1, sp
 8004f94:	f000 f9c0 	bl	8005318 <__ieee754_rem_pio2f>
 8004f98:	f000 0203 	and.w	r2, r0, #3
 8004f9c:	2a01      	cmp	r2, #1
 8004f9e:	d007      	beq.n	8004fb0 <cosf+0x48>
 8004fa0:	2a02      	cmp	r2, #2
 8004fa2:	d00c      	beq.n	8004fbe <cosf+0x56>
 8004fa4:	b982      	cbnz	r2, 8004fc8 <cosf+0x60>
 8004fa6:	9901      	ldr	r1, [sp, #4]
 8004fa8:	9800      	ldr	r0, [sp, #0]
 8004faa:	f000 f8bf 	bl	800512c <__kernel_cosf>
 8004fae:	e7ed      	b.n	8004f8c <cosf+0x24>
 8004fb0:	9901      	ldr	r1, [sp, #4]
 8004fb2:	9800      	ldr	r0, [sp, #0]
 8004fb4:	f000 f93a 	bl	800522c <__kernel_sinf>
 8004fb8:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004fbc:	e7e6      	b.n	8004f8c <cosf+0x24>
 8004fbe:	9901      	ldr	r1, [sp, #4]
 8004fc0:	9800      	ldr	r0, [sp, #0]
 8004fc2:	f000 f8b3 	bl	800512c <__kernel_cosf>
 8004fc6:	e7f7      	b.n	8004fb8 <cosf+0x50>
 8004fc8:	2201      	movs	r2, #1
 8004fca:	9901      	ldr	r1, [sp, #4]
 8004fcc:	9800      	ldr	r0, [sp, #0]
 8004fce:	f000 f92d 	bl	800522c <__kernel_sinf>
 8004fd2:	e7db      	b.n	8004f8c <cosf+0x24>
 8004fd4:	3f490fd8 	.word	0x3f490fd8

08004fd8 <sinf>:
 8004fd8:	b507      	push	{r0, r1, r2, lr}
 8004fda:	4a1b      	ldr	r2, [pc, #108]	@ (8005048 <sinf+0x70>)
 8004fdc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	4601      	mov	r1, r0
 8004fe4:	d806      	bhi.n	8004ff4 <sinf+0x1c>
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2100      	movs	r1, #0
 8004fea:	b003      	add	sp, #12
 8004fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff0:	f000 b91c 	b.w	800522c <__kernel_sinf>
 8004ff4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8004ff8:	d304      	bcc.n	8005004 <sinf+0x2c>
 8004ffa:	f7fb f8ab 	bl	8000154 <__aeabi_fsub>
 8004ffe:	b003      	add	sp, #12
 8005000:	f85d fb04 	ldr.w	pc, [sp], #4
 8005004:	4669      	mov	r1, sp
 8005006:	f000 f987 	bl	8005318 <__ieee754_rem_pio2f>
 800500a:	f000 0003 	and.w	r0, r0, #3
 800500e:	2801      	cmp	r0, #1
 8005010:	d008      	beq.n	8005024 <sinf+0x4c>
 8005012:	2802      	cmp	r0, #2
 8005014:	d00b      	beq.n	800502e <sinf+0x56>
 8005016:	b990      	cbnz	r0, 800503e <sinf+0x66>
 8005018:	2201      	movs	r2, #1
 800501a:	9901      	ldr	r1, [sp, #4]
 800501c:	9800      	ldr	r0, [sp, #0]
 800501e:	f000 f905 	bl	800522c <__kernel_sinf>
 8005022:	e7ec      	b.n	8004ffe <sinf+0x26>
 8005024:	9901      	ldr	r1, [sp, #4]
 8005026:	9800      	ldr	r0, [sp, #0]
 8005028:	f000 f880 	bl	800512c <__kernel_cosf>
 800502c:	e7e7      	b.n	8004ffe <sinf+0x26>
 800502e:	2201      	movs	r2, #1
 8005030:	9901      	ldr	r1, [sp, #4]
 8005032:	9800      	ldr	r0, [sp, #0]
 8005034:	f000 f8fa 	bl	800522c <__kernel_sinf>
 8005038:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800503c:	e7df      	b.n	8004ffe <sinf+0x26>
 800503e:	9901      	ldr	r1, [sp, #4]
 8005040:	9800      	ldr	r0, [sp, #0]
 8005042:	f000 f873 	bl	800512c <__kernel_cosf>
 8005046:	e7f7      	b.n	8005038 <sinf+0x60>
 8005048:	3f490fd8 	.word	0x3f490fd8

0800504c <__ieee754_sqrtf>:
 800504c:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8005050:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005058:	4603      	mov	r3, r0
 800505a:	4604      	mov	r4, r0
 800505c:	d30a      	bcc.n	8005074 <__ieee754_sqrtf+0x28>
 800505e:	4601      	mov	r1, r0
 8005060:	f7fb f982 	bl	8000368 <__aeabi_fmul>
 8005064:	4601      	mov	r1, r0
 8005066:	4620      	mov	r0, r4
 8005068:	f7fb f876 	bl	8000158 <__addsf3>
 800506c:	4604      	mov	r4, r0
 800506e:	4620      	mov	r0, r4
 8005070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005074:	2a00      	cmp	r2, #0
 8005076:	d0fa      	beq.n	800506e <__ieee754_sqrtf+0x22>
 8005078:	2800      	cmp	r0, #0
 800507a:	da06      	bge.n	800508a <__ieee754_sqrtf+0x3e>
 800507c:	4601      	mov	r1, r0
 800507e:	f7fb f869 	bl	8000154 <__aeabi_fsub>
 8005082:	4601      	mov	r1, r0
 8005084:	f7fb fa24 	bl	80004d0 <__aeabi_fdiv>
 8005088:	e7f0      	b.n	800506c <__ieee754_sqrtf+0x20>
 800508a:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800508e:	d03c      	beq.n	800510a <__ieee754_sqrtf+0xbe>
 8005090:	15c2      	asrs	r2, r0, #23
 8005092:	2400      	movs	r4, #0
 8005094:	2019      	movs	r0, #25
 8005096:	4626      	mov	r6, r4
 8005098:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800509c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80050a0:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 80050a4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050a8:	07d2      	lsls	r2, r2, #31
 80050aa:	bf58      	it	pl
 80050ac:	005b      	lslpl	r3, r3, #1
 80050ae:	106d      	asrs	r5, r5, #1
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	1872      	adds	r2, r6, r1
 80050b4:	429a      	cmp	r2, r3
 80050b6:	bfcf      	iteee	gt
 80050b8:	461a      	movgt	r2, r3
 80050ba:	1856      	addle	r6, r2, r1
 80050bc:	1864      	addle	r4, r4, r1
 80050be:	1a9a      	suble	r2, r3, r2
 80050c0:	3801      	subs	r0, #1
 80050c2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 80050c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80050ca:	d1f2      	bne.n	80050b2 <__ieee754_sqrtf+0x66>
 80050cc:	b1ba      	cbz	r2, 80050fe <__ieee754_sqrtf+0xb2>
 80050ce:	4e15      	ldr	r6, [pc, #84]	@ (8005124 <__ieee754_sqrtf+0xd8>)
 80050d0:	4f15      	ldr	r7, [pc, #84]	@ (8005128 <__ieee754_sqrtf+0xdc>)
 80050d2:	6830      	ldr	r0, [r6, #0]
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	f7fb f83d 	bl	8000154 <__aeabi_fsub>
 80050da:	f8d6 8000 	ldr.w	r8, [r6]
 80050de:	4601      	mov	r1, r0
 80050e0:	4640      	mov	r0, r8
 80050e2:	f7fb fae9 	bl	80006b8 <__aeabi_fcmple>
 80050e6:	b150      	cbz	r0, 80050fe <__ieee754_sqrtf+0xb2>
 80050e8:	6830      	ldr	r0, [r6, #0]
 80050ea:	6839      	ldr	r1, [r7, #0]
 80050ec:	f7fb f834 	bl	8000158 <__addsf3>
 80050f0:	6836      	ldr	r6, [r6, #0]
 80050f2:	4601      	mov	r1, r0
 80050f4:	4630      	mov	r0, r6
 80050f6:	f7fb fad5 	bl	80006a4 <__aeabi_fcmplt>
 80050fa:	b170      	cbz	r0, 800511a <__ieee754_sqrtf+0xce>
 80050fc:	3402      	adds	r4, #2
 80050fe:	1064      	asrs	r4, r4, #1
 8005100:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8005104:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8005108:	e7b1      	b.n	800506e <__ieee754_sqrtf+0x22>
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	0218      	lsls	r0, r3, #8
 800510e:	460a      	mov	r2, r1
 8005110:	f101 0101 	add.w	r1, r1, #1
 8005114:	d5f9      	bpl.n	800510a <__ieee754_sqrtf+0xbe>
 8005116:	4252      	negs	r2, r2
 8005118:	e7bb      	b.n	8005092 <__ieee754_sqrtf+0x46>
 800511a:	3401      	adds	r4, #1
 800511c:	f024 0401 	bic.w	r4, r4, #1
 8005120:	e7ed      	b.n	80050fe <__ieee754_sqrtf+0xb2>
 8005122:	bf00      	nop
 8005124:	08005d08 	.word	0x08005d08
 8005128:	08005d04 	.word	0x08005d04

0800512c <__kernel_cosf>:
 800512c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005130:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005134:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8005138:	4606      	mov	r6, r0
 800513a:	4688      	mov	r8, r1
 800513c:	d203      	bcs.n	8005146 <__kernel_cosf+0x1a>
 800513e:	f7fb faef 	bl	8000720 <__aeabi_f2iz>
 8005142:	2800      	cmp	r0, #0
 8005144:	d05c      	beq.n	8005200 <__kernel_cosf+0xd4>
 8005146:	4631      	mov	r1, r6
 8005148:	4630      	mov	r0, r6
 800514a:	f7fb f90d 	bl	8000368 <__aeabi_fmul>
 800514e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005152:	4604      	mov	r4, r0
 8005154:	f7fb f908 	bl	8000368 <__aeabi_fmul>
 8005158:	492b      	ldr	r1, [pc, #172]	@ (8005208 <__kernel_cosf+0xdc>)
 800515a:	4607      	mov	r7, r0
 800515c:	4620      	mov	r0, r4
 800515e:	f7fb f903 	bl	8000368 <__aeabi_fmul>
 8005162:	492a      	ldr	r1, [pc, #168]	@ (800520c <__kernel_cosf+0xe0>)
 8005164:	f7fa fff8 	bl	8000158 <__addsf3>
 8005168:	4621      	mov	r1, r4
 800516a:	f7fb f8fd 	bl	8000368 <__aeabi_fmul>
 800516e:	4928      	ldr	r1, [pc, #160]	@ (8005210 <__kernel_cosf+0xe4>)
 8005170:	f7fa fff0 	bl	8000154 <__aeabi_fsub>
 8005174:	4621      	mov	r1, r4
 8005176:	f7fb f8f7 	bl	8000368 <__aeabi_fmul>
 800517a:	4926      	ldr	r1, [pc, #152]	@ (8005214 <__kernel_cosf+0xe8>)
 800517c:	f7fa ffec 	bl	8000158 <__addsf3>
 8005180:	4621      	mov	r1, r4
 8005182:	f7fb f8f1 	bl	8000368 <__aeabi_fmul>
 8005186:	4924      	ldr	r1, [pc, #144]	@ (8005218 <__kernel_cosf+0xec>)
 8005188:	f7fa ffe4 	bl	8000154 <__aeabi_fsub>
 800518c:	4621      	mov	r1, r4
 800518e:	f7fb f8eb 	bl	8000368 <__aeabi_fmul>
 8005192:	4922      	ldr	r1, [pc, #136]	@ (800521c <__kernel_cosf+0xf0>)
 8005194:	f7fa ffe0 	bl	8000158 <__addsf3>
 8005198:	4621      	mov	r1, r4
 800519a:	f7fb f8e5 	bl	8000368 <__aeabi_fmul>
 800519e:	4621      	mov	r1, r4
 80051a0:	f7fb f8e2 	bl	8000368 <__aeabi_fmul>
 80051a4:	4641      	mov	r1, r8
 80051a6:	4604      	mov	r4, r0
 80051a8:	4630      	mov	r0, r6
 80051aa:	f7fb f8dd 	bl	8000368 <__aeabi_fmul>
 80051ae:	4601      	mov	r1, r0
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7fa ffcf 	bl	8000154 <__aeabi_fsub>
 80051b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005220 <__kernel_cosf+0xf4>)
 80051b8:	4604      	mov	r4, r0
 80051ba:	429d      	cmp	r5, r3
 80051bc:	d80a      	bhi.n	80051d4 <__kernel_cosf+0xa8>
 80051be:	4601      	mov	r1, r0
 80051c0:	4638      	mov	r0, r7
 80051c2:	f7fa ffc7 	bl	8000154 <__aeabi_fsub>
 80051c6:	4601      	mov	r1, r0
 80051c8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80051cc:	f7fa ffc2 	bl	8000154 <__aeabi_fsub>
 80051d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051d4:	4b13      	ldr	r3, [pc, #76]	@ (8005224 <__kernel_cosf+0xf8>)
 80051d6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80051da:	429d      	cmp	r5, r3
 80051dc:	bf8c      	ite	hi
 80051de:	4d12      	ldrhi	r5, [pc, #72]	@ (8005228 <__kernel_cosf+0xfc>)
 80051e0:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80051e4:	4629      	mov	r1, r5
 80051e6:	f7fa ffb5 	bl	8000154 <__aeabi_fsub>
 80051ea:	4629      	mov	r1, r5
 80051ec:	4606      	mov	r6, r0
 80051ee:	4638      	mov	r0, r7
 80051f0:	f7fa ffb0 	bl	8000154 <__aeabi_fsub>
 80051f4:	4621      	mov	r1, r4
 80051f6:	f7fa ffad 	bl	8000154 <__aeabi_fsub>
 80051fa:	4601      	mov	r1, r0
 80051fc:	4630      	mov	r0, r6
 80051fe:	e7e5      	b.n	80051cc <__kernel_cosf+0xa0>
 8005200:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005204:	e7e4      	b.n	80051d0 <__kernel_cosf+0xa4>
 8005206:	bf00      	nop
 8005208:	ad47d74e 	.word	0xad47d74e
 800520c:	310f74f6 	.word	0x310f74f6
 8005210:	3493f27c 	.word	0x3493f27c
 8005214:	37d00d01 	.word	0x37d00d01
 8005218:	3ab60b61 	.word	0x3ab60b61
 800521c:	3d2aaaab 	.word	0x3d2aaaab
 8005220:	3e999999 	.word	0x3e999999
 8005224:	3f480000 	.word	0x3f480000
 8005228:	3e900000 	.word	0x3e900000

0800522c <__kernel_sinf>:
 800522c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005230:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005234:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005238:	4604      	mov	r4, r0
 800523a:	460f      	mov	r7, r1
 800523c:	4691      	mov	r9, r2
 800523e:	d203      	bcs.n	8005248 <__kernel_sinf+0x1c>
 8005240:	f7fb fa6e 	bl	8000720 <__aeabi_f2iz>
 8005244:	2800      	cmp	r0, #0
 8005246:	d035      	beq.n	80052b4 <__kernel_sinf+0x88>
 8005248:	4621      	mov	r1, r4
 800524a:	4620      	mov	r0, r4
 800524c:	f7fb f88c 	bl	8000368 <__aeabi_fmul>
 8005250:	4605      	mov	r5, r0
 8005252:	4601      	mov	r1, r0
 8005254:	4620      	mov	r0, r4
 8005256:	f7fb f887 	bl	8000368 <__aeabi_fmul>
 800525a:	4929      	ldr	r1, [pc, #164]	@ (8005300 <__kernel_sinf+0xd4>)
 800525c:	4606      	mov	r6, r0
 800525e:	4628      	mov	r0, r5
 8005260:	f7fb f882 	bl	8000368 <__aeabi_fmul>
 8005264:	4927      	ldr	r1, [pc, #156]	@ (8005304 <__kernel_sinf+0xd8>)
 8005266:	f7fa ff75 	bl	8000154 <__aeabi_fsub>
 800526a:	4629      	mov	r1, r5
 800526c:	f7fb f87c 	bl	8000368 <__aeabi_fmul>
 8005270:	4925      	ldr	r1, [pc, #148]	@ (8005308 <__kernel_sinf+0xdc>)
 8005272:	f7fa ff71 	bl	8000158 <__addsf3>
 8005276:	4629      	mov	r1, r5
 8005278:	f7fb f876 	bl	8000368 <__aeabi_fmul>
 800527c:	4923      	ldr	r1, [pc, #140]	@ (800530c <__kernel_sinf+0xe0>)
 800527e:	f7fa ff69 	bl	8000154 <__aeabi_fsub>
 8005282:	4629      	mov	r1, r5
 8005284:	f7fb f870 	bl	8000368 <__aeabi_fmul>
 8005288:	4921      	ldr	r1, [pc, #132]	@ (8005310 <__kernel_sinf+0xe4>)
 800528a:	f7fa ff65 	bl	8000158 <__addsf3>
 800528e:	4680      	mov	r8, r0
 8005290:	f1b9 0f00 	cmp.w	r9, #0
 8005294:	d111      	bne.n	80052ba <__kernel_sinf+0x8e>
 8005296:	4601      	mov	r1, r0
 8005298:	4628      	mov	r0, r5
 800529a:	f7fb f865 	bl	8000368 <__aeabi_fmul>
 800529e:	491d      	ldr	r1, [pc, #116]	@ (8005314 <__kernel_sinf+0xe8>)
 80052a0:	f7fa ff58 	bl	8000154 <__aeabi_fsub>
 80052a4:	4631      	mov	r1, r6
 80052a6:	f7fb f85f 	bl	8000368 <__aeabi_fmul>
 80052aa:	4601      	mov	r1, r0
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7fa ff53 	bl	8000158 <__addsf3>
 80052b2:	4604      	mov	r4, r0
 80052b4:	4620      	mov	r0, r4
 80052b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052ba:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80052be:	4638      	mov	r0, r7
 80052c0:	f7fb f852 	bl	8000368 <__aeabi_fmul>
 80052c4:	4641      	mov	r1, r8
 80052c6:	4681      	mov	r9, r0
 80052c8:	4630      	mov	r0, r6
 80052ca:	f7fb f84d 	bl	8000368 <__aeabi_fmul>
 80052ce:	4601      	mov	r1, r0
 80052d0:	4648      	mov	r0, r9
 80052d2:	f7fa ff3f 	bl	8000154 <__aeabi_fsub>
 80052d6:	4629      	mov	r1, r5
 80052d8:	f7fb f846 	bl	8000368 <__aeabi_fmul>
 80052dc:	4639      	mov	r1, r7
 80052de:	f7fa ff39 	bl	8000154 <__aeabi_fsub>
 80052e2:	490c      	ldr	r1, [pc, #48]	@ (8005314 <__kernel_sinf+0xe8>)
 80052e4:	4605      	mov	r5, r0
 80052e6:	4630      	mov	r0, r6
 80052e8:	f7fb f83e 	bl	8000368 <__aeabi_fmul>
 80052ec:	4601      	mov	r1, r0
 80052ee:	4628      	mov	r0, r5
 80052f0:	f7fa ff32 	bl	8000158 <__addsf3>
 80052f4:	4601      	mov	r1, r0
 80052f6:	4620      	mov	r0, r4
 80052f8:	f7fa ff2c 	bl	8000154 <__aeabi_fsub>
 80052fc:	e7d9      	b.n	80052b2 <__kernel_sinf+0x86>
 80052fe:	bf00      	nop
 8005300:	2f2ec9d3 	.word	0x2f2ec9d3
 8005304:	32d72f34 	.word	0x32d72f34
 8005308:	3638ef1b 	.word	0x3638ef1b
 800530c:	39500d01 	.word	0x39500d01
 8005310:	3c088889 	.word	0x3c088889
 8005314:	3e2aaaab 	.word	0x3e2aaaab

08005318 <__ieee754_rem_pio2f>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	4aa4      	ldr	r2, [pc, #656]	@ (80055b0 <__ieee754_rem_pio2f+0x298>)
 800531e:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8005322:	4590      	cmp	r8, r2
 8005324:	460c      	mov	r4, r1
 8005326:	4682      	mov	sl, r0
 8005328:	b087      	sub	sp, #28
 800532a:	d804      	bhi.n	8005336 <__ieee754_rem_pio2f+0x1e>
 800532c:	2300      	movs	r3, #0
 800532e:	6008      	str	r0, [r1, #0]
 8005330:	604b      	str	r3, [r1, #4]
 8005332:	2500      	movs	r5, #0
 8005334:	e01d      	b.n	8005372 <__ieee754_rem_pio2f+0x5a>
 8005336:	4a9f      	ldr	r2, [pc, #636]	@ (80055b4 <__ieee754_rem_pio2f+0x29c>)
 8005338:	4590      	cmp	r8, r2
 800533a:	d84f      	bhi.n	80053dc <__ieee754_rem_pio2f+0xc4>
 800533c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8005340:	2800      	cmp	r0, #0
 8005342:	499d      	ldr	r1, [pc, #628]	@ (80055b8 <__ieee754_rem_pio2f+0x2a0>)
 8005344:	4f9d      	ldr	r7, [pc, #628]	@ (80055bc <__ieee754_rem_pio2f+0x2a4>)
 8005346:	f025 050f 	bic.w	r5, r5, #15
 800534a:	dd24      	ble.n	8005396 <__ieee754_rem_pio2f+0x7e>
 800534c:	f7fa ff02 	bl	8000154 <__aeabi_fsub>
 8005350:	42bd      	cmp	r5, r7
 8005352:	4606      	mov	r6, r0
 8005354:	d011      	beq.n	800537a <__ieee754_rem_pio2f+0x62>
 8005356:	499a      	ldr	r1, [pc, #616]	@ (80055c0 <__ieee754_rem_pio2f+0x2a8>)
 8005358:	f7fa fefc 	bl	8000154 <__aeabi_fsub>
 800535c:	4601      	mov	r1, r0
 800535e:	4605      	mov	r5, r0
 8005360:	4630      	mov	r0, r6
 8005362:	f7fa fef7 	bl	8000154 <__aeabi_fsub>
 8005366:	4996      	ldr	r1, [pc, #600]	@ (80055c0 <__ieee754_rem_pio2f+0x2a8>)
 8005368:	f7fa fef4 	bl	8000154 <__aeabi_fsub>
 800536c:	6025      	str	r5, [r4, #0]
 800536e:	2501      	movs	r5, #1
 8005370:	6060      	str	r0, [r4, #4]
 8005372:	4628      	mov	r0, r5
 8005374:	b007      	add	sp, #28
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537a:	4992      	ldr	r1, [pc, #584]	@ (80055c4 <__ieee754_rem_pio2f+0x2ac>)
 800537c:	f7fa feea 	bl	8000154 <__aeabi_fsub>
 8005380:	4991      	ldr	r1, [pc, #580]	@ (80055c8 <__ieee754_rem_pio2f+0x2b0>)
 8005382:	4606      	mov	r6, r0
 8005384:	f7fa fee6 	bl	8000154 <__aeabi_fsub>
 8005388:	4601      	mov	r1, r0
 800538a:	4605      	mov	r5, r0
 800538c:	4630      	mov	r0, r6
 800538e:	f7fa fee1 	bl	8000154 <__aeabi_fsub>
 8005392:	498d      	ldr	r1, [pc, #564]	@ (80055c8 <__ieee754_rem_pio2f+0x2b0>)
 8005394:	e7e8      	b.n	8005368 <__ieee754_rem_pio2f+0x50>
 8005396:	f7fa fedf 	bl	8000158 <__addsf3>
 800539a:	42bd      	cmp	r5, r7
 800539c:	4606      	mov	r6, r0
 800539e:	d00f      	beq.n	80053c0 <__ieee754_rem_pio2f+0xa8>
 80053a0:	4987      	ldr	r1, [pc, #540]	@ (80055c0 <__ieee754_rem_pio2f+0x2a8>)
 80053a2:	f7fa fed9 	bl	8000158 <__addsf3>
 80053a6:	4601      	mov	r1, r0
 80053a8:	4605      	mov	r5, r0
 80053aa:	4630      	mov	r0, r6
 80053ac:	f7fa fed2 	bl	8000154 <__aeabi_fsub>
 80053b0:	4983      	ldr	r1, [pc, #524]	@ (80055c0 <__ieee754_rem_pio2f+0x2a8>)
 80053b2:	f7fa fed1 	bl	8000158 <__addsf3>
 80053b6:	6025      	str	r5, [r4, #0]
 80053b8:	6060      	str	r0, [r4, #4]
 80053ba:	f04f 35ff 	mov.w	r5, #4294967295
 80053be:	e7d8      	b.n	8005372 <__ieee754_rem_pio2f+0x5a>
 80053c0:	4980      	ldr	r1, [pc, #512]	@ (80055c4 <__ieee754_rem_pio2f+0x2ac>)
 80053c2:	f7fa fec9 	bl	8000158 <__addsf3>
 80053c6:	4980      	ldr	r1, [pc, #512]	@ (80055c8 <__ieee754_rem_pio2f+0x2b0>)
 80053c8:	4606      	mov	r6, r0
 80053ca:	f7fa fec5 	bl	8000158 <__addsf3>
 80053ce:	4601      	mov	r1, r0
 80053d0:	4605      	mov	r5, r0
 80053d2:	4630      	mov	r0, r6
 80053d4:	f7fa febe 	bl	8000154 <__aeabi_fsub>
 80053d8:	497b      	ldr	r1, [pc, #492]	@ (80055c8 <__ieee754_rem_pio2f+0x2b0>)
 80053da:	e7ea      	b.n	80053b2 <__ieee754_rem_pio2f+0x9a>
 80053dc:	4a7b      	ldr	r2, [pc, #492]	@ (80055cc <__ieee754_rem_pio2f+0x2b4>)
 80053de:	4590      	cmp	r8, r2
 80053e0:	f200 8095 	bhi.w	800550e <__ieee754_rem_pio2f+0x1f6>
 80053e4:	f000 f8fe 	bl	80055e4 <fabsf>
 80053e8:	4979      	ldr	r1, [pc, #484]	@ (80055d0 <__ieee754_rem_pio2f+0x2b8>)
 80053ea:	4606      	mov	r6, r0
 80053ec:	f7fa ffbc 	bl	8000368 <__aeabi_fmul>
 80053f0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80053f4:	f7fa feb0 	bl	8000158 <__addsf3>
 80053f8:	f7fb f992 	bl	8000720 <__aeabi_f2iz>
 80053fc:	4605      	mov	r5, r0
 80053fe:	f7fa ff5f 	bl	80002c0 <__aeabi_i2f>
 8005402:	496d      	ldr	r1, [pc, #436]	@ (80055b8 <__ieee754_rem_pio2f+0x2a0>)
 8005404:	4681      	mov	r9, r0
 8005406:	f7fa ffaf 	bl	8000368 <__aeabi_fmul>
 800540a:	4601      	mov	r1, r0
 800540c:	4630      	mov	r0, r6
 800540e:	f7fa fea1 	bl	8000154 <__aeabi_fsub>
 8005412:	496b      	ldr	r1, [pc, #428]	@ (80055c0 <__ieee754_rem_pio2f+0x2a8>)
 8005414:	4607      	mov	r7, r0
 8005416:	4648      	mov	r0, r9
 8005418:	f7fa ffa6 	bl	8000368 <__aeabi_fmul>
 800541c:	2d1f      	cmp	r5, #31
 800541e:	4606      	mov	r6, r0
 8005420:	dc0e      	bgt.n	8005440 <__ieee754_rem_pio2f+0x128>
 8005422:	4a6c      	ldr	r2, [pc, #432]	@ (80055d4 <__ieee754_rem_pio2f+0x2bc>)
 8005424:	1e69      	subs	r1, r5, #1
 8005426:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800542a:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800542e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <__ieee754_rem_pio2f+0x128>
 8005436:	4631      	mov	r1, r6
 8005438:	4638      	mov	r0, r7
 800543a:	f7fa fe8b 	bl	8000154 <__aeabi_fsub>
 800543e:	e00b      	b.n	8005458 <__ieee754_rem_pio2f+0x140>
 8005440:	4631      	mov	r1, r6
 8005442:	4638      	mov	r0, r7
 8005444:	f7fa fe86 	bl	8000154 <__aeabi_fsub>
 8005448:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800544c:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8005450:	2b08      	cmp	r3, #8
 8005452:	ea4f 5be8 	mov.w	fp, r8, asr #23
 8005456:	dc01      	bgt.n	800545c <__ieee754_rem_pio2f+0x144>
 8005458:	6020      	str	r0, [r4, #0]
 800545a:	e026      	b.n	80054aa <__ieee754_rem_pio2f+0x192>
 800545c:	4959      	ldr	r1, [pc, #356]	@ (80055c4 <__ieee754_rem_pio2f+0x2ac>)
 800545e:	4648      	mov	r0, r9
 8005460:	f7fa ff82 	bl	8000368 <__aeabi_fmul>
 8005464:	4606      	mov	r6, r0
 8005466:	4601      	mov	r1, r0
 8005468:	4638      	mov	r0, r7
 800546a:	f7fa fe73 	bl	8000154 <__aeabi_fsub>
 800546e:	4601      	mov	r1, r0
 8005470:	4680      	mov	r8, r0
 8005472:	4638      	mov	r0, r7
 8005474:	f7fa fe6e 	bl	8000154 <__aeabi_fsub>
 8005478:	4631      	mov	r1, r6
 800547a:	f7fa fe6b 	bl	8000154 <__aeabi_fsub>
 800547e:	4606      	mov	r6, r0
 8005480:	4951      	ldr	r1, [pc, #324]	@ (80055c8 <__ieee754_rem_pio2f+0x2b0>)
 8005482:	4648      	mov	r0, r9
 8005484:	f7fa ff70 	bl	8000368 <__aeabi_fmul>
 8005488:	4631      	mov	r1, r6
 800548a:	f7fa fe63 	bl	8000154 <__aeabi_fsub>
 800548e:	4601      	mov	r1, r0
 8005490:	4606      	mov	r6, r0
 8005492:	4640      	mov	r0, r8
 8005494:	f7fa fe5e 	bl	8000154 <__aeabi_fsub>
 8005498:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800549c:	ebab 0b03 	sub.w	fp, fp, r3
 80054a0:	f1bb 0f19 	cmp.w	fp, #25
 80054a4:	dc18      	bgt.n	80054d8 <__ieee754_rem_pio2f+0x1c0>
 80054a6:	4647      	mov	r7, r8
 80054a8:	6020      	str	r0, [r4, #0]
 80054aa:	f8d4 8000 	ldr.w	r8, [r4]
 80054ae:	4638      	mov	r0, r7
 80054b0:	4641      	mov	r1, r8
 80054b2:	f7fa fe4f 	bl	8000154 <__aeabi_fsub>
 80054b6:	4631      	mov	r1, r6
 80054b8:	f7fa fe4c 	bl	8000154 <__aeabi_fsub>
 80054bc:	f1ba 0f00 	cmp.w	sl, #0
 80054c0:	6060      	str	r0, [r4, #4]
 80054c2:	f6bf af56 	bge.w	8005372 <__ieee754_rem_pio2f+0x5a>
 80054c6:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 80054ca:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80054ce:	f8c4 8000 	str.w	r8, [r4]
 80054d2:	6060      	str	r0, [r4, #4]
 80054d4:	426d      	negs	r5, r5
 80054d6:	e74c      	b.n	8005372 <__ieee754_rem_pio2f+0x5a>
 80054d8:	493f      	ldr	r1, [pc, #252]	@ (80055d8 <__ieee754_rem_pio2f+0x2c0>)
 80054da:	4648      	mov	r0, r9
 80054dc:	f7fa ff44 	bl	8000368 <__aeabi_fmul>
 80054e0:	4606      	mov	r6, r0
 80054e2:	4601      	mov	r1, r0
 80054e4:	4640      	mov	r0, r8
 80054e6:	f7fa fe35 	bl	8000154 <__aeabi_fsub>
 80054ea:	4601      	mov	r1, r0
 80054ec:	4607      	mov	r7, r0
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7fa fe30 	bl	8000154 <__aeabi_fsub>
 80054f4:	4631      	mov	r1, r6
 80054f6:	f7fa fe2d 	bl	8000154 <__aeabi_fsub>
 80054fa:	4606      	mov	r6, r0
 80054fc:	4937      	ldr	r1, [pc, #220]	@ (80055dc <__ieee754_rem_pio2f+0x2c4>)
 80054fe:	4648      	mov	r0, r9
 8005500:	f7fa ff32 	bl	8000368 <__aeabi_fmul>
 8005504:	4631      	mov	r1, r6
 8005506:	f7fa fe25 	bl	8000154 <__aeabi_fsub>
 800550a:	4606      	mov	r6, r0
 800550c:	e793      	b.n	8005436 <__ieee754_rem_pio2f+0x11e>
 800550e:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8005512:	d305      	bcc.n	8005520 <__ieee754_rem_pio2f+0x208>
 8005514:	4601      	mov	r1, r0
 8005516:	f7fa fe1d 	bl	8000154 <__aeabi_fsub>
 800551a:	6060      	str	r0, [r4, #4]
 800551c:	6020      	str	r0, [r4, #0]
 800551e:	e708      	b.n	8005332 <__ieee754_rem_pio2f+0x1a>
 8005520:	ea4f 56e8 	mov.w	r6, r8, asr #23
 8005524:	3e86      	subs	r6, #134	@ 0x86
 8005526:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800552a:	4640      	mov	r0, r8
 800552c:	f7fb f8f8 	bl	8000720 <__aeabi_f2iz>
 8005530:	f7fa fec6 	bl	80002c0 <__aeabi_i2f>
 8005534:	4601      	mov	r1, r0
 8005536:	9003      	str	r0, [sp, #12]
 8005538:	4640      	mov	r0, r8
 800553a:	f7fa fe0b 	bl	8000154 <__aeabi_fsub>
 800553e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005542:	f7fa ff11 	bl	8000368 <__aeabi_fmul>
 8005546:	4607      	mov	r7, r0
 8005548:	f7fb f8ea 	bl	8000720 <__aeabi_f2iz>
 800554c:	f7fa feb8 	bl	80002c0 <__aeabi_i2f>
 8005550:	4601      	mov	r1, r0
 8005552:	9004      	str	r0, [sp, #16]
 8005554:	4605      	mov	r5, r0
 8005556:	4638      	mov	r0, r7
 8005558:	f7fa fdfc 	bl	8000154 <__aeabi_fsub>
 800555c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005560:	f7fa ff02 	bl	8000368 <__aeabi_fmul>
 8005564:	2100      	movs	r1, #0
 8005566:	9005      	str	r0, [sp, #20]
 8005568:	f7fb f892 	bl	8000690 <__aeabi_fcmpeq>
 800556c:	b1f0      	cbz	r0, 80055ac <__ieee754_rem_pio2f+0x294>
 800556e:	2100      	movs	r1, #0
 8005570:	4628      	mov	r0, r5
 8005572:	f7fb f88d 	bl	8000690 <__aeabi_fcmpeq>
 8005576:	2800      	cmp	r0, #0
 8005578:	bf14      	ite	ne
 800557a:	2301      	movne	r3, #1
 800557c:	2302      	moveq	r3, #2
 800557e:	4a18      	ldr	r2, [pc, #96]	@ (80055e0 <__ieee754_rem_pio2f+0x2c8>)
 8005580:	4621      	mov	r1, r4
 8005582:	9201      	str	r2, [sp, #4]
 8005584:	2202      	movs	r2, #2
 8005586:	a803      	add	r0, sp, #12
 8005588:	9200      	str	r2, [sp, #0]
 800558a:	4632      	mov	r2, r6
 800558c:	f000 f82e 	bl	80055ec <__kernel_rem_pio2f>
 8005590:	f1ba 0f00 	cmp.w	sl, #0
 8005594:	4605      	mov	r5, r0
 8005596:	f6bf aeec 	bge.w	8005372 <__ieee754_rem_pio2f+0x5a>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80055a0:	6023      	str	r3, [r4, #0]
 80055a2:	6863      	ldr	r3, [r4, #4]
 80055a4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	e793      	b.n	80054d4 <__ieee754_rem_pio2f+0x1bc>
 80055ac:	2303      	movs	r3, #3
 80055ae:	e7e6      	b.n	800557e <__ieee754_rem_pio2f+0x266>
 80055b0:	3f490fd8 	.word	0x3f490fd8
 80055b4:	4016cbe3 	.word	0x4016cbe3
 80055b8:	3fc90f80 	.word	0x3fc90f80
 80055bc:	3fc90fd0 	.word	0x3fc90fd0
 80055c0:	37354443 	.word	0x37354443
 80055c4:	37354400 	.word	0x37354400
 80055c8:	2e85a308 	.word	0x2e85a308
 80055cc:	43490f80 	.word	0x43490f80
 80055d0:	3f22f984 	.word	0x3f22f984
 80055d4:	08005d0c 	.word	0x08005d0c
 80055d8:	2e85a300 	.word	0x2e85a300
 80055dc:	248d3132 	.word	0x248d3132
 80055e0:	08005d8c 	.word	0x08005d8c

080055e4 <fabsf>:
 80055e4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80055e8:	4770      	bx	lr
	...

080055ec <__kernel_rem_pio2f>:
 80055ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f0:	b0db      	sub	sp, #364	@ 0x16c
 80055f2:	9202      	str	r2, [sp, #8]
 80055f4:	9304      	str	r3, [sp, #16]
 80055f6:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80055f8:	4bac      	ldr	r3, [pc, #688]	@ (80058ac <__kernel_rem_pio2f+0x2c0>)
 80055fa:	9005      	str	r0, [sp, #20]
 80055fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005600:	9100      	str	r1, [sp, #0]
 8005602:	9301      	str	r3, [sp, #4]
 8005604:	9b04      	ldr	r3, [sp, #16]
 8005606:	3b01      	subs	r3, #1
 8005608:	9303      	str	r3, [sp, #12]
 800560a:	9b02      	ldr	r3, [sp, #8]
 800560c:	1d1a      	adds	r2, r3, #4
 800560e:	f2c0 8099 	blt.w	8005744 <__kernel_rem_pio2f+0x158>
 8005612:	1edc      	subs	r4, r3, #3
 8005614:	bf48      	it	mi
 8005616:	1d1c      	addmi	r4, r3, #4
 8005618:	10e4      	asrs	r4, r4, #3
 800561a:	2500      	movs	r5, #0
 800561c:	f04f 0b00 	mov.w	fp, #0
 8005620:	1c67      	adds	r7, r4, #1
 8005622:	00fb      	lsls	r3, r7, #3
 8005624:	9306      	str	r3, [sp, #24]
 8005626:	9b02      	ldr	r3, [sp, #8]
 8005628:	9a03      	ldr	r2, [sp, #12]
 800562a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800562e:	9b01      	ldr	r3, [sp, #4]
 8005630:	eba4 0802 	sub.w	r8, r4, r2
 8005634:	eb03 0902 	add.w	r9, r3, r2
 8005638:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800563a:	ae1e      	add	r6, sp, #120	@ 0x78
 800563c:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8005640:	454d      	cmp	r5, r9
 8005642:	f340 8081 	ble.w	8005748 <__kernel_rem_pio2f+0x15c>
 8005646:	9a04      	ldr	r2, [sp, #16]
 8005648:	ab1e      	add	r3, sp, #120	@ 0x78
 800564a:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800564e:	f04f 0900 	mov.w	r9, #0
 8005652:	2300      	movs	r3, #0
 8005654:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8005658:	9a01      	ldr	r2, [sp, #4]
 800565a:	4591      	cmp	r9, r2
 800565c:	f340 809a 	ble.w	8005794 <__kernel_rem_pio2f+0x1a8>
 8005660:	4613      	mov	r3, r2
 8005662:	aa0a      	add	r2, sp, #40	@ 0x28
 8005664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005668:	9308      	str	r3, [sp, #32]
 800566a:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800566c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005670:	9c01      	ldr	r4, [sp, #4]
 8005672:	9307      	str	r3, [sp, #28]
 8005674:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8005678:	4646      	mov	r6, r8
 800567a:	4625      	mov	r5, r4
 800567c:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8005680:	ab5a      	add	r3, sp, #360	@ 0x168
 8005682:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005686:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800568a:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800568e:	2d00      	cmp	r5, #0
 8005690:	f300 8085 	bgt.w	800579e <__kernel_rem_pio2f+0x1b2>
 8005694:	4639      	mov	r1, r7
 8005696:	4658      	mov	r0, fp
 8005698:	f000 fa46 	bl	8005b28 <scalbnf>
 800569c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80056a0:	4605      	mov	r5, r0
 80056a2:	f7fa fe61 	bl	8000368 <__aeabi_fmul>
 80056a6:	f000 fa8b 	bl	8005bc0 <floorf>
 80056aa:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 80056ae:	f7fa fe5b 	bl	8000368 <__aeabi_fmul>
 80056b2:	4601      	mov	r1, r0
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7fa fd4d 	bl	8000154 <__aeabi_fsub>
 80056ba:	4605      	mov	r5, r0
 80056bc:	f7fb f830 	bl	8000720 <__aeabi_f2iz>
 80056c0:	4606      	mov	r6, r0
 80056c2:	f7fa fdfd 	bl	80002c0 <__aeabi_i2f>
 80056c6:	4601      	mov	r1, r0
 80056c8:	4628      	mov	r0, r5
 80056ca:	f7fa fd43 	bl	8000154 <__aeabi_fsub>
 80056ce:	2f00      	cmp	r7, #0
 80056d0:	4681      	mov	r9, r0
 80056d2:	f340 8081 	ble.w	80057d8 <__kernel_rem_pio2f+0x1ec>
 80056d6:	1e62      	subs	r2, r4, #1
 80056d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80056da:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80056de:	f1c7 0108 	rsb	r1, r7, #8
 80056e2:	fa45 f301 	asr.w	r3, r5, r1
 80056e6:	441e      	add	r6, r3
 80056e8:	408b      	lsls	r3, r1
 80056ea:	1aed      	subs	r5, r5, r3
 80056ec:	ab0a      	add	r3, sp, #40	@ 0x28
 80056ee:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80056f2:	f1c7 0307 	rsb	r3, r7, #7
 80056f6:	411d      	asrs	r5, r3
 80056f8:	2d00      	cmp	r5, #0
 80056fa:	dd7a      	ble.n	80057f2 <__kernel_rem_pio2f+0x206>
 80056fc:	2200      	movs	r2, #0
 80056fe:	4692      	mov	sl, r2
 8005700:	3601      	adds	r6, #1
 8005702:	4294      	cmp	r4, r2
 8005704:	f300 80aa 	bgt.w	800585c <__kernel_rem_pio2f+0x270>
 8005708:	2f00      	cmp	r7, #0
 800570a:	dd05      	ble.n	8005718 <__kernel_rem_pio2f+0x12c>
 800570c:	2f01      	cmp	r7, #1
 800570e:	f000 80b6 	beq.w	800587e <__kernel_rem_pio2f+0x292>
 8005712:	2f02      	cmp	r7, #2
 8005714:	f000 80bd 	beq.w	8005892 <__kernel_rem_pio2f+0x2a6>
 8005718:	2d02      	cmp	r5, #2
 800571a:	d16a      	bne.n	80057f2 <__kernel_rem_pio2f+0x206>
 800571c:	4649      	mov	r1, r9
 800571e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005722:	f7fa fd17 	bl	8000154 <__aeabi_fsub>
 8005726:	4681      	mov	r9, r0
 8005728:	f1ba 0f00 	cmp.w	sl, #0
 800572c:	d061      	beq.n	80057f2 <__kernel_rem_pio2f+0x206>
 800572e:	4639      	mov	r1, r7
 8005730:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005734:	f000 f9f8 	bl	8005b28 <scalbnf>
 8005738:	4601      	mov	r1, r0
 800573a:	4648      	mov	r0, r9
 800573c:	f7fa fd0a 	bl	8000154 <__aeabi_fsub>
 8005740:	4681      	mov	r9, r0
 8005742:	e056      	b.n	80057f2 <__kernel_rem_pio2f+0x206>
 8005744:	2400      	movs	r4, #0
 8005746:	e768      	b.n	800561a <__kernel_rem_pio2f+0x2e>
 8005748:	eb18 0f05 	cmn.w	r8, r5
 800574c:	d407      	bmi.n	800575e <__kernel_rem_pio2f+0x172>
 800574e:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8005752:	f7fa fdb5 	bl	80002c0 <__aeabi_i2f>
 8005756:	f846 0b04 	str.w	r0, [r6], #4
 800575a:	3501      	adds	r5, #1
 800575c:	e770      	b.n	8005640 <__kernel_rem_pio2f+0x54>
 800575e:	4658      	mov	r0, fp
 8005760:	e7f9      	b.n	8005756 <__kernel_rem_pio2f+0x16a>
 8005762:	9307      	str	r3, [sp, #28]
 8005764:	9b05      	ldr	r3, [sp, #20]
 8005766:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800576a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800576e:	f7fa fdfb 	bl	8000368 <__aeabi_fmul>
 8005772:	4601      	mov	r1, r0
 8005774:	4630      	mov	r0, r6
 8005776:	f7fa fcef 	bl	8000158 <__addsf3>
 800577a:	4606      	mov	r6, r0
 800577c:	9b07      	ldr	r3, [sp, #28]
 800577e:	f108 0801 	add.w	r8, r8, #1
 8005782:	9a03      	ldr	r2, [sp, #12]
 8005784:	4590      	cmp	r8, r2
 8005786:	ddec      	ble.n	8005762 <__kernel_rem_pio2f+0x176>
 8005788:	f84a 6b04 	str.w	r6, [sl], #4
 800578c:	f109 0901 	add.w	r9, r9, #1
 8005790:	3504      	adds	r5, #4
 8005792:	e761      	b.n	8005658 <__kernel_rem_pio2f+0x6c>
 8005794:	46ab      	mov	fp, r5
 8005796:	461e      	mov	r6, r3
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	e7f1      	b.n	8005782 <__kernel_rem_pio2f+0x196>
 800579e:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 80057a2:	4658      	mov	r0, fp
 80057a4:	f7fa fde0 	bl	8000368 <__aeabi_fmul>
 80057a8:	f7fa ffba 	bl	8000720 <__aeabi_f2iz>
 80057ac:	f7fa fd88 	bl	80002c0 <__aeabi_i2f>
 80057b0:	4649      	mov	r1, r9
 80057b2:	9009      	str	r0, [sp, #36]	@ 0x24
 80057b4:	f7fa fdd8 	bl	8000368 <__aeabi_fmul>
 80057b8:	4601      	mov	r1, r0
 80057ba:	4658      	mov	r0, fp
 80057bc:	f7fa fcca 	bl	8000154 <__aeabi_fsub>
 80057c0:	f7fa ffae 	bl	8000720 <__aeabi_f2iz>
 80057c4:	3d01      	subs	r5, #1
 80057c6:	f846 0b04 	str.w	r0, [r6], #4
 80057ca:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 80057ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80057d0:	f7fa fcc2 	bl	8000158 <__addsf3>
 80057d4:	4683      	mov	fp, r0
 80057d6:	e75a      	b.n	800568e <__kernel_rem_pio2f+0xa2>
 80057d8:	d105      	bne.n	80057e6 <__kernel_rem_pio2f+0x1fa>
 80057da:	1e63      	subs	r3, r4, #1
 80057dc:	aa0a      	add	r2, sp, #40	@ 0x28
 80057de:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 80057e2:	11ed      	asrs	r5, r5, #7
 80057e4:	e788      	b.n	80056f8 <__kernel_rem_pio2f+0x10c>
 80057e6:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80057ea:	f7fa ff6f 	bl	80006cc <__aeabi_fcmpge>
 80057ee:	4605      	mov	r5, r0
 80057f0:	bb90      	cbnz	r0, 8005858 <__kernel_rem_pio2f+0x26c>
 80057f2:	2100      	movs	r1, #0
 80057f4:	4648      	mov	r0, r9
 80057f6:	f7fa ff4b 	bl	8000690 <__aeabi_fcmpeq>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	f000 8090 	beq.w	8005920 <__kernel_rem_pio2f+0x334>
 8005800:	2200      	movs	r2, #0
 8005802:	1e63      	subs	r3, r4, #1
 8005804:	9901      	ldr	r1, [sp, #4]
 8005806:	428b      	cmp	r3, r1
 8005808:	da4a      	bge.n	80058a0 <__kernel_rem_pio2f+0x2b4>
 800580a:	2a00      	cmp	r2, #0
 800580c:	d076      	beq.n	80058fc <__kernel_rem_pio2f+0x310>
 800580e:	3c01      	subs	r4, #1
 8005810:	ab0a      	add	r3, sp, #40	@ 0x28
 8005812:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005816:	3f08      	subs	r7, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f8      	beq.n	800580e <__kernel_rem_pio2f+0x222>
 800581c:	4639      	mov	r1, r7
 800581e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8005822:	f000 f981 	bl	8005b28 <scalbnf>
 8005826:	46a2      	mov	sl, r4
 8005828:	4607      	mov	r7, r0
 800582a:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800582e:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8005832:	f1ba 0f00 	cmp.w	sl, #0
 8005836:	f280 80a1 	bge.w	800597c <__kernel_rem_pio2f+0x390>
 800583a:	4627      	mov	r7, r4
 800583c:	2200      	movs	r2, #0
 800583e:	2f00      	cmp	r7, #0
 8005840:	f2c0 80cb 	blt.w	80059da <__kernel_rem_pio2f+0x3ee>
 8005844:	a946      	add	r1, sp, #280	@ 0x118
 8005846:	4690      	mov	r8, r2
 8005848:	f04f 0a00 	mov.w	sl, #0
 800584c:	4b18      	ldr	r3, [pc, #96]	@ (80058b0 <__kernel_rem_pio2f+0x2c4>)
 800584e:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8005852:	eba4 0907 	sub.w	r9, r4, r7
 8005856:	e0b4      	b.n	80059c2 <__kernel_rem_pio2f+0x3d6>
 8005858:	2502      	movs	r5, #2
 800585a:	e74f      	b.n	80056fc <__kernel_rem_pio2f+0x110>
 800585c:	f858 3b04 	ldr.w	r3, [r8], #4
 8005860:	f1ba 0f00 	cmp.w	sl, #0
 8005864:	d108      	bne.n	8005878 <__kernel_rem_pio2f+0x28c>
 8005866:	b123      	cbz	r3, 8005872 <__kernel_rem_pio2f+0x286>
 8005868:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800586c:	f848 3c04 	str.w	r3, [r8, #-4]
 8005870:	2301      	movs	r3, #1
 8005872:	469a      	mov	sl, r3
 8005874:	3201      	adds	r2, #1
 8005876:	e744      	b.n	8005702 <__kernel_rem_pio2f+0x116>
 8005878:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800587c:	e7f6      	b.n	800586c <__kernel_rem_pio2f+0x280>
 800587e:	1e62      	subs	r2, r4, #1
 8005880:	ab0a      	add	r3, sp, #40	@ 0x28
 8005882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588a:	a90a      	add	r1, sp, #40	@ 0x28
 800588c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005890:	e742      	b.n	8005718 <__kernel_rem_pio2f+0x12c>
 8005892:	1e62      	subs	r2, r4, #1
 8005894:	ab0a      	add	r3, sp, #40	@ 0x28
 8005896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800589a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800589e:	e7f4      	b.n	800588a <__kernel_rem_pio2f+0x29e>
 80058a0:	a90a      	add	r1, sp, #40	@ 0x28
 80058a2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	430a      	orrs	r2, r1
 80058aa:	e7ab      	b.n	8005804 <__kernel_rem_pio2f+0x218>
 80058ac:	080060d0 	.word	0x080060d0
 80058b0:	080060a4 	.word	0x080060a4
 80058b4:	3301      	adds	r3, #1
 80058b6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80058ba:	2900      	cmp	r1, #0
 80058bc:	d0fa      	beq.n	80058b4 <__kernel_rem_pio2f+0x2c8>
 80058be:	9a04      	ldr	r2, [sp, #16]
 80058c0:	a91e      	add	r1, sp, #120	@ 0x78
 80058c2:	18a2      	adds	r2, r4, r2
 80058c4:	1c66      	adds	r6, r4, #1
 80058c6:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 80058ca:	441c      	add	r4, r3
 80058cc:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 80058d0:	42b4      	cmp	r4, r6
 80058d2:	f6ff aecf 	blt.w	8005674 <__kernel_rem_pio2f+0x88>
 80058d6:	9b07      	ldr	r3, [sp, #28]
 80058d8:	46ab      	mov	fp, r5
 80058da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80058de:	f7fa fcef 	bl	80002c0 <__aeabi_i2f>
 80058e2:	f04f 0a00 	mov.w	sl, #0
 80058e6:	f04f 0800 	mov.w	r8, #0
 80058ea:	6028      	str	r0, [r5, #0]
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	459a      	cmp	sl, r3
 80058f0:	dd07      	ble.n	8005902 <__kernel_rem_pio2f+0x316>
 80058f2:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 80058f6:	3504      	adds	r5, #4
 80058f8:	3601      	adds	r6, #1
 80058fa:	e7e9      	b.n	80058d0 <__kernel_rem_pio2f+0x2e4>
 80058fc:	2301      	movs	r3, #1
 80058fe:	9a08      	ldr	r2, [sp, #32]
 8005900:	e7d9      	b.n	80058b6 <__kernel_rem_pio2f+0x2ca>
 8005902:	9b05      	ldr	r3, [sp, #20]
 8005904:	f85b 0904 	ldr.w	r0, [fp], #-4
 8005908:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800590c:	f7fa fd2c 	bl	8000368 <__aeabi_fmul>
 8005910:	4601      	mov	r1, r0
 8005912:	4640      	mov	r0, r8
 8005914:	f7fa fc20 	bl	8000158 <__addsf3>
 8005918:	f10a 0a01 	add.w	sl, sl, #1
 800591c:	4680      	mov	r8, r0
 800591e:	e7e5      	b.n	80058ec <__kernel_rem_pio2f+0x300>
 8005920:	9b06      	ldr	r3, [sp, #24]
 8005922:	9a02      	ldr	r2, [sp, #8]
 8005924:	4648      	mov	r0, r9
 8005926:	1a99      	subs	r1, r3, r2
 8005928:	f000 f8fe 	bl	8005b28 <scalbnf>
 800592c:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8005930:	4680      	mov	r8, r0
 8005932:	f7fa fecb 	bl	80006cc <__aeabi_fcmpge>
 8005936:	b1f8      	cbz	r0, 8005978 <__kernel_rem_pio2f+0x38c>
 8005938:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800593c:	4640      	mov	r0, r8
 800593e:	f7fa fd13 	bl	8000368 <__aeabi_fmul>
 8005942:	f7fa feed 	bl	8000720 <__aeabi_f2iz>
 8005946:	f7fa fcbb 	bl	80002c0 <__aeabi_i2f>
 800594a:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800594e:	4681      	mov	r9, r0
 8005950:	f7fa fd0a 	bl	8000368 <__aeabi_fmul>
 8005954:	4601      	mov	r1, r0
 8005956:	4640      	mov	r0, r8
 8005958:	f7fa fbfc 	bl	8000154 <__aeabi_fsub>
 800595c:	f7fa fee0 	bl	8000720 <__aeabi_f2iz>
 8005960:	ab0a      	add	r3, sp, #40	@ 0x28
 8005962:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005966:	4648      	mov	r0, r9
 8005968:	3401      	adds	r4, #1
 800596a:	3708      	adds	r7, #8
 800596c:	f7fa fed8 	bl	8000720 <__aeabi_f2iz>
 8005970:	ab0a      	add	r3, sp, #40	@ 0x28
 8005972:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005976:	e751      	b.n	800581c <__kernel_rem_pio2f+0x230>
 8005978:	4640      	mov	r0, r8
 800597a:	e7f7      	b.n	800596c <__kernel_rem_pio2f+0x380>
 800597c:	ab0a      	add	r3, sp, #40	@ 0x28
 800597e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005982:	f7fa fc9d 	bl	80002c0 <__aeabi_i2f>
 8005986:	4639      	mov	r1, r7
 8005988:	f7fa fcee 	bl	8000368 <__aeabi_fmul>
 800598c:	4649      	mov	r1, r9
 800598e:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8005992:	4638      	mov	r0, r7
 8005994:	f7fa fce8 	bl	8000368 <__aeabi_fmul>
 8005998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800599c:	4607      	mov	r7, r0
 800599e:	e748      	b.n	8005832 <__kernel_rem_pio2f+0x246>
 80059a0:	f853 0b04 	ldr.w	r0, [r3], #4
 80059a4:	f85b 1b04 	ldr.w	r1, [fp], #4
 80059a8:	9203      	str	r2, [sp, #12]
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	f7fa fcdc 	bl	8000368 <__aeabi_fmul>
 80059b0:	4601      	mov	r1, r0
 80059b2:	4640      	mov	r0, r8
 80059b4:	f7fa fbd0 	bl	8000158 <__addsf3>
 80059b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80059bc:	4680      	mov	r8, r0
 80059be:	f10a 0a01 	add.w	sl, sl, #1
 80059c2:	9901      	ldr	r1, [sp, #4]
 80059c4:	458a      	cmp	sl, r1
 80059c6:	dc01      	bgt.n	80059cc <__kernel_rem_pio2f+0x3e0>
 80059c8:	45ca      	cmp	sl, r9
 80059ca:	dde9      	ble.n	80059a0 <__kernel_rem_pio2f+0x3b4>
 80059cc:	ab5a      	add	r3, sp, #360	@ 0x168
 80059ce:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 80059d2:	f849 8ca0 	str.w	r8, [r9, #-160]
 80059d6:	3f01      	subs	r7, #1
 80059d8:	e731      	b.n	800583e <__kernel_rem_pio2f+0x252>
 80059da:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80059dc:	2b02      	cmp	r3, #2
 80059de:	dc07      	bgt.n	80059f0 <__kernel_rem_pio2f+0x404>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dc4e      	bgt.n	8005a82 <__kernel_rem_pio2f+0x496>
 80059e4:	d02e      	beq.n	8005a44 <__kernel_rem_pio2f+0x458>
 80059e6:	f006 0007 	and.w	r0, r6, #7
 80059ea:	b05b      	add	sp, #364	@ 0x16c
 80059ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d1f7      	bne.n	80059e6 <__kernel_rem_pio2f+0x3fa>
 80059f6:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 80059fa:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 80059fe:	46b8      	mov	r8, r7
 8005a00:	46a2      	mov	sl, r4
 8005a02:	f1ba 0f00 	cmp.w	sl, #0
 8005a06:	dc49      	bgt.n	8005a9c <__kernel_rem_pio2f+0x4b0>
 8005a08:	46a1      	mov	r9, r4
 8005a0a:	f1b9 0f01 	cmp.w	r9, #1
 8005a0e:	dc60      	bgt.n	8005ad2 <__kernel_rem_pio2f+0x4e6>
 8005a10:	2000      	movs	r0, #0
 8005a12:	2c01      	cmp	r4, #1
 8005a14:	dc76      	bgt.n	8005b04 <__kernel_rem_pio2f+0x518>
 8005a16:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8005a18:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8005a1a:	2d00      	cmp	r5, #0
 8005a1c:	d178      	bne.n	8005b10 <__kernel_rem_pio2f+0x524>
 8005a1e:	9900      	ldr	r1, [sp, #0]
 8005a20:	600a      	str	r2, [r1, #0]
 8005a22:	460a      	mov	r2, r1
 8005a24:	604b      	str	r3, [r1, #4]
 8005a26:	6090      	str	r0, [r2, #8]
 8005a28:	e7dd      	b.n	80059e6 <__kernel_rem_pio2f+0x3fa>
 8005a2a:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8005a2e:	f7fa fb93 	bl	8000158 <__addsf3>
 8005a32:	3c01      	subs	r4, #1
 8005a34:	2c00      	cmp	r4, #0
 8005a36:	daf8      	bge.n	8005a2a <__kernel_rem_pio2f+0x43e>
 8005a38:	b10d      	cbz	r5, 8005a3e <__kernel_rem_pio2f+0x452>
 8005a3a:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	6018      	str	r0, [r3, #0]
 8005a42:	e7d0      	b.n	80059e6 <__kernel_rem_pio2f+0x3fa>
 8005a44:	2000      	movs	r0, #0
 8005a46:	af32      	add	r7, sp, #200	@ 0xc8
 8005a48:	e7f4      	b.n	8005a34 <__kernel_rem_pio2f+0x448>
 8005a4a:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8005a4e:	f7fa fb83 	bl	8000158 <__addsf3>
 8005a52:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a56:	f1b8 0f00 	cmp.w	r8, #0
 8005a5a:	daf6      	bge.n	8005a4a <__kernel_rem_pio2f+0x45e>
 8005a5c:	b1ad      	cbz	r5, 8005a8a <__kernel_rem_pio2f+0x49e>
 8005a5e:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8005a62:	9a00      	ldr	r2, [sp, #0]
 8005a64:	4601      	mov	r1, r0
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8005a6a:	f7fa fb73 	bl	8000154 <__aeabi_fsub>
 8005a6e:	f04f 0801 	mov.w	r8, #1
 8005a72:	4544      	cmp	r4, r8
 8005a74:	da0b      	bge.n	8005a8e <__kernel_rem_pio2f+0x4a2>
 8005a76:	b10d      	cbz	r5, 8005a7c <__kernel_rem_pio2f+0x490>
 8005a78:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005a7c:	9b00      	ldr	r3, [sp, #0]
 8005a7e:	6058      	str	r0, [r3, #4]
 8005a80:	e7b1      	b.n	80059e6 <__kernel_rem_pio2f+0x3fa>
 8005a82:	46a0      	mov	r8, r4
 8005a84:	2000      	movs	r0, #0
 8005a86:	af32      	add	r7, sp, #200	@ 0xc8
 8005a88:	e7e5      	b.n	8005a56 <__kernel_rem_pio2f+0x46a>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	e7e9      	b.n	8005a62 <__kernel_rem_pio2f+0x476>
 8005a8e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005a92:	f7fa fb61 	bl	8000158 <__addsf3>
 8005a96:	f108 0801 	add.w	r8, r8, #1
 8005a9a:	e7ea      	b.n	8005a72 <__kernel_rem_pio2f+0x486>
 8005a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa0:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4610      	mov	r0, r2
 8005aa8:	9302      	str	r3, [sp, #8]
 8005aaa:	9201      	str	r2, [sp, #4]
 8005aac:	f7fa fb54 	bl	8000158 <__addsf3>
 8005ab0:	9a01      	ldr	r2, [sp, #4]
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	4681      	mov	r9, r0
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f7fa fb4c 	bl	8000154 <__aeabi_fsub>
 8005abc:	9b02      	ldr	r3, [sp, #8]
 8005abe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	f7fa fb48 	bl	8000158 <__addsf3>
 8005ac8:	f848 0904 	str.w	r0, [r8], #-4
 8005acc:	f8c8 9000 	str.w	r9, [r8]
 8005ad0:	e797      	b.n	8005a02 <__kernel_rem_pio2f+0x416>
 8005ad2:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8005ad6:	f8d7 a000 	ldr.w	sl, [r7]
 8005ada:	4618      	mov	r0, r3
 8005adc:	4651      	mov	r1, sl
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	f7fa fb3a 	bl	8000158 <__addsf3>
 8005ae4:	9b01      	ldr	r3, [sp, #4]
 8005ae6:	4601      	mov	r1, r0
 8005ae8:	4680      	mov	r8, r0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fa fb32 	bl	8000154 <__aeabi_fsub>
 8005af0:	4651      	mov	r1, sl
 8005af2:	f7fa fb31 	bl	8000158 <__addsf3>
 8005af6:	f847 0904 	str.w	r0, [r7], #-4
 8005afa:	f109 39ff 	add.w	r9, r9, #4294967295
 8005afe:	f8c7 8000 	str.w	r8, [r7]
 8005b02:	e782      	b.n	8005a0a <__kernel_rem_pio2f+0x41e>
 8005b04:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8005b08:	f7fa fb26 	bl	8000158 <__addsf3>
 8005b0c:	3c01      	subs	r4, #1
 8005b0e:	e780      	b.n	8005a12 <__kernel_rem_pio2f+0x426>
 8005b10:	9900      	ldr	r1, [sp, #0]
 8005b12:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8005b16:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005b1a:	600a      	str	r2, [r1, #0]
 8005b1c:	604b      	str	r3, [r1, #4]
 8005b1e:	460a      	mov	r2, r1
 8005b20:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8005b24:	e77f      	b.n	8005a26 <__kernel_rem_pio2f+0x43a>
 8005b26:	bf00      	nop

08005b28 <scalbnf>:
 8005b28:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4603      	mov	r3, r0
 8005b30:	460d      	mov	r5, r1
 8005b32:	4604      	mov	r4, r0
 8005b34:	d02e      	beq.n	8005b94 <scalbnf+0x6c>
 8005b36:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8005b3a:	d304      	bcc.n	8005b46 <scalbnf+0x1e>
 8005b3c:	4601      	mov	r1, r0
 8005b3e:	f7fa fb0b 	bl	8000158 <__addsf3>
 8005b42:	4603      	mov	r3, r0
 8005b44:	e026      	b.n	8005b94 <scalbnf+0x6c>
 8005b46:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8005b4a:	d118      	bne.n	8005b7e <scalbnf+0x56>
 8005b4c:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8005b50:	f7fa fc0a 	bl	8000368 <__aeabi_fmul>
 8005b54:	4a17      	ldr	r2, [pc, #92]	@ (8005bb4 <scalbnf+0x8c>)
 8005b56:	4603      	mov	r3, r0
 8005b58:	4295      	cmp	r5, r2
 8005b5a:	db0c      	blt.n	8005b76 <scalbnf+0x4e>
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8005b62:	3a19      	subs	r2, #25
 8005b64:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005b68:	428d      	cmp	r5, r1
 8005b6a:	dd0a      	ble.n	8005b82 <scalbnf+0x5a>
 8005b6c:	4912      	ldr	r1, [pc, #72]	@ (8005bb8 <scalbnf+0x90>)
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f361 001e 	bfi	r0, r1, #0, #31
 8005b74:	e000      	b.n	8005b78 <scalbnf+0x50>
 8005b76:	4911      	ldr	r1, [pc, #68]	@ (8005bbc <scalbnf+0x94>)
 8005b78:	f7fa fbf6 	bl	8000368 <__aeabi_fmul>
 8005b7c:	e7e1      	b.n	8005b42 <scalbnf+0x1a>
 8005b7e:	0dd2      	lsrs	r2, r2, #23
 8005b80:	e7f0      	b.n	8005b64 <scalbnf+0x3c>
 8005b82:	1951      	adds	r1, r2, r5
 8005b84:	29fe      	cmp	r1, #254	@ 0xfe
 8005b86:	dcf1      	bgt.n	8005b6c <scalbnf+0x44>
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	dd05      	ble.n	8005b98 <scalbnf+0x70>
 8005b8c:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8005b90:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8005b94:	4618      	mov	r0, r3
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	f111 0f16 	cmn.w	r1, #22
 8005b9c:	da01      	bge.n	8005ba2 <scalbnf+0x7a>
 8005b9e:	4907      	ldr	r1, [pc, #28]	@ (8005bbc <scalbnf+0x94>)
 8005ba0:	e7e5      	b.n	8005b6e <scalbnf+0x46>
 8005ba2:	f101 0019 	add.w	r0, r1, #25
 8005ba6:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8005baa:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8005bae:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8005bb2:	e7e1      	b.n	8005b78 <scalbnf+0x50>
 8005bb4:	ffff3cb0 	.word	0xffff3cb0
 8005bb8:	7149f2ca 	.word	0x7149f2ca
 8005bbc:	0da24260 	.word	0x0da24260

08005bc0 <floorf>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8005bc6:	3d7f      	subs	r5, #127	@ 0x7f
 8005bc8:	2d16      	cmp	r5, #22
 8005bca:	4601      	mov	r1, r0
 8005bcc:	4604      	mov	r4, r0
 8005bce:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8005bd2:	dc26      	bgt.n	8005c22 <floorf+0x62>
 8005bd4:	2d00      	cmp	r5, #0
 8005bd6:	da0f      	bge.n	8005bf8 <floorf+0x38>
 8005bd8:	4917      	ldr	r1, [pc, #92]	@ (8005c38 <floorf+0x78>)
 8005bda:	f7fa fabd 	bl	8000158 <__addsf3>
 8005bde:	2100      	movs	r1, #0
 8005be0:	f7fa fd7e 	bl	80006e0 <__aeabi_fcmpgt>
 8005be4:	b130      	cbz	r0, 8005bf4 <floorf+0x34>
 8005be6:	2c00      	cmp	r4, #0
 8005be8:	da23      	bge.n	8005c32 <floorf+0x72>
 8005bea:	2e00      	cmp	r6, #0
 8005bec:	4c13      	ldr	r4, [pc, #76]	@ (8005c3c <floorf+0x7c>)
 8005bee:	bf08      	it	eq
 8005bf0:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	e01a      	b.n	8005c2e <floorf+0x6e>
 8005bf8:	4e11      	ldr	r6, [pc, #68]	@ (8005c40 <floorf+0x80>)
 8005bfa:	412e      	asrs	r6, r5
 8005bfc:	4230      	tst	r0, r6
 8005bfe:	d016      	beq.n	8005c2e <floorf+0x6e>
 8005c00:	490d      	ldr	r1, [pc, #52]	@ (8005c38 <floorf+0x78>)
 8005c02:	f7fa faa9 	bl	8000158 <__addsf3>
 8005c06:	2100      	movs	r1, #0
 8005c08:	f7fa fd6a 	bl	80006e0 <__aeabi_fcmpgt>
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d0f1      	beq.n	8005bf4 <floorf+0x34>
 8005c10:	2c00      	cmp	r4, #0
 8005c12:	bfbe      	ittt	lt
 8005c14:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8005c18:	412b      	asrlt	r3, r5
 8005c1a:	18e4      	addlt	r4, r4, r3
 8005c1c:	ea24 0406 	bic.w	r4, r4, r6
 8005c20:	e7e8      	b.n	8005bf4 <floorf+0x34>
 8005c22:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8005c26:	d302      	bcc.n	8005c2e <floorf+0x6e>
 8005c28:	f7fa fa96 	bl	8000158 <__addsf3>
 8005c2c:	4601      	mov	r1, r0
 8005c2e:	4608      	mov	r0, r1
 8005c30:	bd70      	pop	{r4, r5, r6, pc}
 8005c32:	2400      	movs	r4, #0
 8005c34:	e7de      	b.n	8005bf4 <floorf+0x34>
 8005c36:	bf00      	nop
 8005c38:	7149f2ca 	.word	0x7149f2ca
 8005c3c:	bf800000 	.word	0xbf800000
 8005c40:	007fffff 	.word	0x007fffff

08005c44 <_init>:
 8005c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c46:	bf00      	nop
 8005c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4a:	bc08      	pop	{r3}
 8005c4c:	469e      	mov	lr, r3
 8005c4e:	4770      	bx	lr

08005c50 <_fini>:
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	bf00      	nop
 8005c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c56:	bc08      	pop	{r3}
 8005c58:	469e      	mov	lr, r3
 8005c5a:	4770      	bx	lr
