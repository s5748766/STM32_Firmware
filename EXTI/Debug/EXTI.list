
EXTI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002518  08002518  00003518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002580  08002580  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002580  08002580  00004068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002580  08002580  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00003580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002584  08002584  00003584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002588  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080025f0  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080025f0  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d12  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f0  00000000  00000000  0000ada3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c8  00000000  00000000  0000c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001771a  00000000  00000000  0000ce7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ddf  00000000  00000000  00024599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d02  00000000  00000000  0002c378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b007a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a8  00000000  00000000  000b00c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b2268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002500 	.word	0x08002500

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002500 	.word	0x08002500

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa72 	bl	8000638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f806 	bl	8000164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f870 	bl	800023c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f844 	bl	80001e8 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000160:	bf00      	nop
 8000162:	e7fd      	b.n	8000160 <main+0x14>

08000164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000164:	b580      	push	{r7, lr}
 8000166:	b090      	sub	sp, #64	@ 0x40
 8000168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800016a:	f107 0318 	add.w	r3, r7, #24
 800016e:	2228      	movs	r2, #40	@ 0x28
 8000170:	2100      	movs	r1, #0
 8000172:	4618      	mov	r0, r3
 8000174:	f001 fba3 	bl	80018be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000178:	1d3b      	adds	r3, r7, #4
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
 800017e:	605a      	str	r2, [r3, #4]
 8000180:	609a      	str	r2, [r3, #8]
 8000182:	60da      	str	r2, [r3, #12]
 8000184:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000186:	2302      	movs	r3, #2
 8000188:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800018a:	2301      	movs	r3, #1
 800018c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800018e:	2310      	movs	r3, #16
 8000190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000192:	2302      	movs	r3, #2
 8000194:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000196:	2300      	movs	r3, #0
 8000198:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800019a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800019e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a0:	f107 0318 	add.w	r3, r7, #24
 80001a4:	4618      	mov	r0, r3
 80001a6:	f000 fd85 	bl	8000cb4 <HAL_RCC_OscConfig>
 80001aa:	4603      	mov	r3, r0
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d001      	beq.n	80001b4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001b0:	f000 f8c6 	bl	8000340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001b4:	230f      	movs	r3, #15
 80001b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001b8:	2302      	movs	r3, #2
 80001ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001bc:	2300      	movs	r3, #0
 80001be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	2102      	movs	r1, #2
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 fff2 	bl	80011b8 <HAL_RCC_ClockConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001da:	f000 f8b1 	bl	8000340 <Error_Handler>
  }
}
 80001de:	bf00      	nop
 80001e0:	3740      	adds	r7, #64	@ 0x40
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
	...

080001e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80001ec:	4b11      	ldr	r3, [pc, #68]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 80001ee:	4a12      	ldr	r2, [pc, #72]	@ (8000238 <MX_USART2_UART_Init+0x50>)
 80001f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80001f2:	4b10      	ldr	r3, [pc, #64]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 80001f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80001fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 8000202:	2200      	movs	r2, #0
 8000204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000206:	4b0b      	ldr	r3, [pc, #44]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 8000208:	2200      	movs	r2, #0
 800020a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800020c:	4b09      	ldr	r3, [pc, #36]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 800020e:	220c      	movs	r2, #12
 8000210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000212:	4b08      	ldr	r3, [pc, #32]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000218:	4b06      	ldr	r3, [pc, #24]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800021e:	4805      	ldr	r0, [pc, #20]	@ (8000234 <MX_USART2_UART_Init+0x4c>)
 8000220:	f001 f958 	bl	80014d4 <HAL_UART_Init>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800022a:	f000 f889 	bl	8000340 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800022e:	bf00      	nop
 8000230:	bd80      	pop	{r7, pc}
 8000232:	bf00      	nop
 8000234:	20000084 	.word	0x20000084
 8000238:	40004400 	.word	0x40004400

0800023c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000250:	4b2d      	ldr	r3, [pc, #180]	@ (8000308 <MX_GPIO_Init+0xcc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a2c      	ldr	r2, [pc, #176]	@ (8000308 <MX_GPIO_Init+0xcc>)
 8000256:	f043 0310 	orr.w	r3, r3, #16
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b2a      	ldr	r3, [pc, #168]	@ (8000308 <MX_GPIO_Init+0xcc>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0310 	and.w	r3, r3, #16
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000268:	4b27      	ldr	r3, [pc, #156]	@ (8000308 <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a26      	ldr	r2, [pc, #152]	@ (8000308 <MX_GPIO_Init+0xcc>)
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b24      	ldr	r3, [pc, #144]	@ (8000308 <MX_GPIO_Init+0xcc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0320 	and.w	r3, r3, #32
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000280:	4b21      	ldr	r3, [pc, #132]	@ (8000308 <MX_GPIO_Init+0xcc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a20      	ldr	r2, [pc, #128]	@ (8000308 <MX_GPIO_Init+0xcc>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b1e      	ldr	r3, [pc, #120]	@ (8000308 <MX_GPIO_Init+0xcc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0304 	and.w	r3, r3, #4
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000298:	4b1b      	ldr	r3, [pc, #108]	@ (8000308 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a1a      	ldr	r2, [pc, #104]	@ (8000308 <MX_GPIO_Init+0xcc>)
 800029e:	f043 0308 	orr.w	r3, r3, #8
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b18      	ldr	r3, [pc, #96]	@ (8000308 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0308 	and.w	r3, r3, #8
 80002ac:	603b      	str	r3, [r7, #0]
 80002ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2120      	movs	r1, #32
 80002b4:	4815      	ldr	r0, [pc, #84]	@ (800030c <MX_GPIO_Init+0xd0>)
 80002b6:	f000 fcb3 	bl	8000c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80002c0:	4b13      	ldr	r3, [pc, #76]	@ (8000310 <MX_GPIO_Init+0xd4>)
 80002c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002c8:	f107 0310 	add.w	r3, r7, #16
 80002cc:	4619      	mov	r1, r3
 80002ce:	4811      	ldr	r0, [pc, #68]	@ (8000314 <MX_GPIO_Init+0xd8>)
 80002d0:	f000 fb22 	bl	8000918 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002d4:	2320      	movs	r3, #32
 80002d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d8:	2301      	movs	r3, #1
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e0:	2302      	movs	r3, #2
 80002e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002e4:	f107 0310 	add.w	r3, r7, #16
 80002e8:	4619      	mov	r1, r3
 80002ea:	4808      	ldr	r0, [pc, #32]	@ (800030c <MX_GPIO_Init+0xd0>)
 80002ec:	f000 fb14 	bl	8000918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	2028      	movs	r0, #40	@ 0x28
 80002f6:	f000 fad8 	bl	80008aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002fa:	2028      	movs	r0, #40	@ 0x28
 80002fc:	f000 faf1 	bl	80008e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000300:	bf00      	nop
 8000302:	3720      	adds	r7, #32
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40021000 	.word	0x40021000
 800030c:	40010800 	.word	0x40010800
 8000310:	10310000 	.word	0x10310000
 8000314:	40011000 	.word	0x40011000

08000318 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000322:	88fb      	ldrh	r3, [r7, #6]
 8000324:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000328:	d104      	bne.n	8000334 <HAL_GPIO_EXTI_Callback+0x1c>
	{
	case B1_Pin:
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800032a:	2120      	movs	r1, #32
 800032c:	4803      	ldr	r0, [pc, #12]	@ (800033c <HAL_GPIO_EXTI_Callback+0x24>)
 800032e:	f000 fc8f 	bl	8000c50 <HAL_GPIO_TogglePin>
		break;
 8000332:	bf00      	nop

	default:
		;
	}
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40010800 	.word	0x40010800

08000340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000344:	b672      	cpsid	i
}
 8000346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error!");
 8000348:	4802      	ldr	r0, [pc, #8]	@ (8000354 <Error_Handler+0x14>)
 800034a:	f001 fa63 	bl	8001814 <iprintf>
  {
 800034e:	bf00      	nop
 8000350:	e7fa      	b.n	8000348 <Error_Handler+0x8>
 8000352:	bf00      	nop
 8000354:	08002518 	.word	0x08002518

08000358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800035e:	4b15      	ldr	r3, [pc, #84]	@ (80003b4 <HAL_MspInit+0x5c>)
 8000360:	699b      	ldr	r3, [r3, #24]
 8000362:	4a14      	ldr	r2, [pc, #80]	@ (80003b4 <HAL_MspInit+0x5c>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6193      	str	r3, [r2, #24]
 800036a:	4b12      	ldr	r3, [pc, #72]	@ (80003b4 <HAL_MspInit+0x5c>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	f003 0301 	and.w	r3, r3, #1
 8000372:	60bb      	str	r3, [r7, #8]
 8000374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000376:	4b0f      	ldr	r3, [pc, #60]	@ (80003b4 <HAL_MspInit+0x5c>)
 8000378:	69db      	ldr	r3, [r3, #28]
 800037a:	4a0e      	ldr	r2, [pc, #56]	@ (80003b4 <HAL_MspInit+0x5c>)
 800037c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000380:	61d3      	str	r3, [r2, #28]
 8000382:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <HAL_MspInit+0x5c>)
 8000384:	69db      	ldr	r3, [r3, #28]
 8000386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <HAL_MspInit+0x60>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800039a:	60fb      	str	r3, [r7, #12]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <HAL_MspInit+0x60>)
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	40010000 	.word	0x40010000

080003bc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b088      	sub	sp, #32
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	2200      	movs	r2, #0
 80003ca:	601a      	str	r2, [r3, #0]
 80003cc:	605a      	str	r2, [r3, #4]
 80003ce:	609a      	str	r2, [r3, #8]
 80003d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	4a15      	ldr	r2, [pc, #84]	@ (800042c <HAL_UART_MspInit+0x70>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d123      	bne.n	8000424 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003dc:	4b14      	ldr	r3, [pc, #80]	@ (8000430 <HAL_UART_MspInit+0x74>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a13      	ldr	r2, [pc, #76]	@ (8000430 <HAL_UART_MspInit+0x74>)
 80003e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e6:	61d3      	str	r3, [r2, #28]
 80003e8:	4b11      	ldr	r3, [pc, #68]	@ (8000430 <HAL_UART_MspInit+0x74>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000430 <HAL_UART_MspInit+0x74>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000430 <HAL_UART_MspInit+0x74>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b0b      	ldr	r3, [pc, #44]	@ (8000430 <HAL_UART_MspInit+0x74>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0304 	and.w	r3, r3, #4
 8000408:	60bb      	str	r3, [r7, #8]
 800040a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800040c:	230c      	movs	r3, #12
 800040e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000410:	2302      	movs	r3, #2
 8000412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000414:	2302      	movs	r3, #2
 8000416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	4805      	ldr	r0, [pc, #20]	@ (8000434 <HAL_UART_MspInit+0x78>)
 8000420:	f000 fa7a 	bl	8000918 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000424:	bf00      	nop
 8000426:	3720      	adds	r7, #32
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	40004400 	.word	0x40004400
 8000430:	40021000 	.word	0x40021000
 8000434:	40010800 	.word	0x40010800

08000438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <NMI_Handler+0x4>

08000440 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000444:	bf00      	nop
 8000446:	e7fd      	b.n	8000444 <HardFault_Handler+0x4>

08000448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <MemManage_Handler+0x4>

08000450 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <BusFault_Handler+0x4>

08000458 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <UsageFault_Handler+0x4>

08000460 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	bc80      	pop	{r7}
 8000476:	4770      	bx	lr

08000478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000488:	f000 f91c 	bl	80006c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}

08000490 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000494:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000498:	f000 fbf4 	bl	8000c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b086      	sub	sp, #24
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ac:	2300      	movs	r3, #0
 80004ae:	617b      	str	r3, [r7, #20]
 80004b0:	e00a      	b.n	80004c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004b2:	f3af 8000 	nop.w
 80004b6:	4601      	mov	r1, r0
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	1c5a      	adds	r2, r3, #1
 80004bc:	60ba      	str	r2, [r7, #8]
 80004be:	b2ca      	uxtb	r2, r1
 80004c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	3301      	adds	r3, #1
 80004c6:	617b      	str	r3, [r7, #20]
 80004c8:	697a      	ldr	r2, [r7, #20]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	dbf0      	blt.n	80004b2 <_read+0x12>
  }

  return len;
 80004d0:	687b      	ldr	r3, [r7, #4]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3718      	adds	r7, #24
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	60f8      	str	r0, [r7, #12]
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]
 80004ea:	e009      	b.n	8000500 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	1c5a      	adds	r2, r3, #1
 80004f0:	60ba      	str	r2, [r7, #8]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf1      	blt.n	80004ec <_write+0x12>
  }
  return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_close>:

int _close(int file)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800051a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000538:	605a      	str	r2, [r3, #4]
  return 0;
 800053a:	2300      	movs	r3, #0
}
 800053c:	4618      	mov	r0, r3
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <_isatty>:

int _isatty(int file)
{
 8000546:	b480      	push	{r7}
 8000548:	b083      	sub	sp, #12
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	bc80      	pop	{r7}
 8000558:	4770      	bx	lr

0800055a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800055a:	b480      	push	{r7}
 800055c:	b085      	sub	sp, #20
 800055e:	af00      	add	r7, sp, #0
 8000560:	60f8      	str	r0, [r7, #12]
 8000562:	60b9      	str	r1, [r7, #8]
 8000564:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	bc80      	pop	{r7}
 8000570:	4770      	bx	lr
	...

08000574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800057c:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <_sbrk+0x5c>)
 800057e:	4b15      	ldr	r3, [pc, #84]	@ (80005d4 <_sbrk+0x60>)
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000588:	4b13      	ldr	r3, [pc, #76]	@ (80005d8 <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <_sbrk+0x64>)
 8000592:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <_sbrk+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d207      	bcs.n	80005b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a4:	f001 f9da 	bl	800195c <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	e009      	b.n	80005c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b4:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ba:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	@ (80005d8 <_sbrk+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20005000 	.word	0x20005000
 80005d4:	00000400 	.word	0x00000400
 80005d8:	200000cc 	.word	0x200000cc
 80005dc:	20000220 	.word	0x20000220

080005e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bc80      	pop	{r7}
 80005ea:	4770      	bx	lr

080005ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005ec:	f7ff fff8 	bl	80005e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f0:	480b      	ldr	r0, [pc, #44]	@ (8000620 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005f2:	490c      	ldr	r1, [pc, #48]	@ (8000624 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f8:	e002      	b.n	8000600 <LoopCopyDataInit>

080005fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fe:	3304      	adds	r3, #4

08000600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000604:	d3f9      	bcc.n	80005fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000608:	4c09      	ldr	r4, [pc, #36]	@ (8000630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800060c:	e001      	b.n	8000612 <LoopFillZerobss>

0800060e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000610:	3204      	adds	r2, #4

08000612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000614:	d3fb      	bcc.n	800060e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000616:	f001 f9a7 	bl	8001968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800061a:	f7ff fd97 	bl	800014c <main>
  bx lr
 800061e:	4770      	bx	lr
  ldr r0, =_sdata
 8000620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000624:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000628:	08002588 	.word	0x08002588
  ldr r2, =_sbss
 800062c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000630:	20000220 	.word	0x20000220

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>
	...

08000638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800063c:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <HAL_Init+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a07      	ldr	r2, [pc, #28]	@ (8000660 <HAL_Init+0x28>)
 8000642:	f043 0310 	orr.w	r3, r3, #16
 8000646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000648:	2003      	movs	r0, #3
 800064a:	f000 f923 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064e:	2000      	movs	r0, #0
 8000650:	f000 f808 	bl	8000664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000654:	f7ff fe80 	bl	8000358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000658:	2300      	movs	r3, #0
}
 800065a:	4618      	mov	r0, r3
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40022000 	.word	0x40022000

08000664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800066c:	4b12      	ldr	r3, [pc, #72]	@ (80006b8 <HAL_InitTick+0x54>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <HAL_InitTick+0x58>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800067a:	fbb3 f3f1 	udiv	r3, r3, r1
 800067e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f93b 	bl	80008fe <HAL_SYSTICK_Config>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e00e      	b.n	80006b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d80a      	bhi.n	80006ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000698:	2200      	movs	r2, #0
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
 80006a0:	f000 f903 	bl	80008aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a4:	4a06      	ldr	r2, [pc, #24]	@ (80006c0 <HAL_InitTick+0x5c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006aa:	2300      	movs	r3, #0
 80006ac:	e000      	b.n	80006b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
}
 80006b0:	4618      	mov	r0, r3
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000000 	.word	0x20000000
 80006bc:	20000008 	.word	0x20000008
 80006c0:	20000004 	.word	0x20000004

080006c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c8:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_IncTick+0x1c>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <HAL_IncTick+0x20>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	4a03      	ldr	r2, [pc, #12]	@ (80006e4 <HAL_IncTick+0x20>)
 80006d6:	6013      	str	r3, [r2, #0]
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	20000008 	.word	0x20000008
 80006e4:	200000d0 	.word	0x200000d0

080006e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  return uwTick;
 80006ec:	4b02      	ldr	r3, [pc, #8]	@ (80006f8 <HAL_GetTick+0x10>)
 80006ee:	681b      	ldr	r3, [r3, #0]
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bc80      	pop	{r7}
 80006f6:	4770      	bx	lr
 80006f8:	200000d0 	.word	0x200000d0

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	@ (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db0b      	blt.n	800078a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	4906      	ldr	r1, [pc, #24]	@ (8000794 <__NVIC_EnableIRQ+0x34>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	095b      	lsrs	r3, r3, #5
 8000780:	2001      	movs	r0, #1
 8000782:	fa00 f202 	lsl.w	r2, r0, r2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	@ 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000860:	d301      	bcc.n	8000866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2301      	movs	r3, #1
 8000864:	e00f      	b.n	8000886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <SysTick_Config+0x40>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086e:	210f      	movs	r1, #15
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff ff90 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SysTick_Config+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Config+0x40>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff2d 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff42 	bl	8000744 <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff35 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffa2 	bl	8000850 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000918:	b480      	push	{r7}
 800091a:	b08b      	sub	sp, #44	@ 0x2c
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800092a:	e169      	b.n	8000c00 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800092c:	2201      	movs	r2, #1
 800092e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000940:	69ba      	ldr	r2, [r7, #24]
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	429a      	cmp	r2, r3
 8000946:	f040 8158 	bne.w	8000bfa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	4a9a      	ldr	r2, [pc, #616]	@ (8000bb8 <HAL_GPIO_Init+0x2a0>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d05e      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000954:	4a98      	ldr	r2, [pc, #608]	@ (8000bb8 <HAL_GPIO_Init+0x2a0>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d875      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 800095a:	4a98      	ldr	r2, [pc, #608]	@ (8000bbc <HAL_GPIO_Init+0x2a4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d058      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000960:	4a96      	ldr	r2, [pc, #600]	@ (8000bbc <HAL_GPIO_Init+0x2a4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d86f      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 8000966:	4a96      	ldr	r2, [pc, #600]	@ (8000bc0 <HAL_GPIO_Init+0x2a8>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d052      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 800096c:	4a94      	ldr	r2, [pc, #592]	@ (8000bc0 <HAL_GPIO_Init+0x2a8>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d869      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 8000972:	4a94      	ldr	r2, [pc, #592]	@ (8000bc4 <HAL_GPIO_Init+0x2ac>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d04c      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000978:	4a92      	ldr	r2, [pc, #584]	@ (8000bc4 <HAL_GPIO_Init+0x2ac>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d863      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 800097e:	4a92      	ldr	r2, [pc, #584]	@ (8000bc8 <HAL_GPIO_Init+0x2b0>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d046      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
 8000984:	4a90      	ldr	r2, [pc, #576]	@ (8000bc8 <HAL_GPIO_Init+0x2b0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d85d      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 800098a:	2b12      	cmp	r3, #18
 800098c:	d82a      	bhi.n	80009e4 <HAL_GPIO_Init+0xcc>
 800098e:	2b12      	cmp	r3, #18
 8000990:	d859      	bhi.n	8000a46 <HAL_GPIO_Init+0x12e>
 8000992:	a201      	add	r2, pc, #4	@ (adr r2, 8000998 <HAL_GPIO_Init+0x80>)
 8000994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000998:	08000a13 	.word	0x08000a13
 800099c:	080009ed 	.word	0x080009ed
 80009a0:	080009ff 	.word	0x080009ff
 80009a4:	08000a41 	.word	0x08000a41
 80009a8:	08000a47 	.word	0x08000a47
 80009ac:	08000a47 	.word	0x08000a47
 80009b0:	08000a47 	.word	0x08000a47
 80009b4:	08000a47 	.word	0x08000a47
 80009b8:	08000a47 	.word	0x08000a47
 80009bc:	08000a47 	.word	0x08000a47
 80009c0:	08000a47 	.word	0x08000a47
 80009c4:	08000a47 	.word	0x08000a47
 80009c8:	08000a47 	.word	0x08000a47
 80009cc:	08000a47 	.word	0x08000a47
 80009d0:	08000a47 	.word	0x08000a47
 80009d4:	08000a47 	.word	0x08000a47
 80009d8:	08000a47 	.word	0x08000a47
 80009dc:	080009f5 	.word	0x080009f5
 80009e0:	08000a09 	.word	0x08000a09
 80009e4:	4a79      	ldr	r2, [pc, #484]	@ (8000bcc <HAL_GPIO_Init+0x2b4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d013      	beq.n	8000a12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009ea:	e02c      	b.n	8000a46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	623b      	str	r3, [r7, #32]
          break;
 80009f2:	e029      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	3304      	adds	r3, #4
 80009fa:	623b      	str	r3, [r7, #32]
          break;
 80009fc:	e024      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	3308      	adds	r3, #8
 8000a04:	623b      	str	r3, [r7, #32]
          break;
 8000a06:	e01f      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	330c      	adds	r3, #12
 8000a0e:	623b      	str	r3, [r7, #32]
          break;
 8000a10:	e01a      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d102      	bne.n	8000a20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	623b      	str	r3, [r7, #32]
          break;
 8000a1e:	e013      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d105      	bne.n	8000a34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	611a      	str	r2, [r3, #16]
          break;
 8000a32:	e009      	b.n	8000a48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a34:	2308      	movs	r3, #8
 8000a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	615a      	str	r2, [r3, #20]
          break;
 8000a3e:	e003      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
          break;
 8000a44:	e000      	b.n	8000a48 <HAL_GPIO_Init+0x130>
          break;
 8000a46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d801      	bhi.n	8000a52 <HAL_GPIO_Init+0x13a>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	e001      	b.n	8000a56 <HAL_GPIO_Init+0x13e>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3304      	adds	r3, #4
 8000a56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2bff      	cmp	r3, #255	@ 0xff
 8000a5c:	d802      	bhi.n	8000a64 <HAL_GPIO_Init+0x14c>
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	e002      	b.n	8000a6a <HAL_GPIO_Init+0x152>
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	3b08      	subs	r3, #8
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	210f      	movs	r1, #15
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	fa01 f303 	lsl.w	r3, r1, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	401a      	ands	r2, r3
 8000a7c:	6a39      	ldr	r1, [r7, #32]
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	431a      	orrs	r2, r3
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 80b1 	beq.w	8000bfa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a98:	4b4d      	ldr	r3, [pc, #308]	@ (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd0 <HAL_GPIO_Init+0x2b8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ab0:	4a48      	ldr	r2, [pc, #288]	@ (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	3302      	adds	r3, #2
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	f003 0303 	and.w	r3, r3, #3
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	220f      	movs	r2, #15
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	43db      	mvns	r3, r3
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a40      	ldr	r2, [pc, #256]	@ (8000bd8 <HAL_GPIO_Init+0x2c0>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d013      	beq.n	8000b04 <HAL_GPIO_Init+0x1ec>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3f      	ldr	r2, [pc, #252]	@ (8000bdc <HAL_GPIO_Init+0x2c4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d00d      	beq.n	8000b00 <HAL_GPIO_Init+0x1e8>
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8000be0 <HAL_GPIO_Init+0x2c8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d007      	beq.n	8000afc <HAL_GPIO_Init+0x1e4>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	4a3d      	ldr	r2, [pc, #244]	@ (8000be4 <HAL_GPIO_Init+0x2cc>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d101      	bne.n	8000af8 <HAL_GPIO_Init+0x1e0>
 8000af4:	2303      	movs	r3, #3
 8000af6:	e006      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000af8:	2304      	movs	r3, #4
 8000afa:	e004      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000afc:	2302      	movs	r3, #2
 8000afe:	e002      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000b00:	2301      	movs	r3, #1
 8000b02:	e000      	b.n	8000b06 <HAL_GPIO_Init+0x1ee>
 8000b04:	2300      	movs	r3, #0
 8000b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b08:	f002 0203 	and.w	r2, r2, #3
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	4093      	lsls	r3, r2
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b16:	492f      	ldr	r1, [pc, #188]	@ (8000bd4 <HAL_GPIO_Init+0x2bc>)
 8000b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1a:	089b      	lsrs	r3, r3, #2
 8000b1c:	3302      	adds	r3, #2
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d006      	beq.n	8000b3e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b30:	4b2d      	ldr	r3, [pc, #180]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	492c      	ldr	r1, [pc, #176]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
 8000b3c:	e006      	b.n	8000b4c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	43db      	mvns	r3, r3
 8000b46:	4928      	ldr	r1, [pc, #160]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b48:	4013      	ands	r3, r2
 8000b4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b58:	4b23      	ldr	r3, [pc, #140]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	4922      	ldr	r1, [pc, #136]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b66:	4b20      	ldr	r3, [pc, #128]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b68:	68da      	ldr	r2, [r3, #12]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	491e      	ldr	r1, [pc, #120]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b80:	4b19      	ldr	r3, [pc, #100]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	4918      	ldr	r1, [pc, #96]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b8e:	4b16      	ldr	r3, [pc, #88]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4914      	ldr	r1, [pc, #80]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d021      	beq.n	8000bec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	490e      	ldr	r1, [pc, #56]	@ (8000be8 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	600b      	str	r3, [r1, #0]
 8000bb4:	e021      	b.n	8000bfa <HAL_GPIO_Init+0x2e2>
 8000bb6:	bf00      	nop
 8000bb8:	10320000 	.word	0x10320000
 8000bbc:	10310000 	.word	0x10310000
 8000bc0:	10220000 	.word	0x10220000
 8000bc4:	10210000 	.word	0x10210000
 8000bc8:	10120000 	.word	0x10120000
 8000bcc:	10110000 	.word	0x10110000
 8000bd0:	40021000 	.word	0x40021000
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	40010c00 	.word	0x40010c00
 8000be0:	40011000 	.word	0x40011000
 8000be4:	40011400 	.word	0x40011400
 8000be8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <HAL_GPIO_Init+0x304>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4909      	ldr	r1, [pc, #36]	@ (8000c1c <HAL_GPIO_Init+0x304>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c06:	fa22 f303 	lsr.w	r3, r2, r3
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	f47f ae8e 	bne.w	800092c <HAL_GPIO_Init+0x14>
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	372c      	adds	r7, #44	@ 0x2c
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bc80      	pop	{r7}
 8000c1a:	4770      	bx	lr
 8000c1c:	40010400 	.word	0x40010400

08000c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c30:	787b      	ldrb	r3, [r7, #1]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c36:	887a      	ldrh	r2, [r7, #2]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c3c:	e003      	b.n	8000c46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c3e:	887b      	ldrh	r3, [r7, #2]
 8000c40:	041a      	lsls	r2, r3, #16
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	611a      	str	r2, [r3, #16]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c62:	887a      	ldrh	r2, [r7, #2]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	4013      	ands	r3, r2
 8000c68:	041a      	lsls	r2, r3, #16
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43d9      	mvns	r1, r3
 8000c6e:	887b      	ldrh	r3, [r7, #2]
 8000c70:	400b      	ands	r3, r1
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	611a      	str	r2, [r3, #16]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
	...

08000c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c90:	695a      	ldr	r2, [r3, #20]
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	4013      	ands	r3, r2
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fb38 	bl	8000318 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40010400 	.word	0x40010400

08000cb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e272      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 8087 	beq.w	8000de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cd4:	4b92      	ldr	r3, [pc, #584]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 030c 	and.w	r3, r3, #12
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d00c      	beq.n	8000cfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ce0:	4b8f      	ldr	r3, [pc, #572]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
 8000ce8:	2b08      	cmp	r3, #8
 8000cea:	d112      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5e>
 8000cec:	4b8c      	ldr	r3, [pc, #560]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cf8:	d10b      	bne.n	8000d12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cfa:	4b89      	ldr	r3, [pc, #548]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d06c      	beq.n	8000de0 <HAL_RCC_OscConfig+0x12c>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d168      	bne.n	8000de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e24c      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d1a:	d106      	bne.n	8000d2a <HAL_RCC_OscConfig+0x76>
 8000d1c:	4b80      	ldr	r3, [pc, #512]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a7f      	ldr	r2, [pc, #508]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	e02e      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <HAL_RCC_OscConfig+0x98>
 8000d32:	4b7b      	ldr	r3, [pc, #492]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a7a      	ldr	r2, [pc, #488]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	4b78      	ldr	r3, [pc, #480]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a77      	ldr	r2, [pc, #476]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d48:	6013      	str	r3, [r2, #0]
 8000d4a:	e01d      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d54:	d10c      	bne.n	8000d70 <HAL_RCC_OscConfig+0xbc>
 8000d56:	4b72      	ldr	r3, [pc, #456]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a71      	ldr	r2, [pc, #452]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b6f      	ldr	r3, [pc, #444]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a6e      	ldr	r2, [pc, #440]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	e00b      	b.n	8000d88 <HAL_RCC_OscConfig+0xd4>
 8000d70:	4b6b      	ldr	r3, [pc, #428]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a6a      	ldr	r2, [pc, #424]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d7a:	6013      	str	r3, [r2, #0]
 8000d7c:	4b68      	ldr	r3, [pc, #416]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a67      	ldr	r2, [pc, #412]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d013      	beq.n	8000db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d90:	f7ff fcaa 	bl	80006e8 <HAL_GetTick>
 8000d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d96:	e008      	b.n	8000daa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d98:	f7ff fca6 	bl	80006e8 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b64      	cmp	r3, #100	@ 0x64
 8000da4:	d901      	bls.n	8000daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000da6:	2303      	movs	r3, #3
 8000da8:	e200      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000daa:	4b5d      	ldr	r3, [pc, #372]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f0      	beq.n	8000d98 <HAL_RCC_OscConfig+0xe4>
 8000db6:	e014      	b.n	8000de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc96 	bl	80006e8 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fc92 	bl	80006e8 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b64      	cmp	r3, #100	@ 0x64
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e1ec      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dd2:	4b53      	ldr	r3, [pc, #332]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f0      	bne.n	8000dc0 <HAL_RCC_OscConfig+0x10c>
 8000dde:	e000      	b.n	8000de2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d063      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000dee:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d00b      	beq.n	8000e12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000dfa:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d11c      	bne.n	8000e40 <HAL_RCC_OscConfig+0x18c>
 8000e06:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d116      	bne.n	8000e40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e12:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d005      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d001      	beq.n	8000e2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e1c0      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	4939      	ldr	r1, [pc, #228]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e3e:	e03a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	691b      	ldr	r3, [r3, #16]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d020      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e48:	4b36      	ldr	r3, [pc, #216]	@ (8000f24 <HAL_RCC_OscConfig+0x270>)
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4e:	f7ff fc4b 	bl	80006e8 <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e56:	f7ff fc47 	bl	80006e8 <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e1a1      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e68:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	4927      	ldr	r1, [pc, #156]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	4313      	orrs	r3, r2
 8000e86:	600b      	str	r3, [r1, #0]
 8000e88:	e015      	b.n	8000eb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <HAL_RCC_OscConfig+0x270>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e90:	f7ff fc2a 	bl	80006e8 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e98:	f7ff fc26 	bl	80006e8 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e180      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d1f0      	bne.n	8000e98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 0308 	and.w	r3, r3, #8
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d03a      	beq.n	8000f38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d019      	beq.n	8000efe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed0:	f7ff fc0a 	bl	80006e8 <HAL_GetTick>
 8000ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ed6:	e008      	b.n	8000eea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ed8:	f7ff fc06 	bl	80006e8 <HAL_GetTick>
 8000edc:	4602      	mov	r2, r0
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	1ad3      	subs	r3, r2, r3
 8000ee2:	2b02      	cmp	r3, #2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e160      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0f0      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f000 face 	bl	8001498 <RCC_Delay>
 8000efc:	e01c      	b.n	8000f38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000efe:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <HAL_RCC_OscConfig+0x274>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fbf0 	bl	80006e8 <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f0a:	e00f      	b.n	8000f2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fbec 	bl	80006e8 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d908      	bls.n	8000f2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e146      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8000f1e:	bf00      	nop
 8000f20:	40021000 	.word	0x40021000
 8000f24:	42420000 	.word	0x42420000
 8000f28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f2c:	4b92      	ldr	r3, [pc, #584]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1e9      	bne.n	8000f0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f000 80a6 	beq.w	8001092 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10d      	bne.n	8000f72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	4b88      	ldr	r3, [pc, #544]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a87      	ldr	r2, [pc, #540]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b85      	ldr	r3, [pc, #532]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f72:	4b82      	ldr	r3, [pc, #520]	@ (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d118      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a7e      	ldr	r2, [pc, #504]	@ (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f8a:	f7ff fbad 	bl	80006e8 <HAL_GetTick>
 8000f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f90:	e008      	b.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f92:	f7ff fba9 	bl	80006e8 <HAL_GetTick>
 8000f96:	4602      	mov	r2, r0
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	2b64      	cmp	r3, #100	@ 0x64
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e103      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa4:	4b75      	ldr	r3, [pc, #468]	@ (800117c <HAL_RCC_OscConfig+0x4c8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0f0      	beq.n	8000f92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d106      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x312>
 8000fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6213      	str	r3, [r2, #32]
 8000fc4:	e02d      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x334>
 8000fce:	4b6a      	ldr	r3, [pc, #424]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	6a1b      	ldr	r3, [r3, #32]
 8000fd2:	4a69      	ldr	r2, [pc, #420]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	6213      	str	r3, [r2, #32]
 8000fda:	4b67      	ldr	r3, [pc, #412]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	6a1b      	ldr	r3, [r3, #32]
 8000fde:	4a66      	ldr	r2, [pc, #408]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6213      	str	r3, [r2, #32]
 8000fe6:	e01c      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	d10c      	bne.n	800100a <HAL_RCC_OscConfig+0x356>
 8000ff0:	4b61      	ldr	r3, [pc, #388]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a60      	ldr	r2, [pc, #384]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a5d      	ldr	r2, [pc, #372]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	e00b      	b.n	8001022 <HAL_RCC_OscConfig+0x36e>
 800100a:	4b5b      	ldr	r3, [pc, #364]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a5a      	ldr	r2, [pc, #360]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	4b58      	ldr	r3, [pc, #352]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a57      	ldr	r2, [pc, #348]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d015      	beq.n	8001056 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102a:	f7ff fb5d 	bl	80006e8 <HAL_GetTick>
 800102e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001030:	e00a      	b.n	8001048 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001032:	f7ff fb59 	bl	80006e8 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001040:	4293      	cmp	r3, r2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e0b1      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001048:	4b4b      	ldr	r3, [pc, #300]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0ee      	beq.n	8001032 <HAL_RCC_OscConfig+0x37e>
 8001054:	e014      	b.n	8001080 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb47 	bl	80006e8 <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800105c:	e00a      	b.n	8001074 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800105e:	f7ff fb43 	bl	80006e8 <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106c:	4293      	cmp	r3, r2
 800106e:	d901      	bls.n	8001074 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e09b      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001074:	4b40      	ldr	r3, [pc, #256]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d1ee      	bne.n	800105e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d105      	bne.n	8001092 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001086:	4b3c      	ldr	r3, [pc, #240]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a3b      	ldr	r2, [pc, #236]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001090:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8087 	beq.w	80011aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800109c:	4b36      	ldr	r3, [pc, #216]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d061      	beq.n	800116c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69db      	ldr	r3, [r3, #28]
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d146      	bne.n	800113e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b0:	4b33      	ldr	r3, [pc, #204]	@ (8001180 <HAL_RCC_OscConfig+0x4cc>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b6:	f7ff fb17 	bl	80006e8 <HAL_GetTick>
 80010ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010bc:	e008      	b.n	80010d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010be:	f7ff fb13 	bl	80006e8 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d901      	bls.n	80010d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010cc:	2303      	movs	r3, #3
 80010ce:	e06d      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d0:	4b29      	ldr	r3, [pc, #164]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1f0      	bne.n	80010be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e4:	d108      	bne.n	80010f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80010e6:	4b24      	ldr	r3, [pc, #144]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	4921      	ldr	r1, [pc, #132]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6a19      	ldr	r1, [r3, #32]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	430b      	orrs	r3, r1
 800110a:	491b      	ldr	r1, [pc, #108]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <HAL_RCC_OscConfig+0x4cc>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fae7 	bl	80006e8 <HAL_GetTick>
 800111a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800111c:	e008      	b.n	8001130 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800111e:	f7ff fae3 	bl	80006e8 <HAL_GetTick>
 8001122:	4602      	mov	r2, r0
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e03d      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001130:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x46a>
 800113c:	e035      	b.n	80011aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800113e:	4b10      	ldr	r3, [pc, #64]	@ (8001180 <HAL_RCC_OscConfig+0x4cc>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fad0 	bl	80006e8 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114c:	f7ff facc 	bl	80006e8 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e026      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_RCC_OscConfig+0x4c4>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x498>
 800116a:	e01e      	b.n	80011aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	69db      	ldr	r3, [r3, #28]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d107      	bne.n	8001184 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	e019      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
 8001178:	40021000 	.word	0x40021000
 800117c:	40007000 	.word	0x40007000
 8001180:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <HAL_RCC_OscConfig+0x500>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a1b      	ldr	r3, [r3, #32]
 8001194:	429a      	cmp	r2, r3
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d001      	beq.n	80011aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e000      	b.n	80011ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021000 	.word	0x40021000

080011b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e0d0      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011cc:	4b6a      	ldr	r3, [pc, #424]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d910      	bls.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011da:	4b67      	ldr	r3, [pc, #412]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0207 	bic.w	r2, r3, #7
 80011e2:	4965      	ldr	r1, [pc, #404]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011ea:	4b63      	ldr	r3, [pc, #396]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	683a      	ldr	r2, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0b8      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d020      	beq.n	800124a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001214:	4b59      	ldr	r3, [pc, #356]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	4a58      	ldr	r2, [pc, #352]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800121a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800121e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0308 	and.w	r3, r3, #8
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800122c:	4b53      	ldr	r3, [pc, #332]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	4a52      	ldr	r2, [pc, #328]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001236:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001238:	4b50      	ldr	r3, [pc, #320]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	494d      	ldr	r1, [pc, #308]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	4313      	orrs	r3, r2
 8001248:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d040      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d107      	bne.n	800126e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b47      	ldr	r3, [pc, #284]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d115      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e07f      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d107      	bne.n	8001286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001276:	4b41      	ldr	r3, [pc, #260]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e073      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001286:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06b      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001296:	4b39      	ldr	r3, [pc, #228]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f023 0203 	bic.w	r2, r3, #3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4936      	ldr	r1, [pc, #216]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a8:	f7ff fa1e 	bl	80006e8 <HAL_GetTick>
 80012ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff fa1a 	bl	80006e8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e053      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 020c 	and.w	r2, r3, #12
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d1eb      	bne.n	80012b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0307 	and.w	r3, r3, #7
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d210      	bcs.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e6:	4b24      	ldr	r3, [pc, #144]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f023 0207 	bic.w	r2, r3, #7
 80012ee:	4922      	ldr	r1, [pc, #136]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012f6:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <HAL_RCC_ClockConfig+0x1c0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e032      	b.n	800136e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	2b00      	cmp	r3, #0
 8001312:	d008      	beq.n	8001326 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001314:	4b19      	ldr	r3, [pc, #100]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	4916      	ldr	r1, [pc, #88]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0308 	and.w	r3, r3, #8
 800132e:	2b00      	cmp	r3, #0
 8001330:	d009      	beq.n	8001346 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001332:	4b12      	ldr	r3, [pc, #72]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	490e      	ldr	r1, [pc, #56]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001346:	f000 f821 	bl	800138c <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	490a      	ldr	r1, [pc, #40]	@ (8001380 <HAL_RCC_ClockConfig+0x1c8>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <HAL_RCC_ClockConfig+0x1cc>)
 8001360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001362:	4b09      	ldr	r3, [pc, #36]	@ (8001388 <HAL_RCC_ClockConfig+0x1d0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f97c 	bl	8000664 <HAL_InitTick>

  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40022000 	.word	0x40022000
 800137c:	40021000 	.word	0x40021000
 8001380:	08002520 	.word	0x08002520
 8001384:	20000000 	.word	0x20000000
 8001388:	20000004 	.word	0x20000004

0800138c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001420 <HAL_RCC_GetSysClockFreq+0x94>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 030c 	and.w	r3, r3, #12
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d002      	beq.n	80013bc <HAL_RCC_GetSysClockFreq+0x30>
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ba:	e027      	b.n	800140c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x98>)
 80013be:	613b      	str	r3, [r7, #16]
      break;
 80013c0:	e027      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	0c9b      	lsrs	r3, r3, #18
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013cc:	5cd3      	ldrb	r3, [r2, r3]
 80013ce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d010      	beq.n	80013fc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013da:	4b11      	ldr	r3, [pc, #68]	@ (8001420 <HAL_RCC_GetSysClockFreq+0x94>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	4a11      	ldr	r2, [pc, #68]	@ (800142c <HAL_RCC_GetSysClockFreq+0xa0>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	fb03 f202 	mul.w	r2, r3, r2
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	e004      	b.n	8001406 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001400:	fb02 f303 	mul.w	r3, r2, r3
 8001404:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	613b      	str	r3, [r7, #16]
      break;
 800140a:	e002      	b.n	8001412 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_RCC_GetSysClockFreq+0x98>)
 800140e:	613b      	str	r3, [r7, #16]
      break;
 8001410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001412:	693b      	ldr	r3, [r7, #16]
}
 8001414:	4618      	mov	r0, r3
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	007a1200 	.word	0x007a1200
 8001428:	08002538 	.word	0x08002538
 800142c:	08002548 	.word	0x08002548
 8001430:	003d0900 	.word	0x003d0900

08001434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001438:	4b02      	ldr	r3, [pc, #8]	@ (8001444 <HAL_RCC_GetHCLKFreq+0x10>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	20000000 	.word	0x20000000

08001448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800144c:	f7ff fff2 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001450:	4602      	mov	r2, r0
 8001452:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	4903      	ldr	r1, [pc, #12]	@ (800146c <HAL_RCC_GetPCLK1Freq+0x24>)
 800145e:	5ccb      	ldrb	r3, [r1, r3]
 8001460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001464:	4618      	mov	r0, r3
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	08002530 	.word	0x08002530

08001470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001474:	f7ff ffde 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001478:	4602      	mov	r2, r0
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	0adb      	lsrs	r3, r3, #11
 8001480:	f003 0307 	and.w	r3, r3, #7
 8001484:	4903      	ldr	r1, [pc, #12]	@ (8001494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001486:	5ccb      	ldrb	r3, [r1, r3]
 8001488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	08002530 	.word	0x08002530

08001498 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <RCC_Delay+0x34>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <RCC_Delay+0x38>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	0a5b      	lsrs	r3, r3, #9
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	fb02 f303 	mul.w	r3, r2, r3
 80014b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014b4:	bf00      	nop
  }
  while (Delay --);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1e5a      	subs	r2, r3, #1
 80014ba:	60fa      	str	r2, [r7, #12]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d1f9      	bne.n	80014b4 <RCC_Delay+0x1c>
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	20000000 	.word	0x20000000
 80014d0:	10624dd3 	.word	0x10624dd3

080014d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e042      	b.n	800156c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7fe ff5e 	bl	80003bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2224      	movs	r2, #36	@ 0x24
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f82b 	bl	8001574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800152c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800153c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800154c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2200      	movs	r2, #0
 8001552:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2220      	movs	r2, #32
 8001560:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015ae:	f023 030c 	bic.w	r3, r3, #12
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	430a      	orrs	r2, r1
 80015d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001688 <UART_SetConfig+0x114>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d103      	bne.n	80015e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015dc:	f7ff ff48 	bl	8001470 <HAL_RCC_GetPCLK2Freq>
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	e002      	b.n	80015ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80015e4:	f7ff ff30 	bl	8001448 <HAL_RCC_GetPCLK1Freq>
 80015e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	009a      	lsls	r2, r3, #2
 80015f4:	441a      	add	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001600:	4a22      	ldr	r2, [pc, #136]	@ (800168c <UART_SetConfig+0x118>)
 8001602:	fba2 2303 	umull	r2, r3, r2, r3
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	0119      	lsls	r1, r3, #4
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	4613      	mov	r3, r2
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4413      	add	r3, r2
 8001612:	009a      	lsls	r2, r3, #2
 8001614:	441a      	add	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <UART_SetConfig+0x118>)
 8001622:	fba3 0302 	umull	r0, r3, r3, r2
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2064      	movs	r0, #100	@ 0x64
 800162a:	fb00 f303 	mul.w	r3, r0, r3
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	3332      	adds	r3, #50	@ 0x32
 8001634:	4a15      	ldr	r2, [pc, #84]	@ (800168c <UART_SetConfig+0x118>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001640:	4419      	add	r1, r3
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	009a      	lsls	r2, r3, #2
 800164c:	441a      	add	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fbb2 f2f3 	udiv	r2, r2, r3
 8001658:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <UART_SetConfig+0x118>)
 800165a:	fba3 0302 	umull	r0, r3, r3, r2
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2064      	movs	r0, #100	@ 0x64
 8001662:	fb00 f303 	mul.w	r3, r0, r3
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	3332      	adds	r3, #50	@ 0x32
 800166c:	4a07      	ldr	r2, [pc, #28]	@ (800168c <UART_SetConfig+0x118>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	f003 020f 	and.w	r2, r3, #15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	440a      	add	r2, r1
 800167e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013800 	.word	0x40013800
 800168c:	51eb851f 	.word	0x51eb851f

08001690 <std>:
 8001690:	2300      	movs	r3, #0
 8001692:	b510      	push	{r4, lr}
 8001694:	4604      	mov	r4, r0
 8001696:	e9c0 3300 	strd	r3, r3, [r0]
 800169a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800169e:	6083      	str	r3, [r0, #8]
 80016a0:	8181      	strh	r1, [r0, #12]
 80016a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80016a4:	81c2      	strh	r2, [r0, #14]
 80016a6:	6183      	str	r3, [r0, #24]
 80016a8:	4619      	mov	r1, r3
 80016aa:	2208      	movs	r2, #8
 80016ac:	305c      	adds	r0, #92	@ 0x5c
 80016ae:	f000 f906 	bl	80018be <memset>
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <std+0x58>)
 80016b4:	6224      	str	r4, [r4, #32]
 80016b6:	6263      	str	r3, [r4, #36]	@ 0x24
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <std+0x5c>)
 80016ba:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <std+0x60>)
 80016be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016c0:	4b0c      	ldr	r3, [pc, #48]	@ (80016f4 <std+0x64>)
 80016c2:	6323      	str	r3, [r4, #48]	@ 0x30
 80016c4:	4b0c      	ldr	r3, [pc, #48]	@ (80016f8 <std+0x68>)
 80016c6:	429c      	cmp	r4, r3
 80016c8:	d006      	beq.n	80016d8 <std+0x48>
 80016ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016ce:	4294      	cmp	r4, r2
 80016d0:	d002      	beq.n	80016d8 <std+0x48>
 80016d2:	33d0      	adds	r3, #208	@ 0xd0
 80016d4:	429c      	cmp	r4, r3
 80016d6:	d105      	bne.n	80016e4 <std+0x54>
 80016d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016e0:	f000 b966 	b.w	80019b0 <__retarget_lock_init_recursive>
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	08001839 	.word	0x08001839
 80016ec:	0800185b 	.word	0x0800185b
 80016f0:	08001893 	.word	0x08001893
 80016f4:	080018b7 	.word	0x080018b7
 80016f8:	200000d4 	.word	0x200000d4

080016fc <stdio_exit_handler>:
 80016fc:	4a02      	ldr	r2, [pc, #8]	@ (8001708 <stdio_exit_handler+0xc>)
 80016fe:	4903      	ldr	r1, [pc, #12]	@ (800170c <stdio_exit_handler+0x10>)
 8001700:	4803      	ldr	r0, [pc, #12]	@ (8001710 <stdio_exit_handler+0x14>)
 8001702:	f000 b869 	b.w	80017d8 <_fwalk_sglue>
 8001706:	bf00      	nop
 8001708:	2000000c 	.word	0x2000000c
 800170c:	08002245 	.word	0x08002245
 8001710:	2000001c 	.word	0x2000001c

08001714 <cleanup_stdio>:
 8001714:	6841      	ldr	r1, [r0, #4]
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <cleanup_stdio+0x34>)
 8001718:	b510      	push	{r4, lr}
 800171a:	4299      	cmp	r1, r3
 800171c:	4604      	mov	r4, r0
 800171e:	d001      	beq.n	8001724 <cleanup_stdio+0x10>
 8001720:	f000 fd90 	bl	8002244 <_fflush_r>
 8001724:	68a1      	ldr	r1, [r4, #8]
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <cleanup_stdio+0x38>)
 8001728:	4299      	cmp	r1, r3
 800172a:	d002      	beq.n	8001732 <cleanup_stdio+0x1e>
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd89 	bl	8002244 <_fflush_r>
 8001732:	68e1      	ldr	r1, [r4, #12]
 8001734:	4b06      	ldr	r3, [pc, #24]	@ (8001750 <cleanup_stdio+0x3c>)
 8001736:	4299      	cmp	r1, r3
 8001738:	d004      	beq.n	8001744 <cleanup_stdio+0x30>
 800173a:	4620      	mov	r0, r4
 800173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001740:	f000 bd80 	b.w	8002244 <_fflush_r>
 8001744:	bd10      	pop	{r4, pc}
 8001746:	bf00      	nop
 8001748:	200000d4 	.word	0x200000d4
 800174c:	2000013c 	.word	0x2000013c
 8001750:	200001a4 	.word	0x200001a4

08001754 <global_stdio_init.part.0>:
 8001754:	b510      	push	{r4, lr}
 8001756:	4b0b      	ldr	r3, [pc, #44]	@ (8001784 <global_stdio_init.part.0+0x30>)
 8001758:	4c0b      	ldr	r4, [pc, #44]	@ (8001788 <global_stdio_init.part.0+0x34>)
 800175a:	4a0c      	ldr	r2, [pc, #48]	@ (800178c <global_stdio_init.part.0+0x38>)
 800175c:	4620      	mov	r0, r4
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	2104      	movs	r1, #4
 8001762:	2200      	movs	r2, #0
 8001764:	f7ff ff94 	bl	8001690 <std>
 8001768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800176c:	2201      	movs	r2, #1
 800176e:	2109      	movs	r1, #9
 8001770:	f7ff ff8e 	bl	8001690 <std>
 8001774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001778:	2202      	movs	r2, #2
 800177a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800177e:	2112      	movs	r1, #18
 8001780:	f7ff bf86 	b.w	8001690 <std>
 8001784:	2000020c 	.word	0x2000020c
 8001788:	200000d4 	.word	0x200000d4
 800178c:	080016fd 	.word	0x080016fd

08001790 <__sfp_lock_acquire>:
 8001790:	4801      	ldr	r0, [pc, #4]	@ (8001798 <__sfp_lock_acquire+0x8>)
 8001792:	f000 b90e 	b.w	80019b2 <__retarget_lock_acquire_recursive>
 8001796:	bf00      	nop
 8001798:	20000215 	.word	0x20000215

0800179c <__sfp_lock_release>:
 800179c:	4801      	ldr	r0, [pc, #4]	@ (80017a4 <__sfp_lock_release+0x8>)
 800179e:	f000 b909 	b.w	80019b4 <__retarget_lock_release_recursive>
 80017a2:	bf00      	nop
 80017a4:	20000215 	.word	0x20000215

080017a8 <__sinit>:
 80017a8:	b510      	push	{r4, lr}
 80017aa:	4604      	mov	r4, r0
 80017ac:	f7ff fff0 	bl	8001790 <__sfp_lock_acquire>
 80017b0:	6a23      	ldr	r3, [r4, #32]
 80017b2:	b11b      	cbz	r3, 80017bc <__sinit+0x14>
 80017b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017b8:	f7ff bff0 	b.w	800179c <__sfp_lock_release>
 80017bc:	4b04      	ldr	r3, [pc, #16]	@ (80017d0 <__sinit+0x28>)
 80017be:	6223      	str	r3, [r4, #32]
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__sinit+0x2c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1f5      	bne.n	80017b4 <__sinit+0xc>
 80017c8:	f7ff ffc4 	bl	8001754 <global_stdio_init.part.0>
 80017cc:	e7f2      	b.n	80017b4 <__sinit+0xc>
 80017ce:	bf00      	nop
 80017d0:	08001715 	.word	0x08001715
 80017d4:	2000020c 	.word	0x2000020c

080017d8 <_fwalk_sglue>:
 80017d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017dc:	4607      	mov	r7, r0
 80017de:	4688      	mov	r8, r1
 80017e0:	4614      	mov	r4, r2
 80017e2:	2600      	movs	r6, #0
 80017e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017e8:	f1b9 0901 	subs.w	r9, r9, #1
 80017ec:	d505      	bpl.n	80017fa <_fwalk_sglue+0x22>
 80017ee:	6824      	ldr	r4, [r4, #0]
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d1f7      	bne.n	80017e4 <_fwalk_sglue+0xc>
 80017f4:	4630      	mov	r0, r6
 80017f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017fa:	89ab      	ldrh	r3, [r5, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d907      	bls.n	8001810 <_fwalk_sglue+0x38>
 8001800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001804:	3301      	adds	r3, #1
 8001806:	d003      	beq.n	8001810 <_fwalk_sglue+0x38>
 8001808:	4629      	mov	r1, r5
 800180a:	4638      	mov	r0, r7
 800180c:	47c0      	blx	r8
 800180e:	4306      	orrs	r6, r0
 8001810:	3568      	adds	r5, #104	@ 0x68
 8001812:	e7e9      	b.n	80017e8 <_fwalk_sglue+0x10>

08001814 <iprintf>:
 8001814:	b40f      	push	{r0, r1, r2, r3}
 8001816:	b507      	push	{r0, r1, r2, lr}
 8001818:	4906      	ldr	r1, [pc, #24]	@ (8001834 <iprintf+0x20>)
 800181a:	ab04      	add	r3, sp, #16
 800181c:	6808      	ldr	r0, [r1, #0]
 800181e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001822:	6881      	ldr	r1, [r0, #8]
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	f000 f9e5 	bl	8001bf4 <_vfiprintf_r>
 800182a:	b003      	add	sp, #12
 800182c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001830:	b004      	add	sp, #16
 8001832:	4770      	bx	lr
 8001834:	20000018 	.word	0x20000018

08001838 <__sread>:
 8001838:	b510      	push	{r4, lr}
 800183a:	460c      	mov	r4, r1
 800183c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001840:	f000 f868 	bl	8001914 <_read_r>
 8001844:	2800      	cmp	r0, #0
 8001846:	bfab      	itete	ge
 8001848:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800184a:	89a3      	ldrhlt	r3, [r4, #12]
 800184c:	181b      	addge	r3, r3, r0
 800184e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001852:	bfac      	ite	ge
 8001854:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001856:	81a3      	strhlt	r3, [r4, #12]
 8001858:	bd10      	pop	{r4, pc}

0800185a <__swrite>:
 800185a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800185e:	461f      	mov	r7, r3
 8001860:	898b      	ldrh	r3, [r1, #12]
 8001862:	4605      	mov	r5, r0
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	460c      	mov	r4, r1
 8001868:	4616      	mov	r6, r2
 800186a:	d505      	bpl.n	8001878 <__swrite+0x1e>
 800186c:	2302      	movs	r3, #2
 800186e:	2200      	movs	r2, #0
 8001870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001874:	f000 f83c 	bl	80018f0 <_lseek_r>
 8001878:	89a3      	ldrh	r3, [r4, #12]
 800187a:	4632      	mov	r2, r6
 800187c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001880:	81a3      	strh	r3, [r4, #12]
 8001882:	4628      	mov	r0, r5
 8001884:	463b      	mov	r3, r7
 8001886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800188a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800188e:	f000 b853 	b.w	8001938 <_write_r>

08001892 <__sseek>:
 8001892:	b510      	push	{r4, lr}
 8001894:	460c      	mov	r4, r1
 8001896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800189a:	f000 f829 	bl	80018f0 <_lseek_r>
 800189e:	1c43      	adds	r3, r0, #1
 80018a0:	89a3      	ldrh	r3, [r4, #12]
 80018a2:	bf15      	itete	ne
 80018a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80018a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018ae:	81a3      	strheq	r3, [r4, #12]
 80018b0:	bf18      	it	ne
 80018b2:	81a3      	strhne	r3, [r4, #12]
 80018b4:	bd10      	pop	{r4, pc}

080018b6 <__sclose>:
 80018b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018ba:	f000 b809 	b.w	80018d0 <_close_r>

080018be <memset>:
 80018be:	4603      	mov	r3, r0
 80018c0:	4402      	add	r2, r0
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d100      	bne.n	80018c8 <memset+0xa>
 80018c6:	4770      	bx	lr
 80018c8:	f803 1b01 	strb.w	r1, [r3], #1
 80018cc:	e7f9      	b.n	80018c2 <memset+0x4>
	...

080018d0 <_close_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	2300      	movs	r3, #0
 80018d4:	4d05      	ldr	r5, [pc, #20]	@ (80018ec <_close_r+0x1c>)
 80018d6:	4604      	mov	r4, r0
 80018d8:	4608      	mov	r0, r1
 80018da:	602b      	str	r3, [r5, #0]
 80018dc:	f7fe fe19 	bl	8000512 <_close>
 80018e0:	1c43      	adds	r3, r0, #1
 80018e2:	d102      	bne.n	80018ea <_close_r+0x1a>
 80018e4:	682b      	ldr	r3, [r5, #0]
 80018e6:	b103      	cbz	r3, 80018ea <_close_r+0x1a>
 80018e8:	6023      	str	r3, [r4, #0]
 80018ea:	bd38      	pop	{r3, r4, r5, pc}
 80018ec:	20000210 	.word	0x20000210

080018f0 <_lseek_r>:
 80018f0:	b538      	push	{r3, r4, r5, lr}
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	2200      	movs	r2, #0
 80018fa:	4d05      	ldr	r5, [pc, #20]	@ (8001910 <_lseek_r+0x20>)
 80018fc:	602a      	str	r2, [r5, #0]
 80018fe:	461a      	mov	r2, r3
 8001900:	f7fe fe2b 	bl	800055a <_lseek>
 8001904:	1c43      	adds	r3, r0, #1
 8001906:	d102      	bne.n	800190e <_lseek_r+0x1e>
 8001908:	682b      	ldr	r3, [r5, #0]
 800190a:	b103      	cbz	r3, 800190e <_lseek_r+0x1e>
 800190c:	6023      	str	r3, [r4, #0]
 800190e:	bd38      	pop	{r3, r4, r5, pc}
 8001910:	20000210 	.word	0x20000210

08001914 <_read_r>:
 8001914:	b538      	push	{r3, r4, r5, lr}
 8001916:	4604      	mov	r4, r0
 8001918:	4608      	mov	r0, r1
 800191a:	4611      	mov	r1, r2
 800191c:	2200      	movs	r2, #0
 800191e:	4d05      	ldr	r5, [pc, #20]	@ (8001934 <_read_r+0x20>)
 8001920:	602a      	str	r2, [r5, #0]
 8001922:	461a      	mov	r2, r3
 8001924:	f7fe fdbc 	bl	80004a0 <_read>
 8001928:	1c43      	adds	r3, r0, #1
 800192a:	d102      	bne.n	8001932 <_read_r+0x1e>
 800192c:	682b      	ldr	r3, [r5, #0]
 800192e:	b103      	cbz	r3, 8001932 <_read_r+0x1e>
 8001930:	6023      	str	r3, [r4, #0]
 8001932:	bd38      	pop	{r3, r4, r5, pc}
 8001934:	20000210 	.word	0x20000210

08001938 <_write_r>:
 8001938:	b538      	push	{r3, r4, r5, lr}
 800193a:	4604      	mov	r4, r0
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	2200      	movs	r2, #0
 8001942:	4d05      	ldr	r5, [pc, #20]	@ (8001958 <_write_r+0x20>)
 8001944:	602a      	str	r2, [r5, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	f7fe fdc7 	bl	80004da <_write>
 800194c:	1c43      	adds	r3, r0, #1
 800194e:	d102      	bne.n	8001956 <_write_r+0x1e>
 8001950:	682b      	ldr	r3, [r5, #0]
 8001952:	b103      	cbz	r3, 8001956 <_write_r+0x1e>
 8001954:	6023      	str	r3, [r4, #0]
 8001956:	bd38      	pop	{r3, r4, r5, pc}
 8001958:	20000210 	.word	0x20000210

0800195c <__errno>:
 800195c:	4b01      	ldr	r3, [pc, #4]	@ (8001964 <__errno+0x8>)
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000018 	.word	0x20000018

08001968 <__libc_init_array>:
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	2600      	movs	r6, #0
 800196c:	4d0c      	ldr	r5, [pc, #48]	@ (80019a0 <__libc_init_array+0x38>)
 800196e:	4c0d      	ldr	r4, [pc, #52]	@ (80019a4 <__libc_init_array+0x3c>)
 8001970:	1b64      	subs	r4, r4, r5
 8001972:	10a4      	asrs	r4, r4, #2
 8001974:	42a6      	cmp	r6, r4
 8001976:	d109      	bne.n	800198c <__libc_init_array+0x24>
 8001978:	f000 fdc2 	bl	8002500 <_init>
 800197c:	2600      	movs	r6, #0
 800197e:	4d0a      	ldr	r5, [pc, #40]	@ (80019a8 <__libc_init_array+0x40>)
 8001980:	4c0a      	ldr	r4, [pc, #40]	@ (80019ac <__libc_init_array+0x44>)
 8001982:	1b64      	subs	r4, r4, r5
 8001984:	10a4      	asrs	r4, r4, #2
 8001986:	42a6      	cmp	r6, r4
 8001988:	d105      	bne.n	8001996 <__libc_init_array+0x2e>
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001990:	4798      	blx	r3
 8001992:	3601      	adds	r6, #1
 8001994:	e7ee      	b.n	8001974 <__libc_init_array+0xc>
 8001996:	f855 3b04 	ldr.w	r3, [r5], #4
 800199a:	4798      	blx	r3
 800199c:	3601      	adds	r6, #1
 800199e:	e7f2      	b.n	8001986 <__libc_init_array+0x1e>
 80019a0:	08002580 	.word	0x08002580
 80019a4:	08002580 	.word	0x08002580
 80019a8:	08002580 	.word	0x08002580
 80019ac:	08002584 	.word	0x08002584

080019b0 <__retarget_lock_init_recursive>:
 80019b0:	4770      	bx	lr

080019b2 <__retarget_lock_acquire_recursive>:
 80019b2:	4770      	bx	lr

080019b4 <__retarget_lock_release_recursive>:
 80019b4:	4770      	bx	lr
	...

080019b8 <_free_r>:
 80019b8:	b538      	push	{r3, r4, r5, lr}
 80019ba:	4605      	mov	r5, r0
 80019bc:	2900      	cmp	r1, #0
 80019be:	d040      	beq.n	8001a42 <_free_r+0x8a>
 80019c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019c4:	1f0c      	subs	r4, r1, #4
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bfb8      	it	lt
 80019ca:	18e4      	addlt	r4, r4, r3
 80019cc:	f000 f8de 	bl	8001b8c <__malloc_lock>
 80019d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001a44 <_free_r+0x8c>)
 80019d2:	6813      	ldr	r3, [r2, #0]
 80019d4:	b933      	cbnz	r3, 80019e4 <_free_r+0x2c>
 80019d6:	6063      	str	r3, [r4, #4]
 80019d8:	6014      	str	r4, [r2, #0]
 80019da:	4628      	mov	r0, r5
 80019dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019e0:	f000 b8da 	b.w	8001b98 <__malloc_unlock>
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	d908      	bls.n	80019fa <_free_r+0x42>
 80019e8:	6820      	ldr	r0, [r4, #0]
 80019ea:	1821      	adds	r1, r4, r0
 80019ec:	428b      	cmp	r3, r1
 80019ee:	bf01      	itttt	eq
 80019f0:	6819      	ldreq	r1, [r3, #0]
 80019f2:	685b      	ldreq	r3, [r3, #4]
 80019f4:	1809      	addeq	r1, r1, r0
 80019f6:	6021      	streq	r1, [r4, #0]
 80019f8:	e7ed      	b.n	80019d6 <_free_r+0x1e>
 80019fa:	461a      	mov	r2, r3
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	b10b      	cbz	r3, 8001a04 <_free_r+0x4c>
 8001a00:	42a3      	cmp	r3, r4
 8001a02:	d9fa      	bls.n	80019fa <_free_r+0x42>
 8001a04:	6811      	ldr	r1, [r2, #0]
 8001a06:	1850      	adds	r0, r2, r1
 8001a08:	42a0      	cmp	r0, r4
 8001a0a:	d10b      	bne.n	8001a24 <_free_r+0x6c>
 8001a0c:	6820      	ldr	r0, [r4, #0]
 8001a0e:	4401      	add	r1, r0
 8001a10:	1850      	adds	r0, r2, r1
 8001a12:	4283      	cmp	r3, r0
 8001a14:	6011      	str	r1, [r2, #0]
 8001a16:	d1e0      	bne.n	80019da <_free_r+0x22>
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	4408      	add	r0, r1
 8001a1e:	6010      	str	r0, [r2, #0]
 8001a20:	6053      	str	r3, [r2, #4]
 8001a22:	e7da      	b.n	80019da <_free_r+0x22>
 8001a24:	d902      	bls.n	8001a2c <_free_r+0x74>
 8001a26:	230c      	movs	r3, #12
 8001a28:	602b      	str	r3, [r5, #0]
 8001a2a:	e7d6      	b.n	80019da <_free_r+0x22>
 8001a2c:	6820      	ldr	r0, [r4, #0]
 8001a2e:	1821      	adds	r1, r4, r0
 8001a30:	428b      	cmp	r3, r1
 8001a32:	bf01      	itttt	eq
 8001a34:	6819      	ldreq	r1, [r3, #0]
 8001a36:	685b      	ldreq	r3, [r3, #4]
 8001a38:	1809      	addeq	r1, r1, r0
 8001a3a:	6021      	streq	r1, [r4, #0]
 8001a3c:	6063      	str	r3, [r4, #4]
 8001a3e:	6054      	str	r4, [r2, #4]
 8001a40:	e7cb      	b.n	80019da <_free_r+0x22>
 8001a42:	bd38      	pop	{r3, r4, r5, pc}
 8001a44:	2000021c 	.word	0x2000021c

08001a48 <sbrk_aligned>:
 8001a48:	b570      	push	{r4, r5, r6, lr}
 8001a4a:	4e0f      	ldr	r6, [pc, #60]	@ (8001a88 <sbrk_aligned+0x40>)
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	6831      	ldr	r1, [r6, #0]
 8001a50:	4605      	mov	r5, r0
 8001a52:	b911      	cbnz	r1, 8001a5a <sbrk_aligned+0x12>
 8001a54:	f000 fcb2 	bl	80023bc <_sbrk_r>
 8001a58:	6030      	str	r0, [r6, #0]
 8001a5a:	4621      	mov	r1, r4
 8001a5c:	4628      	mov	r0, r5
 8001a5e:	f000 fcad 	bl	80023bc <_sbrk_r>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d103      	bne.n	8001a6e <sbrk_aligned+0x26>
 8001a66:	f04f 34ff 	mov.w	r4, #4294967295
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	bd70      	pop	{r4, r5, r6, pc}
 8001a6e:	1cc4      	adds	r4, r0, #3
 8001a70:	f024 0403 	bic.w	r4, r4, #3
 8001a74:	42a0      	cmp	r0, r4
 8001a76:	d0f8      	beq.n	8001a6a <sbrk_aligned+0x22>
 8001a78:	1a21      	subs	r1, r4, r0
 8001a7a:	4628      	mov	r0, r5
 8001a7c:	f000 fc9e 	bl	80023bc <_sbrk_r>
 8001a80:	3001      	adds	r0, #1
 8001a82:	d1f2      	bne.n	8001a6a <sbrk_aligned+0x22>
 8001a84:	e7ef      	b.n	8001a66 <sbrk_aligned+0x1e>
 8001a86:	bf00      	nop
 8001a88:	20000218 	.word	0x20000218

08001a8c <_malloc_r>:
 8001a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a90:	1ccd      	adds	r5, r1, #3
 8001a92:	f025 0503 	bic.w	r5, r5, #3
 8001a96:	3508      	adds	r5, #8
 8001a98:	2d0c      	cmp	r5, #12
 8001a9a:	bf38      	it	cc
 8001a9c:	250c      	movcc	r5, #12
 8001a9e:	2d00      	cmp	r5, #0
 8001aa0:	4606      	mov	r6, r0
 8001aa2:	db01      	blt.n	8001aa8 <_malloc_r+0x1c>
 8001aa4:	42a9      	cmp	r1, r5
 8001aa6:	d904      	bls.n	8001ab2 <_malloc_r+0x26>
 8001aa8:	230c      	movs	r3, #12
 8001aaa:	6033      	str	r3, [r6, #0]
 8001aac:	2000      	movs	r0, #0
 8001aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ab2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001b88 <_malloc_r+0xfc>
 8001ab6:	f000 f869 	bl	8001b8c <__malloc_lock>
 8001aba:	f8d8 3000 	ldr.w	r3, [r8]
 8001abe:	461c      	mov	r4, r3
 8001ac0:	bb44      	cbnz	r4, 8001b14 <_malloc_r+0x88>
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	4630      	mov	r0, r6
 8001ac6:	f7ff ffbf 	bl	8001a48 <sbrk_aligned>
 8001aca:	1c43      	adds	r3, r0, #1
 8001acc:	4604      	mov	r4, r0
 8001ace:	d158      	bne.n	8001b82 <_malloc_r+0xf6>
 8001ad0:	f8d8 4000 	ldr.w	r4, [r8]
 8001ad4:	4627      	mov	r7, r4
 8001ad6:	2f00      	cmp	r7, #0
 8001ad8:	d143      	bne.n	8001b62 <_malloc_r+0xd6>
 8001ada:	2c00      	cmp	r4, #0
 8001adc:	d04b      	beq.n	8001b76 <_malloc_r+0xea>
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	4639      	mov	r1, r7
 8001ae2:	4630      	mov	r0, r6
 8001ae4:	eb04 0903 	add.w	r9, r4, r3
 8001ae8:	f000 fc68 	bl	80023bc <_sbrk_r>
 8001aec:	4581      	cmp	r9, r0
 8001aee:	d142      	bne.n	8001b76 <_malloc_r+0xea>
 8001af0:	6821      	ldr	r1, [r4, #0]
 8001af2:	4630      	mov	r0, r6
 8001af4:	1a6d      	subs	r5, r5, r1
 8001af6:	4629      	mov	r1, r5
 8001af8:	f7ff ffa6 	bl	8001a48 <sbrk_aligned>
 8001afc:	3001      	adds	r0, #1
 8001afe:	d03a      	beq.n	8001b76 <_malloc_r+0xea>
 8001b00:	6823      	ldr	r3, [r4, #0]
 8001b02:	442b      	add	r3, r5
 8001b04:	6023      	str	r3, [r4, #0]
 8001b06:	f8d8 3000 	ldr.w	r3, [r8]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	bb62      	cbnz	r2, 8001b68 <_malloc_r+0xdc>
 8001b0e:	f8c8 7000 	str.w	r7, [r8]
 8001b12:	e00f      	b.n	8001b34 <_malloc_r+0xa8>
 8001b14:	6822      	ldr	r2, [r4, #0]
 8001b16:	1b52      	subs	r2, r2, r5
 8001b18:	d420      	bmi.n	8001b5c <_malloc_r+0xd0>
 8001b1a:	2a0b      	cmp	r2, #11
 8001b1c:	d917      	bls.n	8001b4e <_malloc_r+0xc2>
 8001b1e:	1961      	adds	r1, r4, r5
 8001b20:	42a3      	cmp	r3, r4
 8001b22:	6025      	str	r5, [r4, #0]
 8001b24:	bf18      	it	ne
 8001b26:	6059      	strne	r1, [r3, #4]
 8001b28:	6863      	ldr	r3, [r4, #4]
 8001b2a:	bf08      	it	eq
 8001b2c:	f8c8 1000 	streq.w	r1, [r8]
 8001b30:	5162      	str	r2, [r4, r5]
 8001b32:	604b      	str	r3, [r1, #4]
 8001b34:	4630      	mov	r0, r6
 8001b36:	f000 f82f 	bl	8001b98 <__malloc_unlock>
 8001b3a:	f104 000b 	add.w	r0, r4, #11
 8001b3e:	1d23      	adds	r3, r4, #4
 8001b40:	f020 0007 	bic.w	r0, r0, #7
 8001b44:	1ac2      	subs	r2, r0, r3
 8001b46:	bf1c      	itt	ne
 8001b48:	1a1b      	subne	r3, r3, r0
 8001b4a:	50a3      	strne	r3, [r4, r2]
 8001b4c:	e7af      	b.n	8001aae <_malloc_r+0x22>
 8001b4e:	6862      	ldr	r2, [r4, #4]
 8001b50:	42a3      	cmp	r3, r4
 8001b52:	bf0c      	ite	eq
 8001b54:	f8c8 2000 	streq.w	r2, [r8]
 8001b58:	605a      	strne	r2, [r3, #4]
 8001b5a:	e7eb      	b.n	8001b34 <_malloc_r+0xa8>
 8001b5c:	4623      	mov	r3, r4
 8001b5e:	6864      	ldr	r4, [r4, #4]
 8001b60:	e7ae      	b.n	8001ac0 <_malloc_r+0x34>
 8001b62:	463c      	mov	r4, r7
 8001b64:	687f      	ldr	r7, [r7, #4]
 8001b66:	e7b6      	b.n	8001ad6 <_malloc_r+0x4a>
 8001b68:	461a      	mov	r2, r3
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	42a3      	cmp	r3, r4
 8001b6e:	d1fb      	bne.n	8001b68 <_malloc_r+0xdc>
 8001b70:	2300      	movs	r3, #0
 8001b72:	6053      	str	r3, [r2, #4]
 8001b74:	e7de      	b.n	8001b34 <_malloc_r+0xa8>
 8001b76:	230c      	movs	r3, #12
 8001b78:	4630      	mov	r0, r6
 8001b7a:	6033      	str	r3, [r6, #0]
 8001b7c:	f000 f80c 	bl	8001b98 <__malloc_unlock>
 8001b80:	e794      	b.n	8001aac <_malloc_r+0x20>
 8001b82:	6005      	str	r5, [r0, #0]
 8001b84:	e7d6      	b.n	8001b34 <_malloc_r+0xa8>
 8001b86:	bf00      	nop
 8001b88:	2000021c 	.word	0x2000021c

08001b8c <__malloc_lock>:
 8001b8c:	4801      	ldr	r0, [pc, #4]	@ (8001b94 <__malloc_lock+0x8>)
 8001b8e:	f7ff bf10 	b.w	80019b2 <__retarget_lock_acquire_recursive>
 8001b92:	bf00      	nop
 8001b94:	20000214 	.word	0x20000214

08001b98 <__malloc_unlock>:
 8001b98:	4801      	ldr	r0, [pc, #4]	@ (8001ba0 <__malloc_unlock+0x8>)
 8001b9a:	f7ff bf0b 	b.w	80019b4 <__retarget_lock_release_recursive>
 8001b9e:	bf00      	nop
 8001ba0:	20000214 	.word	0x20000214

08001ba4 <__sfputc_r>:
 8001ba4:	6893      	ldr	r3, [r2, #8]
 8001ba6:	b410      	push	{r4}
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	6093      	str	r3, [r2, #8]
 8001bae:	da07      	bge.n	8001bc0 <__sfputc_r+0x1c>
 8001bb0:	6994      	ldr	r4, [r2, #24]
 8001bb2:	42a3      	cmp	r3, r4
 8001bb4:	db01      	blt.n	8001bba <__sfputc_r+0x16>
 8001bb6:	290a      	cmp	r1, #10
 8001bb8:	d102      	bne.n	8001bc0 <__sfputc_r+0x1c>
 8001bba:	bc10      	pop	{r4}
 8001bbc:	f000 bb6a 	b.w	8002294 <__swbuf_r>
 8001bc0:	6813      	ldr	r3, [r2, #0]
 8001bc2:	1c58      	adds	r0, r3, #1
 8001bc4:	6010      	str	r0, [r2, #0]
 8001bc6:	7019      	strb	r1, [r3, #0]
 8001bc8:	4608      	mov	r0, r1
 8001bca:	bc10      	pop	{r4}
 8001bcc:	4770      	bx	lr

08001bce <__sfputs_r>:
 8001bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bd0:	4606      	mov	r6, r0
 8001bd2:	460f      	mov	r7, r1
 8001bd4:	4614      	mov	r4, r2
 8001bd6:	18d5      	adds	r5, r2, r3
 8001bd8:	42ac      	cmp	r4, r5
 8001bda:	d101      	bne.n	8001be0 <__sfputs_r+0x12>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	e007      	b.n	8001bf0 <__sfputs_r+0x22>
 8001be0:	463a      	mov	r2, r7
 8001be2:	4630      	mov	r0, r6
 8001be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001be8:	f7ff ffdc 	bl	8001ba4 <__sfputc_r>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d1f3      	bne.n	8001bd8 <__sfputs_r+0xa>
 8001bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001bf4 <_vfiprintf_r>:
 8001bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf8:	460d      	mov	r5, r1
 8001bfa:	4614      	mov	r4, r2
 8001bfc:	4698      	mov	r8, r3
 8001bfe:	4606      	mov	r6, r0
 8001c00:	b09d      	sub	sp, #116	@ 0x74
 8001c02:	b118      	cbz	r0, 8001c0c <_vfiprintf_r+0x18>
 8001c04:	6a03      	ldr	r3, [r0, #32]
 8001c06:	b90b      	cbnz	r3, 8001c0c <_vfiprintf_r+0x18>
 8001c08:	f7ff fdce 	bl	80017a8 <__sinit>
 8001c0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c0e:	07d9      	lsls	r1, r3, #31
 8001c10:	d405      	bmi.n	8001c1e <_vfiprintf_r+0x2a>
 8001c12:	89ab      	ldrh	r3, [r5, #12]
 8001c14:	059a      	lsls	r2, r3, #22
 8001c16:	d402      	bmi.n	8001c1e <_vfiprintf_r+0x2a>
 8001c18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c1a:	f7ff feca 	bl	80019b2 <__retarget_lock_acquire_recursive>
 8001c1e:	89ab      	ldrh	r3, [r5, #12]
 8001c20:	071b      	lsls	r3, r3, #28
 8001c22:	d501      	bpl.n	8001c28 <_vfiprintf_r+0x34>
 8001c24:	692b      	ldr	r3, [r5, #16]
 8001c26:	b99b      	cbnz	r3, 8001c50 <_vfiprintf_r+0x5c>
 8001c28:	4629      	mov	r1, r5
 8001c2a:	4630      	mov	r0, r6
 8001c2c:	f000 fb70 	bl	8002310 <__swsetup_r>
 8001c30:	b170      	cbz	r0, 8001c50 <_vfiprintf_r+0x5c>
 8001c32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c34:	07dc      	lsls	r4, r3, #31
 8001c36:	d504      	bpl.n	8001c42 <_vfiprintf_r+0x4e>
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	b01d      	add	sp, #116	@ 0x74
 8001c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c42:	89ab      	ldrh	r3, [r5, #12]
 8001c44:	0598      	lsls	r0, r3, #22
 8001c46:	d4f7      	bmi.n	8001c38 <_vfiprintf_r+0x44>
 8001c48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c4a:	f7ff feb3 	bl	80019b4 <__retarget_lock_release_recursive>
 8001c4e:	e7f3      	b.n	8001c38 <_vfiprintf_r+0x44>
 8001c50:	2300      	movs	r3, #0
 8001c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c54:	2320      	movs	r3, #32
 8001c56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c5a:	2330      	movs	r3, #48	@ 0x30
 8001c5c:	f04f 0901 	mov.w	r9, #1
 8001c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c64:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8001e10 <_vfiprintf_r+0x21c>
 8001c68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	469a      	mov	sl, r3
 8001c70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c74:	b10a      	cbz	r2, 8001c7a <_vfiprintf_r+0x86>
 8001c76:	2a25      	cmp	r2, #37	@ 0x25
 8001c78:	d1f9      	bne.n	8001c6e <_vfiprintf_r+0x7a>
 8001c7a:	ebba 0b04 	subs.w	fp, sl, r4
 8001c7e:	d00b      	beq.n	8001c98 <_vfiprintf_r+0xa4>
 8001c80:	465b      	mov	r3, fp
 8001c82:	4622      	mov	r2, r4
 8001c84:	4629      	mov	r1, r5
 8001c86:	4630      	mov	r0, r6
 8001c88:	f7ff ffa1 	bl	8001bce <__sfputs_r>
 8001c8c:	3001      	adds	r0, #1
 8001c8e:	f000 80a7 	beq.w	8001de0 <_vfiprintf_r+0x1ec>
 8001c92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c94:	445a      	add	r2, fp
 8001c96:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c98:	f89a 3000 	ldrb.w	r3, [sl]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 809f 	beq.w	8001de0 <_vfiprintf_r+0x1ec>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001cac:	f10a 0a01 	add.w	sl, sl, #1
 8001cb0:	9304      	str	r3, [sp, #16]
 8001cb2:	9307      	str	r3, [sp, #28]
 8001cb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001cb8:	931a      	str	r3, [sp, #104]	@ 0x68
 8001cba:	4654      	mov	r4, sl
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001cc2:	4853      	ldr	r0, [pc, #332]	@ (8001e10 <_vfiprintf_r+0x21c>)
 8001cc4:	f000 fb8a 	bl	80023dc <memchr>
 8001cc8:	9a04      	ldr	r2, [sp, #16]
 8001cca:	b9d8      	cbnz	r0, 8001d04 <_vfiprintf_r+0x110>
 8001ccc:	06d1      	lsls	r1, r2, #27
 8001cce:	bf44      	itt	mi
 8001cd0:	2320      	movmi	r3, #32
 8001cd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cd6:	0713      	lsls	r3, r2, #28
 8001cd8:	bf44      	itt	mi
 8001cda:	232b      	movmi	r3, #43	@ 0x2b
 8001cdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ce0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ce6:	d015      	beq.n	8001d14 <_vfiprintf_r+0x120>
 8001ce8:	4654      	mov	r4, sl
 8001cea:	2000      	movs	r0, #0
 8001cec:	f04f 0c0a 	mov.w	ip, #10
 8001cf0:	9a07      	ldr	r2, [sp, #28]
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cf8:	3b30      	subs	r3, #48	@ 0x30
 8001cfa:	2b09      	cmp	r3, #9
 8001cfc:	d94b      	bls.n	8001d96 <_vfiprintf_r+0x1a2>
 8001cfe:	b1b0      	cbz	r0, 8001d2e <_vfiprintf_r+0x13a>
 8001d00:	9207      	str	r2, [sp, #28]
 8001d02:	e014      	b.n	8001d2e <_vfiprintf_r+0x13a>
 8001d04:	eba0 0308 	sub.w	r3, r0, r8
 8001d08:	fa09 f303 	lsl.w	r3, r9, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	46a2      	mov	sl, r4
 8001d10:	9304      	str	r3, [sp, #16]
 8001d12:	e7d2      	b.n	8001cba <_vfiprintf_r+0xc6>
 8001d14:	9b03      	ldr	r3, [sp, #12]
 8001d16:	1d19      	adds	r1, r3, #4
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	9103      	str	r1, [sp, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	bfbb      	ittet	lt
 8001d20:	425b      	neglt	r3, r3
 8001d22:	f042 0202 	orrlt.w	r2, r2, #2
 8001d26:	9307      	strge	r3, [sp, #28]
 8001d28:	9307      	strlt	r3, [sp, #28]
 8001d2a:	bfb8      	it	lt
 8001d2c:	9204      	strlt	r2, [sp, #16]
 8001d2e:	7823      	ldrb	r3, [r4, #0]
 8001d30:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d32:	d10a      	bne.n	8001d4a <_vfiprintf_r+0x156>
 8001d34:	7863      	ldrb	r3, [r4, #1]
 8001d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d38:	d132      	bne.n	8001da0 <_vfiprintf_r+0x1ac>
 8001d3a:	9b03      	ldr	r3, [sp, #12]
 8001d3c:	3402      	adds	r4, #2
 8001d3e:	1d1a      	adds	r2, r3, #4
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	9203      	str	r2, [sp, #12]
 8001d44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d48:	9305      	str	r3, [sp, #20]
 8001d4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8001e14 <_vfiprintf_r+0x220>
 8001d4e:	2203      	movs	r2, #3
 8001d50:	4650      	mov	r0, sl
 8001d52:	7821      	ldrb	r1, [r4, #0]
 8001d54:	f000 fb42 	bl	80023dc <memchr>
 8001d58:	b138      	cbz	r0, 8001d6a <_vfiprintf_r+0x176>
 8001d5a:	2240      	movs	r2, #64	@ 0x40
 8001d5c:	9b04      	ldr	r3, [sp, #16]
 8001d5e:	eba0 000a 	sub.w	r0, r0, sl
 8001d62:	4082      	lsls	r2, r0
 8001d64:	4313      	orrs	r3, r2
 8001d66:	3401      	adds	r4, #1
 8001d68:	9304      	str	r3, [sp, #16]
 8001d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d6e:	2206      	movs	r2, #6
 8001d70:	4829      	ldr	r0, [pc, #164]	@ (8001e18 <_vfiprintf_r+0x224>)
 8001d72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d76:	f000 fb31 	bl	80023dc <memchr>
 8001d7a:	2800      	cmp	r0, #0
 8001d7c:	d03f      	beq.n	8001dfe <_vfiprintf_r+0x20a>
 8001d7e:	4b27      	ldr	r3, [pc, #156]	@ (8001e1c <_vfiprintf_r+0x228>)
 8001d80:	bb1b      	cbnz	r3, 8001dca <_vfiprintf_r+0x1d6>
 8001d82:	9b03      	ldr	r3, [sp, #12]
 8001d84:	3307      	adds	r3, #7
 8001d86:	f023 0307 	bic.w	r3, r3, #7
 8001d8a:	3308      	adds	r3, #8
 8001d8c:	9303      	str	r3, [sp, #12]
 8001d8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d90:	443b      	add	r3, r7
 8001d92:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d94:	e76a      	b.n	8001c6c <_vfiprintf_r+0x78>
 8001d96:	460c      	mov	r4, r1
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d9e:	e7a8      	b.n	8001cf2 <_vfiprintf_r+0xfe>
 8001da0:	2300      	movs	r3, #0
 8001da2:	f04f 0c0a 	mov.w	ip, #10
 8001da6:	4619      	mov	r1, r3
 8001da8:	3401      	adds	r4, #1
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	4620      	mov	r0, r4
 8001dae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001db2:	3a30      	subs	r2, #48	@ 0x30
 8001db4:	2a09      	cmp	r2, #9
 8001db6:	d903      	bls.n	8001dc0 <_vfiprintf_r+0x1cc>
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0c6      	beq.n	8001d4a <_vfiprintf_r+0x156>
 8001dbc:	9105      	str	r1, [sp, #20]
 8001dbe:	e7c4      	b.n	8001d4a <_vfiprintf_r+0x156>
 8001dc0:	4604      	mov	r4, r0
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001dc8:	e7f0      	b.n	8001dac <_vfiprintf_r+0x1b8>
 8001dca:	ab03      	add	r3, sp, #12
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	462a      	mov	r2, r5
 8001dd0:	4630      	mov	r0, r6
 8001dd2:	4b13      	ldr	r3, [pc, #76]	@ (8001e20 <_vfiprintf_r+0x22c>)
 8001dd4:	a904      	add	r1, sp, #16
 8001dd6:	f3af 8000 	nop.w
 8001dda:	4607      	mov	r7, r0
 8001ddc:	1c78      	adds	r0, r7, #1
 8001dde:	d1d6      	bne.n	8001d8e <_vfiprintf_r+0x19a>
 8001de0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001de2:	07d9      	lsls	r1, r3, #31
 8001de4:	d405      	bmi.n	8001df2 <_vfiprintf_r+0x1fe>
 8001de6:	89ab      	ldrh	r3, [r5, #12]
 8001de8:	059a      	lsls	r2, r3, #22
 8001dea:	d402      	bmi.n	8001df2 <_vfiprintf_r+0x1fe>
 8001dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dee:	f7ff fde1 	bl	80019b4 <__retarget_lock_release_recursive>
 8001df2:	89ab      	ldrh	r3, [r5, #12]
 8001df4:	065b      	lsls	r3, r3, #25
 8001df6:	f53f af1f 	bmi.w	8001c38 <_vfiprintf_r+0x44>
 8001dfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001dfc:	e71e      	b.n	8001c3c <_vfiprintf_r+0x48>
 8001dfe:	ab03      	add	r3, sp, #12
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	462a      	mov	r2, r5
 8001e04:	4630      	mov	r0, r6
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <_vfiprintf_r+0x22c>)
 8001e08:	a904      	add	r1, sp, #16
 8001e0a:	f000 f87d 	bl	8001f08 <_printf_i>
 8001e0e:	e7e4      	b.n	8001dda <_vfiprintf_r+0x1e6>
 8001e10:	0800254a 	.word	0x0800254a
 8001e14:	08002550 	.word	0x08002550
 8001e18:	08002554 	.word	0x08002554
 8001e1c:	00000000 	.word	0x00000000
 8001e20:	08001bcf 	.word	0x08001bcf

08001e24 <_printf_common>:
 8001e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e28:	4616      	mov	r6, r2
 8001e2a:	4698      	mov	r8, r3
 8001e2c:	688a      	ldr	r2, [r1, #8]
 8001e2e:	690b      	ldr	r3, [r1, #16]
 8001e30:	4607      	mov	r7, r0
 8001e32:	4293      	cmp	r3, r2
 8001e34:	bfb8      	it	lt
 8001e36:	4613      	movlt	r3, r2
 8001e38:	6033      	str	r3, [r6, #0]
 8001e3a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e3e:	460c      	mov	r4, r1
 8001e40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e44:	b10a      	cbz	r2, 8001e4a <_printf_common+0x26>
 8001e46:	3301      	adds	r3, #1
 8001e48:	6033      	str	r3, [r6, #0]
 8001e4a:	6823      	ldr	r3, [r4, #0]
 8001e4c:	0699      	lsls	r1, r3, #26
 8001e4e:	bf42      	ittt	mi
 8001e50:	6833      	ldrmi	r3, [r6, #0]
 8001e52:	3302      	addmi	r3, #2
 8001e54:	6033      	strmi	r3, [r6, #0]
 8001e56:	6825      	ldr	r5, [r4, #0]
 8001e58:	f015 0506 	ands.w	r5, r5, #6
 8001e5c:	d106      	bne.n	8001e6c <_printf_common+0x48>
 8001e5e:	f104 0a19 	add.w	sl, r4, #25
 8001e62:	68e3      	ldr	r3, [r4, #12]
 8001e64:	6832      	ldr	r2, [r6, #0]
 8001e66:	1a9b      	subs	r3, r3, r2
 8001e68:	42ab      	cmp	r3, r5
 8001e6a:	dc2b      	bgt.n	8001ec4 <_printf_common+0xa0>
 8001e6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e70:	6822      	ldr	r2, [r4, #0]
 8001e72:	3b00      	subs	r3, #0
 8001e74:	bf18      	it	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	0692      	lsls	r2, r2, #26
 8001e7a:	d430      	bmi.n	8001ede <_printf_common+0xba>
 8001e7c:	4641      	mov	r1, r8
 8001e7e:	4638      	mov	r0, r7
 8001e80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e84:	47c8      	blx	r9
 8001e86:	3001      	adds	r0, #1
 8001e88:	d023      	beq.n	8001ed2 <_printf_common+0xae>
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	6922      	ldr	r2, [r4, #16]
 8001e8e:	f003 0306 	and.w	r3, r3, #6
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf14      	ite	ne
 8001e96:	2500      	movne	r5, #0
 8001e98:	6833      	ldreq	r3, [r6, #0]
 8001e9a:	f04f 0600 	mov.w	r6, #0
 8001e9e:	bf08      	it	eq
 8001ea0:	68e5      	ldreq	r5, [r4, #12]
 8001ea2:	f104 041a 	add.w	r4, r4, #26
 8001ea6:	bf08      	it	eq
 8001ea8:	1aed      	subeq	r5, r5, r3
 8001eaa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001eae:	bf08      	it	eq
 8001eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bfc4      	itt	gt
 8001eb8:	1a9b      	subgt	r3, r3, r2
 8001eba:	18ed      	addgt	r5, r5, r3
 8001ebc:	42b5      	cmp	r5, r6
 8001ebe:	d11a      	bne.n	8001ef6 <_printf_common+0xd2>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	e008      	b.n	8001ed6 <_printf_common+0xb2>
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	4652      	mov	r2, sl
 8001ec8:	4641      	mov	r1, r8
 8001eca:	4638      	mov	r0, r7
 8001ecc:	47c8      	blx	r9
 8001ece:	3001      	adds	r0, #1
 8001ed0:	d103      	bne.n	8001eda <_printf_common+0xb6>
 8001ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001eda:	3501      	adds	r5, #1
 8001edc:	e7c1      	b.n	8001e62 <_printf_common+0x3e>
 8001ede:	2030      	movs	r0, #48	@ 0x30
 8001ee0:	18e1      	adds	r1, r4, r3
 8001ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001eec:	4422      	add	r2, r4
 8001eee:	3302      	adds	r3, #2
 8001ef0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ef4:	e7c2      	b.n	8001e7c <_printf_common+0x58>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4622      	mov	r2, r4
 8001efa:	4641      	mov	r1, r8
 8001efc:	4638      	mov	r0, r7
 8001efe:	47c8      	blx	r9
 8001f00:	3001      	adds	r0, #1
 8001f02:	d0e6      	beq.n	8001ed2 <_printf_common+0xae>
 8001f04:	3601      	adds	r6, #1
 8001f06:	e7d9      	b.n	8001ebc <_printf_common+0x98>

08001f08 <_printf_i>:
 8001f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f0c:	7e0f      	ldrb	r7, [r1, #24]
 8001f0e:	4691      	mov	r9, r2
 8001f10:	2f78      	cmp	r7, #120	@ 0x78
 8001f12:	4680      	mov	r8, r0
 8001f14:	460c      	mov	r4, r1
 8001f16:	469a      	mov	sl, r3
 8001f18:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001f1e:	d807      	bhi.n	8001f30 <_printf_i+0x28>
 8001f20:	2f62      	cmp	r7, #98	@ 0x62
 8001f22:	d80a      	bhi.n	8001f3a <_printf_i+0x32>
 8001f24:	2f00      	cmp	r7, #0
 8001f26:	f000 80d1 	beq.w	80020cc <_printf_i+0x1c4>
 8001f2a:	2f58      	cmp	r7, #88	@ 0x58
 8001f2c:	f000 80b8 	beq.w	80020a0 <_printf_i+0x198>
 8001f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001f38:	e03a      	b.n	8001fb0 <_printf_i+0xa8>
 8001f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f3e:	2b15      	cmp	r3, #21
 8001f40:	d8f6      	bhi.n	8001f30 <_printf_i+0x28>
 8001f42:	a101      	add	r1, pc, #4	@ (adr r1, 8001f48 <_printf_i+0x40>)
 8001f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f48:	08001fa1 	.word	0x08001fa1
 8001f4c:	08001fb5 	.word	0x08001fb5
 8001f50:	08001f31 	.word	0x08001f31
 8001f54:	08001f31 	.word	0x08001f31
 8001f58:	08001f31 	.word	0x08001f31
 8001f5c:	08001f31 	.word	0x08001f31
 8001f60:	08001fb5 	.word	0x08001fb5
 8001f64:	08001f31 	.word	0x08001f31
 8001f68:	08001f31 	.word	0x08001f31
 8001f6c:	08001f31 	.word	0x08001f31
 8001f70:	08001f31 	.word	0x08001f31
 8001f74:	080020b3 	.word	0x080020b3
 8001f78:	08001fdf 	.word	0x08001fdf
 8001f7c:	0800206d 	.word	0x0800206d
 8001f80:	08001f31 	.word	0x08001f31
 8001f84:	08001f31 	.word	0x08001f31
 8001f88:	080020d5 	.word	0x080020d5
 8001f8c:	08001f31 	.word	0x08001f31
 8001f90:	08001fdf 	.word	0x08001fdf
 8001f94:	08001f31 	.word	0x08001f31
 8001f98:	08001f31 	.word	0x08001f31
 8001f9c:	08002075 	.word	0x08002075
 8001fa0:	6833      	ldr	r3, [r6, #0]
 8001fa2:	1d1a      	adds	r2, r3, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6032      	str	r2, [r6, #0]
 8001fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e09c      	b.n	80020ee <_printf_i+0x1e6>
 8001fb4:	6833      	ldr	r3, [r6, #0]
 8001fb6:	6820      	ldr	r0, [r4, #0]
 8001fb8:	1d19      	adds	r1, r3, #4
 8001fba:	6031      	str	r1, [r6, #0]
 8001fbc:	0606      	lsls	r6, r0, #24
 8001fbe:	d501      	bpl.n	8001fc4 <_printf_i+0xbc>
 8001fc0:	681d      	ldr	r5, [r3, #0]
 8001fc2:	e003      	b.n	8001fcc <_printf_i+0xc4>
 8001fc4:	0645      	lsls	r5, r0, #25
 8001fc6:	d5fb      	bpl.n	8001fc0 <_printf_i+0xb8>
 8001fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	da03      	bge.n	8001fd8 <_printf_i+0xd0>
 8001fd0:	232d      	movs	r3, #45	@ 0x2d
 8001fd2:	426d      	negs	r5, r5
 8001fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001fd8:	230a      	movs	r3, #10
 8001fda:	4858      	ldr	r0, [pc, #352]	@ (800213c <_printf_i+0x234>)
 8001fdc:	e011      	b.n	8002002 <_printf_i+0xfa>
 8001fde:	6821      	ldr	r1, [r4, #0]
 8001fe0:	6833      	ldr	r3, [r6, #0]
 8001fe2:	0608      	lsls	r0, r1, #24
 8001fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fe8:	d402      	bmi.n	8001ff0 <_printf_i+0xe8>
 8001fea:	0649      	lsls	r1, r1, #25
 8001fec:	bf48      	it	mi
 8001fee:	b2ad      	uxthmi	r5, r5
 8001ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001ff2:	6033      	str	r3, [r6, #0]
 8001ff4:	bf14      	ite	ne
 8001ff6:	230a      	movne	r3, #10
 8001ff8:	2308      	moveq	r3, #8
 8001ffa:	4850      	ldr	r0, [pc, #320]	@ (800213c <_printf_i+0x234>)
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002002:	6866      	ldr	r6, [r4, #4]
 8002004:	2e00      	cmp	r6, #0
 8002006:	60a6      	str	r6, [r4, #8]
 8002008:	db05      	blt.n	8002016 <_printf_i+0x10e>
 800200a:	6821      	ldr	r1, [r4, #0]
 800200c:	432e      	orrs	r6, r5
 800200e:	f021 0104 	bic.w	r1, r1, #4
 8002012:	6021      	str	r1, [r4, #0]
 8002014:	d04b      	beq.n	80020ae <_printf_i+0x1a6>
 8002016:	4616      	mov	r6, r2
 8002018:	fbb5 f1f3 	udiv	r1, r5, r3
 800201c:	fb03 5711 	mls	r7, r3, r1, r5
 8002020:	5dc7      	ldrb	r7, [r0, r7]
 8002022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002026:	462f      	mov	r7, r5
 8002028:	42bb      	cmp	r3, r7
 800202a:	460d      	mov	r5, r1
 800202c:	d9f4      	bls.n	8002018 <_printf_i+0x110>
 800202e:	2b08      	cmp	r3, #8
 8002030:	d10b      	bne.n	800204a <_printf_i+0x142>
 8002032:	6823      	ldr	r3, [r4, #0]
 8002034:	07df      	lsls	r7, r3, #31
 8002036:	d508      	bpl.n	800204a <_printf_i+0x142>
 8002038:	6923      	ldr	r3, [r4, #16]
 800203a:	6861      	ldr	r1, [r4, #4]
 800203c:	4299      	cmp	r1, r3
 800203e:	bfde      	ittt	le
 8002040:	2330      	movle	r3, #48	@ 0x30
 8002042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800204a:	1b92      	subs	r2, r2, r6
 800204c:	6122      	str	r2, [r4, #16]
 800204e:	464b      	mov	r3, r9
 8002050:	4621      	mov	r1, r4
 8002052:	4640      	mov	r0, r8
 8002054:	f8cd a000 	str.w	sl, [sp]
 8002058:	aa03      	add	r2, sp, #12
 800205a:	f7ff fee3 	bl	8001e24 <_printf_common>
 800205e:	3001      	adds	r0, #1
 8002060:	d14a      	bne.n	80020f8 <_printf_i+0x1f0>
 8002062:	f04f 30ff 	mov.w	r0, #4294967295
 8002066:	b004      	add	sp, #16
 8002068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	f043 0320 	orr.w	r3, r3, #32
 8002072:	6023      	str	r3, [r4, #0]
 8002074:	2778      	movs	r7, #120	@ 0x78
 8002076:	4832      	ldr	r0, [pc, #200]	@ (8002140 <_printf_i+0x238>)
 8002078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	6831      	ldr	r1, [r6, #0]
 8002080:	061f      	lsls	r7, r3, #24
 8002082:	f851 5b04 	ldr.w	r5, [r1], #4
 8002086:	d402      	bmi.n	800208e <_printf_i+0x186>
 8002088:	065f      	lsls	r7, r3, #25
 800208a:	bf48      	it	mi
 800208c:	b2ad      	uxthmi	r5, r5
 800208e:	6031      	str	r1, [r6, #0]
 8002090:	07d9      	lsls	r1, r3, #31
 8002092:	bf44      	itt	mi
 8002094:	f043 0320 	orrmi.w	r3, r3, #32
 8002098:	6023      	strmi	r3, [r4, #0]
 800209a:	b11d      	cbz	r5, 80020a4 <_printf_i+0x19c>
 800209c:	2310      	movs	r3, #16
 800209e:	e7ad      	b.n	8001ffc <_printf_i+0xf4>
 80020a0:	4826      	ldr	r0, [pc, #152]	@ (800213c <_printf_i+0x234>)
 80020a2:	e7e9      	b.n	8002078 <_printf_i+0x170>
 80020a4:	6823      	ldr	r3, [r4, #0]
 80020a6:	f023 0320 	bic.w	r3, r3, #32
 80020aa:	6023      	str	r3, [r4, #0]
 80020ac:	e7f6      	b.n	800209c <_printf_i+0x194>
 80020ae:	4616      	mov	r6, r2
 80020b0:	e7bd      	b.n	800202e <_printf_i+0x126>
 80020b2:	6833      	ldr	r3, [r6, #0]
 80020b4:	6825      	ldr	r5, [r4, #0]
 80020b6:	1d18      	adds	r0, r3, #4
 80020b8:	6961      	ldr	r1, [r4, #20]
 80020ba:	6030      	str	r0, [r6, #0]
 80020bc:	062e      	lsls	r6, r5, #24
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	d501      	bpl.n	80020c6 <_printf_i+0x1be>
 80020c2:	6019      	str	r1, [r3, #0]
 80020c4:	e002      	b.n	80020cc <_printf_i+0x1c4>
 80020c6:	0668      	lsls	r0, r5, #25
 80020c8:	d5fb      	bpl.n	80020c2 <_printf_i+0x1ba>
 80020ca:	8019      	strh	r1, [r3, #0]
 80020cc:	2300      	movs	r3, #0
 80020ce:	4616      	mov	r6, r2
 80020d0:	6123      	str	r3, [r4, #16]
 80020d2:	e7bc      	b.n	800204e <_printf_i+0x146>
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	2100      	movs	r1, #0
 80020d8:	1d1a      	adds	r2, r3, #4
 80020da:	6032      	str	r2, [r6, #0]
 80020dc:	681e      	ldr	r6, [r3, #0]
 80020de:	6862      	ldr	r2, [r4, #4]
 80020e0:	4630      	mov	r0, r6
 80020e2:	f000 f97b 	bl	80023dc <memchr>
 80020e6:	b108      	cbz	r0, 80020ec <_printf_i+0x1e4>
 80020e8:	1b80      	subs	r0, r0, r6
 80020ea:	6060      	str	r0, [r4, #4]
 80020ec:	6863      	ldr	r3, [r4, #4]
 80020ee:	6123      	str	r3, [r4, #16]
 80020f0:	2300      	movs	r3, #0
 80020f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020f6:	e7aa      	b.n	800204e <_printf_i+0x146>
 80020f8:	4632      	mov	r2, r6
 80020fa:	4649      	mov	r1, r9
 80020fc:	4640      	mov	r0, r8
 80020fe:	6923      	ldr	r3, [r4, #16]
 8002100:	47d0      	blx	sl
 8002102:	3001      	adds	r0, #1
 8002104:	d0ad      	beq.n	8002062 <_printf_i+0x15a>
 8002106:	6823      	ldr	r3, [r4, #0]
 8002108:	079b      	lsls	r3, r3, #30
 800210a:	d413      	bmi.n	8002134 <_printf_i+0x22c>
 800210c:	68e0      	ldr	r0, [r4, #12]
 800210e:	9b03      	ldr	r3, [sp, #12]
 8002110:	4298      	cmp	r0, r3
 8002112:	bfb8      	it	lt
 8002114:	4618      	movlt	r0, r3
 8002116:	e7a6      	b.n	8002066 <_printf_i+0x15e>
 8002118:	2301      	movs	r3, #1
 800211a:	4632      	mov	r2, r6
 800211c:	4649      	mov	r1, r9
 800211e:	4640      	mov	r0, r8
 8002120:	47d0      	blx	sl
 8002122:	3001      	adds	r0, #1
 8002124:	d09d      	beq.n	8002062 <_printf_i+0x15a>
 8002126:	3501      	adds	r5, #1
 8002128:	68e3      	ldr	r3, [r4, #12]
 800212a:	9903      	ldr	r1, [sp, #12]
 800212c:	1a5b      	subs	r3, r3, r1
 800212e:	42ab      	cmp	r3, r5
 8002130:	dcf2      	bgt.n	8002118 <_printf_i+0x210>
 8002132:	e7eb      	b.n	800210c <_printf_i+0x204>
 8002134:	2500      	movs	r5, #0
 8002136:	f104 0619 	add.w	r6, r4, #25
 800213a:	e7f5      	b.n	8002128 <_printf_i+0x220>
 800213c:	0800255b 	.word	0x0800255b
 8002140:	0800256c 	.word	0x0800256c

08002144 <__sflush_r>:
 8002144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800214a:	0716      	lsls	r6, r2, #28
 800214c:	4605      	mov	r5, r0
 800214e:	460c      	mov	r4, r1
 8002150:	d454      	bmi.n	80021fc <__sflush_r+0xb8>
 8002152:	684b      	ldr	r3, [r1, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	dc02      	bgt.n	800215e <__sflush_r+0x1a>
 8002158:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	dd48      	ble.n	80021f0 <__sflush_r+0xac>
 800215e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002160:	2e00      	cmp	r6, #0
 8002162:	d045      	beq.n	80021f0 <__sflush_r+0xac>
 8002164:	2300      	movs	r3, #0
 8002166:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800216a:	682f      	ldr	r7, [r5, #0]
 800216c:	6a21      	ldr	r1, [r4, #32]
 800216e:	602b      	str	r3, [r5, #0]
 8002170:	d030      	beq.n	80021d4 <__sflush_r+0x90>
 8002172:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002174:	89a3      	ldrh	r3, [r4, #12]
 8002176:	0759      	lsls	r1, r3, #29
 8002178:	d505      	bpl.n	8002186 <__sflush_r+0x42>
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	1ad2      	subs	r2, r2, r3
 800217e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002180:	b10b      	cbz	r3, 8002186 <__sflush_r+0x42>
 8002182:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002184:	1ad2      	subs	r2, r2, r3
 8002186:	2300      	movs	r3, #0
 8002188:	4628      	mov	r0, r5
 800218a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800218c:	6a21      	ldr	r1, [r4, #32]
 800218e:	47b0      	blx	r6
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	89a3      	ldrh	r3, [r4, #12]
 8002194:	d106      	bne.n	80021a4 <__sflush_r+0x60>
 8002196:	6829      	ldr	r1, [r5, #0]
 8002198:	291d      	cmp	r1, #29
 800219a:	d82b      	bhi.n	80021f4 <__sflush_r+0xb0>
 800219c:	4a28      	ldr	r2, [pc, #160]	@ (8002240 <__sflush_r+0xfc>)
 800219e:	40ca      	lsrs	r2, r1
 80021a0:	07d6      	lsls	r6, r2, #31
 80021a2:	d527      	bpl.n	80021f4 <__sflush_r+0xb0>
 80021a4:	2200      	movs	r2, #0
 80021a6:	6062      	str	r2, [r4, #4]
 80021a8:	6922      	ldr	r2, [r4, #16]
 80021aa:	04d9      	lsls	r1, r3, #19
 80021ac:	6022      	str	r2, [r4, #0]
 80021ae:	d504      	bpl.n	80021ba <__sflush_r+0x76>
 80021b0:	1c42      	adds	r2, r0, #1
 80021b2:	d101      	bne.n	80021b8 <__sflush_r+0x74>
 80021b4:	682b      	ldr	r3, [r5, #0]
 80021b6:	b903      	cbnz	r3, 80021ba <__sflush_r+0x76>
 80021b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80021ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021bc:	602f      	str	r7, [r5, #0]
 80021be:	b1b9      	cbz	r1, 80021f0 <__sflush_r+0xac>
 80021c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021c4:	4299      	cmp	r1, r3
 80021c6:	d002      	beq.n	80021ce <__sflush_r+0x8a>
 80021c8:	4628      	mov	r0, r5
 80021ca:	f7ff fbf5 	bl	80019b8 <_free_r>
 80021ce:	2300      	movs	r3, #0
 80021d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80021d2:	e00d      	b.n	80021f0 <__sflush_r+0xac>
 80021d4:	2301      	movs	r3, #1
 80021d6:	4628      	mov	r0, r5
 80021d8:	47b0      	blx	r6
 80021da:	4602      	mov	r2, r0
 80021dc:	1c50      	adds	r0, r2, #1
 80021de:	d1c9      	bne.n	8002174 <__sflush_r+0x30>
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0c6      	beq.n	8002174 <__sflush_r+0x30>
 80021e6:	2b1d      	cmp	r3, #29
 80021e8:	d001      	beq.n	80021ee <__sflush_r+0xaa>
 80021ea:	2b16      	cmp	r3, #22
 80021ec:	d11d      	bne.n	800222a <__sflush_r+0xe6>
 80021ee:	602f      	str	r7, [r5, #0]
 80021f0:	2000      	movs	r0, #0
 80021f2:	e021      	b.n	8002238 <__sflush_r+0xf4>
 80021f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	e01a      	b.n	8002232 <__sflush_r+0xee>
 80021fc:	690f      	ldr	r7, [r1, #16]
 80021fe:	2f00      	cmp	r7, #0
 8002200:	d0f6      	beq.n	80021f0 <__sflush_r+0xac>
 8002202:	0793      	lsls	r3, r2, #30
 8002204:	bf18      	it	ne
 8002206:	2300      	movne	r3, #0
 8002208:	680e      	ldr	r6, [r1, #0]
 800220a:	bf08      	it	eq
 800220c:	694b      	ldreq	r3, [r1, #20]
 800220e:	1bf6      	subs	r6, r6, r7
 8002210:	600f      	str	r7, [r1, #0]
 8002212:	608b      	str	r3, [r1, #8]
 8002214:	2e00      	cmp	r6, #0
 8002216:	ddeb      	ble.n	80021f0 <__sflush_r+0xac>
 8002218:	4633      	mov	r3, r6
 800221a:	463a      	mov	r2, r7
 800221c:	4628      	mov	r0, r5
 800221e:	6a21      	ldr	r1, [r4, #32]
 8002220:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002224:	47e0      	blx	ip
 8002226:	2800      	cmp	r0, #0
 8002228:	dc07      	bgt.n	800223a <__sflush_r+0xf6>
 800222a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800222e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002232:	f04f 30ff 	mov.w	r0, #4294967295
 8002236:	81a3      	strh	r3, [r4, #12]
 8002238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800223a:	4407      	add	r7, r0
 800223c:	1a36      	subs	r6, r6, r0
 800223e:	e7e9      	b.n	8002214 <__sflush_r+0xd0>
 8002240:	20400001 	.word	0x20400001

08002244 <_fflush_r>:
 8002244:	b538      	push	{r3, r4, r5, lr}
 8002246:	690b      	ldr	r3, [r1, #16]
 8002248:	4605      	mov	r5, r0
 800224a:	460c      	mov	r4, r1
 800224c:	b913      	cbnz	r3, 8002254 <_fflush_r+0x10>
 800224e:	2500      	movs	r5, #0
 8002250:	4628      	mov	r0, r5
 8002252:	bd38      	pop	{r3, r4, r5, pc}
 8002254:	b118      	cbz	r0, 800225e <_fflush_r+0x1a>
 8002256:	6a03      	ldr	r3, [r0, #32]
 8002258:	b90b      	cbnz	r3, 800225e <_fflush_r+0x1a>
 800225a:	f7ff faa5 	bl	80017a8 <__sinit>
 800225e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f3      	beq.n	800224e <_fflush_r+0xa>
 8002266:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002268:	07d0      	lsls	r0, r2, #31
 800226a:	d404      	bmi.n	8002276 <_fflush_r+0x32>
 800226c:	0599      	lsls	r1, r3, #22
 800226e:	d402      	bmi.n	8002276 <_fflush_r+0x32>
 8002270:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002272:	f7ff fb9e 	bl	80019b2 <__retarget_lock_acquire_recursive>
 8002276:	4628      	mov	r0, r5
 8002278:	4621      	mov	r1, r4
 800227a:	f7ff ff63 	bl	8002144 <__sflush_r>
 800227e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002280:	4605      	mov	r5, r0
 8002282:	07da      	lsls	r2, r3, #31
 8002284:	d4e4      	bmi.n	8002250 <_fflush_r+0xc>
 8002286:	89a3      	ldrh	r3, [r4, #12]
 8002288:	059b      	lsls	r3, r3, #22
 800228a:	d4e1      	bmi.n	8002250 <_fflush_r+0xc>
 800228c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800228e:	f7ff fb91 	bl	80019b4 <__retarget_lock_release_recursive>
 8002292:	e7dd      	b.n	8002250 <_fflush_r+0xc>

08002294 <__swbuf_r>:
 8002294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002296:	460e      	mov	r6, r1
 8002298:	4614      	mov	r4, r2
 800229a:	4605      	mov	r5, r0
 800229c:	b118      	cbz	r0, 80022a6 <__swbuf_r+0x12>
 800229e:	6a03      	ldr	r3, [r0, #32]
 80022a0:	b90b      	cbnz	r3, 80022a6 <__swbuf_r+0x12>
 80022a2:	f7ff fa81 	bl	80017a8 <__sinit>
 80022a6:	69a3      	ldr	r3, [r4, #24]
 80022a8:	60a3      	str	r3, [r4, #8]
 80022aa:	89a3      	ldrh	r3, [r4, #12]
 80022ac:	071a      	lsls	r2, r3, #28
 80022ae:	d501      	bpl.n	80022b4 <__swbuf_r+0x20>
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	b943      	cbnz	r3, 80022c6 <__swbuf_r+0x32>
 80022b4:	4621      	mov	r1, r4
 80022b6:	4628      	mov	r0, r5
 80022b8:	f000 f82a 	bl	8002310 <__swsetup_r>
 80022bc:	b118      	cbz	r0, 80022c6 <__swbuf_r+0x32>
 80022be:	f04f 37ff 	mov.w	r7, #4294967295
 80022c2:	4638      	mov	r0, r7
 80022c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022c6:	6823      	ldr	r3, [r4, #0]
 80022c8:	6922      	ldr	r2, [r4, #16]
 80022ca:	b2f6      	uxtb	r6, r6
 80022cc:	1a98      	subs	r0, r3, r2
 80022ce:	6963      	ldr	r3, [r4, #20]
 80022d0:	4637      	mov	r7, r6
 80022d2:	4283      	cmp	r3, r0
 80022d4:	dc05      	bgt.n	80022e2 <__swbuf_r+0x4e>
 80022d6:	4621      	mov	r1, r4
 80022d8:	4628      	mov	r0, r5
 80022da:	f7ff ffb3 	bl	8002244 <_fflush_r>
 80022de:	2800      	cmp	r0, #0
 80022e0:	d1ed      	bne.n	80022be <__swbuf_r+0x2a>
 80022e2:	68a3      	ldr	r3, [r4, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60a3      	str	r3, [r4, #8]
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	6022      	str	r2, [r4, #0]
 80022ee:	701e      	strb	r6, [r3, #0]
 80022f0:	6962      	ldr	r2, [r4, #20]
 80022f2:	1c43      	adds	r3, r0, #1
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d004      	beq.n	8002302 <__swbuf_r+0x6e>
 80022f8:	89a3      	ldrh	r3, [r4, #12]
 80022fa:	07db      	lsls	r3, r3, #31
 80022fc:	d5e1      	bpl.n	80022c2 <__swbuf_r+0x2e>
 80022fe:	2e0a      	cmp	r6, #10
 8002300:	d1df      	bne.n	80022c2 <__swbuf_r+0x2e>
 8002302:	4621      	mov	r1, r4
 8002304:	4628      	mov	r0, r5
 8002306:	f7ff ff9d 	bl	8002244 <_fflush_r>
 800230a:	2800      	cmp	r0, #0
 800230c:	d0d9      	beq.n	80022c2 <__swbuf_r+0x2e>
 800230e:	e7d6      	b.n	80022be <__swbuf_r+0x2a>

08002310 <__swsetup_r>:
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4b29      	ldr	r3, [pc, #164]	@ (80023b8 <__swsetup_r+0xa8>)
 8002314:	4605      	mov	r5, r0
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	460c      	mov	r4, r1
 800231a:	b118      	cbz	r0, 8002324 <__swsetup_r+0x14>
 800231c:	6a03      	ldr	r3, [r0, #32]
 800231e:	b90b      	cbnz	r3, 8002324 <__swsetup_r+0x14>
 8002320:	f7ff fa42 	bl	80017a8 <__sinit>
 8002324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002328:	0719      	lsls	r1, r3, #28
 800232a:	d422      	bmi.n	8002372 <__swsetup_r+0x62>
 800232c:	06da      	lsls	r2, r3, #27
 800232e:	d407      	bmi.n	8002340 <__swsetup_r+0x30>
 8002330:	2209      	movs	r2, #9
 8002332:	602a      	str	r2, [r5, #0]
 8002334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002338:	f04f 30ff 	mov.w	r0, #4294967295
 800233c:	81a3      	strh	r3, [r4, #12]
 800233e:	e033      	b.n	80023a8 <__swsetup_r+0x98>
 8002340:	0758      	lsls	r0, r3, #29
 8002342:	d512      	bpl.n	800236a <__swsetup_r+0x5a>
 8002344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002346:	b141      	cbz	r1, 800235a <__swsetup_r+0x4a>
 8002348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800234c:	4299      	cmp	r1, r3
 800234e:	d002      	beq.n	8002356 <__swsetup_r+0x46>
 8002350:	4628      	mov	r0, r5
 8002352:	f7ff fb31 	bl	80019b8 <_free_r>
 8002356:	2300      	movs	r3, #0
 8002358:	6363      	str	r3, [r4, #52]	@ 0x34
 800235a:	89a3      	ldrh	r3, [r4, #12]
 800235c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002360:	81a3      	strh	r3, [r4, #12]
 8002362:	2300      	movs	r3, #0
 8002364:	6063      	str	r3, [r4, #4]
 8002366:	6923      	ldr	r3, [r4, #16]
 8002368:	6023      	str	r3, [r4, #0]
 800236a:	89a3      	ldrh	r3, [r4, #12]
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	81a3      	strh	r3, [r4, #12]
 8002372:	6923      	ldr	r3, [r4, #16]
 8002374:	b94b      	cbnz	r3, 800238a <__swsetup_r+0x7a>
 8002376:	89a3      	ldrh	r3, [r4, #12]
 8002378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800237c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002380:	d003      	beq.n	800238a <__swsetup_r+0x7a>
 8002382:	4621      	mov	r1, r4
 8002384:	4628      	mov	r0, r5
 8002386:	f000 f85c 	bl	8002442 <__smakebuf_r>
 800238a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800238e:	f013 0201 	ands.w	r2, r3, #1
 8002392:	d00a      	beq.n	80023aa <__swsetup_r+0x9a>
 8002394:	2200      	movs	r2, #0
 8002396:	60a2      	str	r2, [r4, #8]
 8002398:	6962      	ldr	r2, [r4, #20]
 800239a:	4252      	negs	r2, r2
 800239c:	61a2      	str	r2, [r4, #24]
 800239e:	6922      	ldr	r2, [r4, #16]
 80023a0:	b942      	cbnz	r2, 80023b4 <__swsetup_r+0xa4>
 80023a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80023a6:	d1c5      	bne.n	8002334 <__swsetup_r+0x24>
 80023a8:	bd38      	pop	{r3, r4, r5, pc}
 80023aa:	0799      	lsls	r1, r3, #30
 80023ac:	bf58      	it	pl
 80023ae:	6962      	ldrpl	r2, [r4, #20]
 80023b0:	60a2      	str	r2, [r4, #8]
 80023b2:	e7f4      	b.n	800239e <__swsetup_r+0x8e>
 80023b4:	2000      	movs	r0, #0
 80023b6:	e7f7      	b.n	80023a8 <__swsetup_r+0x98>
 80023b8:	20000018 	.word	0x20000018

080023bc <_sbrk_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	2300      	movs	r3, #0
 80023c0:	4d05      	ldr	r5, [pc, #20]	@ (80023d8 <_sbrk_r+0x1c>)
 80023c2:	4604      	mov	r4, r0
 80023c4:	4608      	mov	r0, r1
 80023c6:	602b      	str	r3, [r5, #0]
 80023c8:	f7fe f8d4 	bl	8000574 <_sbrk>
 80023cc:	1c43      	adds	r3, r0, #1
 80023ce:	d102      	bne.n	80023d6 <_sbrk_r+0x1a>
 80023d0:	682b      	ldr	r3, [r5, #0]
 80023d2:	b103      	cbz	r3, 80023d6 <_sbrk_r+0x1a>
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	bd38      	pop	{r3, r4, r5, pc}
 80023d8:	20000210 	.word	0x20000210

080023dc <memchr>:
 80023dc:	4603      	mov	r3, r0
 80023de:	b510      	push	{r4, lr}
 80023e0:	b2c9      	uxtb	r1, r1
 80023e2:	4402      	add	r2, r0
 80023e4:	4293      	cmp	r3, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	d101      	bne.n	80023ee <memchr+0x12>
 80023ea:	2000      	movs	r0, #0
 80023ec:	e003      	b.n	80023f6 <memchr+0x1a>
 80023ee:	7804      	ldrb	r4, [r0, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	428c      	cmp	r4, r1
 80023f4:	d1f6      	bne.n	80023e4 <memchr+0x8>
 80023f6:	bd10      	pop	{r4, pc}

080023f8 <__swhatbuf_r>:
 80023f8:	b570      	push	{r4, r5, r6, lr}
 80023fa:	460c      	mov	r4, r1
 80023fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002400:	4615      	mov	r5, r2
 8002402:	2900      	cmp	r1, #0
 8002404:	461e      	mov	r6, r3
 8002406:	b096      	sub	sp, #88	@ 0x58
 8002408:	da0c      	bge.n	8002424 <__swhatbuf_r+0x2c>
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	2100      	movs	r1, #0
 800240e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002412:	bf14      	ite	ne
 8002414:	2340      	movne	r3, #64	@ 0x40
 8002416:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800241a:	2000      	movs	r0, #0
 800241c:	6031      	str	r1, [r6, #0]
 800241e:	602b      	str	r3, [r5, #0]
 8002420:	b016      	add	sp, #88	@ 0x58
 8002422:	bd70      	pop	{r4, r5, r6, pc}
 8002424:	466a      	mov	r2, sp
 8002426:	f000 f849 	bl	80024bc <_fstat_r>
 800242a:	2800      	cmp	r0, #0
 800242c:	dbed      	blt.n	800240a <__swhatbuf_r+0x12>
 800242e:	9901      	ldr	r1, [sp, #4]
 8002430:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002434:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002438:	4259      	negs	r1, r3
 800243a:	4159      	adcs	r1, r3
 800243c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002440:	e7eb      	b.n	800241a <__swhatbuf_r+0x22>

08002442 <__smakebuf_r>:
 8002442:	898b      	ldrh	r3, [r1, #12]
 8002444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002446:	079d      	lsls	r5, r3, #30
 8002448:	4606      	mov	r6, r0
 800244a:	460c      	mov	r4, r1
 800244c:	d507      	bpl.n	800245e <__smakebuf_r+0x1c>
 800244e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002452:	6023      	str	r3, [r4, #0]
 8002454:	6123      	str	r3, [r4, #16]
 8002456:	2301      	movs	r3, #1
 8002458:	6163      	str	r3, [r4, #20]
 800245a:	b003      	add	sp, #12
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245e:	466a      	mov	r2, sp
 8002460:	ab01      	add	r3, sp, #4
 8002462:	f7ff ffc9 	bl	80023f8 <__swhatbuf_r>
 8002466:	9f00      	ldr	r7, [sp, #0]
 8002468:	4605      	mov	r5, r0
 800246a:	4639      	mov	r1, r7
 800246c:	4630      	mov	r0, r6
 800246e:	f7ff fb0d 	bl	8001a8c <_malloc_r>
 8002472:	b948      	cbnz	r0, 8002488 <__smakebuf_r+0x46>
 8002474:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002478:	059a      	lsls	r2, r3, #22
 800247a:	d4ee      	bmi.n	800245a <__smakebuf_r+0x18>
 800247c:	f023 0303 	bic.w	r3, r3, #3
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	81a3      	strh	r3, [r4, #12]
 8002486:	e7e2      	b.n	800244e <__smakebuf_r+0xc>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800248e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	9b01      	ldr	r3, [sp, #4]
 8002496:	6020      	str	r0, [r4, #0]
 8002498:	b15b      	cbz	r3, 80024b2 <__smakebuf_r+0x70>
 800249a:	4630      	mov	r0, r6
 800249c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024a0:	f000 f81e 	bl	80024e0 <_isatty_r>
 80024a4:	b128      	cbz	r0, 80024b2 <__smakebuf_r+0x70>
 80024a6:	89a3      	ldrh	r3, [r4, #12]
 80024a8:	f023 0303 	bic.w	r3, r3, #3
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	81a3      	strh	r3, [r4, #12]
 80024b2:	89a3      	ldrh	r3, [r4, #12]
 80024b4:	431d      	orrs	r5, r3
 80024b6:	81a5      	strh	r5, [r4, #12]
 80024b8:	e7cf      	b.n	800245a <__smakebuf_r+0x18>
	...

080024bc <_fstat_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	2300      	movs	r3, #0
 80024c0:	4d06      	ldr	r5, [pc, #24]	@ (80024dc <_fstat_r+0x20>)
 80024c2:	4604      	mov	r4, r0
 80024c4:	4608      	mov	r0, r1
 80024c6:	4611      	mov	r1, r2
 80024c8:	602b      	str	r3, [r5, #0]
 80024ca:	f7fe f82d 	bl	8000528 <_fstat>
 80024ce:	1c43      	adds	r3, r0, #1
 80024d0:	d102      	bne.n	80024d8 <_fstat_r+0x1c>
 80024d2:	682b      	ldr	r3, [r5, #0]
 80024d4:	b103      	cbz	r3, 80024d8 <_fstat_r+0x1c>
 80024d6:	6023      	str	r3, [r4, #0]
 80024d8:	bd38      	pop	{r3, r4, r5, pc}
 80024da:	bf00      	nop
 80024dc:	20000210 	.word	0x20000210

080024e0 <_isatty_r>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	2300      	movs	r3, #0
 80024e4:	4d05      	ldr	r5, [pc, #20]	@ (80024fc <_isatty_r+0x1c>)
 80024e6:	4604      	mov	r4, r0
 80024e8:	4608      	mov	r0, r1
 80024ea:	602b      	str	r3, [r5, #0]
 80024ec:	f7fe f82b 	bl	8000546 <_isatty>
 80024f0:	1c43      	adds	r3, r0, #1
 80024f2:	d102      	bne.n	80024fa <_isatty_r+0x1a>
 80024f4:	682b      	ldr	r3, [r5, #0]
 80024f6:	b103      	cbz	r3, 80024fa <_isatty_r+0x1a>
 80024f8:	6023      	str	r3, [r4, #0]
 80024fa:	bd38      	pop	{r3, r4, r5, pc}
 80024fc:	20000210 	.word	0x20000210

08002500 <_init>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	bf00      	nop
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr

0800250c <_fini>:
 800250c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800250e:	bf00      	nop
 8002510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002512:	bc08      	pop	{r3}
 8002514:	469e      	mov	lr, r3
 8002516:	4770      	bx	lr
